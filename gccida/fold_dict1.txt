v68 = ( tree_node *)global_trees; 
( save_level)( thisblock->next == 0LL), 
timevar_push( TV_CFG_0); 
timevar_pop( TV_CFG_0); 
if ( ( sch_istable[*( ( unsigned __int8 *)pfile->buffer->cur - 1)] & 0x400) != 0 ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)y)] != MODE_COMPLEX_INT ) 
v24 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)y)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v21 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[vd->e[regno].mode] != MODE_COMPLEX_INT ) 
v17 = mode_class_0[vd->e[regno].mode] == MODE_COMPLEX_FLOAT; 
if ( !base_alias_check( x_addr, mem_addr, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), mem_mode) ) 
tree v50; // [rsp+48h] [rbp-1A8h] 
tree qual_type; // [rsp+D8h] [rbp-118h] 
tree type_1; // [rsp+E8h] [rbp-108h] 
tree val_1; // [rsp+F0h] [rbp-100h] 
tree type_0; // [rsp+108h] [rbp-E8h] 
tree val_0; // [rsp+110h] [rbp-E0h] 
return &arg0; 
*( _OWORD *)&u.i[1] = *( _OWORD *)( *( _QWORD *)data + 24LL); 
*( _OWORD *)&u.i[1] = *( _OWORD *)( *( _QWORD *)data + 24LL); 
*( _OWORD *)d1.r = *( _OWORD *)( v1 + 16); 
*( _OWORD *)x.r = *( _OWORD *)u.d.r; 
*( _OWORD *)xa.r = *( _OWORD *)u.d.r; 
*( _OWORD *)xb.r = *( _OWORD *)u.d.r; 
*( _OWORD *)y.r = *( _OWORD *)u.d.r; 
fatal_insn_not_found( insn, "insn-attrtab.c", 19810, "get_attr_pent_prefix"); 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
v3 = !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0; 
&& ( ( pre_redundant_insns->elms[*( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint) >> 6] >> ( *( ( _BYTE *)uid_cuid_1 + 4 * insn->fld[0].rtint) & 0x3F)) & 1) == 0 ) 
&& ( ( pre_redundant_insns->elms[*( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint) >> 6] >> ( *( ( _BYTE *)uid_cuid_1 + 4 * insn->fld[0].rtint) & 0x3F)) & 1) == 0 ) 
if ( ( sch_istable[( unsigned __int8)c] & 0x10) != 0 ) 
|| operator+=<char [3], QByteArray>( val, mem_base) ) 
fancy_abort( &off_88ECD0[4], 1599, "count_pseudo"); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[reg])] != MODE_COMPLEX_INT ) 
v10 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[reg])] == MODE_COMPLEX_FLOAT; 
fatal_insn_not_found( insn, "insn-attrtab.c", 15861, "get_attr_memory"); 
return memory_operand( recog_data_0.operand[0], VOIDmode) || memory_operand( recog_data_0.operand[1], VOIDmode); 
return memory_operand( recog_data_0.operand[0], VOIDmode) || memory_operand( recog_data_0.operand[1], VOIDmode); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) ) 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) ) 
&& symbolic_operand( recog_data_0.operand[1], SImode) ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) ) 
return memory_operand( recog_data_0.operand[1], VOIDmode) 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], SImode)) 
&& memory_operand( recog_data_0.operand[2], VOIDmode); 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) ) 
timevar_push( TV_INTEGRATION_0); 
timevar_pop( TV_INTEGRATION_0); 
timevar_pop( TV_INTEGRATION_0); 
timevar_push( TV_EXPAND_0); 
if ( fndecl->decl.name && *( _OWORD *)&fndecl->block.fragment_chain == *( &global_trees + 50) ) 
timevar_pop( TV_EXPAND_0); 
&& !ix86_hard_regno_mode_ok( dest->fld[0].rtint, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest)) 
&& !ix86_hard_regno_mode_ok( src->fld[0].rtint, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)src))) ) 
timevar_push( TV_DUMP_0); 
timevar_pop( TV_DUMP_0); 
immediate_operand( recog_data_0.operand[1], VOIDmode); 
&& ( v77 = 1, !immediate_operand( recog_data_0.operand[1], VOIDmode)) 
|| ( v59 = 1, !general_operand( recog_data_0.operand[0], QImode)) ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v11 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
probability = predictor_info_0[predictor].hitrate; 
if ( taken != TAKEN_0 ) 
fatal_insn( "VOIDmode on an output", insn, &off_88ECD0[4], 6651, "emit_output_reload_insns"); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)real_old->fld[0].rtwint), 
v5 = insn_data_0[tertiary_icode].genfun( real_old, reloadreg, third_reloadreg); 
v4 = insn_data_0[rl->secondary_out_icode].genfun( real_old, second_reloadreg, reloadreg); 
low = *( _OWORD *)&c->block.vars; 
recog_data_0.insn = 0LL; 
recog_data_0.n_operands = 0; 
recog_data_0.n_alternatives = 0; 
recog_data_0.n_dups = 0; 
recog_data_0.n_operands = noperands; 
fatal_insn_not_found( insn, "recog.c", 2139, "extract_insn"); 
recog_data_0.operand, 
recog_data_0.operand_loc, 
recog_data_0.constraints, 
recog_data_0.operand_mode); 
p = recog_data_0.constraints[0]; 
recog_data_0.n_alternatives = 1; 
recog_data_0.n_alternatives += *v1 == 44; 
fatal_insn_not_found( insn, "recog.c", 2148, "extract_insn"); 
noperands = insn_data_0[rtint].n_operands; 
depth = spelling_0 - spelling_base; 
spelling_0 = &spelling_base[depth]; 
spelling_0->kind = 1; 
spelling_0->u.s = string; 
++spelling_0; 
for ( du_ptr = ( def_use_0 *)def_use_chain->data.l[0]; ; du_ptr = ( def_use_0 *)def_use_chain->data.l[v0] ) 
for ( du_ptr = ( def_use_0 *)def_use_chain->data.l[0]; ; du_ptr = ( def_use_0 *)def_use_chain->data.l[v0] ) 
make_new_qty( regno, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
&& insn_data_0[icode].operand->predicate( x, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) 
&& insn_data_0[icode].operand->predicate( x, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)) 
&& insn_data_0[icode].operand[1].predicate( 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)); 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)); 
&& insn_data_0[icode].operand[2].predicate( 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)iterations), 
emit_cmp_and_jump_insns( extra, v8, v9, 0LL, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)extra), 0, label); 
handlers = optab_table[37]->handlers; 
handlers[mode_for_size( 0x20u, MODE_INT, 0)].libfunc = inited; 
if ( reg_pref_0 ) 
return reg_pref_0[regno].altclass; 
operands[4] = ix86_force_to_memory( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[2]), operands[2]); 
operands[4] = gen_rtx_fmt_e( FLOAT, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operands), operands[4]); 
( rtx_code)( unsigned __int16)*( _DWORD *)operands[3], 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[3]), 
ix86_free_from_memory( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[2])); 
p->prev = constructor_range_stack_0; 
p->stack = constructor_stack_0; 
if ( constructor_range_stack_0 ) 
constructor_range_stack_0->next = p; 
constructor_range_stack_0 = p; 
disabled_builtin_0 *v1; // rax 
disabled_builtin_0 *v1; // rax 
v1 = ( disabled_builtin_0 *)xmalloc( 0x10uLL); 
v1 = ( disabled_builtin_0 *)xmalloc( 0x10uLL); 
v1->name = name; 
v1->next = disabled_builtins; 
disabled_builtins = v1; 
return gen_rtx_fmt_e( ( rtx_code)( unsigned __int16)*( _DWORD *)tem, mode, tem->fld[0].rtx); 
( machine_mode)( unsigned __int8)BYTE2( **( _DWORD **)( x->fld[0].rtwint + 8)), 
|| ix86_hard_regno_mode_ok( inner_dest->fld[0].rtint, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)inner_dest))) 
mode0 = *( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8); 
if ( !insn_data_0[icode].operand[1].predicate( op0a, mode0) ) 
if ( !insn_data_0[icode].operand->predicate( targeta, ( unsigned __int8)BYTE2( *( _DWORD *)targeta)) 
temp = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)targeta)); 
pat = insn_data_0[icode].genfun( temp, op0a); 
pfilea->opts.user_label_prefix = &arg0; 
fatal_insn_not_found( insn, "insn-attrtab.c", 13072, "get_attr_imm_disp"); 
v3 = memory_displacement_operand( recog_data_0.operand[0], VOIDmode) 
&& immediate_operand( recog_data_0.operand[1], VOIDmode); 
&& ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode)) 
&& memory_displacement_operand( recog_data_0.operand[0], VOIDmode) 
&& immediate_operand( recog_data_0.operand[1], VOIDmode); 
&& memory_displacement_operand( recog_data_0.operand[0], VOIDmode) 
&& immediate_operand( recog_data_0.operand[1], VOIDmode); 
&& memory_displacement_operand( recog_data_0.operand[0], VOIDmode) 
&& immediate_operand( recog_data_0.operand[1], VOIDmode); 
v3 = q_regs_operand( recog_data_0.operand[0], QImode) 
&& memory_displacement_operand( recog_data_0.operand[0], VOIDmode) 
&& immediate_operand( recog_data_0.operand[1], VOIDmode); 
&& ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode)) 
&& memory_displacement_operand( recog_data_0.operand[0], VOIDmode) 
&& immediate_operand( recog_data_0.operand[1], VOIDmode); 
v5 = &arg0; 
v4 = &arg0; 
if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE && ( ( *( _DWORD *)&containing_scope[1] >> 14) & 1) == 0 ) 
expr->reaching_reg = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v2->fld[0].rtwint)); 
v0 = *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint) >> 6; 
pre_redundant_insns->elms[v0] |= 1LL << ( *( ( _BYTE *)uid_cuid_1 + 4 * insn->fld[0].rtint) & 0x3F); 
if ( !gen_aux_info_record_compiled_from_record++ ) 
recog_data_0.operand[1] = x2; 
recog_data_0.operand[1] = x3w; 
recog_data_0.operand[2] = x2f; 
recog_data_0.operand[1] = x3x; 
recog_data_0.operand[2] = x2h; 
|| !ix86_binary_operator_ok( XOR, SImode, recog_data_0.operand) 
recog_data_0.operand[1] = x4n; 
|| !ix86_unary_operator_ok( NEG, SImode, recog_data_0.operand) 
recog_data_0.operand[1] = x2b; 
recog_data_0.operand[1] = x2b; 
recog_data_0.operand[1] = x2b; 
recog_data_0.operand[1] = x2a; 
recog_data_0.operand[1] = x3g; 
*( _OWORD *)( ( char *)&x->block + 88) = *( _OWORD *)( ( char *)&oldglobal->block + 88); 
*( _OWORD *)( ( char *)&x->block + 88) = *( _OWORD *)( ( char *)&oldglobal->block + 88); 
v2 = safe_hash( subexp, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)subexp)); 
relt = lookup( subexp, v2 & 0x1F, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)subexp)); 
lhs_type = ( tree_node *)*( &global_trees + 27); 
rhs_type = ( tree_node *)*( &global_trees + 27); 
u = *( real_extract *)( *( _QWORD *)p + 16LL); 
u_0 = *( real_extract *)( *( ( _QWORD *)p + 1) + 16LL); 
real_value_truncate( &v5, *( ( machine_mode *)p + 7), u.d); 
diagnostic_for_decl( decl, msgid, ( va_list_0 *)ap, 1); 
|| ( *( ( _DWORD *)uid_cuid_0 + *( int *)( reg_n_info->data.l[a1] + 4)) > cse_basic_block_end 
|| *( ( _DWORD *)uid_cuid_0 + *( int *)reg_n_info->data.l[a1]) < cse_basic_block_start) 
&& *( ( _DWORD *)uid_cuid_0 + *( int *)( reg_n_info->data.l[a1] + 4)) > *( ( _DWORD *)uid_cuid_0 
&& *( ( _DWORD *)uid_cuid_0 + *( int *)( reg_n_info->data.l[a1] + 4)) > *( ( _DWORD *)uid_cuid_0 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[1] = x2a; 
|| !rtx_equal_p( x1d->fld[0].rtx, recog_data_0.operand[1]) 
|| !rtx_equal_p( *( rtx *)&x1d[1], recog_data_0.operand[0]) ) 
recog_data_0.operand[1] = x3; 
recog_data_0.operand[2] = x3a; 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 66 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[2] == 66 ) 
recog_data_0.operand[1] = x3b; 
recog_data_0.operand[2] = x3c; 
recog_data_0.operand[1] = x3d; 
recog_data_0.operand[2] = x3e; 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[1] = x3f; 
recog_data_0.operand[0] = x2k; 
recog_data_0.operand[1] = x3d; 
recog_data_0.operand[2] = x2u; 
recog_data_0.operand[3] = x2v; 
recog_data_0.operand[4] = x2w; 
return gen_split_944( recog_data_0.operand); 
recog_data_0.operand[0] = x2k; 
recog_data_0.operand[1] = x3e; 
recog_data_0.operand[2] = x2y; 
recog_data_0.operand[3] = x2z; 
recog_data_0.operand[4] = x2ba; 
return gen_split_945( recog_data_0.operand); 
recog_data_0.operand[0] = x2k; 
recog_data_0.operand[1] = x3b; 
recog_data_0.operand[2] = x2m; 
recog_data_0.operand[3] = x2n; 
fatal_insn_not_found( insn, "insn-attrtab.c", 9252, "pent_mul_unit_blockage_range"); 
if ( general_operand( exp, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg)) ) 
if ( hex_value[( unsigned __int8)c] == 99 ) 
return hex_value[( unsigned __int8)c]; 
if ( ( sch_istable[( unsigned __int8)constraint[j]] & 0x88) == 0 ) 
color = &arg0; 
fatal_insn_not_found( insn, "insn-attrtab.c", 4467, "k6_store_unit_ready_cost"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) && ix86_cpu == PROCESSOR_K6 
|| !memory_operand( recog_data_0.operand[1], VOIDmode) && ix86_cpu == PROCESSOR_K6 ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) && ix86_cpu == PROCESSOR_K6 ) 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) && ix86_cpu == PROCESSOR_K6 
|| !symbolic_operand( recog_data_0.operand[1], SImode) 
|| !symbolic_operand( recog_data_0.operand[1], SImode)) 
&& ( memory_operand( recog_data_0.operand[1], VOIDmode) && ix86_cpu == PROCESSOR_K6 
|| !memory_operand( recog_data_0.operand[1], VOIDmode) && ix86_cpu == PROCESSOR_K6) ) 
|| !symbolic_operand( recog_data_0.operand[1], DImode) 
|| !symbolic_operand( recog_data_0.operand[1], DImode)) 
&& ( memory_operand( recog_data_0.operand[1], VOIDmode) && ix86_cpu == PROCESSOR_K6 
|| !memory_operand( recog_data_0.operand[1], VOIDmode) && ix86_cpu == PROCESSOR_K6) ) 
if ( ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], DImode)) 
&& !pic_symbolic_operand( recog_data_0.operand[2], DImode) 
if ( ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], SImode)) 
&& !pic_symbolic_operand( recog_data_0.operand[2], SImode) 
if ( ( which_alternative || pic_symbolic_operand( recog_data_0.operand[2], SImode)) 
if ( stack_0 ) 
timevar_accumulate( &stack_0->timevar->elapsed, &start_time, &now); 
imode = int_mode_for_mode( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0)); 
if ( mode_class_0[tmode] == MODE_VECTOR_INT || mode_class_0[tmode] == MODE_VECTOR_FLOAT ) 
if ( mode_class_0[tmode] == MODE_VECTOR_INT || mode_class_0[tmode] == MODE_VECTOR_FLOAT ) 
v3 = &arg0; 
move_by_pieces_1( insn_data_0[icode].genfun, mode, &data); 
lang_hooks_0.finish( ); 
insn_mode = *( ( unsigned __int16 *)insn_data_0[1203].operand + 8); 
diagnostic_for_asm( insn, msgid, ( va_list_0 *)ap, 1); 
while ( constructor_stack_0->implicit ) 
if ( constructor_range_stack_0 ) 
p = constructor_stack_0; 
spelling_0 = &spelling_base[constructor_depth]; 
constructor_range_stack_0 = p->range_stack; 
spelling_0 = &spelling_base[constructor_depth]; 
constructor_stack_0 = p->next; 
if ( constructor_stack_0 ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 
qty_0[*( ( int *)reg_qty + regno)].death = -1; 
mark_life( regno, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 1); 
post_mark_life( regno, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 1, birth, 2 * this_insn_number); 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( sizetype_tab[0]->block.abstract_origin)) >> 1), 
if ( this_insn_1[2].fld[0].rtint != -1 ) 
for ( ic = 1; ic < insn_data_0[this_insn_1[2].fld[0].rtint].n_operands; ++ic ) 
for ( ic = 1; ic < insn_data_0[this_insn_1[2].fld[0].rtint].n_operands; ++ic ) 
if ( *insn_data_0[this_insn_1[2].fld[0].rtint].operand[ic].constraint == 61 
if ( *insn_data_0[this_insn_1[2].fld[0].rtint].operand[ic].constraint == 61 
|| *insn_data_0[this_insn_1[2].fld[0].rtint].operand[ic].constraint == 43 ) 
|| *insn_data_0[this_insn_1[2].fld[0].rtint].operand[ic].constraint == 43 ) 
for ( note = this_insn_1[3].fld[0].rtx; note; note = ( rtx)note[1] ) 
if ( mode_class_0[rld[output_reload].outmode] != MODE_COMPLEX_INT ) 
v23 = mode_class_0[rld[output_reload].outmode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)note->fld[0].rtwint)] != MODE_COMPLEX_INT ) 
v19 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)note->fld[0].rtwint)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[rld[ib].inmode] != MODE_COMPLEX_INT ) 
v29 = mode_class_0[rld[ib].inmode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[rld[output_reload].outmode] != MODE_COMPLEX_INT ) 
v26 = mode_class_0[rld[output_reload].outmode] == MODE_COMPLEX_FLOAT; 
fn = ( tree_node *)*( ( _QWORD *)&id->fns->name + id->fns->elements_used); 
if ( !lang_hooks_0.tree_inlining.auto_var_in_fn_p( decl, fn) ) 
if ( !t->decl.name && t->common.type && lang_hooks_0.tree_inlining.anon_aggr_type_p( t->common.type) ) 
( *direction)[13 * loop_ptr->depth + sub] = independent; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)operands[1])] == MODE_INT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)operands[2])] == MODE_INT ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)operands[1])] == MODE_INT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)operands[2])] == MODE_INT ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)operands[1])] == MODE_INT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)operands[2])] == MODE_INT ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)operands[1])] == MODE_INT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)operands[2])] == MODE_INT ) 
strcpy( output_387_binary_op_buf, ssep); 
strcat( output_387_binary_op_buf, "ss\t{%2, %0|%0, %2}"); 
strcat( output_387_binary_op_buf, "sd\t{%2, %0|%0, %2}"); 
strcpy( output_387_binary_op_buf, p); 
strcat( output_387_binary_op_buf, "p\t{%0, %2|%2, %0}"); 
strcat( output_387_binary_op_buf, "p\t{%2, %0|%0, %2}"); 
return output_387_binary_op_buf; 
strcat( output_387_binary_op_buf, "\t{%2, %0|%0, %2}"); 
return output_387_binary_op_buf; 
strcat( output_387_binary_op_buf, "r%z1\t%1"); 
strcat( output_387_binary_op_buf, "%z2\t%2"); 
costs_0 = (  struct costs *)xmalloc( 104LL * nregs); 
memset( costs_0, 0, 104LL * nregs); 
reg_pref_0 = reg_pref_buffer; 
p = &costs_0[i]; 
if ( dump && ( reg_pref_0[i].prefclass != best || reg_pref_0[i].altclass != alt) ) 
if ( dump && ( reg_pref_0[i].prefclass != best || reg_pref_0[i].altclass != alt) ) 
fprintf( dump, " pref %s\n", regclass_reg_class_names[best]); 
fprintf( dump, " pref %s, else %s\n", regclass_reg_class_names[best], regclass_reg_class_names[alt]); 
fprintf( dump, " pref %s, else %s\n", regclass_reg_class_names[best], regclass_reg_class_names[alt]); 
fprintf( dump, " pref %s or none\n", regclass_reg_class_names[best]); 
reg_pref_0[i].prefclass = best; 
reg_pref_0[i].altclass = alt; 
free( costs_0); 
fatal_insn_not_found( insn, "insn-attrtab.c", 7005, "pent_v_unit_ready_cost"); 
if ( QTextBlock::operator<( op0a, op1a) ) 
fatal_insn_not_found( insn, "insn-attrtab.c", 4153, "k6_fpu_unit_blockage_range"); 
if ( memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest), global_rtl[2]) ) 
( machine_mode)( unsigned __int8)BYTE2( **( _DWORD **)( *( _QWORD *)&xa[2] + 8LL * ib + 8)), 
hash += hash_expr_1( elt, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)elt), do_not_record_p); 
tree v10; // rax 
tree v28; // [rsp+78h] [rbp-28h] 
tree call_expr; // [rsp+80h] [rbp-20h] 
mode_alignment = get_mode_alignment( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)object)); 
htab_delete( hash_table_0); 
if ( ( sch_istable[( unsigned __int8)i] & 0x8C) != 0 ) 
else if ( ( sch_istable[( unsigned __int8)i] & 0x20) != 0 ) 
else if ( ( sch_istable[( unsigned __int8)i] & 2) != 0 ) 
if ( *( _OWORD *)&n->low->block.vars < *( _OWORD *)&min_ascii->block.vars 
if ( *( _OWORD *)&n->low->block.vars < *( _OWORD *)&min_ascii->block.vars 
|| *( _OWORD *)&max_ascii->block.vars < *( _OWORD *)&n->high->block.vars ) 
|| *( _OWORD *)&max_ascii->block.vars < *( _OWORD *)&n->high->block.vars ) 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x1a; 
recog_data_0.operand[1] = x1a; 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x2c; 
recog_data_0.operand[2] = x2d; 
&& ix86_binary_operator_ok( PLUS, HImode, recog_data_0.operand) 
|| !ix86_binary_operator_ok( PLUS, HImode, recog_data_0.operand) 
recog_data_0.operand[1] = x2e; 
*( _OWORD *)&val.start = 0uLL; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v21 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v17 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
*( _OWORD *)&retstr->start = *( _OWORD *)&val.start; 
*( _OWORD *)&retstr->start = *( _OWORD *)&val.start; 
base = gen_rtx_fmt_ee( PLUS, ( machine_mode)BYTE2( *( _DWORD *)base), base, *( rtx *)&offset[1]); 
base = gen_rtx_fmt_ee( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)base), base, offset->fld[0].rtx); 
base = gen_rtx_fmt_ee( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)base), base, offset); 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v47 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[modea] != MODE_COMPLEX_INT ) 
v43 = mode_class_0[modea] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[modeb] != MODE_COMPLEX_INT ) 
v39 = mode_class_0[modeb] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[modec] != MODE_COMPLEX_INT ) 
v35 = mode_class_0[modec] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[m] != MODE_COMPLEX_INT ) 
v31 = mode_class_0[m] == MODE_COMPLEX_FLOAT; 
if ( v30 == nregs && ix86_hard_regno_mode_ok( regno, ( machine_mode)m) ) 
v6 = gen_rtx_MEM( ( machine_mode)mode, v5); 
( rtx_code)( unsigned __int16)*( _DWORD *)operands[3], 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[3]), 
induction_1 *v; // [rsp+140h] [rbp-60h] 
induction_1 *v; // [rsp+140h] [rbp-60h] 
rtx temf; // [rsp+148h] [rbp-58h] 
rtx temg; // [rsp+148h] [rbp-58h] 
rtx temh; // [rsp+148h] [rbp-58h] 
rtx temi; // [rsp+148h] [rbp-58h] 
rtx temb; // [rsp+148h] [rbp-58h] 
rtx temc; // [rsp+148h] [rbp-58h] 
rtx temd; // [rsp+148h] [rbp-58h] 
rtx teme; // [rsp+148h] [rbp-58h] 
sprintf( xstrerror_buf, aUndocumentedEr, ( unsigned int)errnum); 
if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_VERBOSE ) 
arg0 = ( tree_node *)*( &global_trees + 16); 
element_size = ( tree_node *)*( &global_trees + 12); 
return force_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), x); 
return gen_rtx_fmt_ee( ( rtx_code)( unsigned __int16)*( _DWORD *)x, v1, op0, op1); 
in_bb_p = ( print_rtl_graph_with_bb::bb_state *)xmalloc( 4LL * max_uid); 
in_bb_p[i] = NOT_IN_BB_0; 
in_bb_p[i] = NOT_IN_BB_0; 
v3 = IN_MULTIPLE_BB_0; 
v3 = IN_MULTIPLE_BB_0; 
if ( in_bb_p[x->fld[0].rtint] == NOT_IN_BB_0 ) 
if ( in_bb_p[x->fld[0].rtint] == NOT_IN_BB_0 ) 
v3 = IN_ONE_BB_0; 
v3 = IN_ONE_BB_0; 
in_bb_p[x->fld[0].rtint] = v3; 
in_bb_p[x->fld[0].rtint] = v3; 
free( in_bb_p); 
if ( reg_classes_intersect_p( ( reg_class)i, GENERAL_REGS) ) 
if ( mode_class_0[m] != MODE_COMPLEX_INT ) 
v13 = mode_class_0[m] == MODE_COMPLEX_FLOAT; 
&& ix86_hard_regno_mode_ok( j, ( machine_mode)m) ) 
cost = ix86_register_move_cost( ( machine_mode)m, ( reg_class)i, ( reg_class)j); 
cost = ix86_register_move_cost( ( machine_mode)m, ( reg_class)i, ( reg_class)j); 
if ( reg_class_subset_p( ( reg_class)i, ( reg_class)j) ) 
if ( reg_class_subset_p( ( reg_class)j, ( reg_class)i) ) 
targeta = force_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)targeta), targeta); 
rtx_c = expand_expr( c, 0LL, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)targeta), EXPAND_NORMAL); 
endlink = ( tree_node *)*( &global_trees + 32); 
value_type = ( tree_node *)*( &global_trees + 28); 
if ( check_mode && !ix86_hard_regno_mode_ok( base_regno, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg)) ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[regno])] != MODE_COMPLEX_INT ) 
v10 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[regno])] == MODE_COMPLEX_FLOAT; 
if ( constructor_range_stack_0 || lasta ) 
if ( !reg_class_subset_p( ( reg_class)class0, ( reg_class)class1) 
if ( reg_class_subset_p( ( reg_class)class1, ( reg_class)class0) ) 
timevar_push( TV_SYMOUT_0); 
timevar_pop( TV_SYMOUT_0); 
fprintf( di_0->stream, "%*s", 15 - extra, &arg0); 
memset( b, 0, sizeof( basic_block_def)); 
( machine_mode)mode, 
( machine_mode)oldmode, 
do_tablejump( indexa, ( machine_mode)mode, v9, table_label, default_label); 
for ( i = strlen( asmspeca) - 1; i >= 0 && ( sch_istable[( unsigned __int8)asmspeca[i]] & 4) != 0; --i ) 
if ( !strcmp( asmspeca, decode_reg_name_table[ic].name) ) 
return decode_reg_name_table[ic].number; 
recog_data_0.operand[1] = x2; 
|| !rtx_equal_p( x1bd->fld[0].rtx, recog_data_0.operand[1]) 
|| !rtx_equal_p( *( rtx *)&x1bd[1], recog_data_0.operand[0]) 
recog_data_0.operand[1] = x3a; 
recog_data_0.operand[2] = x3b; 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 66 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[2] == 66 ) 
recog_data_0.operand[1] = x4x; 
recog_data_0.operand[2] = x4z; 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 66 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[2] == 66 ) 
recog_data_0.operand[1] = x4w; 
recog_data_0.operand[2] = x4y; 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 66 
fatal_insn_not_found( insn, "insn-attrtab.c", 3426, "athlon_ieu_unit_ready_cost"); 
|| !symbolic_operand( recog_data_0.operand[1], SImode) 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], SImode) 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
if ( ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0) 
|| q_regs_operand( recog_data_0.operand[0], QImode) 
|| !symbolic_operand( recog_data_0.operand[1], DImode) 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], DImode) 
|| ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], DImode)) 
if ( incdec_operand( recog_data_0.operand[2], DImode) && ix86_cpu == PROCESSOR_ATHLON 
|| !incdec_operand( recog_data_0.operand[2], DImode) && ix86_cpu == PROCESSOR_ATHLON ) 
|| ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], SImode)) 
|| ( which_alternative || pic_symbolic_operand( recog_data_0.operand[2], SImode)) && ix86_cpu == PROCESSOR_ATHLON 
if ( incdec_operand( recog_data_0.operand[2], SImode) && ix86_cpu == PROCESSOR_ATHLON 
|| !incdec_operand( recog_data_0.operand[2], SImode) && ix86_cpu == PROCESSOR_ATHLON ) 
if ( which_alternative != 2 && incdec_operand( recog_data_0.operand[2], HImode) && ix86_cpu == PROCESSOR_ATHLON 
|| which_alternative != 2 && !incdec_operand( recog_data_0.operand[2], HImode) && ix86_cpu == PROCESSOR_ATHLON ) 
if ( incdec_operand( recog_data_0.operand[2], HImode) && ix86_cpu == PROCESSOR_ATHLON 
tmpa = gen_rtx_fmt_ee( code, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)if_info->cond), cmp_a, cmp_b); 
v7 = gen_rtx_fmt_eee( IF_THEN_ELSE, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), tmpa, vtrue, vfalse); 
if ( !general_operand( cmp_a, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)cmp_a)) 
|| !general_operand( cmp_b, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)cmp_b)) ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
return gen_rtx_fmt_ee( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), x0, x1); 
fatal_insn_not_found( insn, "insn-attrtab.c", 5796, "k6_alu_unit_blockage_range"); 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( args[i].tree_value->common.type->block.abstract_origin)) >> 1), 
v2 = &arg0; 
diddle_return_value( ( void ( *)( rtx, void *))mark_reg_0, set); 
v2 = gen_lowpart_for_combine( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx), x); 
v3 = gen_lowpart_for_combine( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v5), y); 
induction_1 *v; // [rsp+40h] [rbp-20h] 
induction_1 *v; // [rsp+40h] [rbp-20h] 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
if ( v->same && ( ( *( ( _WORD *)v->same + 50) >> 2) & 1) != 0 ) 
if ( v->same && ( ( *( ( _WORD *)v->same + 50) >> 2) & 1) != 0 ) 
*( ( _WORD *)v + 50) = *( ( _WORD *)v + 50) & 0xFFFB | 4; 
*( ( _WORD *)v + 50) = *( ( _WORD *)v + 50) & 0xFFFB | 4; 
if ( ( ( *( ( _WORD *)v + 50) >> 2) & 1) == 0 ) 
if ( v->same ) 
v->new_reg = replace_rtx( v->new_reg, v->same->dest_reg, v->same->new_reg); 
v->new_reg = replace_rtx( v->new_reg, v->same->dest_reg, v->same->new_reg); 
v->new_reg = replace_rtx( v->new_reg, v->same->dest_reg, v->same->new_reg); 
v->new_reg = replace_rtx( v->new_reg, v->same->dest_reg, v->same->new_reg); 
if ( ( unsigned __int16)*( _DWORD *)v->new_reg == 61 && v->giv_type == DEST_REG && *( _DWORD *)v->dest_reg < 0 ) 
if ( ( unsigned __int16)*( _DWORD *)v->new_reg == 61 && v->giv_type == DEST_REG && *( _DWORD *)v->dest_reg < 0 ) 
if ( ( unsigned __int16)*( _DWORD *)v->new_reg == 61 && v->giv_type == DEST_REG && *( _DWORD *)v->dest_reg < 0 ) 
u = *( real_extract *)( *( _QWORD *)p + 16LL); 
df_uses_record( df_0, ( rtx *)note->fld, DF_REF_REG_USE, bb, insn, ( df_ref_flags)0); 
df_uses_record( df_0, ( rtx *)( note_0->fld[0].rtwint + 8), DF_REF_REG_USE, bb, insn, ( df_ref_flags)0); 
df_uses_record( df_0, ( rtx *)x->fld, DF_REF_REG_USE, bb, insn, ( df_ref_flags)0); 
df_uses_record( df_0, ( rtx *)xa->fld, DF_REF_REG_USE, bb, insn, ( df_ref_flags)0); 
df_uses_record( df_0, ( rtx *)&insn[2], DF_REF_REG_USE, bb, insn, ( df_ref_flags)0); 
fatal_insn_not_found( insn, "insn-attrtab.c", 9235, "pent_mul_unit_ready_cost"); 
if ( !which_alternative && mult_operator( recog_data_0.operand[3], SFmode) && ix86_cpu == PROCESSOR_PENTIUM ) 
if ( mult_operator( recog_data_0.operand[3], SFmode) && ix86_cpu == PROCESSOR_PENTIUM ) 
if ( mult_operator( recog_data_0.operand[3], XFmode) && ix86_cpu == PROCESSOR_PENTIUM ) 
if ( mult_operator( recog_data_0.operand[3], TFmode) && ix86_cpu == PROCESSOR_PENTIUM ) 
if ( which_alternative != 2 && mult_operator( recog_data_0.operand[3], SFmode) && ix86_cpu == PROCESSOR_PENTIUM ) 
if ( mult_operator( recog_data_0.operand[3], SFmode) && ix86_cpu == PROCESSOR_PENTIUM ) 
if ( mult_operator( recog_data_0.operand[3], DFmode) && ix86_cpu == PROCESSOR_PENTIUM ) 
if ( mult_operator( recog_data_0.operand[3], TFmode) && ix86_cpu == PROCESSOR_PENTIUM ) 
if ( mult_operator( recog_data_0.operand[3], XFmode) && ix86_cpu == PROCESSOR_PENTIUM ) 
&& mult_operator( recog_data_0.operand[3], DFmode) 
mergeable_constant_section( ( machine_mode)( unsigned __int8)exp->real_cst.real_cst.r[2], align, 0); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] != MODE_COMPLEX_INT ) 
v19 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[vd->e[j].mode] != MODE_COMPLEX_INT ) 
v15 = mode_class_0[vd->e[j].mode] == MODE_COMPLEX_FLOAT; 
decode_rtx_const( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), x->fld[0].rtx, &val0); 
decode_rtx_const( ( machine_mode)BYTE2( *( _DWORD *)xa), *( rtx *)&xa[1], &val1); 
set_diagnostic_context( &dc, msgid, ( va_list_0 *)ap, input_filename, lineno, v1 & 1); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rtl)] != MODE_FLOAT ) 
run->next = ( tokenrun_0 *)xmalloc( 0x20uLL); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rld[r].reg_rtx)] != MODE_COMPLEX_INT ) 
v61 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rld[r].reg_rtx)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rld[r].reg_rtx)] != MODE_COMPLEX_INT ) 
v55 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rld[r].reg_rtx)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rld[r].reg_rtx)] != MODE_COMPLEX_INT ) 
v48 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rld[r].reg_rtx)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rld[r].out)] != MODE_COMPLEX_INT ) 
v36 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rld[r].out)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[rld[r].mode] != MODE_COMPLEX_INT ) 
v40 = mode_class_0[rld[r].mode] == MODE_COMPLEX_FLOAT; 
if ( !expand_builtin_va_arg_gave_help ) 
expand_builtin_va_arg_gave_help = 1; 
mem = gen_rtx_MEM( ( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( type->block.abstract_origin)) >> 1), addr); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 
v4 = &arg0; 
lang_hooks_0.name, 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)target)] != MODE_COMPLEX_INT ) 
v21 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)target)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v17 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] != MODE_COMPLEX_INT ) 
v34 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest_0)] != MODE_COMPLEX_INT ) 
v28 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest_0)] == MODE_COMPLEX_FLOAT; 
if ( constructor_range_stack_0 ) 
while ( constructor_stack_0->implicit ) 
if ( !base_alias_check( x_addr, mem_addr, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), mem_modea) ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] != MODE_COMPLEX_INT ) 
v13 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] == MODE_COMPLEX_FLOAT; 
if ( operator+=<char [3], QByteArray>( pending_mem->fld[0].rtx, t) ) 
fatal_insn_not_found( insn, "insn-attrtab.c", 6971, "ppro_p0_unit_ready_cost"); 
|| !symbolic_operand( recog_data_0.operand[1], SImode) 
|| !symbolic_operand( recog_data_0.operand[1], DImode) 
if ( ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], DImode)) 
if ( ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], SImode)) 
if ( ( which_alternative || pic_symbolic_operand( recog_data_0.operand[2], SImode)) 
|| ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) 
if ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) 
if ( mult_operator( recog_data_0.operand[3], SFmode) && ix86_cpu == PROCESSOR_PENTIUMPRO ) 
else if ( mult_operator( recog_data_0.operand[3], SFmode) || ix86_cpu != PROCESSOR_PENTIUMPRO ) 
if ( !which_alternative && mult_operator( recog_data_0.operand[3], SFmode) && ix86_cpu == PROCESSOR_PENTIUMPRO ) 
else if ( which_alternative || mult_operator( recog_data_0.operand[3], SFmode) || ix86_cpu != PROCESSOR_PENTIUMPRO ) 
if ( mult_operator( recog_data_0.operand[3], XFmode) && ix86_cpu == PROCESSOR_PENTIUMPRO ) 
else if ( mult_operator( recog_data_0.operand[3], XFmode) || ix86_cpu != PROCESSOR_PENTIUMPRO ) 
if ( mult_operator( recog_data_0.operand[3], TFmode) && ix86_cpu == PROCESSOR_PENTIUMPRO ) 
else if ( mult_operator( recog_data_0.operand[3], TFmode) || ix86_cpu != PROCESSOR_PENTIUMPRO ) 
if ( mult_operator( recog_data_0.operand[3], SFmode) && ix86_cpu == PROCESSOR_PENTIUMPRO ) 
if ( which_alternative != 2 && mult_operator( recog_data_0.operand[3], SFmode) && ix86_cpu == PROCESSOR_PENTIUMPRO ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] != MODE_COMPLEX_INT ) 
v11 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] == MODE_COMPLEX_FLOAT; 
*( _OWORD *)&retstr->r[1] = *( _OWORD *)&r.r[1]; 
*( _OWORD *)&retstr->r[1] = *( _OWORD *)&r.r[1]; 
return ( const char *)&unk_87EC4B; 
restype = ( tree_node *)*( &global_trees + 30); 
con0 = ( tree_node *)low; 
con0 = *( tree_node **)( low + 32); 
if ( !cpp_trigraph_map[*( ( unsigned __int8 *)pfile->buffer->cur + 1)] ) 
cpp_trigraph_map[from_char]); 
v1 = &arg0; 
if ( val <= 0xFF && ( sch_istable[( unsigned __int8)val] & 0xAC) != 0 ) 
constructor_stack_0 = p; 
constructor_depth = spelling_0 - spelling_base; 
return ( alias_set_entry_0)sn->value; 
prefix = resolve_unique_section_prefixes[sec][( *( ( _DWORD *)&decla->decl + 12) >> 19) & 1]; 
for ( cur = pfile->buffer->cur; ( sch_istable[*cur] & 0x204) != 0; ++cur ) 
result = ( cpp_hashnode_0 *)ht_lookup( 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg->fld[0].rtwint), 
if ( mode_class_0[outer_mode] != MODE_COMPLEX_INT ) 
v34 = mode_class_0[outer_mode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rega)] != MODE_COMPLEX_INT ) 
v38 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rega)] == MODE_COMPLEX_FLOAT; 
char_mode = *( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8); 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)) ) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)) ) 
if ( !insn_data_0[icode].operand[2].predicate( 
genfun = insn_data_0[icode].genfun; 
return convert_to_mode( ( machine_mode)value_mode, result, 0); 
return ( cpp_token_0 *)&cur[24 * count]; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v18 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v22 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
*( _OWORD *)d.r = *( _OWORD *)&exp->block.vars; 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( exp->common.type->block.abstract_origin)) >> 1)); 
pp = &costs_0[x->fld[0].rtuint]; 
if ( ( sch_istable[*( unsigned __int8 *)c] & 4) != 0 && !c[1] ) 
undo->next = undobuf_0.frees; 
undobuf_0.frees = undo; 
undobuf_0.undos = 0LL; 
fatal_insn_not_found( insn, "insn-attrtab.c", 13438, "get_attr_i387"); 
|| mult_operator( recog_data_0.operand[3], SFmode) 
|| which_alternative != 2 && mult_operator( recog_data_0.operand[3], SFmode) 
|| mult_operator( recog_data_0.operand[3], DFmode) 
|| which_alternative != 2 && mult_operator( recog_data_0.operand[3], DFmode) 
|| mult_operator( recog_data_0.operand[3], XFmode) 
|| mult_operator( recog_data_0.operand[3], TFmode) 
v7 = reverse_condition_maybe_unordered( ( rtx_code)( unsigned __int16)*( _DWORD *)new_op0); 
v7 = reverse_condition( ( rtx_code)( unsigned __int16)*( _DWORD *)new_op0); 
fprintf( fa, "%s, ", reg_class_names_0[rld[r].class]); 
fprintf( fa, "%ssecondary_in_icode = %s", "\n\t", insn_data_0[rld[r].secondary_in_icode].name); 
fprintf( fa, "%ssecondary_out_icode = %s", prefixa, insn_data_0[rld[r].secondary_out_icode].name); 
&& if_stack_0[if_stack_pointer - 1].compstmt_count == if_stack_0[if_stack_pointer - 2].compstmt_count ) 
&& if_stack_0[if_stack_pointer - 1].compstmt_count == if_stack_0[if_stack_pointer - 2].compstmt_count ) 
if_stack_0[if_stack_pointer - 2].needs_warning = 1; 
if_stack_0[if_stack_pointer - 1].needs_warning = 0; 
--if_stack_0[if_stack_pointer - 1].compstmt_count; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)var), 
nparts = ix86_split_to_parts( operandsa[1], part[1], ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operandsa)); 
ix86_split_to_parts( *operandsa, part[0], ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operandsa)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)part[1][1]), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)part[1][0]), 
*( ( _OWORD *)operandsa + 1) = *( _OWORD *)&part[0][0]; 
*( ( _OWORD *)operandsa + 1) = *( _OWORD *)&part[0][0]; 
*( _OWORD *)( operandsa + 5) = *( _OWORD *)&part[1][0]; 
*( _OWORD *)( operandsa + 5) = *( _OWORD *)&part[1][0]; 
compiler_params = ( param_info_0 *)xrealloc( compiler_params, 24 * ( n + num_compiler_params)); 
pfile->opts.in_fname = &arg0; 
pfile->opts.out_fname = &arg0; 
pfile->opts.user_label_prefix = &arg0; 
if ( *( _OWORD *)&n->low->block.vars < *( _OWORD *)&minval->block.vars ) 
recog_data_0.operand[1] = x4a; 
recog_data_0.operand[2] = x3e; 
|| !ix86_binary_operator_ok( PLUS, SImode, recog_data_0.operand) ) 
recog_data_0.operand[1] = x3c; 
recog_data_0.operand[2] = x3d; 
|| !ix86_binary_operator_ok( PLUS, SImode, recog_data_0.operand) ) 
recog_data_0.operand[1] = x3f; 
recog_data_0.operand[2] = x4c; 
|| !ix86_binary_operator_ok( MINUS, SImode, recog_data_0.operand) ) 
recog_data_0.operand[2] = x3g; 
if ( general_operand( xa, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa)) ) 
if ( !want_to_gcse_p_test_insn ) 
want_to_gcse_p_test_insn = make_insn_raw( v2); 
*( _QWORD *)&want_to_gcse_p_test_insn[1] = 0LL; 
want_to_gcse_p_test_insn[1].fld[0].rtwint = 0LL; 
ggc_add_rtx_root( &want_to_gcse_p_test_insn, 1); 
**( _DWORD **)( *( _QWORD *)&want_to_gcse_p_test_insn[2] + 8LL) = ( ( unsigned __int8)BYTE2( *( _DWORD *)xa) << 16) | **( _DWORD **)( *( _QWORD *)&want_to_gcse_p_test_insn[2] + 8LL) & 0xFF00FFFF; 
**( _DWORD **)( *( _QWORD *)&want_to_gcse_p_test_insn[2] + 8LL) = ( ( unsigned __int8)BYTE2( *( _DWORD *)xa) << 16) | **( _DWORD **)( *( _QWORD *)&want_to_gcse_p_test_insn[2] + 8LL) & 0xFF00FFFF; 
*( _QWORD *)( *( _QWORD *)&want_to_gcse_p_test_insn[2] + 16LL) = xa; 
icode = recog( *( rtx *)&want_to_gcse_p_test_insn[2], want_to_gcse_p_test_insn, &num_clobbers); 
icode = recog( *( rtx *)&want_to_gcse_p_test_insn[2], want_to_gcse_p_test_insn, &num_clobbers); 
if ( code1 || mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)exp->fld[0].rtwint)] != MODE_CC ) 
return reversed_comparison_code_parts( ( rtx_code)( unsigned __int16)*( _DWORD *)exp, x->fld[0].rtx, *( rtx *)&x[1], 0LL); 
&& memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)g2->mem), ret) ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint)) == x[1]; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest)); 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v11 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
induction_1 *v; // [rsp+60h] [rbp-90h] 
induction_1 *v; // [rsp+60h] [rbp-90h] 
v = ( induction_1 *)xmalloc( 0xA8uLL); 
v = ( induction_1 *)xmalloc( 0xA8uLL); 
v, 
v47 = convert_modes( mode, ( machine_mode)imode, v20, unsignedp); 
v46 = convert_modes( mode, ( machine_mode)imode, v22, unsignedp); 
v45 = convert_modes( mode, ( machine_mode)imode, v24, unsignedp); 
v27 = convert_modes( mode, ( machine_mode)imode, v26, unsignedp); 
v44 = convert_modes( mode, ( machine_mode)imode, v28, unsignedp); 
v31 = convert_modes( mode, ( machine_mode)imode, v30, unsignedp); 
v43 = convert_modes( mode, ( machine_mode)imode, v32, unsignedp); 
v37 = convert_modes( mode, ( machine_mode)imode, v36, unsignedp); 
v35 = convert_modes( mode, ( machine_mode)imode, v34, unsignedp); 
op2 = convert_modes( mode, ( machine_mode)imode, v4, unsignedp); 
y = convert_modes( mode, ( machine_mode)imode, v6, unsignedp); 
v51 = convert_modes( mode, ( machine_mode)imode, v8, unsignedp); 
if ( formal_type == ( tree_node *)*( &global_trees + 27) ) 
if ( formal_type != ( tree_node *)*( &global_trees + 27) ) 
if ( !memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)object), object->fld[0].rtx) ) 
|| ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_VECTOR_FLOAT) 
fprintf( file, ( const char *)&off_8A2198 + 4, "\t.zero\t", v7); 
table_0 = (  struct bucket **)permalloc( 296); 
memset( table_0, 0, 0x128uLL); 
print_node( stderr, &arg0, node, 0); 
table_0 = 0LL; 
offset += QCameraExposure::setAutoIsoSensitivity( target->complex.imag); 
if ( !append_random_chars_value ) 
append_random_chars_value = st.st_mtim.tv_sec ^ st.st_ino ^ st.st_dev; 
append_random_chars_value = 1LL; 
v = append_random_chars_value; 
*templatea = append_random_chars_letters[append_random_chars_value % 0x3E]; 
*templatea = append_random_chars_letters[append_random_chars_value % 0x3E]; 
templatea[1] = append_random_chars_letters[v % 0x3E]; 
templatea[2] = append_random_chars_letters[v % 0x3E]; 
templatea[3] = append_random_chars_letters[v % 0x3E]; 
templatea[4] = append_random_chars_letters[v % 0x3E]; 
templatea[5] = append_random_chars_letters[v % 0x3E]; 
return ( cpp_hashnode_0 *)ht_lookup( pfile->hash_table, str, len, HT_ALLOC); 
args[i].value = convert_modes( args[i].mode, ( machine_mode)mode, args[i].value, args[i].unsignedp); 
bitmap_print( file, bb_info->rd_in, &arg0, "\n"); 
bitmap_print( file, bb_info->rd_gen, &arg0, "\n"); 
bitmap_print( file, bb_info->rd_kill, &arg0, "\n"); 
bitmap_print( file, bb_info->rd_out, &arg0, "\n"); 
bitmap_print( file, bb_info_0->ru_in, &arg0, "\n"); 
bitmap_print( file, bb_info_0->ru_gen, &arg0, "\n"); 
bitmap_print( file, bb_info_0->ru_kill, &arg0, "\n"); 
bitmap_print( file, bb_info_0->ru_out, &arg0, "\n"); 
bitmap_print( file, bb_info_1->lr_in, &arg0, "\n"); 
bitmap_print( file, bb_info_1->lr_use, &arg0, "\n"); 
bitmap_print( file, bb_info_1->lr_def, &arg0, "\n"); 
bitmap_print( file, bb_info_1->lr_out, &arg0, "\n"); 
expand_mult( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)aa), aa, ba, 0LL, 1); 
timevar_push( TV_CPP_0); 
timevar_pop( TV_CPP_0); 
if ( ( sch_istable[tok->val.c] & 0xAC) != 0 ) 
v4 = operand_sub*(short *)0xforce( op0, 0, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0)); 
v4 = operand_sub*(short *)0xforce( op0, 0, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0)); 
v5 = operand_sub*(short *)0xforce( op0, i, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0)); 
v5 = operand_sub*(short *)0xforce( op0, i, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0)); 
v6 = operand_sub*(short *)0xforce( op0, ia, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0)); 
v6 = operand_sub*(short *)0xforce( op0, ia, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0)); 
if ( v3 == reverse_condition( ( rtx_code)( unsigned __int16)*( _DWORD *)cond2) 
hash += hash_rtx( elt, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)elt), 0); 
e = cselib_lookup( x, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), create); 
tem_0 = force_const_mem( ( machine_mode)BYTE2( *( _DWORD *)xa), *( rtx *)&xa[1]); 
xa = gen_rtx_fmt_ee( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), xa->fld[0].rtx, tem_0); 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)set->fld[0].rtwint)] == MODE_INT 
&& ( ( mode_class_0[mode] == MODE_CC) == ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)set->fld[0].rtwint)] == MODE_CC) 
&& ( ( mode_class_0[mode] == MODE_CC) == ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)set->fld[0].rtwint)] == MODE_CC) 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)set->fld[0].rtwint)] != MODE_INT 
|| ( mode_class_0[mode] == MODE_CC) != ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)set->fld[0].rtwint)] == MODE_CC) 
|| ( mode_class_0[mode] == MODE_CC) != ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)set->fld[0].rtwint)] == MODE_CC) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op0)] == MODE_CC ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v11 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
|| can_float_p( fmode, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)froma), 0) == CODE_FOR_nothing); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)froma), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)toa), 
v7 = gen_rtx_fmt_e( FLOAT, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)toa), froma); 
rtx note; // [rsp+1C0h] [rbp-A0h] 
result = ( _cpp_buff_0 *)&v1[lenb]; 
return ( _cpp_buff_0 *)&v1[lenb]; 
return gen_rtx_fmt_ee( ( rtx_code)( unsigned __int16)*( _DWORD *)x, v1, op0, op1); 
lang_hooks_0.init_options( ); 
set_target_switch( &arg0); 
lang_processed = lang_hooks_0.decode_option( argc - ia, &argv[ia]); 
lang_hooks_0.post_options( ); 
tmpcount = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)variable)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)variable), 
allocno_0[( __int64)ialloc].hard_reg_conflicts |= hard_regs_live; 
allocno_0[( __int64)j].hard_reg_conflicts |= 1LL << regno; 
for ( i = 0; i < recog_data_0.n_operands; ++i ) 
if ( ( unsigned __int16)**( _DWORD **)recog_data_0.operand_loc[i] == 63 ) 
recog_data_0.operand[i] = alter_subreg( recog_data_0.operand_loc[i]); 
recog_data_0.operand[i] = alter_subreg( recog_data_0.operand_loc[i]); 
else if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 75 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 78 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 66 ) 
recog_data_0.operand[i] = walk_alter_subreg( recog_data_0.operand_loc[i]); 
recog_data_0.operand[i] = walk_alter_subreg( recog_data_0.operand_loc[i]); 
for ( ia = 0; ia < recog_data_0.n_dups; ++ia ) 
if ( ( unsigned __int16)**( _DWORD **)recog_data_0.dup_loc[ia] == 63 ) 
*recog_data_0.dup_loc[ia] = alter_subreg( recog_data_0.dup_loc[ia]); 
*recog_data_0.dup_loc[ia] = alter_subreg( recog_data_0.dup_loc[ia]); 
else if ( ( unsigned __int16)**( _DWORD **)recog_data_0.dup_loc[ia] == 75 
|| ( unsigned __int16)**( _DWORD **)recog_data_0.dup_loc[ia] == 78 
|| ( unsigned __int16)**( _DWORD **)recog_data_0.dup_loc[ia] == 66 ) 
*recog_data_0.dup_loc[ia] = walk_alter_subreg( recog_data_0.dup_loc[ia]); 
*recog_data_0.dup_loc[ia] = walk_alter_subreg( recog_data_0.dup_loc[ia]); 
mark_reg_live_nc( aa, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[i])); 
pri1 = ( int)( ( double)( allocno_0[( __int64)v1].freq * floor_log2_wide( allocno_0[( __int64)*( int *)v1p].n_refs)) 
pri1 = ( int)( ( double)( allocno_0[( __int64)v1].freq * floor_log2_wide( allocno_0[( __int64)*( int *)v1p].n_refs)) 
/ ( double)allocno_0[( __int64)v1].live_length 
* ( double)allocno_0[( __int64)v1].size); 
pri2 = ( int)( ( double)( allocno_0[( __int64)v2].freq * floor_log2_wide( allocno_0[( __int64)v2].n_refs)) 
pri2 = ( int)( ( double)( allocno_0[( __int64)v2].freq * floor_log2_wide( allocno_0[( __int64)v2].n_refs)) 
/ ( double)allocno_0[( __int64)v2].live_length 
* ( double)allocno_0[( __int64)v2].size); 
recog_data_0.insn = 0LL; 
fprintf( asm_out_file, ( const char *)&off_8A2198 + 4, "\t.zero\t", ( unsigned int)size); 
name = ( unsigned __int8 *)&arg0; 
space = ( unsigned __int8 *)&arg0; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)link->fld[0].rtwint)] != MODE_COMPLEX_INT ) 
v11 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)link->fld[0].rtwint)] == MODE_COMPLEX_FLOAT; 
if ( t == ( tree_node *)global_trees ) 
rtx y; // [rsp+40h] [rbp-300h] 
rtx v50; // [rsp+48h] [rbp-2F8h] 
rtx src; // [rsp+58h] [rbp-2E8h] 
v4 = &arg0; 
predictor_info_0[predictor].name, 
tmode = *( ( unsigned __int16 *)insn_data_0[icode].operand + 8); 
HIDWORD( mode1) = *( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8); 
LODWORD( mode1) = *( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8); 
if ( mode_class_0[*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)] == MODE_VECTOR_INT 
if ( mode_class_0[*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)] == MODE_VECTOR_INT 
|| mode_class_0[*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)] == MODE_VECTOR_FLOAT ) 
|| mode_class_0[*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)] == MODE_VECTOR_FLOAT ) 
if ( mode_class_0[( int)mode1] == MODE_VECTOR_INT || mode_class_0[( int)mode1] == MODE_VECTOR_FLOAT ) 
if ( mode_class_0[( int)mode1] == MODE_VECTOR_INT || mode_class_0[( int)mode1] == MODE_VECTOR_FLOAT ) 
op1 = safe_vector_operand( op1, ( machine_mode)mode1); 
|| !insn_data_0[icode].operand->predicate( target, tmode) ) 
if ( !insn_data_0[icode].operand[1].predicate( op0, ( machine_mode)HIDWORD( mode1)) ) 
if ( !insn_data_0[icode].operand[1].predicate( op0, ( machine_mode)HIDWORD( mode1)) ) 
if ( !insn_data_0[icode].operand[2].predicate( op1, ( machine_mode)mode1) ) 
if ( !insn_data_0[icode].operand[2].predicate( op1, ( machine_mode)mode1) ) 
v9 = gen_rtx_fmt_s( SYMBOL_REF, v7, off_88ECD0); 
induction_1 *biv; // [rsp+20h] [rbp-60h] 
induction_1 *biv; // [rsp+20h] [rbp-60h] 
for ( biv = bl_0->biv; biv; biv = biv->next_iv ) 
for ( biv = bl_0->biv; biv; biv = biv->next_iv ) 
for ( biv = bl_0->biv; biv; biv = biv->next_iv ) 
for ( biv = bl_0->biv; biv; biv = biv->next_iv ) 
if ( biv->insn == insn ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)tem), 
biv->add_val, 
i += subreg_regno_offset( i, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)last_reg), byte, mode); 
need_mode = byte ? smallest_mode_for_size( byte + mode_size[mode], mode_class_0[mode]) : mode; 
if ( mode_class_0[rld[r].mode] != MODE_COMPLEX_INT ) 
v43 = mode_class_0[rld[r].mode] == MODE_COMPLEX_FLOAT; 
fancy_abort( &off_88ECD0[4], 5670, "choose_reload_regs"); 
if ( mode_class_0[rld[r].mode] != MODE_COMPLEX_INT ) 
v34 = mode_class_0[rld[r].mode] == MODE_COMPLEX_FLOAT; 
if ( warningp && !count_error_warning_message ) 
count_error_warning_message = 1; 
if ( ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)if_infoa->x)] == MODE_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)if_infoa->x)] == MODE_COMPLEX_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)if_infoa->x)] == MODE_VECTOR_FLOAT) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)if_infoa->x), 
hash_table_0 = htab_create( 0x1FuLL, ( htab_hash)get_value_hash, ( htab_eq)entry_and_rtx_equal_p, 0LL); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v13 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
if ( !strict_memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)tem), tem->fld[0].rtx) ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)tem), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)tem), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)tem), 
&& !regno_clobbered_p( regno, this_insn_1, modea, 0) ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ada), 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)link->fld[0].rtwint)] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)link->fld[0].rtwint)] == MODE_COMPLEX_FLOAT; 
if ( reg_class_subset_p( rclass, qty_0[qtyno].min_class) ) 
qty_0[qtyno].min_class = rclass; 
if ( reg_class_subset_p( rclassa, qty_0[qtyno].alternate_class) ) 
qty_0[qtyno].alternate_class = rclassa; 
qty_0[qtyno].changes_mode = 1; 
set_value_regno( x->fld[0].rtuint, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), (  struct value_data *)data); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa)); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] == MODE_COMPLEX_FLOAT; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint)); 
fatal_insn_not_found( insn, "insn-attrtab.c", 46, "insn_variable_length_p"); 
fatal_insn_not_found( insn, "insn-attrtab.c", 8333, "pent_u_unit_blockage_range"); 
o = *( optab_0 *)arg; 
if ( in_section_0 != in_named || strcmp( name, in_named_name) ) 
in_section_0 = no_section; 
in_section_0 = in_named; 
return mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op)] == MODE_FLOAT; 
changes = ( change_t_0 *)xrealloc( changes, 32LL * changes_allocated); 
&& ( tem = gen_lowpart_common( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)in->fld[0].rtwint), out)) != 0LL ) 
tema = gen_lowpart_common( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)out->fld[0].rtwint), in); 
ina = gen_rtx_fmt_ee( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ina), op0, op1); 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[code].operand[2] + 8)) ) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[code].operand[2] + 8)) ) 
&& !insn_data_0[code].operand[2].predicate( 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)outa), 
loc = get_secondary_mem( ina, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)outa), opnum, type); 
outa = gen_rtx_REG( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)loc), outa->fld[0].rtint); 
ina = gen_rtx_REG( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)loc), ina->fld[0].rtint); 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v21 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)v->u.val_rtx)] != MODE_COMPLEX_INT ) 
v17 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)v->u.val_rtx)] == MODE_COMPLEX_FLOAT; 
rtx insn; // [rsp+28h] [rbp-18h] 
for ( insn = bb->head; ; insn = insn[1].fld[0].rtx ) 
for ( insn = bb->head; ; insn = insn[1].fld[0].rtx ) 
for ( insn = bb->head; ; insn = insn[1].fld[0].rtx ) 
if ( insn ) 
v3 = insn != bb->end[1].fld[0].rtx; 
if ( rtx_class[( unsigned __int16)*( _DWORD *)insn] == 105 ) 
for ( link = df_0->insns[insn->fld[0].rtuint].uses; link; link = link->next ) 
v4 = gen_rtx( ( rtx_code)( unsigned __int16)*( _DWORD *)operand3, V4SImode, operand1, operand2); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[i])] != MODE_COMPLEX_INT ) 
v32 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[i])] == MODE_COMPLEX_FLOAT; 
rtx temp; // [rsp+140h] [rbp-60h] 
rtx xa; // [rsp+190h] [rbp-10h] 
xa = x; 
if ( mode_class_0[mode] == mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] && have_insn_for( code, mode) ) 
if ( mode_class_0[mode] == mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] && have_insn_for( code, mode) ) 
return gen_lowpart_for_combine( mode, xa); 
xa = reg; 
replacemente->new = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)var)); 
temd = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint)); 
v13 = gen_lowpart( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)var), temd); 
tem1a = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)temc)); 
do_compare_rtx_and_jump( op0, op1, v6, unsignedp, ( machine_mode)mode, size, if_false_label, if_true_label); 
v2 = QCameraExposure::setAutoIsoSensitivity( ( tree)field); 
depth = spelling_0 - spelling_base; 
spelling_0 = &spelling_base[depth]; 
spelling_0->kind = 2; 
spelling_0->u.s = low; 
++spelling_0; 
rtx v19; // [rsp+58h] [rbp-2F8h] 
rtx v20; // [rsp+60h] [rbp-2F0h] 
rtx next; // [rsp+70h] [rbp-2E0h] 
rtx newa; // [rsp+78h] [rbp-2D8h] 
rtx src_note; // [rsp+B8h] [rbp-298h] 
rtx dst_0; // [rsp+C0h] [rbp-290h] 
rtx src_0; // [rsp+C8h] [rbp-288h] 
rtx p; // [rsp+D0h] [rbp-280h] 
rtx dst; // [rsp+108h] [rbp-248h] 
return in_section_0 == in_text; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest_reg), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
fatal_insn_not_found( insn, "insn-attrtab.c", 6988, "ppro_p0_unit_blockage_range"); 
expa = lang_hooks_0.expand_constant( exp); 
*( _OWORD *)d.r = *( _OWORD *)&expa->block.vars; 
*xp = adjust_address_1( y, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), *( _DWORD *)&x[1], 1, 1); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)y), 
*cum = init_cumulative_args_zero_cum; 
if ( !insn_data_0[1159].operand->predicate( loc, v1) ) 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( ( sch_istable[( unsigned __int8)c] & 4) == 0 && ( base != 16 || ( sch_istable[( unsigned __int8)c] & 0x100) == 0) ) 
if ( ( sch_istable[( unsigned __int8)c] & 4) == 0 && ( base != 16 || ( sch_istable[( unsigned __int8)c] & 0x100) == 0) ) 
if ( largest_digit < hex_value[( unsigned __int8)c] ) 
largest_digit = hex_value[( unsigned __int8)c]; 
v4 = hex_value[( unsigned __int8)c] + base * n < ( unsigned __int64)n; 
l = hex_value[( unsigned __int8)c] + base * n; 
sufftab = vsuf_1; 
sufftab = vsuf_2; 
sufftab = vsuf_3; 
if ( type1 == ( tree_node *)*( &global_trees + 5) ) 
if ( type1 == ( tree_node *)*( &global_trees + 4) ) 
if ( type1 == ( tree_node *)*( &global_trees + 3) ) 
if ( type1 == ( tree_node *)*( &global_trees + 2) ) 
if ( type1 == ( tree_node *)*( &global_trees + 1) ) 
fatal_insn_not_found( insn, "insn-attrtab.c", 2169, "athlon_fp_muladd_unit_ready_cost"); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)*loc)] != MODE_COMPLEX_INT ) 
v24 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)*loc)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( **( _DWORD **)this_0->loc)] != MODE_COMPLEX_INT ) 
v20 = mode_class_0[( unsigned __int8)BYTE2( **( _DWORD **)this_0->loc)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v14 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
add_dependence( insn, pendinga->fld[0].rtx, ( reg_note)0); 
sprintf( temp, "*.%s%u", "LM", ( unsigned int)dbxout_source_line_sym_lineno); 
fprintf( asmfile, ".%s%u:\n", "LM", ( unsigned int)dbxout_source_line_sym_lineno); 
++dbxout_source_line_sym_lineno; 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 29844, "ppro_p0_unit_conflict_cost"); 
|| !symbolic_operand( recog_data_0.operand[1], SImode) ) 
|| !symbolic_operand( recog_data_0.operand[1], DImode) ) 
if ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], DImode) ) 
if ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
if ( which_alternative || pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
&& const1_operand( recog_data_0.operand[2], VOIDmode) ) 
if ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) ) 
if ( mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( which_alternative || mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( which_alternative || !mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( mult_operator( recog_data_0.operand[3], XFmode) ) 
if ( mult_operator( recog_data_0.operand[3], TFmode) ) 
else if ( mult_operator( recog_data_0.operand[3], SFmode) ) 
else if ( which_alternative == 2 || !mult_operator( recog_data_0.operand[3], SFmode) ) 
else if ( mult_operator( recog_data_0.operand[3], DFmode) ) 
else if ( which_alternative == 2 || !mult_operator( recog_data_0.operand[3], DFmode) ) 
else if ( mult_operator( recog_data_0.operand[3], XFmode) ) 
free( reg_pref_0); 
if ( reg_pref_0 ) 
reg_pref_0 = reg_pref_buffer; 
v6 = *( tree_node **)( *( _QWORD *)&mem[1] + 8LL); 
*( _QWORD *)&mem[1] = get_mem_attrs( set, v6, v5, v4, align, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)mem)); 
if ( memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), ad) ) 
fatal_insn_not_found( insn, "insn-attrtab.c", 6331, "ppro_p01_unit_ready_cost"); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[i])] != MODE_COMPLEX_INT ) 
v13 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[i])] == MODE_COMPLEX_FLOAT; 
( __m128d)_mm_unpacklo_epi32( _mm_loadl_epi64( ( const __m128i *)&G.allocated), ( __m128i)xmm*(short *)0x8021E0), 
( __m128d)xmm*(short *)0x8021F0); 
( __m128d)_mm_unpacklo_epi32( _mm_loadl_epi64( ( const __m128i *)&G.allocated_last_gc), ( __m128i)xmm*(short *)0x8021E0), 
( __m128d)xmm*(short *)0x8021F0); 
timevar_push( TV_GC_0); 
timevar_pop( TV_GC_0); 
fputs( dump_edge_info_bitnames[i], file); 
pred = insn_data_0[icode].operand->predicate; 
v3 = insn_data_0[icode].genfun( xa); 
induction_1 *biv1; // [rsp+148h] [rbp-1648h] 
induction_1 *biv1; // [rsp+148h] [rbp-1648h] 
induction_1 *biv; // [rsp+150h] [rbp-1640h] 
induction_1 *biv; // [rsp+150h] [rbp-1640h] 
induction_1 *iv; // [rsp+1748h] [rbp-48h] 
induction_1 *iv; // [rsp+1748h] [rbp-48h] 
biv = bl_0->biv; 
for ( biv1 = biv; biv1; biv1 = biv1->next_iv ) 
for ( biv1 = biv; biv1; biv1 = biv1->next_iv ) 
for ( biv1 = biv; biv1; biv1 = biv1->next_iv ) 
for ( biv1 = biv; biv1; biv1 = biv1->next_iv ) 
for ( biv1 = biv; biv1; biv1 = biv1->next_iv ) 
if ( ( unsigned __int16)*( _DWORD *)biv->add_val != 54 ) 
biv->src_reg->fld[0].rtuint, 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rega)] != MODE_COMPLEX_INT ) 
v15 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rega)] == MODE_COMPLEX_FLOAT; 
recog_data_0.operand[1] = x3; 
recog_data_0.operand[2] = x3a; 
recog_data_0.operand[0] = x2ce; 
&& ( unsigned int)recog_data_0.operand[2]->fld[0].rtwint != 0x80000000LL ) 
recog_data_0.operand[2] = x3a; 
recog_data_0.operand[0] = x2cf; 
|| !rtx_equal_p( x2cg->fld[0].rtx, recog_data_0.operand[1]) 
|| !rtx_equal_p( *( rtx *)&x2cg[1], recog_data_0.operand[2]) 
|| !ix86_binary_operator_ok( MINUS, SImode, recog_data_0.operand) ) 
recog_data_0.operand[0] = x2cf; 
|| !rtx_equal_p( x3bz->fld[0].rtx, recog_data_0.operand[1]) 
|| !rtx_equal_p( *( rtx *)&x3bz[1], recog_data_0.operand[2]) 
|| !ix86_binary_operator_ok( MINUS, SImode, recog_data_0.operand) ) 
recog_data_0.operand[1] = x4; 
recog_data_0.operand[2] = x4a; 
formal_list = ( char *)&arg0; 
this_type = gen_type( &arg0, *( tree *)&formal_type[2], ansi); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rega)] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rega)] == MODE_COMPLEX_FLOAT; 
v6 = gen_rtx( ( rtx_code)( unsigned __int16)*( _DWORD *)operand1, VOIDmode, operand4, operand5); 
classa = mode_class_0[mode]; 
mode0 = *( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8); 
if ( !insn_data_0[icode].operand[1].predicate( xop0, mode0) ) 
if ( !insn_data_0[icode].operand->predicate( temp, mode) ) 
pat = insn_data_0[icode].genfun( temp, xop0); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v10 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
if ( rtx_class[code] == 99 && QTextBlock::operator<( op0, op1) ) 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x1a; 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x1b; 
recog_data_0.operand[1] = x1b; 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 54 
&& recog_data_0.operand[1]->fld[0].rtwint == -1 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x2a; 
recog_data_0.operand[1] = x2; 
recog_data_0.operand[1] = x2b; 
&& ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)recog_data_0.operand[1])] == MODE_FLOAT 
&& ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)recog_data_0.operand[1])] == MODE_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)recog_data_0.operand[1])] == MODE_COMPLEX_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)recog_data_0.operand[1])] == MODE_COMPLEX_FLOAT 
if ( generating_concat_p && ( mode_class_0[mode] == MODE_COMPLEX_FLOAT || mode_class_0[mode] == MODE_COMPLEX_INT) ) 
if ( generating_concat_p && ( mode_class_0[mode] == MODE_COMPLEX_FLOAT || mode_class_0[mode] == MODE_COMPLEX_INT) ) 
if ( mode_class_0[mode] == MODE_COMPLEX_FLOAT ) 
&& mode_class_0[mode] != MODE_FLOAT 
&& mode_class_0[mode] != MODE_COMPLEX_FLOAT 
&& mode_class_0[mode] != MODE_VECTOR_FLOAT ) 
if ( QTextBlock::operator<( op0, op1) ) 
invalidate( ref->fld[0].rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ref)); 
invalidate( ref_0->fld[0].rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ref_0)); 
v2 = ix86_expand_compare( ( rtx_code)( unsigned __int16)*( _DWORD *)operand0, 0LL, 0LL); 
fatal_insn_not_found( insn, "insn-attrtab.c", 8316, "pent_u_unit_ready_cost"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) || ix86_cpu != PROCESSOR_PENTIUM ) 
|| !memory_operand( recog_data_0.operand[1], VOIDmode) 
&& ( which_alternative == 2 || incdec_operand( recog_data_0.operand[2], HImode)) 
&& !incdec_operand( recog_data_0.operand[2], HImode) 
&& ( which_alternative == 2 || incdec_operand( recog_data_0.operand[2], HImode)) 
&& !incdec_operand( recog_data_0.operand[2], HImode) 
&& ( which_alternative == 2 || incdec_operand( recog_data_0.operand[2], HImode)) 
&& !incdec_operand( recog_data_0.operand[2], HImode) 
|| ( which_alternative == 2 || incdec_operand( recog_data_0.operand[2], HImode)) 
&& incdec_operand( recog_data_0.operand[2], HImode) 
|| incdec_operand( recog_data_0.operand[2], HImode) 
&& incdec_operand( recog_data_0.operand[2], HImode) 
|| incdec_operand( recog_data_0.operand[2], HImode) 
|| !incdec_operand( recog_data_0.operand[2], HImode) 
|| ( incdec_operand( recog_data_0.operand[2], HImode) 
&& ( !incdec_operand( recog_data_0.operand[2], HImode) 
|| ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode)) 
for ( i = 0; i < recog_data_0.n_operands; ++i ) 
p = recog_data_0.constraints[i]; 
for ( j = 0; j < recog_data_0.n_alternatives; ++j ) 
if ( mode_class_0[modea] != MODE_INT ) 
if ( mode_class_0[modea] == MODE_FLOAT && mode_bitsize[modea] == 64 && ( unsigned __int16)*( _DWORD *)opa == 55 ) 
else if ( mode_class_0[modea] == MODE_FLOAT && mode_bitsize[modea] > 0x40u && ( unsigned __int16)*( _DWORD *)opa == 55 ) 
else if ( mode_class_0[modea] == MODE_FLOAT && mode_bitsize[modea] == 32 && ( unsigned __int16)*( _DWORD *)opa == 55 ) 
else if ( mode_class_0[modea] == MODE_INT 
buffer->state.format_args = ( va_list_0 *)ap; 
htab_traverse( hash_table_0, ( htab_trav)cselib_invalidate_mem_1, mem_rtx); 
v10 = bitpos % get_mode_alignment( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target)) != 0; 
if ( QTextBlock::operator<( op0, op1) ) 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 32215, "fpu_unit_blockage"); 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
if ( ix86_cpu != PROCESSOR_PENTIUM || mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( ix86_cpu == PROCESSOR_PENTIUM && mult_operator( recog_data_0.operand[3], SFmode) ) 
else if ( ix86_cpu != PROCESSOR_PENTIUMPRO || mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( ix86_cpu == PROCESSOR_PENTIUMPRO && mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( ix86_cpu != PROCESSOR_PENTIUM || which_alternative || mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( ix86_cpu == PROCESSOR_PENTIUM && !which_alternative && mult_operator( recog_data_0.operand[3], SFmode) ) 
|| mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( ix86_cpu == PROCESSOR_PENTIUMPRO && !which_alternative && mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( ix86_cpu != PROCESSOR_PENTIUM || mult_operator( recog_data_0.operand[3], XFmode) ) 
data = &insn_data_0[1112]; 
data = &insn_data_0[1113]; 
data = &insn_data_0[1114]; 
reg_set_table = ( reg_set_0 **)gmalloc( n); 
rtx v11; // [rsp+38h] [rbp-98h] 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_VECTOR_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)val)] != MODE_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)val)] != MODE_COMPLEX_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)val)] != MODE_VECTOR_FLOAT ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint)); 
newa = simplify_subreg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), r, inner_mode, *( _DWORD *)&x[1]); 
rtx nextlinks; // [rsp+28h] [rbp-38h] 
rtx links; // [rsp+30h] [rbp-30h] 
rtx next; // [rsp+40h] [rbp-20h] 
rtx insn; // [rsp+48h] [rbp-18h] 
rtx fa; // [rsp+58h] [rbp-8h] 
fa = f; 
reg_last_set_mode = ( machine_mode *)xmalloc( 4LL * nregs); 
insn = f; 
while ( insn ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( valtype->block.abstract_origin)) >> 1), 
return gen_rtx_REG( ( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( valtype->block.abstract_origin)) >> 1), 0); 
if ( mode_class_0[( unsigned __int8)HIBYTE( WORD2( valtype->block.abstract_origin)) >> 1] == MODE_FLOAT 
return gen_rtx_REG( ( machine_mode)mode, 8); 
if ( mode_class_0[( unsigned __int8)HIBYTE( WORD2( valtype->block.abstract_origin)) >> 1] != MODE_VECTOR_INT ) 
v6 = mode_class_0[( unsigned __int8)HIBYTE( WORD2( valtype->block.abstract_origin)) >> 1] == MODE_VECTOR_FLOAT; 
return gen_rtx_REG( ( machine_mode)mode, v4); 
if ( lengtha == 1 && ( sch_istable[*( unsigned __int8 *)contents] & 4) != 0 ) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[opnum] + 8)) ) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[opnum] + 8)) ) 
if ( !insn_data_0[icode].operand[opnum].predicate( 
return copy_to_mode_reg( ( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[opnum] + 8), xa); 
return copy_to_mode_reg( ( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[opnum] + 8), xa); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)old), 
fancy_abort( &off_88ECD0[4], 6967, "do_output_reload"); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op)] == MODE_FLOAT 
if ( mode_class_0[mode] == MODE_INT || mode_class_0[mode] == MODE_PARTIAL_INT ) 
if ( mode_class_0[mode] == MODE_INT || mode_class_0[mode] == MODE_PARTIAL_INT ) 
sep = &arg0; 
for ( b = table_0[hash]; b; b = b->next ) 
b->next = table_0[hash]; 
table_0[hash] = b; 
first_rtl = first_rtl_op( ( tree_code)( unsigned __int8)*( ( _DWORD *)&nodea->common + 4)); 
lang_hooks_0.print_identifier( filea, nodea, indenta); 
if ( *( _OWORD *)&nodea->block.vars <= __PAIR128__( -1LL, 0LL) ) 
lang_hooks_0.print_xnode( filea, nodea, indenta); 
lang_hooks_0.print_decl( filea, nodea, indenta); 
lang_hooks_0.print_type( filea, nodea, indenta); 
rgn_print_insn_tmp, 
sprintf( rgn_print_insn_tmp, "%d", insn->fld[0].rtuint); 
rgn_print_insn_tmp, 
return rgn_print_insn_tmp; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
destination = asm_dest_local; 
destination = asm_dest_local; 
destination = ( ( ( unsigned __int64)decl->real_cst.real_cst.r[2] >> 17) & 1) == 0; 
if ( destination == asm_dest_bss ) 
if ( destination == asm_dest_bss ) 
if ( destination ) 
if ( destination == asm_dest_bss ) 
if ( destination == asm_dest_bss ) 
if ( destination != asm_dest_local ) 
if ( destination != asm_dest_local ) 
k = hex_value[( unsigned __int8)*s]; 
v6 = sch_istable[( unsigned __int8)*sp_0] & 4; 
v14 = ( sch_istable[( unsigned __int8)*sp_0] & 0x100) != 0; 
if ( ( sch_istable[( unsigned __int8)*s] & 4) == 0 ) 
n_outputs = recog_data_0.n_operands - n_inputs; 
for ( i = 0; i < recog_data_0.n_operands; ++i ) 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 63 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i]->fld[0].rtwint == 61 ) 
recog_data_0.operand[i] = recog_data_0.operand[i]->fld[0].rtx; 
recog_data_0.operand[i] = recog_data_0.operand[i]->fld[0].rtx; 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 61 
&& recog_data_0.operand[i]->fld[0].rtint >= 8u 
&& recog_data_0.operand[i]->fld[0].rtint <= 0xFu ) 
if ( recog_data_0.operand[i]->fld[0].rtint == clobber_reg[j]->fld[0].rtint ) 
reg_used_as_output[recog_data_0.operand[i]->fld[0].rtuint] = 1; 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 61 
&& recog_data_0.operand[i]->fld[0].rtint >= 8u 
&& recog_data_0.operand[i]->fld[0].rtint <= 0xFu ) 
for ( j_0 = 0; j_0 < n_clobbers && !operands_match_p( clobber_reg[j_0], recog_data_0.operand[i]); ++j_0 ) 
implicitly_dies[recog_data_0.operand[i]->fld[0].rtuint] = 1; 
if ( operands_match_p( recog_data_0.operand[j_1], recog_data_0.operand[i]) ) 
if ( operands_match_p( recog_data_0.operand[j_1], recog_data_0.operand[i]) ) 
xa = gen_lowpart_if_possible( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), x_ent->const_rtx); 
v1 = safe_hash( xb, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xb)); 
elt = lookup( xb, v1 & 0x1F, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xb)); 
set_diagnostic_context( &dc, msgid, ( va_list_0 *)ap, file, line, 0); 
recog_data_0.operand[1] = x2; 
recog_data_0.operand[2] = x2x; 
|| ( unsigned __int8)recog_data_0.operand[2]->fld[0].rtwint == 128LL 
recog_data_0.operand[1] = x3bh; 
recog_data_0.operand[2] = x3bi; 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 66 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[2] == 66 ) 
recog_data_0.operand[2] = x3bg; 
recog_data_0.operand[1] = x2y; 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 66 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[2] == 66 ) 
recog_data_0.operand[0] = x3bj; 
recog_data_0.operand[1] = x3bk; 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_INT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_PARTIAL_INT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_VECTOR_INT ) 
else if ( stack_0->timevar == tv ) 
fatal_insn_not_found( insn, "insn-attrtab.c", 3443, "athlon_ieu_unit_blockage_range"); 
fprintf( di_0->stream, "\n%*s", 25, &arg0); 
if ( ( ( *( ( _DWORD *)&child->common + 4) >> 18) & 1) != 0 && !strcmp( lang_hooks_0.name, "GNU C++") ) 
v15 = dbxout_type_anonymous_type_number++; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v20 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
fatal_insn_not_found( insn, "insn-attrtab.c", 12429, "get_attr_fp_int_src"); 
recog_data_0.operand[1] = x3bd; 
recog_data_0.operand[2] = x2ca; 
recog_data_0.operand[0] = x2cb; 
if ( !rtx_equal_p( x2cc->fld[0].rtx, recog_data_0.operand[1]) ) 
recog_data_0.operand[1] = x3bd; 
recog_data_0.operand[2] = x2ce; 
recog_data_0.operand[0] = x2cf; 
if ( !rtx_equal_p( x2cg->fld[0].rtx, recog_data_0.operand[1]) ) 
recog_data_0.operand[1] = x3h; 
recog_data_0.operand[2] = x2n; 
recog_data_0.operand[0] = x2o; 
operands[4] = gen_rtx_REG( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operands), 17); 
( *direction)[13 * loop_ptr->depth + sub] = independent; 
cselib_invalidate_regno( dest->fld[0].rtuint, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest)); 
if ( push_operand( dest, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest)) ) 
if ( mode_class_0[save_mode[regno]] != MODE_COMPLEX_INT ) 
v16 = mode_class_0[save_mode[regno]] == MODE_COMPLEX_FLOAT; 
v11 = gen_rtx_REG( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)mem), regno); 
if ( ( sch_istable[( unsigned __int8)c] & 0x400) != 0 ) 
decl = *( tree_node **)( exp->int_cst.int_cst.low + 32); 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 38030, "pent_np_unit_conflict_cost"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) ) 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
|| !q_regs_operand( recog_data_0.operand[0], QImode) 
if ( which_alternative || memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( which_alternative == 1 && !memory_operand( recog_data_0.operand[1], VOIDmode) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
else if ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
if ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
if ( !incdec_operand( recog_data_0.operand[2], DImode) 
else if ( !incdec_operand( recog_data_0.operand[2], DImode) 
src = operand_sub*(short *)0xforce( srcrega, xbitpos / v9, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)srcrega)); 
src = operand_sub*(short *)0xforce( srcrega, xbitpos / v9, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)srcrega)); 
base[BYTE3( p)] = ( page_entry_0 **)xcalloc( 1LL << ( 24 - LOBYTE( G.lg_pagesize)), 8uLL); 
fprintf( file, asc_7D3A5A); 
fprintf( file, asc_7D3A57); 
while ( ( sch_istable[( unsigned __int8)c] & 0x800) != 0 ); 
if ( apply_args_size_size < 0 ) 
apply_args_size_size = mode_size[v0]; 
apply_args_size_size += mode_size[v1]; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v11 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( apply_args_size_size % align ) 
apply_args_size_size = align * ( ( align + apply_args_size_size - 1) / align); 
apply_args_size_size = align * ( ( align + apply_args_size_size - 1) / align); 
apply_args_reg_offset[regno] = apply_args_size_size; 
apply_args_size_size += mode_size[best_mode]; 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 27443, "k6_alu_unit_conflict_cost"); 
|| !symbolic_operand( recog_data_0.operand[1], SImode) ) 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], SImode) 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
if ( q_regs_operand( recog_data_0.operand[0], QImode) && ( ( 1 << ix86_cpu) & x86_movx) == 0 ) 
|| !symbolic_operand( recog_data_0.operand[1], DImode) ) 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], DImode) 
|| pic_symbolic_operand( recog_data_0.operand[2], DImode) ) 
|| pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
|| pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
if ( ( which_alternative == 2 || incdec_operand( recog_data_0.operand[2], HImode)) 
&& !incdec_operand( recog_data_0.operand[2], HImode) 
if ( ( which_alternative == 3 || incdec_operand( recog_data_0.operand[2], QImode)) 
&& !incdec_operand( recog_data_0.operand[2], QImode) 
|| ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode)) 
&& ( ( ( 1 << ix86_cpu) & x86_double_with_add) == 0 || !const1_operand( recog_data_0.operand[2], VOIDmode)) ) 
&& const1_operand( recog_data_0.operand[2], VOIDmode) 
&& ( ( ( 1 << ix86_cpu) & x86_double_with_add) == 0 || !const1_operand( recog_data_0.operand[2], VOIDmode)) ) 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[1] = x3a; 
|| ( v33 = true_regnum( recog_data_0.operand[0]), v33 != true_regnum( recog_data_0.operand[1])) ) 
|| ( v33 = true_regnum( recog_data_0.operand[0]), v33 != true_regnum( recog_data_0.operand[1])) ) 
return gen_split_883( recog_data_0.operand); 
recog_data_0.operand[1] = x3a; 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 61 ) 
return gen_split_881( recog_data_0.operand); 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 61 
|| recog_data_0.operand[1]->fld[0].rtint >= 8u 
&& ( recog_data_0.operand[1]->fld[0].rtint < 0x25u || recog_data_0.operand[1]->fld[0].rtint > 0x2Cu) ) 
&& ( recog_data_0.operand[1]->fld[0].rtint < 0x25u || recog_data_0.operand[1]->fld[0].rtint > 0x2Cu) ) 
else if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 61 
|| recog_data_0.operand[1]->fld[0].rtint >= 4u ) 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[0] != 61 
|| recog_data_0.operand[0]->fld[0].rtint >= 8u 
&& ( recog_data_0.operand[0]->fld[0].rtint < 0x25u || recog_data_0.operand[0]->fld[0].rtint > 0x2Cu) ) 
&& ( recog_data_0.operand[0]->fld[0].rtint < 0x25u || recog_data_0.operand[0]->fld[0].rtint > 0x2Cu) ) 
if ( ( sch_istable[( unsigned __int8)c] & 0x400) != 0 ) 
valuec = ( tree_node *)global_trees; 
preal = qToBigEndian<unsigned int>( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)p->fld[0].rtwint), p); 
pimag = gen_imagpart( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)preal), p); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)pat->fld[0].rtwint)] != MODE_COMPLEX_INT ) 
v21 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)pat->fld[0].rtwint)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v16 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
fprintf( dump, " %s:%i", dump_regclass_reg_class_names[classa], ( unsigned int)costs_0[i].cost[classa]); 
fprintf( dump, " %s:%i", dump_regclass_reg_class_names[classa], ( unsigned int)costs_0[i].cost[classa]); 
fprintf( dump, " MEM:%i\n", ( unsigned int)costs_0[i].mem_cost); 
v3 = ( int)( ( double)( qty_0[q2].size * qty_0[q2].freq * floor_log2_wide( qty_0[q2].n_refs)) 
v3 = ( int)( ( double)( qty_0[q2].size * qty_0[q2].freq * floor_log2_wide( qty_0[q2].n_refs)) 
v3 = ( int)( ( double)( qty_0[q2].size * qty_0[q2].freq * floor_log2_wide( qty_0[q2].n_refs)) 
/ ( double)( qty_0[q2].death - qty_0[q2].birth) 
/ ( double)( qty_0[q2].death - qty_0[q2].birth) 
- ( int)( ( double)( qty_0[q1].size * qty_0[q1].freq * floor_log2_wide( qty_0[q1].n_refs)) 
- ( int)( ( double)( qty_0[q1].size * qty_0[q1].freq * floor_log2_wide( qty_0[q1].n_refs)) 
- ( int)( ( double)( qty_0[q1].size * qty_0[q1].freq * floor_log2_wide( qty_0[q1].n_refs)) 
/ ( double)( qty_0[q1].death - qty_0[q1].birth) 
/ ( double)( qty_0[q1].death - qty_0[q1].birth) 
inner = gen_rtx_fmt_e( USE, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), inner); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)inner)] != MODE_INT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)inner)] != MODE_PARTIAL_INT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)inner)] != MODE_COMPLEX_INT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)inner)] != MODE_VECTOR_INT ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)inner)] != MODE_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)inner)] != MODE_COMPLEX_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)inner)] != MODE_VECTOR_FLOAT ) 
v8 = gen_lowpart_for_combine( ( machine_mode)BYTE2( *( _DWORD *)arg0), *( rtx *)&x[1]); 
timevar_push( TV_PARSE_0); 
lang_hooks_0.clear_binding_stack( ); 
timevar_pop( TV_PARSE_0); 
timevar_push( TV_SYMOUT_0); 
timevar_pop( TV_SYMOUT_0); 
timevar_push( TV_DUMP_0); 
timevar_pop( TV_DUMP_0); 
timevar_push( TV_DUMP_0); 
timevar_pop( TV_DUMP_0); 
temp = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
basic_block bb; // [rsp+90h] [rbp-10h] 
bb = basic_block; 
bb->global_live_at_start = bitmap_initialize( ( bitmap)value); 
bb->global_live_at_end = bitmap_initialize( ( bitmap)value_0); 
bitmap_copy( bb->global_live_at_start, edge_in->dest->global_live_at_start); 
bitmap_copy( bb->global_live_at_end, edge_in->dest->global_live_at_start); 
make_single_succ_edge( bb, edge_in->dest, 1); 
redirect_edge_succ( edge_in, bb); 
else if ( !redirect_edge_and_branch( edge_in, bb) ) 
return bb; 
if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE ) 
if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL ) 
if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE ) 
if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE ) 
sa = assign_stack_local( ( machine_mode)mode, mode_size[mode], 0); 
sa = gen_reg_rtx( ( machine_mode)mode); 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( typea->block.abstract_origin)) >> 1), 
ix86_va_arg_intreg, 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( typea->block.abstract_origin)) >> 1), 
return offsettable_address_p( 1, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op), op->fld[0].rtx) != 0; 
internal_error_function( msgida, ( va_list_0 *)ap); 
set_diagnostic_context( &dc, msgida, ( va_list_0 *)ap, input_filename, lineno, 0); 
next = cpp_trigraph_map[*( ( unsigned __int8 *)buffer->cur + 1)]; 
if ( ( sch_istable[*v1] & 0x800) != 0 ) 
if ( ( sch_istable[*v1] & 0x400) == 0 ) 
htab_traverse( hash_table_0, ( htab_trav)discard_useless_locs, 0LL); 
htab_traverse( hash_table_0, ( htab_trav)discard_useless_values, 0LL); 
if ( !statement_code_p( code) && code != TREE_LIST && !lang_hooks_0.tree_inlining.tree_chain_matters_p( *tpa) ) 
to_real = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)to)] == MODE_FLOAT; 
from_real = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)from)] == MODE_FLOAT; 
if ( mode_class_0[to_mode] == MODE_VECTOR_INT 
|| mode_class_0[to_mode] == MODE_VECTOR_FLOAT 
|| mode_class_0[from_mode] == MODE_VECTOR_INT 
|| mode_class_0[from_mode] == MODE_VECTOR_FLOAT ) 
if ( mode_class_0[to_mode] == MODE_VECTOR_INT || mode_class_0[to_mode] == MODE_VECTOR_FLOAT ) 
if ( mode_class_0[to_mode] == MODE_VECTOR_INT || mode_class_0[to_mode] == MODE_VECTOR_FLOAT ) 
fromb = simplify_gen_subreg( to_mode, froma, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)froma), 0); 
tob = simplify_gen_subreg( from_mode, toa, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)toa), 0); 
return insn_data_0[extendtab[mto][mfrom][unsignedp != 0]].genfun( x, y); 
timevar_get( TV_TOTAL_0, &total_elapsed); 
v5 = simplify_gen_subreg( SImode, op, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op), 0); 
v6 = simplify_gen_subreg( SImode, op, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op), 4u); 
p->constructor_stack = constructor_stack_0; 
p->constructor_range_stack = constructor_range_stack_0; 
p->spelling = spelling_0; 
p->next = initializer_stack_0; 
initializer_stack_0 = p; 
constructor_stack_0 = 0LL; 
constructor_range_stack_0 = 0LL; 
spelling_0 = 0LL; 
( machine_mode)( ( unsigned __int8)HIBYTE( *( _WORD *)( *( _QWORD *)( exp->int_cst.int_cst.low + 8) + 60LL)) >> 1), 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[mode] == MODE_CC && optab_table[30]->handlers[mode].insn_code == CODE_FOR_nothing ) 
return insn_data_0[optab_table[30]->handlers[tmode].insn_code].genfun( xa, ya); 
ereal_atof( &v4, args->str, ( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( args->type->block.abstract_origin)) >> 1)); 
ereal_atof( &v3, args->str, ( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( args->type->block.abstract_origin)) >> 1)); 
reg_map[reg->fld[0].rtuint] = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)link), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)link), 
predict_insn_def( copy, PRED_LOOP_HEADER, TAKEN_0); 
predict_insn_def( copy, PRED_LOOP_HEADER, NOT_TAKEN_0); 
store_by_pieces_2( insn_data_0[icode].genfun, mode, data); 
info = &reg_avail_info_0[regno]; 
cuid = *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint); 
if ( replace_reloads && recog_data_0.operand[opnuma] != xa ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)mem), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), 
tem_0 = gen_lowpart_common( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), reg_equiv_constant[regno_0]); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint)); 
tem_0b = gen_lowpart_common( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), tem_0a); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), 
if ( file_table_0.last_lookup_index && !strcmp( file_name, file_table_0.table[file_table_0.last_lookup_index]) ) 
if ( file_table_0.last_lookup_index && !strcmp( file_name, file_table_0.table[file_table_0.last_lookup_index]) ) 
if ( file_table_0.last_lookup_index && !strcmp( file_name, file_table_0.table[file_table_0.last_lookup_index]) ) 
return file_table_0.last_lookup_index; 
for ( i = 1; i < file_table_0.in_use; ++i ) 
if ( !strcmp( file_name, file_table_0.table[i]) ) 
file_table_0.last_lookup_index = i; 
if ( i == file_table_0.allocated ) 
file_table_0.allocated = i + 64; 
file_table_0.table = ( char **)xrealloc( file_table_0.table, 8LL * ( i + 64)); 
file_table_0.table = ( char **)xrealloc( file_table_0.table, 8LL * ( i + 64)); 
file_table_0.table[i] = xstrdup( file_name); 
file_table_0.in_use = i + 1; 
file_table_0.last_lookup_index = i; 
sprintf( print_insn_tmp, "%4d", insn->fld[0].rtuint); 
return print_insn_tmp; 
tree v4; // rax 
tree v6; // rax 
tree v10; // rax 
tree v12; // rax 
tree v15; // rax 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[1] = x2a; 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[1] = x2l; 
recog_data_0.operand[1] = x2l; 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 54 
&& recog_data_0.operand[1]->fld[0].rtwint == -1 
if ( !rtx_equal_p( x3q->fld[0].rtx, recog_data_0.operand[0]) ) 
recog_data_0.operand[1] = x5; 
recog_data_0.operand[2] = ( rtx)x5a[1]; 
recog_data_0.operand[1] = x2l; 
|| !rtx_equal_p( x1q->fld[0].rtx, recog_data_0.operand[1]) 
if ( ( sch_istable[*p] & 0x200) == 0 ) 
if ( ( sch_istable[*q] & 0x204) == 0 ) 
classa = mode_class_0[*( int *)pmode]; 
result_mode = *( ( unsigned __int16 *)insn_data_0[1203].operand + 8); 
src = operand_sub*(short *)0xforce( result_val, bitpos / v15, BLKmode); 
v24 = expand_expr( retval_rhs, val, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)val), EXPAND_NORMAL); 
v2 = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)if_info->x)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)if_info->x), 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)chain->rld[i].reg_rtx)] != MODE_COMPLEX_INT ) 
v9 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)chain->rld[i].reg_rtx)] == MODE_COMPLEX_FLOAT; 
v57 = reg_alternate_class( allocno_0[( __int64)num].reg); 
v57 = reg_preferred_class( allocno_0[( __int64)num].reg); 
mode = ( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[allocno_0[( __int64)num].reg]); 
else if ( allocno_0[( __int64)num].calls_crossed ) 
used1a = used1 | no_global_alloc_regs; 
used1b = used2 | allocno_0[( __int64)num].hard_reg_conflicts; 
used = used1b | ~regs_used_so_far | allocno_0[( __int64)num].regs_someone_prefers; 
used = used1b | ~regs_used_so_far | allocno_0[( __int64)num].regs_someone_prefers; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v55 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
allocno_0[( __int64)num].hard_reg_copy_preferences &= ~used; 
if ( ( ~reg_class_contents[0] & allocno_0[( __int64)num].hard_reg_copy_preferences) != 0 && best_reg >= 0 ) 
if ( ( ( 1LL << ia) & allocno_0[( __int64)num].hard_reg_copy_preferences) != 0 
targeta = gen_reg_rtx( ( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( integer_types[5]->block.abstract_origin)) >> 1)); 
disabled_builtin_0 *p; // [rsp+8h] [rbp-18h] 
disabled_builtin_0 *p; // [rsp+8h] [rbp-18h] 
for ( p = disabled_builtins; p; p = p->next ) 
for ( p = disabled_builtins; p; p = p->next ) 
for ( p = disabled_builtins; p; p = p->next ) 
for ( p = disabled_builtins; p; p = p->next ) 
if ( !strcmp( name, p->name) ) 
v3 = gen_rtx_fmt_s( ASM_INPUT, VOIDmode, &arg0); 
output_asm_insn( off_87B914, operands); 
return &arg0; 
output_do_verbatim( diagnostic_buffer, msgid, ( va_list_0 *)ap); 
result = expand_mult_add( b, reg, m, a, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 1); 
fatal_insn_not_found( insn, "insn-attrtab.c", 4709, "k6_store_unit_blockage_range"); 
if ( mode_class_0[( unsigned __int8)HIBYTE( WORD2( type->block.abstract_origin)) >> 1] != MODE_COMPLEX_INT ) 
v10 = mode_class_0[( unsigned __int8)HIBYTE( WORD2( type->block.abstract_origin)) >> 1] == MODE_COMPLEX_FLOAT; 
if ( index_type == ( tree_node *)global_trees ) 
newa = lang_hooks_0.expand_constant( expa); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)retvalue)] != MODE_COMPLEX_INT ) 
v8 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)retvalue)] == MODE_COMPLEX_FLOAT; 
if ( !insn_data_0[icode].operand[1].predicate( op0, TImode) ) 
if ( !insn_data_0[icode].operand[2].predicate( op1, TImode) ) 
pat = insn_data_0[icode].genfun( targeta, op0, op1); 
if ( mode_class_0[modea] == MODE_FLOAT && ( unsigned __int8)BYTE2( *( _DWORD *)xa) && msize > xsize ) 
offset = subreg_lowpart_offset( modea, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa)); 
&& ( mode_class_0[modea] == MODE_INT || mode_class_0[modea] == MODE_PARTIAL_INT) ) 
&& ( mode_class_0[modea] == MODE_INT || mode_class_0[modea] == MODE_PARTIAL_INT) ) 
return gen_rtx_fmt_e( ( rtx_code)( unsigned __int16)*( _DWORD *)xa, modea, xa->fld[0].rtx); 
return simplify_gen_subreg( modea, xa, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), offset); 
if ( ( mode_class_0[modea] == MODE_INT || mode_class_0[modea] == MODE_PARTIAL_INT) 
if ( ( mode_class_0[modea] == MODE_INT || mode_class_0[modea] == MODE_PARTIAL_INT) 
if ( mode_class_0[modea] == MODE_FLOAT && mode_bitsize[modea] == 32 && ( unsigned __int16)*( _DWORD *)xa == 54 ) 
if ( mode_class_0[modea] == MODE_FLOAT 
&& mode_class_0[( unsigned __int8)HIBYTE( WORD2( type->block.abstract_origin)) >> 1] == MODE_INT ) 
return ( const char *)&unk_885950; 
return ( const char *)&unk_8859C0; 
op0 = expand_shift( RSHIFT_EXPR, ( machine_mode)operand_mode, op0, v10, subtarget, 1); 
else if ( can_compare_p( code, ( machine_mode)operand_mode, ccp_store_flag) ) 
if ( ( icode == CODE_FOR_nothing || only_cheap && *( ( unsigned __int16 *)insn_data_0[icode].operand + 8) != mode) 
result = emit_store_flag( targeta, code, v17, v16, ( machine_mode)operand_mode, unsignedp, 1); 
targeta = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)targeta)); 
resulta = compare_from_rtx( op0a, op1, code, unsignedp, ( machine_mode)operand_mode, 0LL); 
max_uid_0 = get_max_uid( ); 
n = 4 * ( max_uid_0 + 1); 
uid_cuid_1 = gmalloc( n); 
memset( uid_cuid_1, 0, n); 
*( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint) = v1; 
*( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint) = i; 
if ( *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint) < *( ( _DWORD *)uid_cuid_1 + occr->insn->fld[0].rtint) 
if ( *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint) < *( ( _DWORD *)uid_cuid_1 + occr->insn->fld[0].rtint) 
if ( xexit_cleanup ) 
output_asm_insn( off_806606, xops); 
if ( alloc_aux_for_blocks_initialized ) 
alloc_aux_for_blocks_initialized = 1; 
first_rtl = first_rtl_op( ( tree_code)( unsigned __int8)*( ( _DWORD *)&t->common + 4)); 
if ( alloc_aux_for_edges_initialized ) 
alloc_aux_for_edges_initialized = 1; 
*( _DWORD *)pat = ( unsigned __int16)swap_condition( ( rtx_code)( unsigned __int16)*( _DWORD *)pat) | *( _DWORD *)pat & 0xFFFF0000; 
nops = first_rtl_op( ( tree_code)( unsigned __int8)*( ( _DWORD *)&exp->common + 4)); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v10 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
rtx ya; // [rsp+18h] [rbp-18h] 
rtx xa; // [rsp+20h] [rbp-10h] 
xa = x; 
ya = y; 
xa = y; 
ya = x; 
if ( ( unsigned __int16)*( _DWORD *)xa == 75 
&& ( ( unsigned __int16)**( _DWORD **)&xa[1] == 67 
|| ( unsigned __int16)**( _DWORD **)&xa[1] == 68 
|| ( unsigned __int16)**( _DWORD **)&xa[1] == 54 
|| ( unsigned __int16)**( _DWORD **)&xa[1] == 55 
|| ( unsigned __int16)**( _DWORD **)&xa[1] == 58 
|| ( unsigned __int16)**( _DWORD **)&xa[1] == 134 
|| ( unsigned __int16)**( _DWORD **)&xa[1] == 56 
|| ( unsigned __int16)**( _DWORD **)&xa[1] == 140) ) 
rtx = xa->fld[0].rtx; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)tem), 
if ( replace_reloads && recog_data_0.operand[opnuma] != xa ) 
|| rld[r].out && !ix86_hard_regno_mode_ok( regno, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rld[r].out)) ) 
v5 = operand_sub*(short *)0xforce( op0, i, ( machine_mode)mode); 
v5 = operand_sub*(short *)0xforce( op0, i, ( machine_mode)mode); 
v4 = operand_sub*(short *)0xforce( op1, i, ( machine_mode)mode); 
v4 = operand_sub*(short *)0xforce( op1, i, ( machine_mode)mode); 
result = ( cpp_context_0 *)xmalloc( 0x38uLL); 
x[1].fld[0].rtwint = ( __int64)gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint)); 
temp = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
( machine_mode)( unsigned __int8)BYTE2( **( _DWORD **)( *( _QWORD *)&insn[2] + 8LL)), 
if ( !peep2_insn_data_0[froma].insn ) 
reg_set_to_hard_reg_set( &live, peep2_insn_data_0[froma].live_before); 
if ( !peep2_insn_data_0[froma].insn ) 
reg_set_to_hard_reg_set( &this_live, peep2_insn_data_0[froma].live_before); 
peep2_find_free_register_search_ofs = 0; 
raw_regno = i + peep2_find_free_register_search_ofs; 
if ( i + peep2_find_free_register_search_ofs >= 53 ) 
if ( mode_class_0[modea] != MODE_COMPLEX_INT ) 
v31 = mode_class_0[modea] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[modea] != MODE_COMPLEX_INT ) 
v27 = mode_class_0[modea] == MODE_COMPLEX_FLOAT; 
peep2_find_free_register_search_ofs = raw_regnoa; 
if ( rtx_class[codea] == 99 && QTextBlock::operator<( trueop0, trueop1) ) 
if ( mode_class_0[modea] == MODE_FLOAT 
else if ( mode_class_0[modea] == MODE_INT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xop00)] != MODE_CC 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xop10)] != MODE_CC ) 
if ( ( mode_class_0[modea] == MODE_FLOAT 
|| mode_class_0[modea] == MODE_COMPLEX_FLOAT 
|| mode_class_0[modea] == MODE_VECTOR_FLOAT) 
if ( ( mode_class_0[modea] == MODE_INT 
for ( loop_ptr = ( loop_1 *)loop_chain->data.l[0]; ; loop_ptr = ( loop_1 *)loop_chain->data.l[loop_idx] ) 
for ( loop_ptr = ( loop_1 *)loop_chain->data.l[0]; ; loop_ptr = ( loop_1 *)loop_chain->data.l[loop_idx] ) 
if ( find_stack_direction_addr ) 
if ( &dummy <= find_stack_direction_addr ) 
find_stack_direction_addr = &dummy; 
ptr_mode = mode_for_size( v2, mode_class_0[v3], 0); 
if ( ( sch_istable[( unsigned __int8)ch_0] & 0xC00) == 0 ) 
v9 = ( sch_istable[( unsigned __int8)ch_0] & 1) != 0; 
if ( mode_class_0[v8] != MODE_COMPLEX_INT ) 
v22 = mode_class_0[v9] == MODE_COMPLEX_FLOAT; 
if ( ( sch_istable[*( unsigned __int8 *)p] & 0x88) != 0 ) 
induction_1 *v; // [rsp+68h] [rbp-48h] 
induction_1 *v; // [rsp+68h] [rbp-48h] 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
if ( v->ext_dependent ) 
v2 = *( _WORD *)v->ext_dependent; 
max = mode_mask_array[( unsigned __int8)BYTE2( *( _DWORD *)v->ext_dependent)] >> 1; 
fprintf( loop_dump_stream, "Verified ext dependent giv at %d of reg %d\n", v->insn->fld[0].rtuint, bl_0->regno); 
v->insn->fld[0].rtuint, 
v->insn->fld[0].rtuint, 
v->insn->fld[0].rtuint, 
*( ( _WORD *)v + 50) = *( ( _WORD *)v + 50) & 0xFFFB | 4; 
*( ( _WORD *)v + 50) = *( ( _WORD *)v + 50) & 0xFFFB | 4; 
build_def_use_outer_loop = 0LL; 
build_def_use_nloop = 0; 
build_def_use_du_idx = 0; 
if ( !build_def_use_nloop ) 
LODWORD( v3) = build_def_use_du_idx++; 
du_ptr = ( def_use_0 *)def_use_chain->data.l[( int)v3]; 
du_ptr->outer_loop = build_def_use_outer_loop; 
du_ptr->containing_loop = build_def_use_current_loop; 
if ( i < build_def_use_du_idx ) 
if ( i == build_def_use_du_idx ) 
for ( tmp_duc = ( def_use_0 *)def_use_chain->data.l[i]; tmp_duc->next; tmp_duc = tmp_duc->next ) 
if ( build_def_use_loop_def 
build_def_use_loop_def->outer_loop, 
fatal_insn( "could not find a spill register", insn, &off_88ECD0[4], 5051, "failed_reload"); 
temp = allocno_0[( __int64)num].hard_reg_conflicts; 
if ( allocno_0[( __int64)num].calls_crossed ) 
tempb = tempa | ~reg_class_contents[reg_preferred_class( allocno_0[( __int64)num].reg)]; 
allocno_0[( __int64)num].hard_reg_preferences &= ~tempb; 
allocno_0[( __int64)num].hard_reg_copy_preferences &= ~tempb; 
allocno_0[( __int64)num].hard_reg_full_preferences &= ~tempb; 
if ( allocno_0[( __int64)allocno2].size > allocno_0[( __int64)numa].size ) 
if ( allocno_0[( __int64)allocno2].size > allocno_0[( __int64)numa].size ) 
temp2 |= allocno_0[( __int64)allocno2].hard_reg_full_preferences; 
temp_0 |= allocno_0[( __int64)allocno2].hard_reg_full_preferences; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rega)] != MODE_COMPLEX_INT ) 
v9 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rega)] == MODE_COMPLEX_FLOAT; 
ident_hash->alloc_node = ( hashnode ( *)(  struct hash_table *))alloc_node_0; 
fatal_insn_not_found( insn, "insn-attrtab.c", 14632, "get_attr_length_immediate"); 
&& symbolic_operand( recog_data_0.operand[1], SImode) 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], SImode) ) 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
if ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0 ) 
&& symbolic_operand( recog_data_0.operand[1], DImode) 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], DImode) ) 
else if ( flag_pic && symbolic_operand( recog_data_0.operand[1], DImode) ) 
|| pic_symbolic_operand( recog_data_0.operand[2], DImode) ) 
if ( !incdec_operand( recog_data_0.operand[2], DImode) ) 
|| pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
|| pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
if ( !incdec_operand( recog_data_0.operand[2], SImode) ) 
if ( !incdec_operand( recog_data_0.operand[2], HImode) && which_alternative != 2 ) 
if ( !incdec_operand( recog_data_0.operand[2], HImode) ) 
if ( !incdec_operand( recog_data_0.operand[2], QImode) && which_alternative != 3 ) 
if ( !incdec_operand( recog_data_0.operand[2], QImode) ) 
|| ( ( ( 1 << ix86_cpu) & x86_double_with_add) == 0 || !const1_operand( recog_data_0.operand[2], VOIDmode)) 
&& ( mode_class_0[mode] != MODE_FLOAT 
&& mode_class_0[mode] != MODE_COMPLEX_FLOAT 
&& mode_class_0[mode] != MODE_VECTOR_FLOAT 
&& ( mode_class_0[mode] != MODE_FLOAT 
&& mode_class_0[mode] != MODE_COMPLEX_FLOAT 
&& mode_class_0[mode] != MODE_VECTOR_FLOAT 
( rtx_code)( unsigned __int16)*( _DWORD *)op0a, 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] != MODE_COMPLEX_INT ) 
v13 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] == MODE_COMPLEX_FLOAT; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)out->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)out)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)in->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)in)); 
if ( mode_class_0[outmode] != MODE_COMPLEX_INT ) 
v31 = mode_class_0[outmode] == MODE_COMPLEX_FLOAT; 
&& !refers_to_regno_for_reload_p( regno, v30 + regno, *( rtx *)&this_insn_1[2], outloc) ) 
&& ( !value || find_reg_note( this_insn_1, REG_UNUSED, real_out)) 
&& find_reg_note( this_insn_1, REG_DEAD, real_in) 
? ix86_hard_regno_mode_ok( rtint, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)out)) 
v5 = gen_rtx_MEM( ( machine_mode)( unsigned __int8)subr->decl.result->real_cst.real_cst.r[2], value_address); 
subr->decl.result->decl.rtl = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)hard_reg)); 
v3 = force_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), x); 
rtx incloc; // [rsp+80h] [rbp-30h] 
incloc = value->fld[0].rtx; 
if ( ( unsigned __int16)*( _DWORD *)incloc == 61 ) 
reg_last_reload_reg[incloc->fld[0].rtuint] = 0LL; 
v5 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)incloc), incloc, inc); 
v5 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)incloc), incloc, inc); 
v5 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)incloc), incloc, inc); 
v6 = gen_rtx_fmt_ee( SET, VOIDmode, incloc, v5); 
v7 = gen_move_insn( reloadreg, incloc); 
v12 = gen_move_insn( incloc, reloadreg); 
v10 = gen_move_insn( incloc, reloadreg); 
bi = ( block_info_0)block->aux; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v15 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v18 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
e = new_cselib_val( ++next_unknown_value, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
*htab_find_slot_with_hash( hash_table_0, x, e->value, INSERT) = e; 
slot = htab_find_slot_with_hash( htab, v10, hashval, ( insert_option)( create != 0)); 
return gen_lowpart_for_combine( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), value); 
if ( recog_data_0.insn != insn || insn[2].fld[0].rtint < 0 ) 
recog_data_0.insn = insn; 
if ( QTextBlock::operator<( op0, op1) ) 
if ( QTextBlock::operator<( op2, op3) ) 
if ( !insn_data_0[icode].operand->predicate( targeta, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) ) 
if ( !insn_data_0[icode].operand->predicate( targeta, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) ) 
subtarget = gen_reg_rtx( ( machine_mode)*( ( unsigned __int16 *)insn_data_0[icode].operand + 8)); 
subtarget = gen_reg_rtx( ( machine_mode)*( ( unsigned __int16 *)insn_data_0[icode].operand + 8)); 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)) ) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)) ) 
if ( !insn_data_0[icode].operand[2].predicate( 
op2b = copy_to_mode_reg( ( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8), op2b); 
op2b = copy_to_mode_reg( ( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8), op2b); 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[3] + 8)) ) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[3] + 8)) ) 
v3 = simplify_gen_unary( code, mode, true0, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint)); 
v4 = simplify_gen_unary( code, mode, false0, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint), 
|| ( v21 = swap_condition( ( rtx_code)( unsigned __int16)*( _DWORD *)cond0), 
( rtx_code)( unsigned __int16)*( _DWORD *)operand1, 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operand1), 
fancy_abort( &off_88ECD0[4], 3339, "verify_initial_elim_offsets"); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
max = first_rtl_op( ( tree_code)( unsigned __int8)*( ( _DWORD *)&xa->common + 4)); 
classa = mode_class_0[mode]; 
mode0 = *( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8); 
mode1 = *( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8); 
if ( !insn_data_0[icode].operand[1].predicate( xop0, mode0) ) 
if ( !insn_data_0[icode].operand[2].predicate( xop1, mode1) ) 
if ( !insn_data_0[icode].operand->predicate( targ0b, mode) || !insn_data_0[icode].operand[3].predicate( targ1b, mode) ) 
if ( !insn_data_0[icode].operand->predicate( targ0b, mode) || !insn_data_0[icode].operand[3].predicate( targ1b, mode) ) 
pat = insn_data_0[icode].genfun( targ0b, xop0, xop1, targ1b); 
v4 = gen_rtx( ( rtx_code)( unsigned __int16)*( _DWORD *)operand3, V4SImode, operand1, operand2); 
tree v13; // rax 
tree v34; // [rsp+78h] [rbp-38h] 
tree call_expr; // [rsp+80h] [rbp-30h] 
v4 = gen_rtx( ( rtx_code)( unsigned __int16)*( _DWORD *)operand3, V4SImode, operand1, operand2); 
*( _OWORD *)to_elt->bits = *( _OWORD *)from_ptr->bits; 
rtx insn; // [rsp+50h] [rbp-20h] 
for ( insn = bb->end; ; insn = ( rtx)insn[1] ) 
for ( insn = bb->end; ; insn = ( rtx)insn[1] ) 
if ( insn ) 
v3 = insn != ( rtx)bb->head[1]; 
uid = insn->fld[0].rtuint; 
if ( rtx_class[( unsigned __int16)*( _DWORD *)insn] == 105 ) 
return output_832_patterns[locality]; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)link->fld[0].rtwint), 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)set->fld[0].rtwint)] != MODE_COMPLEX_INT ) 
v33 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)set->fld[0].rtwint)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v26 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
const_reg = gen_rtx_REG( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), i); 
reg_sum = gen_rtx_fmt_ee( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), const_reg, base); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)usage_rtx)] != MODE_COMPLEX_INT ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)subreg), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)usedreg)); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)usedreg)] != MODE_COMPLEX_INT ) 
v40 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)usedreg)] == MODE_COMPLEX_FLOAT; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)subreg_0), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)setreg)); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)setreg)] != MODE_COMPLEX_INT ) 
v36 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)setreg)] == MODE_COMPLEX_FLOAT; 
|| ssize > usize && ureg >= 53 && usize < qty_0[*( ( int *)reg_qty + ureg)].size 
&& reg_meets_class_p( sreg, qty_0[*( ( int *)reg_qty + ureg)].min_class) ) 
*( ( _DWORD *)reg_next_in_qty + sreg) = qty_0[sqty].first_reg; 
qty_0[sqty].first_reg = sreg; 
qty_0[sqty].n_calls_crossed += *( _DWORD *)( reg_n_info->data.l[sreg] + 32); 
qty_0[sqty].n_refs += *( _DWORD *)( reg_n_info->data.l[sreg] + 16); 
qty_0[sqty].freq += *( _DWORD *)( reg_n_info->data.l[sreg] + 20); 
fatal_insn_not_found( insn, "insn-attrtab.c", 16766, "get_attr_modrm"); 
v3 = memory_operand( recog_data_0.operand[1], VOIDmode) != 0; 
v3 = memory_operand( recog_data_0.operand[0], VOIDmode) != 0; 
v3 = flag_pic && symbolic_operand( recog_data_0.operand[1], SImode) 
|| !register_operand( recog_data_0.operand[0], VOIDmode) 
|| !immediate_operand( recog_data_0.operand[1], VOIDmode); 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], SImode) 
|| !register_operand( recog_data_0.operand[0], VOIDmode) 
|| !immediate_operand( recog_data_0.operand[1], VOIDmode)); 
v3 = !register_operand( recog_data_0.operand[0], VOIDmode) 
|| !immediate_operand( recog_data_0.operand[1], VOIDmode); 
|| !register_operand( recog_data_0.operand[0], VOIDmode) 
|| !immediate_operand( recog_data_0.operand[1], VOIDmode); 
|| !register_operand( recog_data_0.operand[0], VOIDmode) 
|| !immediate_operand( recog_data_0.operand[1], VOIDmode)); 
v3 = !register_operand( recog_data_0.operand[0], VOIDmode) || !immediate_operand( recog_data_0.operand[1], VOIDmode); 
v3 = !register_operand( recog_data_0.operand[0], VOIDmode) || !immediate_operand( recog_data_0.operand[1], VOIDmode); 
|| !register_operand( recog_data_0.operand[0], VOIDmode) 
deps_0 tmp_deps; // [rsp+10h] [rbp-80h] BYREF 
init_deps( &tmp_deps); 
sched_analyze( &tmp_deps, heada, taila); 
free_deps( &tmp_deps); 
pfile = ( cpp_reader_0 *)xcalloc( 1uLL, 0x340uLL); 
|| lang_hooks_0.tree_inlining.tree_chain_matters_p( *tp) ) 
|| lang_hooks_0.tree_inlining.tree_chain_matters_p( *tp) 
else if ( ( sch_istable[c] & 0x10) != 0 ) 
*( _OWORD *)&os.diagnostic_count[4] = *( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4]; 
*( _OWORD *)&os.diagnostic_count[4] = *( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4]; 
v1 = *( _OWORD *)&diagnostic_buffer->state.prefix; 
v2 = *( _OWORD *)&diagnostic_buffer->state.indent_skip; 
v3 = *( _OWORD *)&diagnostic_buffer->state.cursor; 
*( _OWORD *)os.diagnostic_count = *( _OWORD *)diagnostic_buffer->state.diagnostic_count; 
*( _OWORD *)&os.cursor = v3; 
*( _OWORD *)&os.indent_skip = v2; 
lang_hooks_0.set_yydebug( 1); 
return gen_rtx_fmt_e( CLOBBER, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v2), v2); 
fatal_insn_not_found( insn, "insn-attrtab.c", 19258, "get_attr_pent_pair"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) ) 
&& symbolic_operand( recog_data_0.operand[1], SImode) 
&& ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode)) ) 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
else if ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0 ) 
if ( which_alternative || memory_operand( recog_data_0.operand[1], VOIDmode) ) 
&& symbolic_operand( recog_data_0.operand[1], DImode) 
&& ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode)) ) 
if ( which_alternative != 1 || memory_operand( recog_data_0.operand[1], VOIDmode) ) 
|| pic_symbolic_operand( recog_data_0.operand[2], DImode) 
|| pic_symbolic_operand( recog_data_0.operand[2], SImode) 
|| pic_symbolic_operand( recog_data_0.operand[2], SImode) 
else if ( ( which_alternative == 2 || incdec_operand( recog_data_0.operand[2], HImode)) 
*( _QWORD *)&mem[1] = get_mem_attrs( v6, expr, v5, v4, align, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)mem)); 
&& mode_class_0[( unsigned __int8)HIBYTE( WORD2( inner_array_type->block.abstract_origin)) >> 1] != MODE_INT 
&& mode_class_0[( unsigned __int8)HIBYTE( WORD2( inner_array_type->block.abstract_origin)) >> 1] != MODE_COMPLEX_INT ) 
mode0 = *( ( unsigned __int16 *)insn_data_0[icode].operand + 8); 
v2 = &insn_data_0[icode]; 
if ( mode_class_0[*( ( unsigned __int16 *)&v2->operand[1] + 8)] == MODE_VECTOR_INT 
|| mode_class_0[*( ( unsigned __int16 *)&v2->operand[1] + 8)] == MODE_VECTOR_FLOAT ) 
if ( !insn_data_0[icode].operand[1].predicate( op1, mode1) ) 
pat = insn_data_0[icode].genfun( op0a, op1); 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( type->block.abstract_origin)) >> 1)); 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( type->block.abstract_origin)) >> 1)); 
fatal_insn_not_found( insn, "insn-attrtab.c", 7902, "pent_uv_unit_ready_cost"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) || ix86_cpu != PROCESSOR_PENTIUM ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) || ix86_cpu != PROCESSOR_PENTIUM ) 
|| !memory_operand( recog_data_0.operand[1], VOIDmode) 
|| !q_regs_operand( recog_data_0.operand[0], QImode) 
|| !q_regs_operand( recog_data_0.operand[0], QImode) 
|| !q_regs_operand( recog_data_0.operand[0], QImode) 
|| !q_regs_operand( recog_data_0.operand[0], QImode) 
if ( which_alternative || memory_operand( recog_data_0.operand[1], VOIDmode) || ix86_cpu != PROCESSOR_PENTIUM ) 
if ( which_alternative == 1 && !memory_operand( recog_data_0.operand[1], VOIDmode) && ix86_cpu == PROCESSOR_PENTIUM ) 
&& incdec_operand( recog_data_0.operand[2], DImode) 
|| incdec_operand( recog_data_0.operand[2], DImode) 
&& incdec_operand( recog_data_0.operand[2], DImode) 
|| incdec_operand( recog_data_0.operand[2], DImode) 
|| !incdec_operand( recog_data_0.operand[2], DImode) 
|| ( incdec_operand( recog_data_0.operand[2], DImode) 
&& ( !incdec_operand( recog_data_0.operand[2], DImode) 
&& incdec_operand( recog_data_0.operand[2], SImode) 
fatal_insn_not_found( insn, "insn-attrtab.c", 11973, "get_attr_athlon_fpunits"); 
&& ( register_operand( recog_data_0.operand[1], SImode) 
|| immediate_operand( recog_data_0.operand[1], VOIDmode)) ) 
&& ( register_operand( recog_data_0.operand[1], SImode) 
|| immediate_operand( recog_data_0.operand[1], VOIDmode)) ) 
else if ( register_operand( recog_data_0.operand[1], SImode) 
|| immediate_operand( recog_data_0.operand[1], VOIDmode) ) 
&& ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode)) ) 
&& ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode)) ) 
&& ( register_operand( recog_data_0.operand[1], SImode) 
|| immediate_operand( recog_data_0.operand[1], VOIDmode)) ) 
if ( mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( which_alternative || mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( which_alternative || !mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( mult_operator( recog_data_0.operand[3], XFmode) ) 
if ( mult_operator( recog_data_0.operand[3], TFmode) ) 
if_stack_0 = ( if_elt *)xrealloc( if_stack_0, 32LL * if_stack_space); 
if_stack_0 = ( if_elt *)xrealloc( if_stack_0, 32LL * if_stack_space); 
if_stack_0 = ( if_elt *)xmalloc( 0x140uLL); 
if_stack_0[if_stack_pointer].compstmt_count = compstmt_count; 
if_stack_0[if_stack_pointer].file = input_filename; 
if_stack_0[if_stack_pointer].line = lineno; 
if_stack_0[if_stack_pointer].needs_warning = 0; 
if_stack_0[if_stack_pointer++].if_stmt = if_stmt; 
info = &reg_avail_info_0[x->fld[0].rtuint]; 
v9 = info->last_set < *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint); 
v9 = info->first_set >= *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint); 
*( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint), 
if ( debug_info_level_0 == DINFO_LEVEL_VERBOSE 
filenamea = &arg0; 
value = ( cpp_hashnode_0 *)__h->object_base; 
if ( ( cpp_hashnode_0 *)__h->next_free == value ) 
memset( value, 0, sizeof( cpp_hashnode_0)); 
fatal_insn_not_found( insn, "insn-attrtab.c", 20358, "get_attr_prefix_rep"); 
v2 = ix86_memory_move_cost( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)set->fld[0].rtwint), GENERAL_REGS, 1); 
costs_0[v3].mem_cost -= frequency * v2; 
&& recog_data_0.n_operands >= 3 
&& *recog_data_0.constraints[1] == 48 
&& !*( ( _BYTE *)recog_data_0.constraints[1] + 1) 
&& ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 67 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 68 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 54 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 55 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 58 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 134 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 56 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 140) 
&& !rtx_equal_p( recog_data_0.operand[0], recog_data_0.operand[1]) 
while ( ( sch_istable[*( unsigned __int8 *)format_charsa] & 4) != 0 ) 
v3 = &arg0; 
*( _DWORD *)operands[1] = ( unsigned __int16)swap_condition( ( rtx_code)( unsigned __int16)*( _DWORD *)operands[1]) | *( _DWORD *)operands[1] & 0xFFFF0000; 
if ( const0_operand( operands[2], ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operands)) ) 
operands[2] = ix86_force_to_memory( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[1]), operands[1]); 
operands[2] = gen_rtx_fmt_e( FLOAT, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operands), operands[2]); 
ix86_free_from_memory( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[1])); 
if ( mode_class_0[mode] != MODE_INT || ix86_branch_cost < 2 ) 
if ( mode_class_0[mode] != MODE_INT || can_compare_p( GE, mode, ccp_jump) ) 
replace_call_placeholder( insn, sibcall_use_tail_recursion_0); 
v1 = sibcall_use_normal_0; 
v1 = sibcall_use_sibcall_0; 
if ( !init_library_initialized ) 
init_library_initialized = 1; 
mode0 = *( ( unsigned __int16 *)insn_data_0[d->icode].operand + 8); 
mode1 = *( ( unsigned __int16 *)&insn_data_0[d->icode].operand[1] + 8); 
if ( mode_class_0[*( ( unsigned __int16 *)insn_data_0[d->icode].operand + 8)] == MODE_VECTOR_INT 
if ( mode_class_0[*( ( unsigned __int16 *)insn_data_0[d->icode].operand + 8)] == MODE_VECTOR_INT 
|| mode_class_0[*( ( unsigned __int16 *)insn_data_0[d->icode].operand + 8)] == MODE_VECTOR_FLOAT ) 
|| mode_class_0[*( ( unsigned __int16 *)insn_data_0[d->icode].operand + 8)] == MODE_VECTOR_FLOAT ) 
if ( mode_class_0[mode1] == MODE_VECTOR_INT || mode_class_0[mode1] == MODE_VECTOR_FLOAT ) 
if ( mode_class_0[mode1] == MODE_VECTOR_INT || mode_class_0[mode1] == MODE_VECTOR_FLOAT ) 
if ( !insn_data_0[d->icode].operand->predicate( op0, mode0) ) 
if ( !insn_data_0[d->icode].operand[1].predicate( op1, mode1) ) 
pat = insn_data_0[d->icode].genfun( op0, op1, v3); 
fatal_insn_not_found( insn, "insn-attrtab.c", 2626, "athlon_fp_unit_ready_cost"); 
if ( mult_operator( recog_data_0.operand[3], SFmode) 
|| !mult_operator( recog_data_0.operand[3], SFmode) 
&& mult_operator( recog_data_0.operand[3], SFmode) 
&& !mult_operator( recog_data_0.operand[3], SFmode) 
if ( mult_operator( recog_data_0.operand[3], XFmode) 
|| !mult_operator( recog_data_0.operand[3], XFmode) 
if ( mult_operator( recog_data_0.operand[3], TFmode) 
|| !mult_operator( recog_data_0.operand[3], TFmode) 
else if ( mult_operator( recog_data_0.operand[3], SFmode) 
&& mult_operator( recog_data_0.operand[3], SFmode) 
else if ( mult_operator( recog_data_0.operand[3], DFmode) 
&& mult_operator( recog_data_0.operand[3], DFmode) 
else if ( mult_operator( recog_data_0.operand[3], XFmode) 
else if ( mult_operator( recog_data_0.operand[3], TFmode) 
for ( i = 0LL; i < 4 && ( expand_builtin_setjmp_receiver_elim_regs[i].from != 16 || *(int *)0x7D4134[2 * i] != 6); ++i ) 
v6 = gen_rtx_fmt_s( ASM_INPUT, VOIDmode, &arg0); 
loc_result = mem_loc_descriptor( rtl->fld[0].rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtl)); 
p = lookup( x, v2 & 0x1F, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
data_type = &arg0; 
data_type = &arg0; 
data_type = &arg0; 
v4 = *( ( _DWORD *)uid_cuid_1 + this_reg->insn->fld[0].rtint) >> 6; 
v3->elms[v4] |= 1LL << ( *( ( _BYTE *)uid_cuid_1 + 4 * this_reg->insn->fld[0].rtint) & 0x3F); 
if ( ( sch_istable[( unsigned __int8)c] & 0x204) == 0 ) 
if ( ( sch_istable[( unsigned __int8)c] & 0x204) == 0 ) 
return ( cpp_hashnode_0 *)ht_lookup( table, value, len, HT_ALLOCED); 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[1] = x2a; 
if ( ( unsigned __int16)*( _DWORD *)x1f == 47 && rtx_equal_p( x1f->fld[0].rtx, recog_data_0.operand[1]) ) 
if ( rtx_equal_p( x2h, recog_data_0.operand[0]) && ( ( 1 << ix86_cpu) & x86_partial_reg_stall) != 0 ) 
if ( rtx_equal_p( x2h, recog_data_0.operand[0]) && ( ( 1 << ix86_cpu) & x86_partial_reg_stall) == 0 ) 
recog_data_0.operand[1] = x3b; 
recog_data_0.operand[2] = x3c; 
&& ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 66 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[2] != 66) ) 
recog_data_0.operand[1] = x4a; 
recog_data_0.operand[2] = x4c; 
&& ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 66 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[2] != 66) ) 
recog_data_0.operand[1] = x4; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)desta)] != MODE_COMPLEX_INT ) 
v16 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)desta)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] != MODE_COMPLEX_INT ) 
v20 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] == MODE_COMPLEX_FLOAT; 
induction_1 *biv_inc; // [rsp+78h] [rbp-C8h] 
induction_1 *biv_inc; // [rsp+78h] [rbp-C8h] 
induction_1 *v; // [rsp+88h] [rbp-B8h] 
induction_1 *v; // [rsp+88h] [rbp-B8h] 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)iteration_var)] != MODE_INT ) 
v = ivs->regs[iteration_var->fld[0].rtuint].iv.info; 
if ( v->src_reg->fld[0].rtint >= loop_info->ivs.n_regs ) 
if ( ( ( *( ( _WORD *)v + 50) >> 4) & 1) == 0 || ( ( *( ( _WORD *)v + 50) >> 5) & 1) != 0 ) 
if ( ( ( *( ( _WORD *)v + 50) >> 4) & 1) == 0 || ( ( *( ( _WORD *)v + 50) >> 5) & 1) != 0 ) 
bl_0 = ivs->regs[v->src_reg->fld[0].rtuint].iv.class; 
mult1 = v->mult_val; 
v1 = extend_value_for_giv( v, increment); 
increment = fold_rtx_mult_add( mult1, v1, const_int_rtx[64], v->mode); 
induction_1 *same; // [rsp+50h] [rbp-90h] 
induction_1 *same; // [rsp+50h] [rbp-90h] 
induction_1 *v2; // [rsp+A0h] [rbp-40h] 
induction_1 *v2; // [rsp+A0h] [rbp-40h] 
induction_1 *v2a; // [rsp+A0h] [rbp-40h] 
induction_1 *v2a; // [rsp+A0h] [rbp-40h] 
induction_1 *v2b; // [rsp+A0h] [rbp-40h] 
induction_1 *v2b; // [rsp+A0h] [rbp-40h] 
induction_1 *v; // [rsp+A8h] [rbp-38h] 
induction_1 *v; // [rsp+A8h] [rbp-38h] 
induction_1 *va; // [rsp+A8h] [rbp-38h] 
induction_1 *va; // [rsp+A8h] [rbp-38h] 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v2 = v->next_iv; v2; v2 = v2->next_iv ) 
for ( v2 = v->next_iv; v2; v2 = v2->next_iv ) 
*( _OWORD *)decode = *( _OWORD *)ix86_sched_data.ppro.decode; 
if ( flag_float_store && written && mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)mem)] == MODE_FLOAT ) 
reg = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)mem)); 
bb_info_1 *bi; // [rsp+E0h] [rbp-A0h] 
bb_info_1 *bi; // [rsp+E0h] [rbp-A0h] 
bi = ( bb_info_1 *)v4->aux; 
bi = ( bb_info_1 *)v4->aux; 
if ( ( *( _BYTE *)bi & 1) == 0 ) 
if ( bi->succ_count ) 
if ( !bi->pred_count ) 
*( _BYTE *)bi = *( _BYTE *)bi & 0xFE | 1; 
*( _BYTE *)bi = *( _BYTE *)bi & 0xFE | 1; 
*( _BYTE *)bi = *( _BYTE *)bi & 0xFE | 1; 
*( _BYTE *)bi = *( _BYTE *)bi & 0xFE | 1; 
if ( ( *( _BYTE *)bi & 1) != 0 ) 
if ( bi->succ_count == 1 ) 
--bi->succ_count; 
if ( bi->pred_count == 1 ) 
--bi->pred_count; 
if ( ( unsigned __int16)*( _DWORD *)tmp == 61 && mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)tmp)] == MODE_INT ) 
v2 = reverse_condition( ( rtx_code)( unsigned __int16)*( _DWORD *)cond); 
return gen_rtx_fmt_ee( v2, ( machine_mode)BYTE2( *( _DWORD *)cond), tmp, *( rtx *)&cond[1]); 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)tmpb)] == MODE_INT ) 
comma = &arg0; 
value = ( cpp_buffer_0 *)pfile->buffer_ob.object_base; 
if ( ( cpp_buffer_0 *)pfile->buffer_ob.next_free == value ) 
memset( value, 0, sizeof( cpp_buffer_0)); 
rtx note_0; // [rsp+90h] [rbp-150h] 
rtx copy; // [rsp+C8h] [rbp-118h] 
rtx note; // [rsp+D0h] [rbp-110h] 
rtx stack_slot; // [rsp+E0h] [rbp-100h] 
rtx *real_label_map; // [rsp+108h] [rbp-D8h] 
rtx static_chain_value; // [rsp+118h] [rbp-C8h] 
rtx temp; // [rsp+130h] [rbp-B0h] BYREF 
memcpy( newlevel, &clear_binding_level, sizeof( binding_level)); 
if ( !*p || ( sch_istable[*( unsigned __int8 *)p] & 4) != 0 ) 
decode_g_option_level = read_integral_parameter( p, 0LL, 4); 
if ( decode_g_option_level ) 
v3 = decode_g_option_level; 
decode_g_option_level = v3; 
error( "use -gdwarf -g%d for DWARF v1, level %d", decode_g_option_level, decode_g_option_level); 
error( "use -gdwarf -g%d for DWARF v1, level %d", decode_g_option_level, decode_g_option_level); 
if ( decode_g_option_level == 2 ) 
if ( decode_g_option_level > 3 ) 
decode_g_option_level = debug_info_level_0; 
decode_g_option_level = debug_info_level_0; 
if ( da_len > 1 && !strncmp( arg, off_89BFDE, da_len) ) 
if ( decode_g_option_type_explicitly_set_p && da->debug_type && type != decode_g_option_selected_debug_type ) 
if ( decode_g_option_type_explicitly_set_p && da->debug_type && type != decode_g_option_selected_debug_type ) 
decode_g_option_debug_type_names[decode_g_option_selected_debug_type]); 
fprintf( outfile, "\n%s%*s", print_rtx_head, 2 * indent, &arg0); 
fprintf( outfile, "\n%s%*s", print_rtx_head, 2 * indent, &arg0); 
fprintf( outfile, "\n%s%*s", print_rtx_head, 2 * indent, &arg0); 
fprintf( outfile, off_8068CF, ( unsigned int)( in_rtx->fld[0].rtint - 37 + 8)); 
fputs( print_rtx_qi_name[in_rtx->fld[0].rtuint], outfile); 
fputs( print_rtx_hi_name[in_rtx->fld[0].rtuint], outfile); 
fputs( print_rtx_hi_name[in_rtx->fld[0].rtuint], outfile); 
set_diagnostic_context( &dc, msgid, ( va_list_0 *)ap, input_filename, lineno, flag_pedantic_errors == 0); 
if ( mode_class_0[mode] != MODE_INT ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)outer), 
v2 = gen_rtx_fmt_e( USE, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), x->fld[0].rtx); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint))) == 0 ) 
temp = gen_rtx_fmt_e( ZERO_EXTEND, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), x->fld[0].rtx); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x))) == 0 ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x))) == 0 ) 
tree_node *v2; // rax 
v2 = field_type( tree_node); 
size = simple_type_size_in_bits( v2) >> 3; 
&& mode_class_0[mode] != MODE_INT 
&& mode_class_0[mode] != MODE_PARTIAL_INT ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 
src->fld[0].rtwint - reg_offset_0[regno]); 
reg_offset_0[regno] = src->fld[0].rtwint; 
base_offset = reg_offset_0[src->fld[0].rtuint]; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 
base_offset + added_offset - reg_offset_0[regno]); 
reg_offset_0[regno] = sext_for_mode( 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 
bi = ( block_info_0)block->aux; 
fatal_insn_not_found( insn, "insn-attrtab.c", 2669, "athlon_muldiv_unit_ready_cost"); 
v1 = gen_rtx_fmt_ee( reversed_code, ( machine_mode)BYTE2( *( _DWORD *)comp), comp->fld[0].rtx, *( rtx *)&comp[1]); 
return new_loc_descr( ( dwarf_location_atom)( reg + 80), 0LL, 0LL); 
recog_data_0.operand[1] = x2y; 
recog_data_0.operand[2] = x2z; 
recog_data_0.operand[1] = x2; 
recog_data_0.operand[2] = x2a; 
recog_data_0.operand[1] = x2f; 
recog_data_0.operand[2] = x2g; 
recog_data_0.operand[1] = x2l; 
recog_data_0.operand[2] = x2m; 
recog_data_0.operand[1] = x2bk; 
recog_data_0.operand[2] = x2bl; 
recog_data_0.operand[1] = x4c; 
recog_data_0.operand[2] = x4d; 
&& ( !memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), xa->fld[0].rtx) 
&& !push_operand( xa, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa)) 
&& ( !memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ya), ya->fld[0].rtx) 
fatal_insn_not_found( insn, "insn-attrtab.c", 7919, "pent_uv_unit_blockage_range"); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 
fatal_insn_not_found( insn, "insn-attrtab.c", 2686, "athlon_muldiv_unit_blockage_range"); 
rtx v8; // rax 
rtx *v32; // rax 
rtx v37; // rax 
rtx *v69; // rdx 
rtx v71; // [rsp+10h] [rbp-530h] 
rtx v73; // [rsp+20h] [rbp-520h] 
rtx v110; // [rsp+F8h] [rbp-448h] 
rtx v118; // [rsp+130h] [rbp-410h] 
rtx *v123; // [rsp+158h] [rbp-3E8h] 
rtx v124; // [rsp+160h] [rbp-3E0h] 
v5 = ( const char *)&unk_80265E; 
v4 = ( const char *)&unk_80265E; 
name = &arg0; 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 28467, "k6_alux_unit_conflict_cost"); 
if ( general_operand( recog_data_0.operand[0], QImode) ) 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
if ( get_attr_type( executing_insn) == TYPE_IMOVX && general_operand( recog_data_0.operand[0], QImode) ) 
if ( ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
else if ( general_operand( recog_data_0.operand[0], QImode) ) 
if ( which_alternative || !general_operand( recog_data_0.operand[0], QImode) ) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
if ( which_alternative == 2 || !general_operand( recog_data_0.operand[0], QImode) ) 
if ( which_alternative == 3 || !general_operand( recog_data_0.operand[0], QImode) ) 
|| ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) ) 
&& const1_operand( recog_data_0.operand[2], VOIDmode) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
if ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) ) 
if ( general_operand( recog_data_0.operand[0], QImode) ) 
&& ( new_0 = gen_lowpart_if_possible( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), ent->const_rtx)) != 0LL ) 
if ( ( sch_istable[( unsigned __int8)*p] & 0x8C) == 0 && *p != 46 ) 
return &arg0; 
if ( *( _OWORD *)&nodea->block.vars <= __PAIR128__( -1LL, 0LL) ) 
result = expand_mult_add( b, reg, m, a, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 1); 
v1 = &arg0; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
else if ( flag_float_store && mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)goal)] == MODE_FLOAT ) 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)tem->fld[0].rtwint)] == MODE_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)tema->fld[0].rtwint)] == MODE_FLOAT 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v102 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v96 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v92 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v88 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target), 
x = adjust_address_1( mem, ( machine_mode)mode, offset, 1, 1); 
operands[4] = gen_rtx_REG( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operands), 17); 
diagnostic_for_asm( insn, msgid, ( va_list_0 *)ap, 0); 
memset( e, 0, sizeof( edge_def)); 
set_diagnostic_context( &dc, msgid, ( va_list_0 *)ap, input_filename, lineno, 1); 
if ( !statement_code_p( ( tree_code)( unsigned __int8)*( ( _DWORD *)&( *tpa)->common + 4)) ) 
rtx tem_0; // [rsp+68h] [rbp-A8h] 
rtx p_0; // [rsp+70h] [rbp-A0h] 
rtx p; // [rsp+78h] [rbp-98h] 
rtx pa; // [rsp+78h] [rbp-98h] 
rtx z; // [rsp+90h] [rbp-80h] 
rtx tem; // [rsp+98h] [rbp-78h] 
rtx tema; // [rsp+98h] [rbp-78h] 
rtx sub_0; // [rsp+A8h] [rbp-68h] 
rtx tem_2; // [rsp+F0h] [rbp-80h] 
rtx tem_1; // [rsp+100h] [rbp-70h] 
rtx tem_0; // [rsp+110h] [rbp-60h] 
rtx tem; // [rsp+120h] [rbp-50h] 
rtx op1a; // [rsp+158h] [rbp-18h] 
op1a = op1; 
tem = gen_lowpart_if_possible( inner_mode, op1); 
if ( tem ) 
fatal_insn_not_found( insn, "insn-attrtab.c", 11506, "pent_np_unit_blockage_range"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) ) 
|| !q_regs_operand( recog_data_0.operand[0], QImode) 
&& q_regs_operand( recog_data_0.operand[0], QImode) 
|| !q_regs_operand( recog_data_0.operand[0], QImode) 
|| memory_operand( recog_data_0.operand[1], VOIDmode) 
|| !which_alternative && !memory_operand( recog_data_0.operand[1], VOIDmode)) ) 
if ( which_alternative || memory_operand( recog_data_0.operand[1], VOIDmode) ) 
|| memory_operand( recog_data_0.operand[1], VOIDmode) 
|| which_alternative == 1 && !memory_operand( recog_data_0.operand[1], VOIDmode)) ) 
if ( which_alternative == 1 && !memory_operand( recog_data_0.operand[1], VOIDmode) ) 
|| !const_int_operand( recog_data_0.operand[2], VOIDmode) 
&& const_int_operand( recog_data_0.operand[2], VOIDmode)) ) 
&& const_int_operand( recog_data_0.operand[2], VOIDmode) ) 
|| !const_int_operand( recog_data_0.operand[2], VOIDmode) 
|| get_attr_imm_disp( insn) != IMM_DISP_TRUE && const_int_operand( recog_data_0.operand[2], VOIDmode)) ) 
if ( get_attr_imm_disp( insn) != IMM_DISP_TRUE && const_int_operand( recog_data_0.operand[2], VOIDmode) ) 
if ( ( nonzero_bits( other, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest)) & v5) != 0 ) 
v3 = simplify_shift_const( 0LL, LSHIFTRT, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)src), other, pos); 
depth = spelling_0 - spelling_base; 
spelling_0 = &spelling_base[depth]; 
spelling_0->kind = 3; 
spelling_0->u.i = bounds; 
++spelling_0; 
sprintf( buffer->digit_buffer, off_7FB6A9, i); 
tt = ( tree_node *)*( &global_trees + 27); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[reg])] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[reg])] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v17 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
fancy_abort( &off_88ECD0[4], 4663, "reload_reg_reaches_end_p"); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)notes->fld[0].rtwint)] != MODE_COMPLEX_INT ) 
v34 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)notes->fld[0].rtwint)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)notes->fld[0].rtwint)] != MODE_COMPLEX_INT ) 
v30 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)notes->fld[0].rtwint)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[reg_raw_mode[ia]] != MODE_COMPLEX_INT ) 
v26 = mode_class_0[reg_raw_mode[ia]] == MODE_COMPLEX_FLOAT; 
( rtx_code)( unsigned __int16)*( _DWORD *)notes, 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)notes), 
if ( mode_class_0[mode] != MODE_CC ) 
if ( mode_class_0[mode] == MODE_CC ) 
|| mode_class_0[mode] == MODE_CC 
|| mode_class_0[mode] == MODE_FLOAT 
|| mode_class_0[mode] == MODE_COMPLEX_FLOAT 
|| mode_class_0[mode] == MODE_VECTOR_FLOAT) ) 
deps_0 *succ_deps; // [rsp+50h] [rbp-30h] 
deps_0 *succ_deps; // [rsp+50h] [rbp-30h] 
succ_deps = &bb_deps[bb_succ]; 
succ_rl = &succ_deps->reg_last[reg]; 
namea = lang_hooks_0.init( name); 
timevar_push( TV_SYMOUT_0); 
timevar_pop( TV_SYMOUT_0); 
if ( ( sch_istable[( unsigned __int8)ch_0] & 0xC00) == 0 ) 
v4 = ~( ( sch_istable[( unsigned __int8)ch_0a] & 0xC00) != 0); 
fatal_insn_not_found( insn, "insn-attrtab.c", 6280, "k6_alux_unit_blockage_range"); 
fatal_insn_not_found( insn, "insn-attrtab.c", 6263, "k6_alux_unit_ready_cost"); 
if ( ix86_cpu == PROCESSOR_K6 && general_operand( recog_data_0.operand[0], QImode) ) 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
&& ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
if ( ix86_cpu == PROCESSOR_K6 && ( which_alternative || general_operand( recog_data_0.operand[0], QImode)) ) 
if ( ix86_cpu == PROCESSOR_K6 && !which_alternative && general_operand( recog_data_0.operand[0], QImode) ) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
if ( ix86_cpu == PROCESSOR_K6 && which_alternative != 2 && general_operand( recog_data_0.operand[0], QImode) ) 
if ( ix86_cpu == PROCESSOR_K6 && which_alternative != 3 && general_operand( recog_data_0.operand[0], QImode) ) 
|| get_attr_type( insn) == TYPE_ALU && general_operand( recog_data_0.operand[0], QImode)) ) 
|| ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode)) 
|| !const1_operand( recog_data_0.operand[2], VOIDmode) 
|| !general_operand( recog_data_0.operand[0], QImode)) ) 
|| !const1_operand( recog_data_0.operand[2], VOIDmode) 
sprintf( label, "*.%s%u", ( const char *)&off_8A2198, ( unsigned int)++assemble_end_function_labelno); 
sprintf( label, "*.%s%u", ( const char *)&off_8A2198, ( unsigned int)++assemble_end_function_labelno); 
fprintf( asm_out_file, ".%s%u:\n", ( const char *)&off_8A2198, ( unsigned int)assemble_end_function_labelno); 
fprintf( asm_out_file, ".%s%u:\n", ( const char *)&off_8A2198, ( unsigned int)assemble_end_function_labelno); 
value = lang_hooks_0.tree_inlining.convert_parm_for_inlining( p, elements, fn); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[i]), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[i]), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[i]), 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[regno])] != MODE_COMPLEX_INT ) 
v11 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[regno])] == MODE_COMPLEX_FLOAT; 
fancy_abort( &off_88ECD0[4], 573, "compute_use_by_pseudos"); 
rtx tem_2; // [rsp+220h] [rbp-E0h] 
rtx tem_0; // [rsp+258h] [rbp-A8h] BYREF 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_INT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT ) 
rtx v61; // [rsp+38h] [rbp-368h] 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint)); 
( machine_mode)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
if ( QTextBlock::operator<( x->fld[0].rtx, *( rtx *)&x[1]) ) 
( machine_mode)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
return simplify_relational_operation( code, ( machine_mode)BYTE2( *rtwint), x->fld[0].rtx, *( rtx *)&x[1]); 
recog_data_0.operand[2] = x3bn; 
recog_data_0.operand[3] = x3bo; 
recog_data_0.operand[0] = x2cw; 
if ( !rtx_equal_p( x2cx->fld[0].rtx, recog_data_0.operand[2]) ) 
recog_data_0.operand[1] = x2cy; 
if ( !rtx_equal_p( x2cz->fld[0].rtx, recog_data_0.operand[3]) ) 
recog_data_0.operand[2] = x3bn; 
recog_data_0.operand[3] = x3br; 
recog_data_0.operand[0] = x2dc; 
if ( !rtx_equal_p( x2dd->fld[0].rtx, recog_data_0.operand[2]) ) 
recog_data_0.operand[1] = x2de; 
temp = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
if ( !display_target_options_displayed ) 
display_target_options_displayed = 1; 
e = cselib_lookup( x, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 0); 
e_0 = cselib_lookup( y, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)y), 0); 
if_stmt = if_stack_0[if_stack_pointer - 1].if_stmt; 
id = ( inline_data_0 *)data; 
if ( lang_hooks_0.tree_inlining.start_inlining( fn) ) 
lang_hooks_0.tree_inlining.end_inlining( fn); 
add_dependence( insn, link->fld[0].rtx, ( reg_note)( unsigned __int8)BYTE2( *( _DWORD *)link)); 
if ( !parmlist_tags_warning_already ) 
parmlist_tags_warning_already = 1; 
fatal_insn_not_found( insn, "insn-attrtab.c", 6297, "ppro_p34_unit_ready_cost"); 
fprintf( filea, off_8069E2, scale); 
size = ( const char *)&unk_806994; 
size = ( const char *)&unk_806994; 
fprintf( filea, &aEndOfChildrenO[23], l); 
( rtx_code)( unsigned __int16)*( _DWORD *)xa, 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint), 
fputs( off_8081D6, filea); 
( rtx_code)( unsigned __int16)*( _DWORD *)xa, 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint), 
( rtx_code)( unsigned __int16)*( _DWORD *)xa, 
induction_1 *v; // [rsp+78h] [rbp-58h] 
induction_1 *v; // [rsp+78h] [rbp-58h] 
induction_1 *va; // [rsp+78h] [rbp-58h] 
induction_1 *va; // [rsp+78h] [rbp-58h] 
induction_1 *vb; // [rsp+78h] [rbp-58h] 
induction_1 *vb; // [rsp+78h] [rbp-58h] 
induction_1 *vc; // [rsp+78h] [rbp-58h] 
induction_1 *vc; // [rsp+78h] [rbp-58h] 
induction_1 *vd; // [rsp+78h] [rbp-58h] 
induction_1 *vd; // [rsp+78h] [rbp-58h] 
for ( v = bl_0->giv; ; v = v->next_iv ) 
for ( v = bl_0->giv; ; v = v->next_iv ) 
for ( v = bl_0->giv; ; v = v->next_iv ) 
if ( !v ) 
if ( v->giv_type == DEST_REG && ( rtx)x->fld[0].rtwint == v->dest_reg ) 
if ( v->giv_type == DEST_REG && ( rtx)x->fld[0].rtwint == v->dest_reg ) 
for ( vd = bl_0->giv; ; vd = vd->next_iv ) 
for ( vd = bl_0->giv; ; vd = vd->next_iv ) 
timevar_push( TV_SYMOUT_0); 
timevar_pop( TV_SYMOUT_0); 
fatal_insn_not_found( insn, "insn-attrtab.c", 2186, "athlon_fp_add_unit_ready_cost"); 
if ( ( mode_class_0[mode] == MODE_FLOAT 
|| mode_class_0[mode] == MODE_COMPLEX_FLOAT 
|| mode_class_0[mode] == MODE_VECTOR_FLOAT) 
v4 = ( int)( ( double)( qty_0[q2].size * qty_0[q2].freq * floor_log2_wide( qty_0[q2].n_refs)) 
v4 = ( int)( ( double)( qty_0[q2].size * qty_0[q2].freq * floor_log2_wide( qty_0[q2].n_refs)) 
v4 = ( int)( ( double)( qty_0[q2].size * qty_0[q2].freq * floor_log2_wide( qty_0[q2].n_refs)) 
/ ( double)( qty_0[q2].death - qty_0[q2].birth) 
/ ( double)( qty_0[q2].death - qty_0[q2].birth) 
v2 = ( int)( ( double)( qty_0[q1].size * qty_0[q1].freq * floor_log2_wide( qty_0[q1].n_refs)) 
v2 = ( int)( ( double)( qty_0[q1].size * qty_0[q1].freq * floor_log2_wide( qty_0[q1].n_refs)) 
v2 = ( int)( ( double)( qty_0[q1].size * qty_0[q1].freq * floor_log2_wide( qty_0[q1].n_refs)) 
/ ( double)( qty_0[q1].death - qty_0[q1].birth) 
/ ( double)( qty_0[q1].death - qty_0[q1].birth) 
superset_entry = ( alias_set_entry_0)xmalloc( 0x18uLL); 
strcpy( visual_tbl, &arg0); 
sprintf( label_id, "*.%s%u", ( const char *)&off_7F9871, current_funcdef_number); 
sprintf( label_id, "*.%s%u", ( const char *)&off_7F9875, current_funcdef_number); 
if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE ) 
if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE ) 
if ( mode_class_0[mode] != MODE_INT || can_compare_p( op, mode, ccp_jump) ) 
if ( ( mode_class_0[*( ( unsigned __int8 *)*reg + 2)] | 4) != 6 ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ix86_compare_op0)); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)ix86_compare_op0)] == MODE_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)ix86_compare_op0)] == MODE_COMPLEX_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)ix86_compare_op0)] == MODE_VECTOR_FLOAT ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)ix86_compare_op0)] == MODE_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)ix86_compare_op0)] == MODE_COMPLEX_FLOAT 
timevar_push( TV_VARCONST_0); 
timevar_pop( TV_VARCONST_0); 
timevar_push( TV_SYMOUT_0); 
timevar_pop( TV_SYMOUT_0); 
temp = copy_to_mode_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)loc), copy); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dst->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dst)); 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v21 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
reg_offset_0[regnoa] = *( _QWORD *)( *( _QWORD *)&set[1] + 8LL); 
offset = reg_offset_0[base_reg->fld[0].rtuint]; 
offset = reg_offset_0[*( unsigned int *)( *( _QWORD *)&src[1] + 8LL)]; 
reg_offset_0[base_regno] = 0LL; 
reg_offset_0[regnoa] = sext_for_mode( dst_mode, reg_offset_0[base_regno] + offset); 
reg_offset_0[regnoa] = sext_for_mode( dst_mode, reg_offset_0[base_regno] + offset); 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v16 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[mode] != MODE_FLOAT ) 
fancy_abort( &off_88ECD0[4], 4527, "reload_reg_free_p"); 
for ( loop_ptr = ( loop_1 *)loop_chain->data.l[0]; ; loop_ptr = ( loop_1 *)loop_chain->data.l[loop_idx] ) 
for ( loop_ptr = ( loop_1 *)loop_chain->data.l[0]; ; loop_ptr = ( loop_1 *)loop_chain->data.l[loop_idx] ) 
if ( statement_code_p( ( tree_code)( unsigned __int8)*( ( _DWORD *)&exp->common + 4)) && exp->common.chain ) 
to = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)expr_set->fld[0].rtwint)); 
v10 = *( tree_node **)( *( _QWORD *)&newa[1] + 8LL); 
|| mode_class_0[mode] == MODE_INT 
|| mode_class_0[mode] == MODE_PARTIAL_INT ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] != MODE_COMPLEX_INT ) 
v11 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] == MODE_COMPLEX_FLOAT; 
undo->next = undobuf_0.frees; 
undobuf_0.frees = undo; 
undobuf_0.undos = 0LL; 
fatal_insn_not_found( insn, "insn-attrtab.c", 2152, "athlon_fp_store_unit_ready_cost"); 
fatal_insn_not_found( insn, "insn-attrtab.c", 3477, "athlon_vectordec_unit_ready_cost"); 
edge_list_0 = pre_edge_lcm( gcse_file, n_exprs, transp, comp, antloc, ae_kill, &pre_insert_map, &pre_delete_map); 
fatal_insn_not_found( insn, "insn-attrtab.c", 21978, "get_attr_type"); 
else if ( flag_pic && symbolic_operand( recog_data_0.operand[1], SImode) ) 
&& aligned_operand( recog_data_0.operand[1], HImode) ) 
if ( register_operand( recog_data_0.operand[0], QImode) 
&& ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0) ) 
if ( register_operand( recog_data_0.operand[0], QImode) 
&& ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0) ) 
if ( register_operand( recog_data_0.operand[0], QImode) 
&& ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0) ) 
if ( q_regs_operand( recog_data_0.operand[0], QImode) && ( ( 1 << ix86_cpu) & x86_movx) == 0 ) 
if ( flag_pic && symbolic_operand( recog_data_0.operand[1], DImode) ) 
if ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], DImode) ) 
else if ( incdec_operand( recog_data_0.operand[2], DImode) ) 
if ( incdec_operand( recog_data_0.operand[2], DImode) ) 
if ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
recog_data_0.operand[1] = x2; 
recog_data_0.operand[2] = x2a; 
recog_data_0.operand[1] = x2f; 
recog_data_0.operand[2] = x2g; 
recog_data_0.operand[1] = x4; 
recog_data_0.operand[2] = x4a; 
recog_data_0.operand[1] = x2u; 
recog_data_0.operand[2] = x2v; 
recog_data_0.operand[1] = x2s; 
recog_data_0.operand[2] = x2t; 
recog_data_0.operand[1] = x2o; 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op)] != MODE_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op)] != MODE_COMPLEX_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op)] != MODE_VECTOR_FLOAT ) 
induction_1 *v; // [rsp+48h] [rbp-88h] 
induction_1 *v; // [rsp+48h] [rbp-88h] 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa)) ) 
v = ( induction_1 *)xmalloc( 0xA8uLL); 
v = ( induction_1 *)xmalloc( 0xA8uLL); 
v, 
v->mem = xa; 
fatal_insn_not_found( insn, "insn-attrtab.c", 1990, "result_ready_cost"); 
if ( ix86_cpu == PROCESSOR_PENTIUMPRO && memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( ix86_cpu == PROCESSOR_PENTIUMPRO && memory_operand( recog_data_0.operand[1], VOIDmode) 
|| ix86_cpu == PROCESSOR_PENTIUM && memory_operand( recog_data_0.operand[1], VOIDmode) ) 
|| !symbolic_operand( recog_data_0.operand[1], SImode) ) 
if ( ix86_cpu == PROCESSOR_PENTIUMPRO && !which_alternative && memory_operand( recog_data_0.operand[1], VOIDmode) ) 
|| !symbolic_operand( recog_data_0.operand[1], DImode) ) 
&& memory_operand( recog_data_0.operand[1], VOIDmode) ) 
&& ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], DImode)) 
&& !incdec_operand( recog_data_0.operand[2], DImode) 
&& !incdec_operand( recog_data_0.operand[2], DImode) 
&& ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], SImode)) 
else if ( ix86_cpu == PROCESSOR_K6 && ( which_alternative || pic_symbolic_operand( recog_data_0.operand[2], SImode)) 
&& !incdec_operand( recog_data_0.operand[2], SImode) 
&& !incdec_operand( recog_data_0.operand[2], SImode) 
&& !incdec_operand( recog_data_0.operand[2], HImode) 
&& !incdec_operand( recog_data_0.operand[2], HImode) 
&& !incdec_operand( recog_data_0.operand[2], HImode) 
( rtx_code)( unsigned __int16)*( _DWORD *)*operands, 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( type->block.abstract_origin)) >> 1), 
rtx insn; // [rsp+60h] [rbp-30h] 
rtx etc_note; // [rsp+80h] [rbp-10h] 
rtx start_label; // [rsp+88h] [rbp-8h] 
start_label = cfun->stmt->x_loop_stack->data.cond.endif_label; 
if ( start_label == cfun->stmt->x_loop_stack->data.loop.continue_label ) 
emit_note_before( -94, start_label); 
for ( etc_note = start_label; etc_note; etc_note = etc_note[1].fld[0].rtx ) 
for ( etc_note = start_label; etc_note; etc_note = etc_note[1].fld[0].rtx ) 
for ( etc_note = start_label; etc_note; etc_note = etc_note[1].fld[0].rtx ) 
for ( etc_note = start_label; etc_note; etc_note = etc_note[1].fld[0].rtx ) 
for ( etc_note = start_label; etc_note; etc_note = etc_note[1].fld[0].rtx ) 
if ( ( unsigned __int16)*( _DWORD *)etc_note == 37 ) 
switch ( etc_note[2].fld[0].rtint ) 
etc_note = 0LL; 
if ( etc_note && optimize && !eh_regions && ( !debug_blocks || optimize >= 2) ) 
if ( etc_note[1].fld[0].rtwint ) 
*( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint), 
recog_data_0.operand[1] = x4a; 
recog_data_0.operand[2] = x3f; 
|| !ix86_binary_operator_ok( PLUS, DImode, recog_data_0.operand) ) 
recog_data_0.operand[1] = x3d; 
recog_data_0.operand[2] = x3e; 
recog_data_0.operand[2] = x3e; 
|| !ix86_binary_operator_ok( PLUS, DImode, recog_data_0.operand) ) 
recog_data_0.operand[1] = x3g; 
recog_data_0.operand[2] = x4c; 
|| !ix86_binary_operator_ok( MINUS, DImode, recog_data_0.operand) ) 
deps_0 tmp_deps; // [rsp+0h] [rbp-80h] BYREF 
memcpy( &tmp_deps, &bb_deps[bb], sizeof( tmp_deps)); 
memcpy( &tmp_deps, &bb_deps[bb], sizeof( tmp_deps)); 
sched_analyze( &tmp_deps, head, tail); 
propagate_deps( bba, &tmp_deps); 
free_deps( &tmp_deps); 
sprintf( label, "*.%s%u", "LC", ( unsigned int)const_labelno); 
++const_labelno; 
if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL ) 
if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_VERBOSE ) 
if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_VERBOSE ) 
classa = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)]; 
v2 = insn_data_0[optab_table[30]->handlers[( unsigned __int8)BYTE2( *( _DWORD *)x)].insn_code].genfun( x, y); 
if ( push_operand( xa, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa)) ) 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 31195, "pent_u_unit_blockage"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
|| incdec_operand( recog_data_0.operand[2], HImode) 
|| incdec_operand( recog_data_0.operand[2], HImode) 
if ( incdec_operand( recog_data_0.operand[2], HImode) 
if ( incdec_operand( recog_data_0.operand[2], HImode) 
|| ( ( ( 1 << ix86_cpu) & x86_double_with_add) == 0 || !const1_operand( recog_data_0.operand[2], VOIDmode)) 
&& const1_operand( recog_data_0.operand[2], VOIDmode) 
&& ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) 
|| !const1_operand( recog_data_0.operand[2], VOIDmode)) 
if ( ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) 
|| !const1_operand( recog_data_0.operand[2], VOIDmode)) 
else if ( ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) 
|| !const1_operand( recog_data_0.operand[2], VOIDmode)) 
&& const_int_operand( recog_data_0.operand[2], VOIDmode) 
&& const_int_operand( recog_data_0.operand[2], VOIDmode) 
&& const_int_operand( recog_data_0.operand[2], VOIDmode) 
&& const_int_operand( recog_data_0.operand[2], VOIDmode) 
type->type.align = get_mode_alignment( ( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( type->block.abstract_origin)) >> 1)); 
recog_data_0.insn = 0LL; 
recog_data_0.operand[0] = x1b; 
recog_data_0.operand[0] = x1b; 
recog_data_0.operand[0] = x1d; 
recog_data_0.operand[0] = x1i; 
recog_data_0.operand[1] = x1k; 
recog_data_0.operand[1] = x1j; 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[1] = ( rtx)x0[1]; 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[1] = ( rtx)x0[1]; 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[1] = ( rtx)x0[1]; 
subtarget = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)value)); 
op2a = negate_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)value), op2a); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)value), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)value->fld[0].rtwint), 
*( _OWORD *)ix86_sched_data.ppro.decode = ( unsigned __int64)insn; 
*( _OWORD *)ix86_sched_data.ppro.decode = ( unsigned __int64)insn; 
*( _OWORD *)ix86_sched_data.ppro.decode = 0uLL; 
while ( strchr( off_8A2756, *p) ) 
&& ( nzb = nonzero_bits( from, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)from)), exact_log2_wide( nzb) >= 0) ) 
&& num_sign_bit_copies( from, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)from)) == mode_bitsize[( unsigned __int8)BYTE2( *( _DWORD *)from)] ) 
v5 = reversed_comparison( cond, ( machine_mode)BYTE2( *( _DWORD *)cond), cond->fld[0].rtx, *( rtx *)&cond[1]); 
&& ( mode_class_0[mode] != MODE_FLOAT 
&& mode_class_0[mode] != MODE_COMPLEX_FLOAT 
&& mode_class_0[mode] != MODE_VECTOR_FLOAT 
&& ( mode_class_0[mode] != MODE_FLOAT 
&& mode_class_0[mode] != MODE_COMPLEX_FLOAT 
for ( p = spelling_base; p < spelling_0; ++p ) 
v6 = gen_rtx( ( rtx_code)( unsigned __int16)*( _DWORD *)operand1, VOIDmode, operand4, operand5); 
duplicate = *( tree_node **)( node->value + 48); 
induction_1 *next_induction; // [rsp+0h] [rbp-30h] 
induction_1 *next_induction; // [rsp+0h] [rbp-30h] 
induction_1 *next_inductiona; // [rsp+0h] [rbp-30h] 
induction_1 *next_inductiona; // [rsp+0h] [rbp-30h] 
induction_1 *induction; // [rsp+8h] [rbp-28h] 
induction_1 *induction; // [rsp+8h] [rbp-28h] 
induction_1 *inductiona; // [rsp+8h] [rbp-28h] 
induction_1 *inductiona; // [rsp+8h] [rbp-28h] 
/data/output_dir/patch/gcc/ida/clang/O0/gcc-clang-O0/loop_ivs_free/src/loop.c:5373:48: error: expected expression
next_induction = induction->next_iv; 
next_induction = induction->next_iv; 
free( induction); 
for ( inductiona = iv->giv; inductiona; inductiona = next_inductiona ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)flags)] != MODE_COMPLEX_INT ) 
v14 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)flags)] == MODE_COMPLEX_FLOAT; 
temg = gen_peephole2_1276( insn, recog_data_0.operand); 
temf = gen_peephole2_1275( insn, recog_data_0.operand); 
temh = gen_peephole2_1280( insn, recog_data_0.operand); 
temi = gen_peephole2_1281( insn, recog_data_0.operand); 
temj = gen_peephole2_1282( insn, recog_data_0.operand); 
recog_data_0.operand[0] = x2z; 
recog_data_0.operand[3] = x2ba; 
if ( rtx_equal_p( x2ba->fld[0].rtx, recog_data_0.operand[0]) ) 
recog_data_0.operand[1] = x3p; 
temk = gen_peephole2_1260( insn, recog_data_0.operand); 
if ( v7 && ( recog_data_0.operand[1] = x3o, rtx_equal_p( *( rtx *)&x2ba[1], recog_data_0.operand[0])) ) 
if ( v7 && ( recog_data_0.operand[1] = x3o, rtx_equal_p( *( rtx *)&x2ba[1], recog_data_0.operand[0])) ) 
teml = gen_peephole2_1261( insn, recog_data_0.operand); 
recog_data_0.operand[0] = x2z; 
&& insn_data_0[icode].operand->predicate( x, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) 
&& insn_data_0[icode].operand->predicate( x, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)) 
&& insn_data_0[icode].operand[1].predicate( 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)); 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)); 
&& insn_data_0[icode].operand[2].predicate( 
group = ( page_group_0 *)enda; 
group = ( page_group_0 *)( page - 32); 
return in_section_0 == in_data; 
node->value.macro = ( cpp_macro_0 *)new_answer; 
else if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)loop_info->final_value)] == MODE_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)loop_info->initial_value)] == MODE_FLOAT ) 
if ( mode_class_0[save_mode[regno]] != MODE_COMPLEX_INT ) 
v15 = mode_class_0[save_mode[regno]] == MODE_COMPLEX_FLOAT; 
v10 = gen_rtx_REG( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)mem), regno); 
if ( mode_class_0[( unsigned __int8)BYTE2( **( _DWORD **)this->loc)] != MODE_COMPLEX_INT ) 
v17 = mode_class_0[( unsigned __int8)BYTE2( **( _DWORD **)this->loc)] == MODE_COMPLEX_FLOAT; 
tmp && ix86_hard_regno_mode_ok( new_reg, ( machine_mode)( unsigned __int8)BYTE2( **( _DWORD **)tmp->loc)); 
v22 = *( tree_node **)( *( _QWORD *)&ref[1] + 8LL); 
if ( !lang_hooks_0.honor_readonly 
off_tree = ( tree_node *)*( &global_trees + 15); 
induction_1 *tv; // [rsp+20h] [rbp-20h] 
induction_1 *tv; // [rsp+20h] [rbp-20h] 
induction_1 *v; // [rsp+28h] [rbp-18h] 
induction_1 *v; // [rsp+28h] [rbp-18h] 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
if ( ( ( *( ( _WORD *)v + 50) >> 2) & 1) == 0 && !v->same ) 
if ( ( ( *( ( _WORD *)v + 50) >> 2) & 1) == 0 && !v->same ) 
if ( !v->new_reg ) 
v->new_reg = gen_reg_rtx( v->mode); 
v->new_reg = gen_reg_rtx( v->mode); 
for ( tv = bl_0->biv; tv; tv = tv->next_iv ) 
for ( tv = bl_0->biv; tv; tv = tv->next_iv ) 
for ( tv = bl_0->biv; tv; tv = tv->next_iv ) 
for ( tv = bl_0->biv; tv; tv = tv->next_iv ) 
insert_before = tv->insn; 
if ( tv->mult_val == const_int_rtx[65] ) 
if ( in_section_0 != in_data ) 
in_section_0 = in_data; 
fancy_abort( &off_88ECD0[4], 9527, "fixup_abnormal_edges"); 
predict_edge_def( e, PRED_LOOP_BRANCH, TAKEN_0); 
predict_edge( e, PRED_LOOP_EXIT, ( 10000 - predictor_info_0[9].hitrate) / exits); 
predict_edge_def( e_0, PRED_NORETURN, NOT_TAKEN_0); 
predict_edge_def( e_0a, PRED_ERROR_RETURN, NOT_TAKEN_0); 
predict_edge_def( e_0a, PRED_CALL, NOT_TAKEN_0); 
predict_insn_def( last_insn, PRED_POINTER, NOT_TAKEN_0); 
predict_insn_def( last_insn, PRED_POINTER, TAKEN_0); 
predict_insn_def( last_insn, PRED_UNCONDITIONAL, ( prediction)( cond != const_int_rtx[64])); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cond->fld[0].rtwint)] != MODE_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cond->fld[0].rtwint)] != MODE_COMPLEX_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cond->fld[0].rtwint)] != MODE_VECTOR_FLOAT 
predict_insn_def( last_insn, PRED_OPCODE_NONEQUAL, TAKEN_0); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cond->fld[0].rtwint)] != MODE_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cond->fld[0].rtwint)] != MODE_COMPLEX_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cond->fld[0].rtwint)] != MODE_VECTOR_FLOAT 
if ( apply_result_size_size < 0 ) 
apply_result_size_size = 0; 
if ( apply_result_size_size % align ) 
apply_result_size_size = align * ( ( align + apply_result_size_size - 1) / align); 
apply_result_size_size = align * ( ( align + apply_result_size_size - 1) / align); 
apply_result_size_size += mode_size[best_mode]; 
apply_result_size_size = 116; 
return apply_result_size_size; 
return gen_rtx_fmt_ee( EXPR_LIST, ( machine_mode)kind, val, next); 
memcpy( &all_vd[b], &all_vd[bb->pred->src->index], sizeof( value_data)); 
offset = -args_size_0; 
args_size_0 += offset; 
if ( args_size_0 < 0 ) 
args_size_0 = 0LL; 
dwarf2out_args_size( label, args_size_0); 
dwarf2out_args_size( &arg0, *( _QWORD *)( *( _QWORD *)&insna[1] + 8LL)); 
( rtx_code)( unsigned __int16)*( _DWORD *)if_info->cond, 
sprintf( lscope_label_name, "*.%s%u", "Lscope", ( unsigned int)dbxout_function_end_scope_labelno); 
fprintf( asmfile, ".%s%u:\n", "Lscope", ( unsigned int)dbxout_function_end_scope_labelno); 
++dbxout_function_end_scope_labelno; 
next_offset = QCameraExposure::setAutoIsoSensitivity( field); 
shift = next_offset - QCameraExposure::setAutoIsoSensitivity( field); 
v11 = QCameraExposure::setAutoIsoSensitivity( field); 
v4 = gen_rtx( ( rtx_code)( unsigned __int16)*( _DWORD *)operand3, V4SImode, operand1, operand2); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v10 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
dest = ( cpp_token_0 *)&pfile->a_buff->cur[24 * acount + 16]; 
*( &global_trees + 11) = ( splay_tree_value)build_int_2_wide( 0LL, 0LL); 
*( &global_trees + 12) = ( splay_tree_value)build_int_2_wide( 1uLL, 0LL); 
*( &global_trees + 13) = ( splay_tree_value)build_int_2_wide( 0xFFFFFFFFFFFFFFFFLL, -1LL); 
*( &global_trees + 15) = ( splay_tree_value)size_int_wide( 0LL, SIZETYPE); 
*( &global_trees + 16) = ( splay_tree_value)size_int_wide( 1LL, SIZETYPE); 
*( &global_trees + 17) = ( splay_tree_value)size_int_wide( 0LL, BITSIZETYPE); 
*( &global_trees + 18) = ( splay_tree_value)size_int_wide( 1LL, BITSIZETYPE); 
*( &global_trees + 19) = ( splay_tree_value)size_int_wide( 8LL, BITSIZETYPE); 
*( &global_trees + 27) = ( splay_tree_value)make_node( VOID_TYPE); 
*( &global_trees + 14) = ( splay_tree_value)build_int_2_wide( 0LL, 0LL); 
*( &global_trees + 28) = ( splay_tree_value)build_pointer_type( ( tree)*( &global_trees + 27)); 
*( &global_trees + 29) = ( splay_tree_value)build_pointer_type( v1); 
*( &global_trees + 24) = ( splay_tree_value)make_node( REAL_TYPE); 
*( &global_trees + 25) = ( splay_tree_value)make_node( REAL_TYPE); 
*( &global_trees + 26) = ( splay_tree_value)make_node( REAL_TYPE); 
*( &global_trees + 20) = ( splay_tree_value)make_node( COMPLEX_TYPE); 
*( &global_trees + 21) = ( splay_tree_value)make_node( COMPLEX_TYPE); 
*( &global_trees + 22) = ( splay_tree_value)make_node( COMPLEX_TYPE); 
v6 = ( const unsigned __int8 *)( sch_istable[( unsigned __int8)c] & 0x100); 
if ( ( sch_istable[( unsigned __int8)c] & 0x100) == 0 ) 
if ( ( sch_istable[( unsigned __int8)c] & 0xAC) != 0 ) 
v8 = gen_lowpart( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op), result); 
v6 = force_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op), op); 
|| offset >= ( unsigned __int64)( get_mode_alignment( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)memref)) >> 3) ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)newa)); 
induction_1 *tv; // [rsp+B0h] [rbp-B0h] 
induction_1 *tv; // [rsp+B0h] [rbp-B0h] 
induction_1 *v; // [rsp+B8h] [rbp-A8h] 
induction_1 *v; // [rsp+B8h] [rbp-A8h] 
v = addr_combined_regs[*( unsigned int *)( v22->fld[0].rtwint + 8)]; 
bl_0 = ivs->regs[v->src_reg->fld[0].rtuint].iv.class; 
for ( tv = bl_0->giv; tv; tv = tv->next_iv ) 
for ( tv = bl_0->giv; tv; tv = tv->next_iv ) 
for ( tv = bl_0->giv; tv; tv = tv->next_iv ) 
for ( tv = bl_0->giv; tv; tv = tv->next_iv ) 
if ( tv->giv_type == DEST_ADDR && tv->same == v && *tv->location == tv->dest_reg ) 
if ( tv->giv_type == DEST_ADDR && tv->same == v && *tv->location == tv->dest_reg ) 
if ( tv->giv_type == DEST_ADDR && tv->same == v && *tv->location == tv->dest_reg ) 
if ( tv->giv_type == DEST_ADDR && tv->same == v && *tv->location == tv->dest_reg ) 
if ( tv->giv_type == DEST_ADDR && tv->same == v && *tv->location == tv->dest_reg ) 
if ( tv->mult_val != v->mult_val ) 
result = store_field( target, v30, v29, mode, exp, ( machine_mode)v26, v25, type, alias_set); 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( toa->common.type->block.abstract_origin)) >> 1), 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( froma->common.type->block.abstract_origin)) >> 1), 
temp = expand_expr( froma, 0LL, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)to_rtx), EXPAND_NORMAL); 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( sizetype_tab[0]->block.abstract_origin)) >> 1), 
valuea = lang_hooks_0.expand_constant( value); 
if ( valid0 == ( tree_node *)*( &global_trees + 14) ) 
if ( valid1 != ( tree_node *)*( &global_trees + 14) ) 
|| mode_class_0[( unsigned __int8)HIBYTE( WORD2( inner_0->common.type->block.abstract_origin)) >> 1] != MODE_INT 
&& mode_class_0[( unsigned __int8)HIBYTE( WORD2( inner_0->common.type->block.abstract_origin)) >> 1] != MODE_PARTIAL_INT 
&& mode_class_0[( unsigned __int8)HIBYTE( WORD2( inner_0->common.type->block.abstract_origin)) >> 1] != MODE_COMPLEX_INT 
&& mode_class_0[( unsigned __int8)HIBYTE( WORD2( inner_0->common.type->block.abstract_origin)) >> 1] != MODE_VECTOR_INT ) 
|| mode_class_0[( unsigned __int8)HIBYTE( WORD2( inner_1->common.type->block.abstract_origin)) >> 1] != MODE_INT 
&& mode_class_0[( unsigned __int8)HIBYTE( WORD2( inner_1->common.type->block.abstract_origin)) >> 1] != MODE_PARTIAL_INT 
&& mode_class_0[( unsigned __int8)HIBYTE( WORD2( inner_1->common.type->block.abstract_origin)) >> 1] != MODE_COMPLEX_INT 
&& mode_class_0[( unsigned __int8)HIBYTE( WORD2( inner_1->common.type->block.abstract_origin)) >> 1] != MODE_VECTOR_INT ) 
action = set; 
action = set; 
action = push; 
action = push; 
action = pop; 
action = pop; 
if ( tokena == 21 || action != push ) 
if ( tokena == 21 || action != push ) 
if ( action == push && c_lex( &x) != 21 ) 
if ( action == push && c_lex( &x) != 21 ) 
if ( action == push ) 
if ( action == push ) 
if ( action != push ) 
if ( action != push ) 
action = set; 
if ( ( unsigned int)format > 0xFF || !eh_data_format_name_format_names[format] ) 
return eh_data_format_name_format_names[format]; 
&& QDefaultAnimationDriver::QDefaultAnimationDriver( token->val.node->ident.str, ( const U_CHAR *)string) == 0; 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 24966, "k6_fpu_unit_conflict_cost"); 
casenum = mult_operator( recog_data_0.operand[3], SFmode) != 0; 
if ( which_alternative || mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( which_alternative || !mult_operator( recog_data_0.operand[3], SFmode) ) 
casenum = mult_operator( recog_data_0.operand[3], XFmode) != 0; 
casenum = mult_operator( recog_data_0.operand[3], TFmode) != 0; 
else if ( mult_operator( recog_data_0.operand[3], SFmode) ) 
else if ( which_alternative == 2 || !mult_operator( recog_data_0.operand[3], SFmode) ) 
else if ( mult_operator( recog_data_0.operand[3], DFmode) ) 
else if ( which_alternative == 2 || !mult_operator( recog_data_0.operand[3], DFmode) ) 
else if ( mult_operator( recog_data_0.operand[3], XFmode) ) 
else if ( mult_operator( recog_data_0.operand[3], TFmode) ) 
floatflag = NOT_FLOAT; 
floatflag = NOT_FLOAT; 
else if ( *stra == 48 && ( sch_istable[*( ( unsigned __int8 *)stra + 1)] & 4) != 0 ) 
if ( floatflag == AFTER_POINT ) 
if ( floatflag == AFTER_POINT ) 
if ( floatflag == AFTER_EXPON ) 
if ( floatflag == AFTER_EXPON ) 
floatflag = AFTER_POINT; 
floatflag = AFTER_POINT; 
&& !push_operand( desta, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)desta)) ) 
win = appendIntToFourBytes( op, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op)); 
if ( recog_data_0.operand_type[i] == OP_OUT ) 
if ( recog_data_0.operand_type[i] ) 
if ( recog_data_0.operand_type[i] ) 
if ( recog_data_0.operand_type[i] == OP_OUT ) 
|| !reg_fits_class_p( op, classes[i], 0, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op))) ) 
if ( recog_data_0.operand_type[i] != OP_OUT ) 
if ( recog_data_0.operand_type[i] ) 
if ( recog_data_0.operand_type[i] == OP_OUT ) 
induction_1 *v1; // [rsp+0h] [rbp-20h] 
induction_1 *v1; // [rsp+0h] [rbp-20h] 
induction_1 *v; // [rsp+8h] [rbp-18h] 
induction_1 *v; // [rsp+8h] [rbp-18h] 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
if ( ( ( *( ( _WORD *)v + 50) >> 2) & 1) == 0 
&& ( !v->same || ( ( *( ( _WORD *)v->same + 50) >> 2) & 1) == 0) 
&& ( !v->same || ( ( *( ( _WORD *)v->same + 50) >> 2) & 1) == 0) 
&& v->giv_type == DEST_REG 
&& *( _DWORD *)reg_n_info->data.l[v->dest_reg->fld[0].rtuint] == v->insn->fld[0].rtint ) 
&& *( _DWORD *)reg_n_info->data.l[v->dest_reg->fld[0].rtuint] == v->insn->fld[0].rtint ) 
for ( v1 = bl_0->giv; v1; v1 = v1->next_iv ) 
for ( v1 = bl_0->giv; v1; v1 = v1->next_iv ) 
for ( v1 = bl_0->giv; v1; v1 = v1->next_iv ) 
for ( v1 = bl_0->giv; v1; v1 = v1->next_iv ) 
if ( *( _DWORD *)( reg_n_info->data.l[v->dest_reg->fld[0].rtuint] + 4) == v1->insn->fld[0].rtint ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)y->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)y)); 
&& ( tem = simplify_binary_operation( PLUS, ( machine_mode)BYTE2( *( _DWORD *)xa), *constptra, *( rtx *)&xa[1])) != 0LL 
tem = simplify_binary_operation( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), *constptra, tem); 
return gen_rtx_fmt_ee( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), x0, x1); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)( *loc)->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*loc), 
( rtx_code)( unsigned __int16)*( _DWORD *)*loc, 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*loc), 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v14 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
v3 = reverse_condition_maybe_unordered( ( rtx_code)( unsigned __int16)*( _DWORD *)new_op1); 
v3 = reverse_condition( ( rtx_code)( unsigned __int16)*( _DWORD *)new_op1); 
edge_info_0 *i_1; // [rsp+38h] [rbp-98h] 
edge_info_0 *i_1; // [rsp+38h] [rbp-98h] 
edge_info_0 *inf; // [rsp+60h] [rbp-70h] 
edge_info_0 *inf; // [rsp+60h] [rbp-70h] 
branch_prob_ignore_next_note = 1; 
if ( branch_prob_ignore_next_note ) 
branch_prob_ignore_next_note = 0; 
inf = ( edge_info_0 *)e_1->aux; 
inf = ( edge_info_0 *)e_1->aux; 
if ( ( e_1->flags & 0x10) != 0 && ( *( _BYTE *)inf & 4) == 0 && ( *( _BYTE *)inf & 2) == 0 ) 
if ( ( e_1->flags & 0x10) != 0 && ( *( _BYTE *)inf & 4) == 0 && ( *( _BYTE *)inf & 2) == 0 ) 
*( _BYTE *)inf = *( _BYTE *)inf & 0xFB | 4; 
i_1 = ( edge_info_0 *)e_2a->aux; 
if ( ( rtx_class[code] == 60 || rtx_class[code] == 99) && QTextBlock::operator<( x->fld[0].rtx, *( rtx *)&x[1]) ) 
v4 = gen_rtx_fmt_ee( v11, ( machine_mode)BYTE2( *( _DWORD *)x), *( rtx *)&x[1], x->fld[0].rtx); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
newb = gen_rtx_fmt_e( CLOBBER, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), const_int_rtx[64]); 
v5 = simplify_gen_binary( PLUS, ( machine_mode)BYTE2( *( _DWORD *)x), x->fld[0].rtx, *( rtx *)&x[1]); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
newa = gen_rtx_fmt_e( CLOBBER, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), const_int_rtx[64]); 
for ( i = recog_data_0.n_operands - 1; i >= 0; --i ) 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 67 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 68 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 54 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 55 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 58 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 134 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 56 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 140 ) 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 54 
&& recog_data_0.operand[i]->fld[0].rtwint >= -128 
&& recog_data_0.operand[i]->fld[0].rtwint <= 127 ) 
fatal_insn( "unknown insn mode", insn, "i386.c", 9956, "ix86_attr_length_immediate_default"); 
if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_VERBOSE ) 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 32953, "fpu_unit_conflict_cost"); 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
if ( ix86_cpu != PROCESSOR_PENTIUM || mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( ix86_cpu == PROCESSOR_PENTIUM && mult_operator( recog_data_0.operand[3], SFmode) ) 
else if ( ix86_cpu != PROCESSOR_PENTIUMPRO || mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( ix86_cpu == PROCESSOR_PENTIUMPRO && mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( ix86_cpu != PROCESSOR_PENTIUM || which_alternative || mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( ix86_cpu == PROCESSOR_PENTIUM && !which_alternative && mult_operator( recog_data_0.operand[3], SFmode) ) 
|| mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( ix86_cpu == PROCESSOR_PENTIUMPRO && !which_alternative && mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( ix86_cpu != PROCESSOR_PENTIUM || mult_operator( recog_data_0.operand[3], XFmode) ) 
if ( !size_int_type_wide_size_htab ) 
size_int_type_wide_size_htab = htab_create( 0x400uLL, ( htab_hash)size_htab_hash, ( htab_eq)size_htab_eq, 0LL); 
ggc_add_deletable_htab( size_int_type_wide_size_htab, 0LL, 0LL); 
size_int_type_wide_new_const = make_node( INTEGER_CST); 
ggc_add_tree_root( &size_int_type_wide_new_const, 1); 
size_int_type_wide_new_const->int_cst.int_cst.low = number; 
size_int_type_wide_new_const->int_cst.int_cst.high = v2; 
size_int_type_wide_new_const->common.type = type; 
v3 = force_fit_type( size_int_type_wide_new_const, 0) & 1; 
*( ( _DWORD *)&size_int_type_wide_new_const->common + 4) = ( v3 << 18) | *( ( _DWORD *)&size_int_type_wide_new_const->common 
*( ( _DWORD *)&size_int_type_wide_new_const->common + 4) = ( v3 << 18) | *( ( _DWORD *)&size_int_type_wide_new_const->common 
*( ( _DWORD *)&size_int_type_wide_new_const->common + 4) = ( ( v3 & 1) << 19) | *( ( _DWORD *)&size_int_type_wide_new_const->common 
*( ( _DWORD *)&size_int_type_wide_new_const->common + 4) = ( ( v3 & 1) << 19) | *( ( _DWORD *)&size_int_type_wide_new_const->common 
slot = htab_find_slot( size_int_type_wide_size_htab, size_int_type_wide_new_const, INSERT); 
slot = htab_find_slot( size_int_type_wide_size_htab, size_int_type_wide_new_const, INSERT); 
t = size_int_type_wide_new_const; 
*slot = size_int_type_wide_new_const; 
size_int_type_wide_new_const = make_node( INTEGER_CST); 
fatal_insn_not_found( insn, "insn-attrtab.c", 29, "insn_current_length"); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_FLOAT ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint)] != MODE_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( **( _DWORD **)&x[1])] != MODE_FLOAT ) 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_FLOAT ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_FLOAT ) 
fatal_insn_not_found( insn, "insn-attrtab.c", 4136, "k6_fpu_unit_ready_cost"); 
if ( mult_operator( recog_data_0.operand[3], SFmode) && ix86_cpu == PROCESSOR_K6 
|| !mult_operator( recog_data_0.operand[3], SFmode) && ix86_cpu == PROCESSOR_K6 ) 
if ( ( which_alternative || !mult_operator( recog_data_0.operand[3], SFmode) || ix86_cpu != PROCESSOR_K6) 
&& ( which_alternative || mult_operator( recog_data_0.operand[3], SFmode) || ix86_cpu != PROCESSOR_K6) ) 
if ( mult_operator( recog_data_0.operand[3], XFmode) && ix86_cpu == PROCESSOR_K6 
|| !mult_operator( recog_data_0.operand[3], XFmode) && ix86_cpu == PROCESSOR_K6 ) 
if ( mult_operator( recog_data_0.operand[3], TFmode) && ix86_cpu == PROCESSOR_K6 
|| !mult_operator( recog_data_0.operand[3], TFmode) && ix86_cpu == PROCESSOR_K6 ) 
if ( mult_operator( recog_data_0.operand[3], SFmode) && ix86_cpu == PROCESSOR_K6 
if ( which_alternative != 2 && mult_operator( recog_data_0.operand[3], SFmode) && ix86_cpu == PROCESSOR_K6 
if ( mult_operator( recog_data_0.operand[3], DFmode) && ix86_cpu == PROCESSOR_K6 
if ( which_alternative != 2 && mult_operator( recog_data_0.operand[3], DFmode) && ix86_cpu == PROCESSOR_K6 
if ( mult_operator( recog_data_0.operand[3], XFmode) && ix86_cpu == PROCESSOR_K6 
if ( mult_operator( recog_data_0.operand[3], TFmode) && ix86_cpu == PROCESSOR_K6 
low = higher_prime_number_primes; 
high = &higher_prime_number_primes[30]; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v11 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
fatal_insn_not_found( insn, "insn-attrtab.c", 18084, "get_attr_ppro_uops"); 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], SImode) ) 
if ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0 ) 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], DImode) ) 
return memory_operand( recog_data_0.operand[0], VOIDmode) != 0; 
if ( which_alternative != 1 || !const0_operand( recog_data_0.operand[2], SImode) ) 
if ( which_alternative != 1 || !const0_operand( recog_data_0.operand[2], DImode) ) 
if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL ) 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x1a; 
recog_data_0.operand[1] = x1a; 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] == 54 
&& recog_data_0.operand[1]->fld[0].rtwint == -1 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x1b; 
recog_data_0.operand[1] = x1b; 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[1] = x3i; 
recog_data_0.operand[2] = x3l; 
if ( QTextBlock::operator<( lhs, rhs) ) 
return sched_target_n_insns < target_n_insns_0; 
fatal_insn_not_found( insn, "insn-attrtab.c", 10478, "pent_np_unit_ready_cost"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
|| !q_regs_operand( recog_data_0.operand[0], QImode) 
&& q_regs_operand( recog_data_0.operand[0], QImode) 
|| memory_operand( recog_data_0.operand[1], VOIDmode) 
|| !which_alternative && !memory_operand( recog_data_0.operand[1], VOIDmode)) ) 
|| memory_operand( recog_data_0.operand[1], VOIDmode) 
|| which_alternative == 1 && !memory_operand( recog_data_0.operand[1], VOIDmode)) ) 
if ( !incdec_operand( recog_data_0.operand[2], DImode) 
else if ( !incdec_operand( recog_data_0.operand[2], DImode) 
if ( !incdec_operand( recog_data_0.operand[2], SImode) 
else if ( !incdec_operand( recog_data_0.operand[2], SImode) 
|| incdec_operand( recog_data_0.operand[2], HImode) 
&& !incdec_operand( recog_data_0.operand[2], HImode) 
if ( !incdec_operand( recog_data_0.operand[2], HImode) 
else if ( !incdec_operand( recog_data_0.operand[2], HImode) 
|| incdec_operand( recog_data_0.operand[2], QImode) 
&& !incdec_operand( recog_data_0.operand[2], QImode) 
recog_data_0.operand[1] = x3c; 
recog_data_0.operand[2] = x2j; 
recog_data_0.operand[0] = x2k; 
if ( rtx_equal_p( x2l->fld[0].rtx, recog_data_0.operand[1]) ) 
recog_data_0.operand[1] = x3c; 
recog_data_0.operand[2] = x2e; 
recog_data_0.operand[0] = x2f; 
if ( rtx_equal_p( x2g->fld[0].rtx, recog_data_0.operand[1]) ) 
recog_data_0.operand[0] = x2; 
v4 = ( int)( ( double)( qty_0[q2].size * qty_0[q2].freq * floor_log2_wide( qty_0[*( int *)q2p].n_refs)) 
v4 = ( int)( ( double)( qty_0[q2].size * qty_0[q2].freq * floor_log2_wide( qty_0[*( int *)q2p].n_refs)) 
v4 = ( int)( ( double)( qty_0[q2].size * qty_0[q2].freq * floor_log2_wide( qty_0[*( int *)q2p].n_refs)) 
/ ( double)( qty_0[q2].death - qty_0[q2].birth) 
/ ( double)( qty_0[q2].death - qty_0[q2].birth) 
v2 = ( int)( ( double)( qty_0[q1].size * qty_0[q1].freq * floor_log2_wide( qty_0[q1].n_refs)) 
v2 = ( int)( ( double)( qty_0[q1].size * qty_0[q1].freq * floor_log2_wide( qty_0[q1].n_refs)) 
v2 = ( int)( ( double)( qty_0[q1].size * qty_0[q1].freq * floor_log2_wide( qty_0[q1].n_refs)) 
/ ( double)( qty_0[q1].death - qty_0[q1].birth) 
/ ( double)( qty_0[q1].death - qty_0[q1].birth) 
if ( valueb == ( tree_node *)global_trees ) 
v4 = operand_sub*(short *)0xforce( x, i, mode); 
timevars[14].name = ( const char *)&off_896C37; 
timevars[15].name = ( const char *)&unk_896C30; 
probability = predictor_info_0[predictor].hitrate; 
if ( taken != TAKEN_0 ) 
head = new_loc_descr( ( dwarf_location_atom)( LODWORD( cfaa->reg) + 112), cfaa->base_offset, 0LL); 
head = new_loc_descr( ( dwarf_location_atom)( cfaa->reg + 80), 0LL, 0LL); 
if ( mode_class_0[bl_0->biv->mode] != MODE_INT ) 
bb_info_0 *info_0; // [rsp+88h] [rbp-A8h] 
bb_info_0 *info_0; // [rsp+88h] [rbp-A8h] 
bb_info_0 *info; // [rsp+C0h] [rbp-70h] 
bb_info_0 *info; // [rsp+C0h] [rbp-70h] 
bb_info_0 *bb_info[1]; // [rsp+E8h] [rbp-48h] 
bb_info_0 *bb_info[1]; // [rsp+E8h] [rbp-48h] 
if ( optimize_mode_switching_num_modes[e] > max_num_modes ) 
max_num_modes = optimize_mode_switching_num_modes[e]; 
transp_0 = sbitmap_vector_alloc( n_basic_blocks, n_entities); 
comp_0 = sbitmap_vector_alloc( n_basic_blocks, n_entities); 
sbitmap_vector_ones( transp_0, n_basic_blocks); 
no_mode = optimize_mode_switching_num_modes[e_0]; 
info = bb_info[j]; 
info = bb_info[j]; 
add_seginfo( &info[bb], ptr); 
transp_0[bb]->elms[( unsigned int)j >> 6] &= ~( 1LL << ( j & 0x3F)); 
v5 = safe_hash( arg1, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)arg1)); 
p = lookup( arg1, v5 & 0x1F, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)arg1)); 
&& mode_class_0[inner_mode] == MODE_INT 
&& mode_class_0[inner_mode] == MODE_INT 
if ( !memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)tem), tem->fld[0].rtx) ) 
ca = trunc_int_for_mode( ca, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa)); 
predict_insn_def( insn, PRED_BUILTIN_EXPECT, ( prediction)taken); 
else if ( ( sch_istable[( unsigned __int8)c] & 0x400) != 0 ) 
( htab_eq)OT::IntType<unsigned int, 4u>::operator==, 
mem_loc_result = mem_loc_descriptor( rtla->fld[0].rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtla)); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rega)] != MODE_COMPLEX_INT ) 
v15 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rega)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[mode] == MODE_INT && mode_bitsize[mode] <= 0x40u ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rega)); 
sprintf( label, "*.%s%u", ( const char *)&off_7F9875, current_funcdef_number); 
fatal_insn_not_found( insn, "insn-attrtab.c", 17669, "get_attr_mode"); 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
&& aligned_operand( recog_data_0.operand[1], HImode) 
if ( q_regs_operand( recog_data_0.operand[0], QImode) && ( ( 1 << ix86_cpu) & x86_movx) == 0 ) 
var = lang_hooks_0.tree_inlining.copy_res_decl_for_inlining( 
return &arg0; 
this_insn_0 = insna; 
&& recog_data_0.n_operands > 1 
&& *recog_data_0.constraints[0] == 61 
&& *( ( _BYTE *)recog_data_0.constraints[0] + 1) != 38 ) 
for ( i_0 = 1; i_0 < recog_data_0.n_operands; ++i_0 ) 
this_match = requires_inout( recog_data_0.constraints[i_0]); 
if ( this_match == recog_data_0.n_alternatives ) 
r0 = recog_data_0.operand[0]; 
for ( i_0a = 1; i_0a < recog_data_0.n_operands; ++i_0a ) 
|| i_0a == must_match_0 + 1 && *recog_data_0.constraints[i_0a - 1] == 37 
|| i_0a == must_match_0 - 1 && *recog_data_0.constraints[i_0a] == 37) 
&& ( n_matching_alts != recog_data_0.n_alternatives || requires_inout( recog_data_0.constraints[i_0a])) ) 
&& ( n_matching_alts != recog_data_0.n_alternatives || requires_inout( recog_data_0.constraints[i_0a])) ) 
r1 = recog_data_0.operand[i_0a]; 
if ( *recog_data_0.constraints[i_0a] == 112 ) 
if ( r1 == recog_data_0.operand[i_0a] ) 
fatal_insn_not_found( insn, "recog.c", 2063, "extract_constrain_insn_cached"); 
&& mode_class_0[mode] != MODE_INT 
&& mode_class_0[mode] != MODE_PARTIAL_INT ) 
if ( mode_class_0[i] == MODE_CC ) 
reg = gen_rtx_REG( ( machine_mode)i, 58); 
free_edge_list( edge_list_0); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v15 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
for ( p = &pfile->free_buffs; ; p = ( _cpp_buff_0 **)*p ) 
if ( operator+=<char [3], QByteArray>( temp->fld[0].rtx, x) ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)p->exp)] != MODE_COMPLEX_INT ) 
v8 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)p->exp)] == MODE_COMPLEX_FLOAT; 
timevar_push( TV_CLEANUP_CFG_0); 
timevar_pop( TV_CLEANUP_CFG_0); 
low_cuid = *( ( _DWORD *)uid_cuid_0 + insn->fld[0].rtint); 
if ( p->fld[0].rtint <= max_uid && *( ( _DWORD *)uid_cuid_0 + p->fld[0].rtint) > high_cuid ) 
high_cuid = *( ( _DWORD *)uid_cuid_0 + p->fld[0].rtint); 
if ( p->fld[0].rtint <= max_uid && *( ( _DWORD *)uid_cuid_0 + p->fld[0].rtint) < low_cuid ) 
low_cuid = *( ( _DWORD *)uid_cuid_0 + p->fld[0].rtint); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op0)] == MODE_FLOAT ) 
*( _OWORD *)rr.r = *( _OWORD *)&arg1a->block.vars; 
p = getpwd_pwd; 
if ( !getpwd_pwd ) 
v1 = getpwd_failure_errno; 
getpwd_failure_errno = e; 
getpwd_pwd = p; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v19 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
if ( !grokdeclarator_already && !pedantic ) 
grokdeclarator_already = 1; 
if ( mode_class_0[( unsigned __int8)HIBYTE( WORD2( enttype->block.abstract_origin)) >> 1] == MODE_INT 
rtx insn; // [rsp+80h] [rbp-30h] 
for ( insn = bb->end; ; insn = ( rtx)insn[1] ) 
for ( insn = bb->end; ; insn = ( rtx)insn[1] ) 
if ( insn ) 
v5 = insn != ( rtx)bb->head[1]; 
uid = insn->fld[0].rtuint; 
if ( rtx_class[( unsigned __int16)*( _DWORD *)insn] == 105 ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[regno_0])] != MODE_COMPLEX_INT ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] != MODE_COMPLEX_INT ) 
v14 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] == MODE_COMPLEX_FLOAT; 
reg_set_table = ( reg_set_0 **)grealloc( ( char *)reg_set_table, 8 * ( regno + 100)); 
reg_set_table[regno] = ( reg_set_0 *)value; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] != MODE_COMPLEX_INT ) 
v29 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] != MODE_COMPLEX_INT ) 
v25 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[vd->e[sr].mode] != MODE_COMPLEX_INT ) 
v21 = mode_class_0[vd->e[sr].mode] == MODE_COMPLEX_FLOAT; 
v6 = ( const char *)&unk_80724E; 
v6 = ( const char *)&unk_80724B; 
v5 = ( const char *)&off_807247; 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 31504, "pent_u_unit_conflict_cost"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
|| incdec_operand( recog_data_0.operand[2], HImode) 
|| incdec_operand( recog_data_0.operand[2], HImode) 
if ( incdec_operand( recog_data_0.operand[2], HImode) 
if ( incdec_operand( recog_data_0.operand[2], HImode) 
|| ( ( ( 1 << ix86_cpu) & x86_double_with_add) == 0 || !const1_operand( recog_data_0.operand[2], VOIDmode)) 
&& const1_operand( recog_data_0.operand[2], VOIDmode) 
&& ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) 
|| !const1_operand( recog_data_0.operand[2], VOIDmode)) 
if ( ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) 
|| !const1_operand( recog_data_0.operand[2], VOIDmode)) 
else if ( ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) 
|| !const1_operand( recog_data_0.operand[2], VOIDmode)) 
&& const_int_operand( recog_data_0.operand[2], VOIDmode) 
&& const_int_operand( recog_data_0.operand[2], VOIDmode) 
&& const_int_operand( recog_data_0.operand[2], VOIDmode) 
&& const_int_operand( recog_data_0.operand[2], VOIDmode) 
return insn_data_0[code].name; 
for ( i = 0; i < recog_data_0.n_operands; ++i ) 
constraints[i] = recog_data_0.constraints[i]; 
modes[i] = recog_data_0.operand_mode[i]; 
for ( i = 0; i < recog_data_0.n_operands; ++i ) 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 63 ) 
inner = recog_data_0.operand[i]->fld[0].rtx; 
recog_data_0.operand[i] = inner; 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 66 ) 
record_address_regs( recog_data_0.operand[i]->fld[0].rtx, GENERAL_REGS, 2 * frequency); 
record_address_regs( recog_data_0.operand[i], GENERAL_REGS, 2 * frequency); 
for ( i = 0; i < recog_data_0.n_operands - 1; ++i ) 
for ( j = 0; j < recog_data_0.n_operands; ++j ) 
recog_data_0.n_alternatives, 
recog_data_0.n_operands, 
recog_data_0.operand, 
recog_data_0.n_alternatives, 
recog_data_0.n_operands, 
recog_data_0.operand, 
rtx note; // [rsp+60h] [rbp-50h] 
rtx prev_set; // [rsp+68h] [rbp-48h] 
rtx prev; // [rsp+70h] [rbp-40h] 
rtx set; // [rsp+78h] [rbp-38h] 
rtx call_dest; // [rsp+80h] [rbp-30h] 
rtx no_sharea; // [rsp+88h] [rbp-28h] 
rtx vara; // [rsp+A0h] [rbp-10h] 
rtx insna; // [rsp+A8h] [rbp-8h] 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)inner)] != MODE_PARTIAL_INT 
&& mode_class_0[( unsigned __int8)BYTE2( **( _DWORD **)&x[1])] != MODE_PARTIAL_INT ) 
|| memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), x->fld[0].rtx) ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x2k; 
return gen_split_1133( recog_data_0.operand); 
recog_data_0.operand[1] = x2l; 
return gen_split_1135( recog_data_0.operand); 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x2j; 
return gen_split_943( recog_data_0.operand); 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x2i; 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)recog_data_0.operand[1])] != MODE_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)recog_data_0.operand[1])] != MODE_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_VECTOR_FLOAT ) 
set_diagnostic_context( &dc, msgida, ( va_list_0 *)ap, input_filename, lineno, 1); 
recog_data_0.operand[1] = x3c; 
recog_data_0.operand[1] = x2d; 
recog_data_0.operand[1] = x3d; 
recog_data_0.operand[1] = x2e; 
recog_data_0.operand[1] = x3f; 
recog_data_0.operand[2] = x3g; 
if ( rtx_equal_p( *( rtx *)&x1[1], recog_data_0.operand[1]) 
&& rtx_equal_p( x1[1].fld[0].rtx, recog_data_0.operand[2]) 
recog_data_0.operand[1] = x3f; 
recog_data_0.operand[2] = x3h; 
if ( rtx_equal_p( *( rtx *)&x1[1], recog_data_0.operand[1]) 
&& rtx_equal_p( x1[1].fld[0].rtx, recog_data_0.operand[2]) 
&& ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 66 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[2] != 66) 
classa = mode_class_0[mode]; 
if ( !unsignedp && flag_trapv && mode_class_0[mode] == MODE_INT ) 
mode0 = *( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8); 
if ( !insn_data_0[icode].operand[1].predicate( xop0, mode0) ) 
if ( !insn_data_0[icode].operand->predicate( temp, submode) ) 
pat = insn_data_0[icode].genfun( temp, xop0); 
real = qToBigEndian<unsigned int>( submode, op0a); 
output = ( __int64 (  *)(  struct recog_data *, rtx))insn_data_0[code].output; 
output_format = insn_data_0[code].output_format; 
return ( const char *)insn_data_0[code].output; 
return ( const char *)output( &recog_data_0, insn); 
&& insn_data_0[icode].operand->predicate( op0, mode) 
&& insn_data_0[icode].operand[1].predicate( op0, ( machine_mode)mode) 
&& insn_data_0[icode].operand[1].predicate( op0, ( machine_mode)mode) 
&& insn_data_0[icode].operand[2].predicate( op1, ( machine_mode)mode) ) 
&& insn_data_0[icode].operand[2].predicate( op1, ( machine_mode)mode) ) 
&& insn_data_0[icodea].operand->predicate( op0, mode) 
&& insn_data_0[icodea].operand[1].predicate( op0, ( machine_mode)mode) ) 
&& insn_data_0[icodea].operand[1].predicate( op0, ( machine_mode)mode) ) 
if ( !insn_data_0[icodea].operand[2].predicate( op1, ( machine_mode)mode) ) 
if ( !insn_data_0[icodea].operand[2].predicate( op1, ( machine_mode)mode) ) 
op1 = force_reg( ( machine_mode)mode, op1); 
v5 = insn_data_0[icodea].genfun( op0, op0, op1); 
for ( result = &node->value; result->macro; result = ( cpp_hashnode::$14912F6ECDCFBB6AA3A39A6FF3987F98 *)result->macro ) 
for ( result = &node->value; result->macro; result = ( cpp_hashnode::$14912F6ECDCFBB6AA3A39A6FF3987F98 *)result->macro ) 
for ( result = &node->value; result->macro; result = ( cpp_hashnode::$14912F6ECDCFBB6AA3A39A6FF3987F98 *)result->macro ) 
for ( result = &node->value; result->macro; result = ( cpp_hashnode::$14912F6ECDCFBB6AA3A39A6FF3987F98 *)result->macro ) 
if ( LODWORD( result->macro->expansion) == candidate->count ) 
return (  struct answer **)result; 
rtx temp_1; // [rsp+B0h] [rbp-130h] 
rtx reg; // [rsp+D8h] [rbp-108h] 
rtx next; // [rsp+E0h] [rbp-100h] 
rtx n; // [rsp+E8h] [rbp-F8h] 
rtx body; // [rsp+F0h] [rbp-F0h] 
rtx fn_reg; // [rsp+100h] [rbp-E0h] 
rtx temp_0; // [rsp+110h] [rbp-D0h] 
rtx temp_0a; // [rsp+110h] [rbp-D0h] 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 22187, "athlon_muldiv_unit_conflict_cost"); 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 26032, "k6_load_unit_conflict_cost"); 
casenum = memory_operand( recog_data_0.operand[1], VOIDmode) == 0; 
casenum = which_alternative || !memory_operand( recog_data_0.operand[1], VOIDmode); 
casenum = which_alternative != 1 || !memory_operand( recog_data_0.operand[1], VOIDmode); 
casenum = memory_operand( recog_data_0.operand[0], VOIDmode) == 0; 
casenum = constant_call_address_operand( recog_data_0.operand[0], VOIDmode) != 0; 
casenum = constant_call_address_operand( recog_data_0.operand[1], VOIDmode) != 0; 
v4 = gen_lowpart_for_combine( ( machine_mode)BYTE2( *( _DWORD *)desta), *( rtx *)&setter[1]); 
&& !push_operand( desta, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)desta)) ) 
insn[3].fld[0].rtwint = ( __int64)gen_rtx_fmt_ee( EXPR_LIST, ( machine_mode)kind, datum, insn[3].fld[0].rtx); 
temp = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
print_version( stderr, &arg0); 
overflow_arg_area = ( tree_code *)ap[0].overflow_arg_area; 
v1 = ( tree_code *)( ( char *)ap[0].reg_save_area + ( int)ap[0].gp_offset); 
v4 = &arg0; 
v5 = &arg0; 
v6 = &arg0; 
v7 = &arg0; 
newa = lang_hooks_0.expand_constant( expa); 
tmps[i] = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg)); 
temp = assign_stack_temp( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dst), ssizea, 0); 
dst = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)orig_dsta)); 
v5 = ( tree_node *)*( &global_trees + 38); 
v5 = ( tree_node *)*( &global_trees + 47); 
v4 = ( tree_node *)*( &global_trees + 37); 
v4 = ( tree_node *)*( &global_trees + 46); 
v6 = ( tree_node *)*( &global_trees + 34); 
induction_1 *b; // [rsp+48h] [rbp-68h] 
induction_1 *b; // [rsp+48h] [rbp-68h] 
induction_1 *ba; // [rsp+48h] [rbp-68h] 
induction_1 *ba; // [rsp+48h] [rbp-68h] 
for ( b = bl_0->biv; b; b = b->next_iv ) 
for ( b = bl_0->biv; b; b = b->next_iv ) 
for ( b = bl_0->biv; b; b = b->next_iv ) 
for ( b = bl_0->biv; b; b = b->next_iv ) 
if ( b->insn->fld[0].rtint >= max_uid_for_loop ) 
if ( *( ( _DWORD *)uid_luid + b->insn->fld[0].rtint) >= *( ( _DWORD *)uid_luid 
if ( b->insn->fld[0].rtint >= max_uid_for_loop ) 
if ( *( ( _DWORD *)uid_luid + b->insn->fld[0].rtint) <= *( ( _DWORD *)uid_luid 
for ( ba = bl_0->biv; ba; ba = ba->next_iv ) 
for ( ba = bl_0->biv; ba; ba = ba->next_iv ) 
for ( ba = bl_0->biv; ba; ba = ba->next_iv ) 
for ( ba = bl_0->biv; ba; ba = ba->next_iv ) 
tmode = *( ( unsigned __int16 *)insn_data_0[icode].operand + 8); 
mode0 = *( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8); 
|| !insn_data_0[icode].operand->predicate( target, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) ) 
|| !insn_data_0[icode].operand->predicate( target, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) ) 
if ( mode_class_0[mode0] == MODE_VECTOR_INT || mode_class_0[mode0] == MODE_VECTOR_FLOAT ) 
if ( mode_class_0[mode0] == MODE_VECTOR_INT || mode_class_0[mode0] == MODE_VECTOR_FLOAT ) 
if ( !insn_data_0[icode].operand[1].predicate( op0, mode0) ) 
if ( !insn_data_0[icode].operand[2].predicate( op0, mode0) ) 
pat = insn_data_0[icode].genfun( target, op0, op1); 
*loc = gen_rtx_MEM( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), reg_equiv_address[regno]); 
fancy_abort( &off_88ECD0[4], 627, "replace_pseudos_in_call_usage"); 
replace_pseudos_in_call_usage( ( rtx *)x->fld, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), usage); 
if ( if_stack_0[--if_stack_pointer].needs_warning ) 
if_stack_0[if_stack_pointer].file, 
if_stack_0[if_stack_pointer].line, 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v15 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
*loc = gen_rtx_fmt_e( CLOBBER, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), const_int_rtx[64]); 
*loc = gen_rtx_fmt_e( CLOBBER, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), const_int_rtx[64]); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)oldval)] == MODE_INT 
if ( rtwint != trunc_int_for_mode( rtwint, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)oldval)) ) 
if ( undobuf_0.frees ) 
buf = undobuf_0.frees; 
undobuf_0.frees = undobuf_0.frees->next; 
undobuf_0.frees = undobuf_0.frees->next; 
buf->next = undobuf_0.undos; 
undobuf_0.undos = buf; 
allocno_0[( __int64)allocno_vec[len]].hard_reg_conflicts |= hard_regs_live; 
ca = simplify_subreg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), c, cmode, 0); 
induction_1 **giv_array; // [rsp+60h] [rbp-30h] 
induction_1 **giv_array; // [rsp+60h] [rbp-30h] 
induction_1 *g2; // [rsp+68h] [rbp-28h] 
induction_1 *g2; // [rsp+68h] [rbp-28h] 
induction_1 *g1; // [rsp+70h] [rbp-20h] 
induction_1 *g1; // [rsp+70h] [rbp-20h] 
for ( g1 = bl_0->giv; g1; g1 = g1->next_iv ) 
for ( g1 = bl_0->giv; g1; g1 = g1->next_iv ) 
for ( g1 = bl_0->giv; g1; g1 = g1->next_iv ) 
for ( g1 = bl_0->giv; g1; g1 = g1->next_iv ) 
if ( ( ( *( ( _WORD *)g1 + 50) >> 2) & 1) == 0 ) 
giv_array = ( induction_1 **)( ( char *)&lifetime - ( ( 8LL * giv_count + 15) & 0xFFFFFFFFFFFFFFF0LL)); 
giv_array = ( induction_1 **)( ( char *)&lifetime - ( ( 8LL * giv_count + 15) & 0xFFFFFFFFFFFFFFF0LL)); 
for ( g1 = bl_0a->giv; g1; g1 = g1->next_iv ) 
for ( g1 = bl_0a->giv; g1; g1 = g1->next_iv ) 
for ( g1 = bl_0a->giv; g1; g1 = g1->next_iv ) 
for ( g1 = bl_0a->giv; g1; g1 = g1->next_iv ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
sprintf( label, "*.%s%u", ( const char *)&off_7F9871, current_funcdef_number); 
fprintf( asm_out_file, ".%s%u:\n", ( const char *)&off_7F9871, current_funcdef_number); 
args_size_0 = 0LL; 
fprintf( asm_out_file, "\t%s %d\t%s", "#", debug_insn->fld[0].rtuint, insn_data_0[num].name); 
if ( insn_data_0[num].n_alternatives > 1 ) 
rtx v46; // [rsp+98h] [rbp-F8h] 
rtx v47; // [rsp+A0h] [rbp-F0h] 
rtx x; // [rsp+D8h] [rbp-B8h] 
rtx update_end; // [rsp+120h] [rbp-70h] 
rtx update_start; // [rsp+128h] [rbp-68h] 
rtx update_starta; // [rsp+128h] [rbp-68h] 
rtx temp; // [rsp+130h] [rbp-60h] 
rtx tempa; // [rsp+130h] [rbp-60h] 
rtx tempb; // [rsp+130h] [rbp-60h] 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( binfo->common.type->block.abstract_origin)) >> 1), 
for ( i = QCameraExposure::setAutoIsoSensitivity( field) / 8 / 8; ; ++i ) 
v16 = QCameraExposure::setAutoIsoSensitivity( field); 
v8 = QCameraExposure::setAutoIsoSensitivity( field); 
num_0 = classify_argument( ( machine_mode)v15, v14, subclasses, ( bit_offseta + v8) % 256); 
v9 = QCameraExposure::setAutoIsoSensitivity( field); 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( typea->common.type->block.abstract_origin)) >> 1), 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( binfo_0->common.type->block.abstract_origin)) >> 1), 
user_label_prefix = &arg0; 
v1 = &arg0; 
v0 = &arg0; 
print_version( stderr, &arg0); 
print_switch_values( stderr, 0, 75, &arg0, " ", "\n"); 
edge_info_0 = ( edge *)xmalloc( 8LL * edges->num_edges); 
edge_info_0[index] = curredge->succ_next; 
free( edge_info_0); 
edge_info_0 = 0LL; 
fancy_abort( &off_88ECD0[4], 6330, "emit_input_reload_insns"); 
if ( constraint_accepts_reg_p( insn_data_0[v5].operand->constraint, reloadreg) 
fancy_abort( &off_88ECD0[4], 6342, "emit_input_reload_insns"); 
fn = *( tree_node **)( *( _QWORD *)data + 8 * ( *( _QWORD *)( *( _QWORD *)data + 8LL) - 1LL) + 32); 
else if ( lang_hooks_0.tree_inlining.auto_var_in_fn_p( *tp, fn) ) 
new_decl = remap_decl( *tp, ( inline_data_0 *)data); 
if ( lang_hooks_0.tree_inlining.auto_var_in_fn_p( ( *tp)->vector.elements, fn) ) 
copy_scope_stmt( tp, walk_subtrees, ( inline_data_0 *)data); 
reg_pref_0 = 0LL; 
|| !memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ref), ref->fld[0].rtx) ) 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x3b; 
recog_data_0.operand[2] = x3d; 
&& ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 66 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[2] != 66) 
recog_data_0.operand[1] = x3a; 
recog_data_0.operand[2] = x3c; 
&& ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 66 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[2] != 66) 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x1d; 
recog_data_0.operand[1] = x1d; 
recog_data_0.operand[0] = x1; 
for ( i = 0LL; i < 4 && ( expand_nl_goto_receiver_elim_regs[i].from != 16 || *(int *)0x896344[2 * i] != 6); ++i ) 
if ( !peep2_insn_data_0[ofsa].insn ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v11 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
if ( bitmap_bit_p( peep2_insn_data_0[ofsa].live_before, n + regno) ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)mem)) ) 
v4 = next_qty_0++; 
qty_0[v4].first_reg = regno; 
qty_0[v4].size = size; 
qty_0[v4].mode = mode; 
qty_0[v4].birth = birth; 
qty_0[v4].n_calls_crossed = *( _DWORD *)( reg_n_info->data.l[regno] + 32); 
qty_0[v4].min_class = reg_preferred_class( regno); 
qty_0[qtyno].alternate_class = reg_alternate_class( regno); 
qty_0[qtyno].n_refs = *( _DWORD *)( reg_n_info->data.l[regno] + 16); 
qty_0[qtyno].freq = *( _DWORD *)( reg_n_info->data.l[regno] + 20); 
qty_0[qtyno].changes_mode = *( _BYTE *)( reg_n_info->data.l[regno] + 40); 
if ( get_frame_alias_set_set == -1 ) 
get_frame_alias_set_set = new_alias_set( ); 
return get_frame_alias_set_set; 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 25175, "k6_store_unit_blockage"); 
|| !symbolic_operand( recog_data_0.operand[1], SImode) ) 
|| !symbolic_operand( recog_data_0.operand[1], DImode) ) 
if ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], DImode) ) 
if ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
if ( which_alternative || pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
if ( which_alternative != 1 || const0_operand( recog_data_0.operand[2], DImode) ) 
if ( which_alternative != 1 || const0_operand( recog_data_0.operand[2], SImode) ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dst->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dst)); 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v20 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v16 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE ) 
operands[2] = gen_rtx_fmt_e( FLOAT, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operands), operands[2]); 
recog_data_0.operand[1] = x2d; 
recog_data_0.operand[1] = x2e; 
recog_data_0.operand[1] = x3e; 
recog_data_0.operand[2] = x3f; 
if ( rtx_equal_p( *( rtx *)&x1[1], recog_data_0.operand[1]) 
&& rtx_equal_p( x1[1].fld[0].rtx, recog_data_0.operand[2]) 
recog_data_0.operand[1] = x3e; 
recog_data_0.operand[2] = x3g; 
if ( rtx_equal_p( *( rtx *)&x1[1], recog_data_0.operand[1]) 
&& rtx_equal_p( x1[1].fld[0].rtx, recog_data_0.operand[2]) 
&& ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 66 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[2] != 66) 
recog_data_0.operand[1] = x3e; 
induction_1 *giv; // [rsp+30h] [rbp-30h] 
induction_1 *giv; // [rsp+30h] [rbp-30h] 
induction_1 *biv; // [rsp+38h] [rbp-28h] 
induction_1 *biv; // [rsp+38h] [rbp-28h] 
for ( biv = bl_0->biv; biv; biv = biv->next_iv ) 
for ( biv = bl_0->biv; biv; biv = biv->next_iv ) 
for ( biv = bl_0->biv; biv; biv = biv->next_iv ) 
for ( biv = bl_0->biv; biv; biv = biv->next_iv ) 
if ( ( unsigned __int16)*( _DWORD *)pa == 36 || ( unsigned __int16)*( _DWORD *)pa == 33 || biv->insn == pa ) 
for ( giv = bl_0->giv; giv; giv = giv->next_iv ) 
for ( giv = bl_0->giv; giv; giv = giv->next_iv ) 
for ( giv = bl_0->giv; giv; giv = giv->next_iv ) 
for ( giv = bl_0->giv; giv; giv = giv->next_iv ) 
if ( ( ( *( ( _WORD *)giv + 50) >> 6) & 1) == 0 ) 
if ( ( unsigned __int16)*( _DWORD *)pa != 36 || ( ( *( ( _WORD *)giv + 50) >> 3) & 1) != 0 ) 
if ( giv->mult_val != const_int_rtx[64] && ( *( ( _WORD *)giv + 50) & 1) == 0 ) 
if ( giv->mult_val != const_int_rtx[64] && ( *( ( _WORD *)giv + 50) & 1) == 0 ) 
if ( biv->insn == pa ) 
if ( biv->mult_val == const_int_rtx[65] ) 
maxnode = ( tree_node *)*( &global_trees + 11); 
minnode = ( tree_node *)*( &global_trees + 11); 
rtx equiv_loc; // [rsp+B8h] [rbp-108h] 
rtx copy_0; // [rsp+C8h] [rbp-F8h] 
rtx temp; // [rsp+190h] [rbp-30h] 
rtx tempa; // [rsp+190h] [rbp-30h] 
rtx tempb; // [rsp+190h] [rbp-30h] 
v4 = insn_data_0[optab_table[41]->handlers[mode].insn_code].genfun( op1, op2); 
memset( context, 0, sizeof( diagnostic_context_0)); 
replace_args_0( pfile, node, ( macro_arg_0 *)buff->base); 
scan_rtx_address( insn, ( rtx *)x->fld, GENERAL_REGS, action, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
if ( mode_class_0[mode] == MODE_FLOAT && ( target_flags & 0x20) != 0 ) 
if ( mode_class_0[mode] != MODE_VECTOR_INT ) 
v4 = mode_class_0[mode] == MODE_VECTOR_FLOAT; 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[1] = x3l; 
recog_data_0.operand[2] = x3n; 
recog_data_0.operand[3] = x2t; 
if ( !rtx_equal_p( x2u->fld[0].rtx, recog_data_0.operand[1]) ) 
if ( !rtx_equal_p( *( rtx *)&x2u[1], recog_data_0.operand[2]) ) 
return gen_split_1003( recog_data_0.operand); 
recog_data_0.operand[1] = x3m; 
recog_data_0.operand[2] = x3o; 
recog_data_0.operand[3] = x2w; 
if ( !rtx_equal_p( x2x->fld[0].rtx, recog_data_0.operand[1]) ) 
if ( !rtx_equal_p( *( rtx *)&x2x[1], recog_data_0.operand[2]) ) 
return gen_split_1005( recog_data_0.operand); 
recog_data_0.operand[0] = x2; 
tmode = *( ( unsigned __int16 *)insn_data_0[icode].operand + 8); 
mode0 = *( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8); 
|| !insn_data_0[icode].operand->predicate( target, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) ) 
|| !insn_data_0[icode].operand->predicate( target, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) ) 
v6 = insn_data_0[icode].genfun( target, op0a); 
if ( mode_class_0[mode0] == MODE_VECTOR_INT || mode_class_0[mode0] == MODE_VECTOR_FLOAT ) 
if ( mode_class_0[mode0] == MODE_VECTOR_INT || mode_class_0[mode0] == MODE_VECTOR_FLOAT ) 
if ( !insn_data_0[icode].operand[1].predicate( op0, mode0) ) 
v6 = insn_data_0[icode].genfun( target, op0); 
for ( endp = p; *endp && ( sch_istable[*( unsigned __int8 *)endp] & 4) != 0; ++endp ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[i])] != MODE_COMPLEX_INT ) 
v10 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[i])] == MODE_COMPLEX_FLOAT; 
return gen_rtx_fmt_ee( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), x, c); 
edge_info_0[index] = flow_edges; 
edge_info_0[index_1] = flow_edges; 
( rtx_code)( unsigned __int16)*( _DWORD *)src->fld[0].rtwint, 
edge_info_0[index_2] = flow_edges; 
edge_info_0[index_0] = flow_edges; 
( rtx_code)( unsigned __int16)*( _DWORD *)src, 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)src), 
( rtx_code)( unsigned __int16)*( _DWORD *)src, 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)src), 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 30374, "pent_uv_unit_blockage"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( incdec_operand( recog_data_0.operand[2], DImode) 
if ( incdec_operand( recog_data_0.operand[2], DImode) 
if ( incdec_operand( recog_data_0.operand[2], SImode) 
if ( incdec_operand( recog_data_0.operand[2], SImode) 
|| incdec_operand( recog_data_0.operand[2], HImode) 
|| incdec_operand( recog_data_0.operand[2], HImode) 
if ( incdec_operand( recog_data_0.operand[2], HImode) 
if ( incdec_operand( recog_data_0.operand[2], HImode) 
|| incdec_operand( recog_data_0.operand[2], QImode) 
|| incdec_operand( recog_data_0.operand[2], QImode) 
if ( incdec_operand( recog_data_0.operand[2], QImode) 
if ( incdec_operand( recog_data_0.operand[2], QImode) 
|| ( ( ( 1 << ix86_cpu) & x86_double_with_add) == 0 || !const1_operand( recog_data_0.operand[2], VOIDmode)) 
&& const1_operand( recog_data_0.operand[2], VOIDmode) 
&& ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) 
|| !const1_operand( recog_data_0.operand[2], VOIDmode)) 
name = ( const char *)&unk_89ED39; 
name = ( const char *)&unk_89ED4D; 
name = ( const char *)&unk_89ED63; 
name = ( const char *)&unk_89ED75; 
name = ( const char *)&unk_89EDE6; 
if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE ) 
v6 = truth_value_p( ( tree_code)( unsigned __int8)*( ( _DWORD *)&t->common + 4)) != 0; 
popped = stack_0; 
if ( &timevars[timevara] != stack_0->timevar ) 
stack_0 = stack_0->next; 
stack_0 = stack_0->next; 
*( _OWORD *)&recog_data_0.operand[28] = 0LL; 
*( _OWORD *)&recog_data_0.operand[28] = 0LL; 
*( _OWORD *)&recog_data_0.operand[26] = 0LL; 
*( _OWORD *)&recog_data_0.operand[26] = 0LL; 
*( _OWORD *)&recog_data_0.operand[24] = 0LL; 
*( _OWORD *)&recog_data_0.operand[24] = 0LL; 
*( _OWORD *)&recog_data_0.operand[22] = 0LL; 
*( _OWORD *)&recog_data_0.operand[22] = 0LL; 
*( _OWORD *)&recog_data_0.operand[20] = 0LL; 
*( _OWORD *)&recog_data_0.operand[20] = 0LL; 
*( _OWORD *)&recog_data_0.operand[18] = 0LL; 
*( _OWORD *)&recog_data_0.operand[18] = 0LL; 
temp = expand_expr( exp, 0LL, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target), EXPAND_NORMAL); 
v4 = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target)); 
temp = expand_expr( exp, v4, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)targeta), EXPAND_NORMAL); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)targeta), 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( exp->common.type->block.abstract_origin)) >> 1), 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( sizetype_tab[0]->block.abstract_origin)) >> 1), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)sizea), 
temp = convert_to_mode( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)targeta), temp, unsignedp); 
if ( label == ( tree_node *)global_trees ) 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v13 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
pp = ( page_entry_0 **)*pp; 
gp = ( page_group_0 **)*gp; 
hash = hash_expr( pat, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)pat), &do_not_record_p, expr_hash_table_size); 
print_block_visualization( &arg0); 
induction_1 *v; // [rsp+30h] [rbp-50h] 
induction_1 *v; // [rsp+30h] [rbp-50h] 
( machine_mode)( unsigned __int8)BYTE2( **( _DWORD **)&set[1]), 
v = ( induction_1 *)xmalloc( 0xA8uLL); 
v = ( induction_1 *)xmalloc( 0xA8uLL); 
record_biv( loopa, v, pa, dest_reg, inc_val, mult_val, location, not_every_iterationa, maybe_multiplea); 
v5 = *( tree_node **)( *( _QWORD *)&mem[1] + 8LL); 
*( _QWORD *)&mem[1] = get_mem_attrs( v6, v5, v4, size, align, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)mem)); 
value = ( tree_node *)*( &global_trees + 12); 
return gen_rtx_fmt_ee( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ba), rb, oba); 
rtx inner; // [rsp+10h] [rbp-20h] 
inner = op->fld[0].rtx; 
if ( !general_operand( inner->fld[0].rtx, v2) ) 
if ( ( unsigned __int16)*( _DWORD *)inner->fld[0].rtwint == 75 ) 
if ( ( unsigned __int16)**( _DWORD **)( inner->fld[0].rtwint + 16) == 54 ) 
if ( *( _QWORD *)( *( _QWORD *)( inner->fld[0].rtwint + 16) + 8LL) == -offset ) 
v8 = general_operand( *( rtx *)( inner->fld[0].rtwint + 8), v3) != 0; 
if ( mode_class_0[( unsigned __int8)BYTE2( **( _DWORD **)chains->loc)] != MODE_COMPLEX_INT ) 
v9 = mode_class_0[( unsigned __int8)BYTE2( **( _DWORD **)chains->loc)] == MODE_COMPLEX_FLOAT; 
*chain->loc = gen_raw_REG( ( machine_mode)( unsigned __int8)BYTE2( **( _DWORD **)chain->loc), reg); 
dw2_asm_output_data( 1, 0LL, aEndOfChildrenO, diea->die_offset); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[i]), 
fancy_abort( &off_88ECD0[4], 1113, "reload"); 
if ( !reload_verbose_warned ) 
reload_verbose_warned = 1; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v20 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[rld[r].mode] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[rld[r].mode] == MODE_COMPLEX_FLOAT; 
if ( !insn_data_0[icode].operand->predicate( x, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) 
if ( !insn_data_0[icode].operand->predicate( x, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)) 
|| !insn_data_0[icode].operand[1].predicate( 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)) ) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)) ) 
|| !insn_data_0[icode].operand[2].predicate( 
return insn_data_0[icode].genfun( x, x, y); 
hash_lookup( *( hash_table_0 **)data, ( *r)->fld[0].rtx, 1, 0LL); 
ifme = (  struct insns_for_mem_entry *)hash_lookup( *( hash_table_0 **)data, *r, 0, 0LL); 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_INT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint)] == MODE_INT 
targeta = gen_reg_rtx( ( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( expa->common.type->block.abstract_origin)) >> 1)); 
( machine_mode)( ( unsigned __int8)HIBYTE( *( _WORD *)( *( _QWORD *)( arglist->int_cst.int_cst.low + 8) + 60LL)) >> 1), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)targetb), 
v3 = reverse_condition_maybe_unordered( ( rtx_code)( unsigned __int16)*( _DWORD *)new_op1); 
v3 = reverse_condition( ( rtx_code)( unsigned __int16)*( _DWORD *)new_op1); 
decode_asm_operands( pat, recog_data_0.operand, recog_data_0.operand_loc, constraints, operand_mode); 
decode_asm_operands( pat, recog_data_0.operand, recog_data_0.operand_loc, constraints, operand_mode); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg)); 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v11 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( debug_info_level_0 == DINFO_LEVEL_NORMAL 
|| debug_info_level_0 == DINFO_LEVEL_VERBOSE 
if ( debug_info_level_0 == DINFO_LEVEL_NORMAL 
|| debug_info_level_0 == DINFO_LEVEL_VERBOSE 
print_rtx_head = &arg0; 
fatal_insn_not_found( insna, "final.c", 2551, "final_scan_insn"); 
fatal_insn( "could not split insn", insna, "final.c", 2622, "final_scan_insn"); 
output_asm_insn( templatea, recog_data_0.operand); 
fprintf( file, off_8068CF, ( unsigned int)( x->fld[0].rtint - 37 + 8)); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v21 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v25 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
if ( !insn_data_0[icode].operand->predicate( x, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) 
if ( !insn_data_0[icode].operand->predicate( x, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)) 
|| !insn_data_0[icode].operand[1].predicate( 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)) ) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)) ) 
|| !insn_data_0[icode].operand[2].predicate( 
return insn_data_0[icode].genfun( x, x, y); 
peep2_insn_data_0[i].live_before = bitmap_initialize( &rs_heads[i]); 
peep2_insn_data_0[i].insn = 0LL; 
peep2_insn_data_0[4].insn = global_rtl[0]; 
bitmap_copy( peep2_insn_data_0[4].live_before, live); 
peep2_insn_data_0[peep2_current].insn = insn; 
bitmap_copy( peep2_insn_data_0[peep2_current].live_before, live); 
old_insn = peep2_insn_data_0[j].insn; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)note_0), 
if ( ( unsigned __int16)*( _DWORD *)peep2_insn_data_0[ja].insn == 34 ) 
note = find_reg_note( peep2_insn_data_0[i].insn, REG_EH_REGION, 0LL); 
trya = emit_insn_after( trya, peep2_insn_data_0[i].insn); 
delete_insn_chain( insn, peep2_insn_data_0[i].insn); 
bitmap_copy( live, peep2_insn_data_0[i].live_before); 
name = &arg0; 
bi = ( block_info_0)block->aux; 
bi_0 = ( block_info_0)e->dest->aux; 
p = initializer_stack_0; 
while ( constructor_stack_0 ) 
q = constructor_stack_0; 
constructor_stack_0 = constructor_stack_0->next; 
constructor_stack_0 = constructor_stack_0->next; 
if ( constructor_range_stack_0 ) 
constructor_stack_0 = p->constructor_stack; 
constructor_range_stack_0 = p->constructor_range_stack; 
spelling_0 = p->spelling; 
initializer_stack_0 = p->next; 
*( _DWORD *)test = ( unsigned __int16)reverse_condition_maybe_unordered( ( rtx_code)( unsigned __int16)*( _DWORD *)bypass_test) | *( _DWORD *)test & 0xFFFF0000; 
node = ( cpp_hashnode_0 *)ht_lookup( pfile->hash_table, str, len, HT_NO_INSERT); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v25 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v20 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
( rtx_code)( unsigned __int16)*( _DWORD *)*operands, 
if ( !peep2_insn_data_0[ofsa].insn ) 
return bitmap_bit_p( peep2_insn_data_0[ofsa].live_before, regno) == 0; 
induction_1 *v; // [rsp+40h] [rbp-20h] 
induction_1 *v; // [rsp+40h] [rbp-20h] 
induction_1 *va; // [rsp+40h] [rbp-20h] 
induction_1 *va; // [rsp+40h] [rbp-20h] 
v = bl_0->biv; 
while ( v ) 
fprintf( file, " Inc%d: insn %d, incr: ", i, v->insn->fld[0].rtuint); 
print_simple_rtl( file, v->add_val); 
v = v->next_iv; 
v = v->next_iv; 
va = bl_0->giv; 
while ( va ) 
fprintf( file, " Giv%d: insn %d, benefit %d, ", ia, va->insn->fld[0].rtuint, ( unsigned int)va->benefit); 
fprintf( file, " Giv%d: insn %d, benefit %d, ", ia, va->insn->fld[0].rtuint, ( unsigned int)va->benefit); 
if ( va->giv_type ) 
if ( rtx_class[( unsigned __int16)*( _DWORD *)va->insn] == 105 ) 
if ( ( unsigned __int16)**( _DWORD **)&va->insn[2] == 47 ) 
v4 = ( rtx)va->insn[2]; 
v4 = single_set_2( va->insn, *( rtx *)&va->insn[2]); 
fatal_insn_not_found( insn, "insn-attrtab.c", 9021, "fpu_unit_ready_cost"); 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( insn) == MEMORY_STORE) ) 
|| immediate_operand( recog_data_0.operand[1], VOIDmode) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( insn) == MEMORY_STORE) ) 
|| immediate_operand( recog_data_0.operand[1], VOIDmode) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( insn) == MEMORY_STORE) ) 
|| immediate_operand( recog_data_0.operand[1], VOIDmode) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( insn) == MEMORY_STORE) ) 
|| immediate_operand( recog_data_0.operand[1], VOIDmode) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( insn) == MEMORY_STORE) ) 
if ( ix86_cpu == PROCESSOR_PENTIUMPRO && mult_operator( recog_data_0.operand[3], SFmode) ) 
tree initial; // rcx 
tree v35; // rdx 
recorded_label_ref_0 = 0; 
qty_0 = (  struct qty *)xmalloc( 44LL * ( max_regno - 53)); 
next_qty_0 = max_qty; 
if ( next_qty_0 >= 6 ) 
memset( qty_phys_copy_sugg, 0, 8LL * next_qty_0); 
memset( qty_phys_num_copy_sugg, 0, 2LL * next_qty_0); 
memset( qty_phys_sugg, 0, 8LL * next_qty_0); 
memset( qty_phys_num_sugg, 0, 2LL * next_qty_0); 
for ( ia = 0; ia < next_qty_0; ++ia ) 
next_qty_0 = 0; 
free( qty_0); 
return recorded_label_ref_0; 
n_ops = recog_data_0.n_operands; 
if ( matches >= 0 || recog_op_alt[i][alt].matched >= 0 || predicated && recog_data_0.operand_type[i] == OP_OUT ) 
recog_data_0.operand_type[i] = OP_INOUT; 
kill_value( recog_data_0.operand[ia], vd); 
kill_value( recog_data_0.operand[ib], vd); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)src)] != MODE_COMPLEX_INT ) 
v20 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)src)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[vd->e[regno].mode] != MODE_COMPLEX_INT ) 
v16 = mode_class_0[vd->e[regno].mode] == MODE_COMPLEX_FLOAT; 
newa = find_oldest_value_reg( ( reg_class)regclass_map[regno], src, vd); 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[ic] != 61 
|| recog_data_0.operand[ic]->fld[0].rtint != recog_data_0.operand[ic][1]) ) 
|| recog_data_0.operand[ic]->fld[0].rtint != recog_data_0.operand[ic][1]) ) 
fancy_abort( &off_88ECD0[4], 4739, "reloads_conflict"); 
fprintf( outfile, "%*s", print_indent, &arg0); 
timevar_start( TV_TOTAL_0); 
timevar_stop( TV_TOTAL_0); 
if ( !genrtl_case_label_explained ) 
genrtl_case_label_explained = 1; 
targeta = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target)); 
temp = force_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[1]), operands[1]); 
else if ( ( sch_istable[*( unsigned __int8 *)p] & 0x88) != 0 ) 
if ( ( sch_istable[*( unsigned __int8 *)p] & 4) != 0 ) 
if ( ( sch_istable[( unsigned __int8)c] & 4) == 0 ) 
else if ( ( sch_istable[*( unsigned __int8 *)p] & 4) != 0 ) 
if ( ( sch_istable[( unsigned __int8)c] & 4) == 0 ) 
if ( ( cost = ix86_register_move_cost( m1, ( reg_class)classa, dest_class), reg_class_size[classa] > best_size) 
best_cost = ix86_register_move_cost( m1, ( reg_class)classa, dest_class); 
if ( ( predictor_info_0[best_predictor].flags & 1) != 0 ) 
dump_prediction( ( br_predictor)predictor_0, *( _QWORD *)( *( _QWORD *)( ( *pnote)->fld[0].rtwint + 16) + 8LL), bb, v5); 
ret_val = &arg0; 
data_type = &arg0; 
for ( i = recog_data_0.n_operands - 1; i >= 0; --i ) 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 66 ) 
return memory_address_length( recog_data_0.operand[i]->fld[0].rtx); 
if ( constructor_stack_0->replacement_value ) 
constructor_stack_0->replacement_value = value; 
if ( constructor_stack_0->replacement_value ) 
while ( constructor_stack_0->implicit 
if ( constructor_range_stack_0 
spelling_0 = &spelling_base[constructor_depth]; 
spelling_0 = &spelling_base[constructor_depth]; 
spelling_0 = &spelling_base[constructor_depth]; 
constructor_range_stack_0 = 0LL; 
if ( !constructor_range_stack_0 ) 
range_stack = constructor_range_stack_0; 
return ++new_alias_set_last_alias_set; 
ind_ptr = ( induction_0 *)*( ( _QWORD *)&induction_chain->name + induction_chain->elements_used); 
elim_reg_set |= 1LL << life_analysis_eliminables[i].from; 
recog_data_0.insn = 0LL; 
recog_data_0.operand[0] = x1; 
return gen_split_1178( recog_data_0.operand); 
recog_data_0.operand[0] = x1; 
return gen_split_1179( recog_data_0.operand); 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 34651, "pent_np_unit_blockage"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) ) 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
|| !q_regs_operand( recog_data_0.operand[0], QImode) 
if ( which_alternative || memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( which_alternative == 1 && !memory_operand( recog_data_0.operand[1], VOIDmode) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
else if ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
if ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE ) 
&& ( immediate_operand( recog_data_0.operand[1], VOIDmode) || get_attr_memory( executing_insn) == MEMORY_STORE) ) 
if ( !incdec_operand( recog_data_0.operand[2], DImode) 
else if ( !incdec_operand( recog_data_0.operand[2], DImode) 
target = expand_simple_unop( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)if_infoa->x), ABS, b, if_infoa->x, 0); 
target = expand_simple_unop( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target), NEG, target, if_infoa->x, 0); 
fatal_insn_not_found( insn, "insn-attrtab.c", 2135, "athlon_load_unit_ready_cost"); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_VECTOR_FLOAT ) 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)lhsa)] != mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)lhsa->fld[0].rtwint)] 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)lhsa)] != mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)lhsa->fld[0].rtwint)] 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)lhsa->fld[0].rtwint), 
v16 = gen_lowpart_for_combine( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), tema); 
v5 = lang_hooks_0.staticp( arg); 
if ( !decla->decl.initial || !strcmp( lang_hooks_0.name, "GNU C++") && decla->decl.initial == ( tree)global_trees ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)pos_rtx))) == 0 ) 
rtx v15; // [rsp+30h] [rbp-90h] 
rtx v19; // [rsp+48h] [rbp-78h] 
induction_1 *v; // [rsp+50h] [rbp-70h] 
induction_1 *v; // [rsp+50h] [rbp-70h] 
rtx set; // [rsp+58h] [rbp-68h] 
rtx temp; // [rsp+60h] [rbp-60h] 
rtx *add_vala; // [rsp+88h] [rbp-38h] 
rtx dest_rega; // [rsp+90h] [rbp-30h] 
rtx src_rega; // [rsp+98h] [rbp-28h] BYREF 
rtx pa; // [rsp+A0h] [rbp-20h] 
xa = gen_rtx_fmt_ee( EXPR_LIST, ( machine_mode)BYTE2( *( _DWORD *)x), newb, *( rtx *)&x[1]); 
( rtx_code)( unsigned __int16)*( _DWORD *)xa, 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), 
fancy_abort( &off_88ECD0[4], 2609, "eliminate_regs"); 
return gen_rtx_fmt_e( USE, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), newf); 
return adjust_address_1( newe, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), *( _DWORD *)&x[1], 0, 1); 
return gen_rtx_SUBREG( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), newe, *( _DWORD *)&x[1]); 
return gen_rtx_fmt_e( code, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), newd); 
else if ( general_operand( b, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)b)) ) 
if ( !general_operand( a, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)a)) ) 
v2 = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)a)); 
a = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)a)); 
if ( general_operand( b, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)b)) ) 
v4 = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)b)); 
b = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)b)); 
tmpd = gen_rtx_MEM( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)if_info->x), target); 
operands[4] = ix86_force_to_memory( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[1]), operands[1]); 
operands[4] = gen_rtx_fmt_e( FLOAT, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operands), operands[4]); 
( rtx_code)( unsigned __int16)*( _DWORD *)operands[3], 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[3]), 
ix86_free_from_memory( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[1])); 
if ( !recog_data_0.n_alternatives || !recog_data_0.n_operands ) 
if ( !recog_data_0.n_alternatives || !recog_data_0.n_operands ) 
fatal_insn_not_found( insna, &off_88ECD0[4], 8371, "reload_cse_simplify_operands"); 
alternative_reject = ( int *)( ( char *)&v21 - ( ( 4LL * recog_data_0.n_alternatives + 15) & 0xFFFFFFFFFFFFFFF0LL)); 
memset( alternative_reject, 0, 4LL * recog_data_0.n_alternatives); 
memset( alternative_nregs, v48, 4LL * recog_data_0.n_alternatives); 
for ( i = 0; i < recog_data_0.n_operands; ++i ) 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] != 36 
&& ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] != 67 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] != 68 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] != 54 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] != 55 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] != 58 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] != 134 
if ( ( sch_istable[string->text[i]] & 0x204) == 0 && ( string->text[i] != 36 || !pfile->opts.dollars_in_ident) ) 
rtx insn; // [rsp+30h] [rbp-70h] 
rtx old_stack_level; // [rsp+48h] [rbp-58h] BYREF 
rtx before_call; // [rsp+58h] [rbp-48h] 
rtx temp; // [rsp+60h] [rbp-40h] 
rtx structure_value_addra; // [rsp+68h] [rbp-38h] 
rtx targeta; // [rsp+80h] [rbp-20h] 
targeta = target; 
structure_value_addra = structure_value_addr; 
old_stack_level = 0LL; 
before_call = get_last_insn( ); 
timevar_push( TV_INTEGRATION_0); 
temp = expand_inline_function( fndecl, actparms, targeta, ignorea, typea, structure_value_addra); 
temp = expand_inline_function( fndecl, actparms, targeta, ignorea, typea, structure_value_addra); 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 33397, "pent_mul_unit_conflict_cost"); 
if ( which_alternative || !mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( mult_operator( recog_data_0.operand[3], XFmode) ) 
if ( mult_operator( recog_data_0.operand[3], TFmode) ) 
if ( which_alternative == 2 || !mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( which_alternative == 2 || !mult_operator( recog_data_0.operand[3], DFmode) ) 
if ( mult_operator( recog_data_0.operand[3], DFmode) ) 
if ( mult_operator( recog_data_0.operand[3], TFmode) ) 
if ( mult_operator( recog_data_0.operand[3], XFmode) ) 
free( uid_cuid_1); 
recog_data_0.operand[1] = x3; 
recog_data_0.operand[2] = x3a; 
recog_data_0.operand[0] = x2ba; 
&& ( unsigned __int16)recog_data_0.operand[2]->fld[0].rtwint != 0x8000LL ) 
recog_data_0.operand[2] = x3a; 
recog_data_0.operand[0] = x2bb; 
|| !rtx_equal_p( x2bc->fld[0].rtx, recog_data_0.operand[1]) 
|| !rtx_equal_p( *( rtx *)&x2bc[1], recog_data_0.operand[2]) 
|| !ix86_binary_operator_ok( MINUS, HImode, recog_data_0.operand) ) 
recog_data_0.operand[1] = x4; 
recog_data_0.operand[2] = x4a; 
recog_data_0.operand[0] = x2a; 
|| !rtx_equal_p( x2c->fld[0].rtx, recog_data_0.operand[1]) 
|| !rtx_equal_p( *( rtx *)&x2c[1], recog_data_0.operand[2]) 
&& mode_class_0[mode] == MODE_INT 
|| mode_class_0[mode] == MODE_INT 
&& mode_class_0[oldmode] == MODE_INT 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)note->fld[0].rtwint)] != MODE_COMPLEX_INT ) 
v59 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)note->fld[0].rtwint)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] != MODE_COMPLEX_INT ) 
v55 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] != MODE_COMPLEX_INT ) 
v51 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] != MODE_COMPLEX_INT ) 
v47 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)note->fld[0].rtwint)] != MODE_COMPLEX_INT ) 
v43 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)note->fld[0].rtwint)] == MODE_COMPLEX_FLOAT; 
rtx new_const_0; // [rsp+258h] [rbp-228h] 
rtx y_3; // [rsp+270h] [rbp-210h] 
rtx y_2; // [rsp+280h] [rbp-200h] 
rtx inner_const; // [rsp+2C0h] [rbp-1C0h] 
rtx y; // [rsp+2C8h] [rbp-1B8h] 
return mode_class_0[mode] == MODE_CC; 
if ( mode_class_0[mode] == MODE_CC || mode_class_0[mode] == MODE_RANDOM || mode_class_0[mode] == MODE_PARTIAL_INT ) 
if ( mode_class_0[mode] == MODE_CC || mode_class_0[mode] == MODE_RANDOM || mode_class_0[mode] == MODE_PARTIAL_INT ) 
if ( mode_class_0[mode] == MODE_CC || mode_class_0[mode] == MODE_RANDOM || mode_class_0[mode] == MODE_PARTIAL_INT ) 
( *direction)[13 * i] = star; 
( *direction)[13 * i] = merge_dependencies_direction_merge[( *direction)[13 * i]][( *direction)[13 * i + j]]; 
( *direction)[13 * i] = merge_dependencies_direction_merge[( *direction)[13 * i]][( *direction)[13 * i + j]]; 
( *direction)[13 * i] = merge_dependencies_direction_merge[( *direction)[13 * i]][( *direction)[13 * i + j]]; 
( *direction)[13 * i] = merge_dependencies_direction_merge[( *direction)[13 * i]][( *direction)[13 * i + j]]; 
invalidate( dest->fld[0].rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest)); 
if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_VERBOSE ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)srca->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)srca)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest)); 
v4 = &allocno_0[( __int64)*( ( int *)reg_allocno + src_regno)]; 
v5 = &allocno_0[( __int64)*( ( int *)reg_allocno + src_regno)]; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] != MODE_COMPLEX_INT ) 
v27 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] == MODE_COMPLEX_FLOAT; 
v11 = &allocno_0[( __int64)*( ( int *)reg_allocno + src_regno)]; 
v12 = &allocno_0[( __int64)*( ( int *)reg_allocno + dest_regno)]; 
v13 = &allocno_0[( __int64)*( ( int *)reg_allocno + dest_regno)]; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)srca)] != MODE_COMPLEX_INT ) 
v23 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)srca)] == MODE_COMPLEX_FLOAT; 
v19 = &allocno_0[( __int64)*( ( int *)reg_allocno + dest_regno)]; 
did_insert = pre_edge_insert( edge_list_0, index_map); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg)); 
if ( constructor_range_stack_0 ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)) 
v3 = TV_LIFE_0; 
v3 = TV_LIFE_UPDATE_0; 
fatal_insn_not_found( insn, "insn-attrtab.c", 3681, "athlon_vectordec_unit_blockage_range"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) || ix86_cpu != PROCESSOR_ATHLON ) 
if ( which_alternative || memory_operand( recog_data_0.operand[1], VOIDmode) || ix86_cpu != PROCESSOR_ATHLON ) 
if ( which_alternative == 1 && !memory_operand( recog_data_0.operand[1], VOIDmode) && ix86_cpu == PROCESSOR_ATHLON ) 
ggc_mark_tree_hash_table( *( hash_table_0 **)elt); 
return new_loc_descr( ( dwarf_location_atom)( reg + 112), offset, 0LL); 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v15 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[mode] == MODE_INT ) 
&& ( !undobuf_0.other_insn || other_insn == undobuf_0.other_insn) 
&& ( !undobuf_0.other_insn || other_insn == undobuf_0.other_insn) 
v1 = gen_rtx_fmt_ee( new_code, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*cc_use), dest, const_int_rtx[64]); 
mask = nonzero_bits( op0, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0)); 
undobuf_0.other_insn = other_insn; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v31 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
remove_invalid_subreg_refs( i_1, *( _DWORD *)&x[1], ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
v6 = &arg0; 
posa = print_single_switch( file, pos, max, indent, v6, terma, "options passed: ", &arg0); 
posa = print_single_switch( filea, posa, maxa, indenta, sepa, terma, *p, &arg0); 
v7 = &arg0; 
posa = print_single_switch( filea, 0, maxa, indenta, v7, terma, "options enabled: ", &arg0); 
tmode = *( ( unsigned __int16 *)insn_data_0[d->icode].operand + 8); 
mode0 = *( ( unsigned __int16 *)&insn_data_0[d->icode].operand[1] + 8); 
mode1 = *( ( unsigned __int16 *)&insn_data_0[d->icode].operand[2] + 8); 
if ( mode_class_0[*( ( unsigned __int16 *)&insn_data_0[d->icode].operand[1] + 8)] == MODE_VECTOR_INT 
if ( mode_class_0[*( ( unsigned __int16 *)&insn_data_0[d->icode].operand[1] + 8)] == MODE_VECTOR_INT 
|| mode_class_0[*( ( unsigned __int16 *)&insn_data_0[d->icode].operand[1] + 8)] == MODE_VECTOR_FLOAT ) 
|| mode_class_0[*( ( unsigned __int16 *)&insn_data_0[d->icode].operand[1] + 8)] == MODE_VECTOR_FLOAT ) 
if ( mode_class_0[mode1] == MODE_VECTOR_INT || mode_class_0[mode1] == MODE_VECTOR_FLOAT ) 
if ( mode_class_0[mode1] == MODE_VECTOR_INT || mode_class_0[mode1] == MODE_VECTOR_FLOAT ) 
|| !insn_data_0[d->icode].operand->predicate( target, tmode) ) 
if ( !insn_data_0[d->icode].operand[1].predicate( op0, mode0) ) 
if ( !insn_data_0[d->icode].operand[2].predicate( op1, mode1) ) 
v1 = gen_rtx_fmt_ee( ( rtx_code)( unsigned __int16)*( _DWORD *)v0, VOIDmode, *( rtx *)&ev[1], *( rtx *)&v0[1]); 
predict_insn_def( insn, PRED_BUILTIN_EXPECT, ( prediction)( cond == const_true_rtx)); 
while ( constructor_stack_0->implicit 
p->next = constructor_stack_0; 
constructor_stack_0 = p; 
constructor_depth = spelling_0 - spelling_base; 
p->range_stack = constructor_range_stack_0; 
constructor_range_stack_0 = 0LL; 
if ( mode_class_0[mode] != MODE_FLOAT ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_VECTOR_FLOAT 
|| mode_class_0[mode] == MODE_FLOAT 
|| mode_class_0[mode] == MODE_COMPLEX_FLOAT 
|| mode_class_0[mode] == MODE_VECTOR_FLOAT ) 
return nonzero & nonzero_bits( x, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)) | ~mode_mask_array[( unsigned __int8)BYTE2( *( _DWORD *)x)] & mode_mask_array[modea]; 
|| mode_class_0[reg_last_set_mode[x->fld[0].rtuint]] == MODE_INT && mode_class_0[modea] == MODE_INT) 
|| mode_class_0[reg_last_set_mode[x->fld[0].rtuint]] == MODE_INT && mode_class_0[modea] == MODE_INT) 
nonzero = nonzero_bits( x->fld[0].rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)) & v8; 
if ( mode_class_0[modea] == MODE_INT ) 
loc = gen_rtx_MEM( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)loc), new_addr); 
v4 = gen_rtx_fmt_ee( code, ( machine_mode)BYTE2( *( _DWORD *)x), cond->fld[0].rtx, *( rtx *)&cond[1]); 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x2; 
recog_data_0.operand[1] = x2; 
recog_data_0.operand[1] = x1a; 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x2a; 
&& ix86_unary_operator_ok( NEG, XFmode, recog_data_0.operand) 
recog_data_0.operand[1] = x2c; 
&& ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[0] != 66 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 66) ) 
recog_data_0.operand[1] = x2c; 
&& ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[0] != 66 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 66) ) 
recog_data_0.operand[1] = x2b; 
&& ix86_unary_operator_ok( ABS, XFmode, recog_data_0.operand) 
recog_data_0.operand[1] = x1b; 
$46E27178171750CEF28E8B43DEBEAD96 *v12; // rcx 
$46E27178171750CEF28E8B43DEBEAD96 *v12; // rcx 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v21 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
fancy_abort( &off_88ECD0[4], 8994, "reload_combine_note_use"); 
fancy_abort( &off_88ECD0[4], 9015, "reload_combine_note_use"); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v17 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
v12 = &reg_state[regno_0]; 
v13 = v12->use_index - 1; 
v12->use_index = v13; 
if ( in_section_0 != in_bss ) 
in_section_0 = in_bss; 
args = ( macro_arg_0 *)buff->base; 
if ( stack_0 ) 
timevar_accumulate( &stack_0->timevar->elapsed, &start_time, &now); 
context->next = stack_0; 
stack_0 = context; 
condb = gen_rtx_fmt_ee( code, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)cond), op_a, op_b); 
rtx x; // [rsp+70h] [rbp-70h] 
if ( mode_size[innermode] > v5 && mode_class_0[outermode] == MODE_INT ) 
if ( mode_class_0[outermode] != MODE_INT ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op->fld[0].rtwint), 
res = simplify_subreg( outermode, rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx), final_offset_0); 
x = gen_rtx_REG( outermode, final_regno); 
*( _DWORD *)&x[1] = op[1]; 
return x; 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 22849, "athlon_ieu_unit_blockage"); 
&& symbolic_operand( recog_data_0.operand[1], SImode) 
&& ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode)) ) 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
if ( ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0) 
&& q_regs_operand( recog_data_0.operand[0], QImode) 
&& symbolic_operand( recog_data_0.operand[1], DImode) 
&& ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode)) ) 
|| pic_symbolic_operand( recog_data_0.operand[2], DImode) 
|| pic_symbolic_operand( recog_data_0.operand[2], SImode) 
|| pic_symbolic_operand( recog_data_0.operand[2], SImode) 
if ( ( which_alternative == 2 || incdec_operand( recog_data_0.operand[2], HImode)) 
&& !incdec_operand( recog_data_0.operand[2], HImode) ) 
if ( ( which_alternative == 3 || incdec_operand( recog_data_0.operand[2], QImode)) 
&& !incdec_operand( recog_data_0.operand[2], QImode) ) 
|| !const1_operand( recog_data_0.operand[2], VOIDmode)) 
&& const1_operand( recog_data_0.operand[2], VOIDmode) ) 
if ( ( ( ( 1 << ix86_cpu) & x86_double_with_add) == 0 || !const1_operand( recog_data_0.operand[2], VOIDmode)) 
diagnostic_for_decl( decl, msgid, ( va_list_0 *)ap, 0); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)subreg), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0->fld[0].rtwint)); 
*(short *)0x0 = operand_sub*(short *)0xforce( 
*(short *)0x0a = operand_sub*(short *)0xforce( op0, offset, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0)); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)inner)] != MODE_COMPLEX_INT ) 
v15 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)inner)] == MODE_COMPLEX_FLOAT; 
op0_word = operand_sub*(short *)0xforce( op0, nwords - 1 - i, mode); 
op1_word = operand_sub*(short *)0xforce( op1, nwords - 1 - i, mode); 
safe_from_p_save_expr_list = 0LL; 
for ( t = safe_from_p_save_expr_list; t; t = t->common.chain ) 
safe_from_p_save_expr_list = tree_cons( exp, 0LL, safe_from_p_save_expr_list); 
safe_from_p_save_expr_list = tree_cons( exp, 0LL, safe_from_p_save_expr_list); 
nops = first_rtl_op( ( tree_code)( unsigned __int8)*( ( _DWORD *)&expa->common + 4)); 
if ( ( unsigned __int8)*( ( _DWORD *)&expa->common + 4) < 0x93u || lang_hooks_0.safe_from_p( xa, expa) ) 
( machine_mode)( ( unsigned __int8)HIBYTE( *( _WORD *)( *( _QWORD *)( arglist->int_cst.int_cst.low + 8) + 60LL)) >> 1), 
*( _OWORD *)&value->un.vechi[13] = 0LL; 
*( _OWORD *)&value->un.vechi[11] = 0LL; 
*( _OWORD *)&value->un.vechi[9] = 0LL; 
*( _OWORD *)&value->un.vechi[7] = 0LL; 
*( _OWORD *)&value->un.vechi[5] = 0LL; 
*( _OWORD *)&value->un.vechi[3] = 0LL; 
*( _OWORD *)&value->un.vechi[1] = 0LL; 
*( _OWORD *)value = 0LL; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest_reg), 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 30886, "pent_uv_unit_conflict_cost"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) ) 
if ( incdec_operand( recog_data_0.operand[2], DImode) 
if ( incdec_operand( recog_data_0.operand[2], DImode) 
if ( incdec_operand( recog_data_0.operand[2], SImode) 
if ( incdec_operand( recog_data_0.operand[2], SImode) 
|| incdec_operand( recog_data_0.operand[2], HImode) 
|| incdec_operand( recog_data_0.operand[2], HImode) 
if ( incdec_operand( recog_data_0.operand[2], HImode) 
if ( incdec_operand( recog_data_0.operand[2], HImode) 
|| incdec_operand( recog_data_0.operand[2], QImode) 
|| incdec_operand( recog_data_0.operand[2], QImode) 
if ( incdec_operand( recog_data_0.operand[2], QImode) 
if ( incdec_operand( recog_data_0.operand[2], QImode) 
|| ( ( ( 1 << ix86_cpu) & x86_double_with_add) == 0 || !const1_operand( recog_data_0.operand[2], VOIDmode)) 
&& const1_operand( recog_data_0.operand[2], VOIDmode) 
&& ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) 
|| !const1_operand( recog_data_0.operand[2], VOIDmode)) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)datum)] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)datum)] == MODE_COMPLEX_FLOAT; 
v13 = type_for_mode( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)add), unsignedp); 
timevar_push( TV_DUMP_0); 
timevar_pop( TV_DUMP_0); 
if ( mode_class_0[xmode] != MODE_COMPLEX_INT ) 
v24 = mode_class_0[xmode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[ymode] != MODE_COMPLEX_INT ) 
v20 = mode_class_0[ymode] == MODE_COMPLEX_FLOAT; 
recog_data_0.operand[1] = x2p; 
recog_data_0.operand[1] = x2q; 
recog_data_0.operand[1] = x2r; 
recog_data_0.operand[2] = x2u; 
recog_data_0.operand[1] = x2s; 
recog_data_0.operand[2] = x2v; 
recog_data_0.operand[1] = x2t; 
recog_data_0.operand[2] = x2w; 
recog_data_0.operand[1] = x2; 
recog_data_0.operand[2] = x2e; 
recog_data_0.operand[1] = x2f; 
recog_data_0.operand[2] = x2g; 
fatal_insn_not_found( insn, "insn-attrtab.c", 3460, "athlon_directdec_unit_ready_cost"); 
memset( buffer, 0, sizeof( output_buffer_0)); 
v0 = dwarf2out_cfi_label_label_num++; 
sprintf( dwarf2out_cfi_label_label, "*.%s%u", "LCFI", v0); 
assemble_name( asm_out_file, dwarf2out_cfi_label_label); 
return dwarf2out_cfi_label_label; 
for ( du_ptr = ( def_use_0 *)*( ( _QWORD *)&def_use_chain->name + def_use_chain->elements_used); 
du_ptr = ( def_use_0 *)*( ( _QWORD *)&def_use_chain->name + def_use_chain->elements_used) ) 
error( "can't use '%s' as a %s register", name, fix_register_what_option[fixed][call_used]); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v15 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
&& mode_class_0[fieldmode] != MODE_INT 
&& mode_class_0[fieldmode] != MODE_PARTIAL_INT ) 
imode = int_mode_for_mode( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0)); 
v12 = insn_data_0[icode].operand[1].predicate( valueb, fieldmode); 
v12 = insn_data_0[icode].operand[1].predicate( valueb, fieldmode); 
&& mode_class_0[fieldmode] != MODE_INT 
&& mode_class_0[fieldmode] != MODE_PARTIAL_INT ) 
genfun = insn_data_0[icode].genfun; 
rtx list; // [rsp+18h] [rbp-28h] 
list = reg_equiv[regno].init_insns; 
if ( list != const_int_rtx[64] ) 
while ( list ) 
rtx = list->fld[0].rtx; 
list = ( rtx)list[1]; 
if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE ) 
fatal_insn_not_found( insn, "insn-attrtab.c", 356, "insn_default_length"); 
if ( register_operand( recog_data_0.operand[0], DImode) ) 
if ( register_operand( recog_data_0.operand[0], SImode) ) 
if ( register_operand( recog_data_0.operand[0], VOIDmode) ) 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 33187, "pent_mul_unit_blockage"); 
if ( which_alternative || !mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( mult_operator( recog_data_0.operand[3], XFmode) ) 
if ( mult_operator( recog_data_0.operand[3], TFmode) ) 
if ( which_alternative == 2 || !mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( which_alternative == 2 || !mult_operator( recog_data_0.operand[3], DFmode) ) 
if ( mult_operator( recog_data_0.operand[3], DFmode) ) 
if ( mult_operator( recog_data_0.operand[3], TFmode) ) 
if ( mult_operator( recog_data_0.operand[3], XFmode) ) 
for ( run = ( cpp_reader_0 *)&pfile->base_run; run; run = ( cpp_reader_0 *)runn ) 
for ( run = ( cpp_reader_0 *)&pfile->base_run; run; run = ( cpp_reader_0 *)runn ) 
runn = ( tokenrun_0 *)run->buffer; 
if ( run != ( cpp_reader_0 *)&pfile->base_run ) 
field_size_tree = ( tree_node *)*( &global_trees + 17); 
bitpos_int = QCameraExposure::setAutoIsoSensitivity( decl); 
for ( p = spelling_base; p < spelling_0; ++p ) 
if ( !insn_data_0[1316].operand->predicate( op0, *( ( unsigned __int16 *)insn_data_0[1316].operand + 8)) ) 
if ( !insn_data_0[1316].operand->predicate( op0, *( ( unsigned __int16 *)insn_data_0[1316].operand + 8)) ) 
upper = ( tree_node *)domain[7]; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] != MODE_COMPLEX_INT ) 
v13 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] == MODE_COMPLEX_FLOAT; 
return gen_rtx_fmt_e( USE, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v2), v2); 
edge_info_0 *inf; // [rsp+30h] [rbp-30h] 
edge_info_0 *inf; // [rsp+30h] [rbp-30h] 
inf = ( edge_info_0 *)e->aux; 
inf = ( edge_info_0 *)e->aux; 
if ( ( *( _BYTE *)inf & 4) == 0 && ( *( _BYTE *)inf & 2) == 0 ) 
if ( ( *( _BYTE *)inf & 4) == 0 && ( *( _BYTE *)inf & 2) == 0 ) 
v1 = &arg0; 
in_bb_p = ( print_rtl_with_bb::bb_state *)xcalloc( max_uid, 4uLL); 
state = IN_MULTIPLE_BB; 
state = IN_MULTIPLE_BB; 
if ( in_bb_p[x->fld[0].rtint] == NOT_IN_BB ) 
if ( in_bb_p[x->fld[0].rtint] == NOT_IN_BB ) 
state = IN_ONE_BB; 
state = IN_ONE_BB; 
in_bb_p[x->fld[0].rtint] = state; 
in_bb_p[x->fld[0].rtint] = state; 
if ( in_bb_p[tmp_rtx->fld[0].rtint] 
if ( in_bb_p[tmp_rtx->fld[0].rtint] == IN_MULTIPLE_BB ) 
if ( in_bb_p[tmp_rtx->fld[0].rtint] == IN_MULTIPLE_BB ) 
free( in_bb_p); 
set_diagnostic_context( &dc, msgid, ( va_list_0 *)ap, file, line, flag_pedantic_errors == 0); 
if ( ( unsigned __int16)*( _DWORD *)op1 != 55 || mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op1a)] != MODE_INT ) 
v1 = gen_internal_sym_label_num++; 
df_uses_record( df_0, ( rtx *)( 8LL * j + *( _QWORD *)&x[2] + 8LL), DF_REF_REG_USE, bb, insn, ( df_ref_flags)0); 
df_uses_record( df_0, ( rtx *)&x[1], DF_REF_REG_USE, bb, insn, ( df_ref_flags)0); 
df_uses_record( df_0, ( rtx *)dst->fld, DF_REF_REG_MEM_STORE, bb, insn, ( df_ref_flags)0); 
df_uses_record( df_0, ( rtx *)&dst[1], DF_REF_REG_USE, bb, insn, ( df_ref_flags)0); 
df_uses_record( df_0, ( rtx *)dst[1].fld, DF_REF_REG_USE, bb, insn, ( df_ref_flags)0); 
undobuf_0.other_insn = 0LL; 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)temp->fld[0].rtwint)] == MODE_INT ) 
&& mode_class_0[( unsigned __int8)BYTE2( **( _DWORD **)( *( _QWORD *)&i3a[2] + 8LL))] == MODE_INT ) 
v16 = immed_double_const( lo, hi, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)temp->fld[0].rtwint)); 
&& mode_class_0[( unsigned __int8)BYTE2( **( _DWORD **)( *( _QWORD *)( *( _QWORD *)( *( _QWORD *)&i2a[2] + 8LL) + 8LL) + 8LL))] == MODE_CC 
if ( !undobuf_0.other_insn ) 
cc_use = find_single_use( newpat->fld[0].rtx, i3a, &undobuf_0.other_insn); 
compare_mode = ix86_cc_mode( ( rtx_code)( unsigned __int16)*( _DWORD *)*cc_use, i2src, const_int_rtx[64]); 
undobuf_0.other_insn = 0LL; 
bb_deps = ( deps_0 *)xmalloc( 104LL * ( int)current_nr_blocks); 
sched_rgn_n_insns += sched_n_insns_0; 
v2 = swap_condition( ( rtx_code)( unsigned __int16)*( _DWORD *)comparison); 
ok = parse_params( pfile, ( cpp_macro_0 *)macro); 
token = alloc_expansion_token( pfile, ( cpp_macro_0 *)macro); 
token = lex_expansion_token( pfile, ( cpp_macro_0 *)macro); 
token = lex_expansion_token( pfile, ( cpp_macro_0 *)macro); 
&& *( cpp_hashnode_0 **)( *( ( _QWORD *)macro + 1) + 8LL) == node ) 
node->value.macro = ( cpp_macro_0 *)macro; 
if ( !QGenericArgument::QGenericArgument( node->ident.str, "__STDC_", 7uLL) ) 
if ( QTextBlock::operator<( x, y) ) 
induction_1 *v; // [rsp+8h] [rbp-18h] 
induction_1 *v; // [rsp+8h] [rbp-18h] 
for ( v = bl_0->biv; v; v = v->next_iv ) 
for ( v = bl_0->biv; v; v = v->next_iv ) 
for ( v = bl_0->biv; v; v = v->next_iv ) 
for ( v = bl_0->biv; v; v = v->next_iv ) 
if ( ( ( *( ( _WORD *)v + 50) >> 3) & 1) == 0 
|| v->mult_val != const_int_rtx[65] 
|| ( ( *( ( _WORD *)v + 50) >> 5) & 1) != 0 ) 
result = fold_rtx_mult_add( result, const_int_rtx[65], v->add_val, v->mode); 
result = fold_rtx_mult_add( result, const_int_rtx[65], v->add_val, v->mode); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v31 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
x_ent->const_rtx = gen_lowpart_if_possible( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), p_1->exp); 
return gen_rtx_fmt_e( CONSTANT_P_RTX, ( machine_mode)value_mode, v1); 
rtx insn; // [rsp+58h] [rbp-28h] 
for ( insn = bb->head; ; insn = insn[1].fld[0].rtx ) 
for ( insn = bb->head; ; insn = insn[1].fld[0].rtx ) 
for ( insn = bb->head; ; insn = insn[1].fld[0].rtx ) 
if ( insn ) 
v4 = insn != bb->end[1].fld[0].rtx; 
uid = insn->fld[0].rtuint; 
if ( rtx_class[( unsigned __int16)*( _DWORD *)insn] == 105 ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)subreg), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*pat))] 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 26821, "k6_alu_unit_blockage"); 
|| !symbolic_operand( recog_data_0.operand[1], SImode) ) 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], SImode) 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
if ( q_regs_operand( recog_data_0.operand[0], QImode) && ( ( 1 << ix86_cpu) & x86_movx) == 0 ) 
|| !symbolic_operand( recog_data_0.operand[1], DImode) ) 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], DImode) 
|| pic_symbolic_operand( recog_data_0.operand[2], DImode) ) 
|| pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
|| pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
if ( ( which_alternative == 2 || incdec_operand( recog_data_0.operand[2], HImode)) 
&& !incdec_operand( recog_data_0.operand[2], HImode) 
if ( ( which_alternative == 3 || incdec_operand( recog_data_0.operand[2], QImode)) 
&& !incdec_operand( recog_data_0.operand[2], QImode) 
|| ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode)) 
&& ( ( ( 1 << ix86_cpu) & x86_double_with_add) == 0 || !const1_operand( recog_data_0.operand[2], VOIDmode)) ) 
&& const1_operand( recog_data_0.operand[2], VOIDmode) 
&& ( ( ( 1 << ix86_cpu) & x86_double_with_add) == 0 || !const1_operand( recog_data_0.operand[2], VOIDmode)) ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] != MODE_COMPLEX_INT ) 
v24 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] != MODE_COMPLEX_INT ) 
v20 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] == MODE_COMPLEX_FLOAT; 
expa = lang_hooks_0.expand_constant( exp); 
if ( ( sch_istable[( unsigned __int8)i[1]] & 0x88) == 0 || i[2] != 91 ) 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 23760, "athlon_vectordec_unit_blockage"); 
casenum = memory_operand( recog_data_0.operand[1], VOIDmode) == 0; 
casenum = !which_alternative && !memory_operand( recog_data_0.operand[1], VOIDmode); 
casenum = which_alternative == 1 && !memory_operand( recog_data_0.operand[1], VOIDmode); 
fatal_insn_not_found( candidate_insn, "insn-attrtab.c", 24162, "athlon_vectordec_unit_blockage"); 
v6 = memory_operand( recog_data_0.operand[1], VOIDmode) != 0; 
v6 = which_alternative || memory_operand( recog_data_0.operand[1], VOIDmode); 
v6 = which_alternative != 1 || memory_operand( recog_data_0.operand[1], VOIDmode); 
recog_data_0.operand[5] = x4d; 
recog_data_0.operand[2] = x3n; 
recog_data_0.operand[3] = x3o; 
recog_data_0.operand[4] = x3p; 
recog_data_0.operand[1] = x2y; 
recog_data_0.operand[1] = x3q; 
recog_data_0.operand[2] = x3r; 
recog_data_0.operand[2] = x3b; 
recog_data_0.operand[3] = x3c; 
recog_data_0.operand[1] = x2i; 
if ( rtx_equal_p( x2j->fld[0].rtx, recog_data_0.operand[2]) ) 
if ( rtx_equal_p( *( rtx *)&x2j[1], recog_data_0.operand[3]) ) 
recog_data_0.operand[1] = x3b; 
recog_data_0.operand[2] = x3d; 
recorded_label_ref_0 = 1; 
ix86_cpu_string = override_options_cpu_names[12]; 
else if ( !strcmp( ix86_asm_string, off_80612B) ) 
if ( !strcmp( ix86_arch_string, override_options_processor_alias_table[i].name) ) 
ix86_arch = override_options_processor_alias_table[i].processor; 
if ( ( override_options_processor_alias_table[i].flags & 4) != 0 && ( target_flags & 0x8000) == 0 ) 
if ( ( override_options_processor_alias_table[i].flags & 0x10) != 0 && ( target_flags & 0x200000) == 0 ) 
if ( ( override_options_processor_alias_table[i].flags & 0x40) != 0 && ( target_flags & 0x800000) == 0 ) 
if ( ( override_options_processor_alias_table[i].flags & 1) != 0 && ( target_flags & 0x20000) == 0 ) 
if ( ( override_options_processor_alias_table[i].flags & 2) != 0 && ( target_flags & 0x80000) == 0 ) 
if ( ( override_options_processor_alias_table[i].flags & 8) != 0 ) 
if ( !strcmp( ix86_cpu_string, override_options_processor_alias_table[ia].name) ) 
ix86_cpu = override_options_processor_alias_table[ia].processor; 
if ( ( override_options_processor_alias_table[ia].flags & 8) != 0 ) 
ix86_cost = override_options_processor_target_table[ix86_cpu].cost; 
target_flags |= override_options_processor_target_table[ix86_cpu].target_enable; 
target_flags &= ~override_options_processor_target_table[ix86_cpu].target_disable; 
align_loops = override_options_processor_target_table[ix86_cpu].align_loop; 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 25623, "k6_load_unit_blockage"); 
casenum = memory_operand( recog_data_0.operand[1], VOIDmode) == 0; 
casenum = which_alternative || !memory_operand( recog_data_0.operand[1], VOIDmode); 
casenum = which_alternative != 1 || !memory_operand( recog_data_0.operand[1], VOIDmode); 
casenum = memory_operand( recog_data_0.operand[0], VOIDmode) == 0; 
casenum = constant_call_address_operand( recog_data_0.operand[0], VOIDmode) != 0; 
casenum = constant_call_address_operand( recog_data_0.operand[1], VOIDmode) != 0; 
diagnostic_for_decl( decla, msgida, ( va_list_0 *)ap, flag_pedantic_errors == 0); 
return QGenericArgument::QGenericArgument( buf, fmt, ap); 
lang_hooks_0.print_statistics( ); 
( machine_mode)( unsigned __int8)decla->real_cst.real_cst.r[2], 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( decla->common.type->block.abstract_origin)) >> 1)) ) 
decla->decl.rtl = gen_rtx_fmt_i0( REG, ( machine_mode)( unsigned __int8)decla->real_cst.real_cst.r[2], reg_number); 
v4 = mode_class_0[( unsigned __int8)decla->real_cst.real_cst.r[2]] == MODE_COMPLEX_INT; 
v24 = mode_class_0[( unsigned __int8)decla->real_cst.real_cst.r[2]] == MODE_COMPLEX_FLOAT; 
v1 = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)if_info->x)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)if_info->x), 
fatal_insn_not_found( insn, "insn-attrtab.c", 12189, "get_attr_athlon_decode"); 
v3 = memory_operand( recog_data_0.operand[1], VOIDmode) != 0; 
v3 = which_alternative || memory_operand( recog_data_0.operand[1], VOIDmode); 
v3 = which_alternative != 1 || memory_operand( recog_data_0.operand[1], VOIDmode); 
reg_set_0 *r; // [rsp+28h] [rbp-38h] 
reg_set_0 *r; // [rsp+28h] [rbp-38h] 
reg_set_0 *ra; // [rsp+28h] [rbp-38h] 
reg_set_0 *ra; // [rsp+28h] [rbp-38h] 
for ( r = reg_set_table[x->fld[0].rtuint]; r; r = r->next ) 
for ( r = reg_set_table[x->fld[0].rtuint]; r; r = r->next ) 
for ( r = reg_set_table[x->fld[0].rtuint]; r; r = r->next ) 
for ( r = reg_set_table[x->fld[0].rtuint]; r; r = r->next ) 
v4 = bmap[*( int *)( basic_block_for_insn->data.l[r->insn->fld[0].rtint] + 88)]; 
for ( ra = reg_set_table[x->fld[0].rtuint]; ra; ra = ra->next ) 
for ( ra = reg_set_table[x->fld[0].rtuint]; ra; ra = ra->next ) 
for ( ra = reg_set_table[x->fld[0].rtuint]; ra; ra = ra->next ) 
for ( ra = reg_set_table[x->fld[0].rtuint]; ra; ra = ra->next ) 
v5 = bmap[*( int *)( basic_block_for_insn->data.l[ra->insn->fld[0].rtint] + 88)]; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest), 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rega)] != MODE_COMPLEX_INT ) 
v13 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)rega)] == MODE_COMPLEX_FLOAT; 
if ( *( _OWORD *)&idom != 0LL ) 
error( "unable to find a register to spill in class `%s'", spill_failure_reg_class_names[a2]); 
fatal_insn( "this is the insn:", insn, &off_88ECD0[4], 1910, "spill_failure"); 
error_for_asm( insn, "can't find a register in class `%s' while reloading `asm'", spill_failure_reg_class_names[a2]); 
fatal_insn_not_found( insn, "insn-attrtab.c", 5779, "k6_alu_unit_ready_cost"); 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], SImode) 
|| !symbolic_operand( recog_data_0.operand[1], SImode) 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
if ( q_regs_operand( recog_data_0.operand[0], QImode) 
|| ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0) 
|| flag_pic && symbolic_operand( recog_data_0.operand[1], DImode) 
|| !symbolic_operand( recog_data_0.operand[1], DImode) 
if ( ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], DImode)) 
if ( incdec_operand( recog_data_0.operand[2], DImode) 
|| !incdec_operand( recog_data_0.operand[2], DImode) 
if ( ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], SImode)) 
if ( ( which_alternative || pic_symbolic_operand( recog_data_0.operand[2], SImode)) 
if ( incdec_operand( recog_data_0.operand[2], SImode) 
|| !incdec_operand( recog_data_0.operand[2], SImode) 
&& incdec_operand( recog_data_0.operand[2], HImode) 
&& !incdec_operand( recog_data_0.operand[2], HImode) 
if ( incdec_operand( recog_data_0.operand[2], HImode) 
escape_0 = byte_8A1D50[*_ascii_bytes]; 
if ( byte_8A1D50[*_ascii_bytes] ) 
if ( byte_8A1D50[*_ascii_bytes] == 1 ) 
escape = byte_8A1D50[*_limited_str]; 
if ( byte_8A1D50[*_limited_str] ) 
if ( byte_8A1D50[*_limited_str] == 1 ) 
set_diagnostic_context( &dc, msgid, ( va_list_0 *)ap, input_filename, lineno, 0); 
if ( ( sch_istable[*( unsigned __int8 *)reg_names[xa->fld[0].rtuint]] & 4) != 0 ) 
sprintf( t, off_8A279B, *( _DWORD *)&xa[1]); 
copy = rtx_alloc( ( rtx_code)( unsigned __int16)*( _DWORD *)notes); 
top_of_stack[i] = gen_rtx_MEM( ( machine_mode)i, global_rtl[2]); 
if ( reg_pref_0 ) 
return reg_pref_0[regno].prefclass; 
if ( ix86_GOT_alias_set_set == -1 ) 
ix86_GOT_alias_set_set = new_alias_set( ); 
return ix86_GOT_alias_set_set; 
set_diagnostic_context( &dc, msgid, ( va_list_0 *)ap, input_filename, lineno, 0); 
reg_avail_info_0 = (  struct reg_avail_info *)gmalloc( 12 * max_gcse_regno); 
reg_avail_info_0[i].last_bb = -1; 
free( reg_avail_info_0); 
reg_avail_info_0 = 0LL; 
recog_data_0.operand[1] = x3h; 
recog_data_0.operand[2] = x2e; 
recog_data_0.operand[1] = x3i; 
recog_data_0.operand[2] = x2g; 
recog_data_0.operand[1] = x2; 
recog_data_0.operand[2] = x2q; 
recog_data_0.operand[2] = x3u; 
recog_data_0.operand[2] = x4t; 
recog_data_0.operand[2] = x4s; 
recog_data_0.operand[1] = x3; 
recog_data_0.operand[2] = x3a; 
n_outputs = recog_data_0.n_operands - n_inputs; 
for ( i = 0; i < recog_data_0.n_operands; ++i ) 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 63 
&& ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i]->fld[0].rtwint == 61 ) 
recog_data_0.operand_loc[i] = ( rtx *)recog_data_0.operand[i]->fld; 
recog_data_0.operand_loc[i] = ( rtx *)recog_data_0.operand[i]->fld; 
recog_data_0.operand[i] = recog_data_0.operand[i]->fld[0].rtx; 
recog_data_0.operand[i] = recog_data_0.operand[i]->fld[0].rtx; 
note_kind = ( reg_note *)( ( char *)v6 - ( ( 4LL * i + 15) & 0xFFFFFFFFFFFFFFF0LL)); 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 61 
&& recog_data_0.operand[i]->fld[0].rtint >= 8u 
&& recog_data_0.operand[i]->fld[0].rtint <= 0xFu 
regno = get_hard_regnum( &temp_stack, recog_data_0.operand[i]); 
if ( regno != recog_data_0.operand[i]->fld[0].rtint ) 
if ( init_flow_initialized ) 
init_flow_initialized = 1; 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 22131, "athlon_muldiv_unit_blockage"); 
while ( ( sch_istable[*( unsigned __int8 *)constraint] & 4) != 0 ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op0a)] == MODE_CC ) 
if ( QTextBlock::operator<( trueop0, trueop1) ) 
if ( ( mode_class_0[modea] == MODE_INT 
|| mode_class_0[modea] == MODE_PARTIAL_INT 
|| mode_class_0[modea] == MODE_COMPLEX_INT 
|| mode_class_0[modea] == MODE_VECTOR_INT) 
&& ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)trueop0)] != MODE_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)trueop0)] != MODE_COMPLEX_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)trueop0)] != MODE_VECTOR_FLOAT 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)trueop0)] == MODE_FLOAT ) 
if ( ( mode_class_0[modea] == MODE_INT || modea == VOIDmode) 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 25384, "k6_store_unit_conflict_cost"); 
|| !symbolic_operand( recog_data_0.operand[1], SImode) ) 
|| !symbolic_operand( recog_data_0.operand[1], DImode) ) 
if ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], DImode) ) 
if ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
if ( which_alternative || pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
if ( which_alternative != 1 || const0_operand( recog_data_0.operand[2], DImode) ) 
if ( which_alternative != 1 || const0_operand( recog_data_0.operand[2], SImode) ) 
fatal_insn_not_found( insn, "insn-attrtab.c", 2203, "athlon_fp_mul_unit_ready_cost"); 
src = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)orig_srca)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)src), 
else if ( ( sch_istable[( unsigned __int8)ce] & 4) != 0 ) 
parse_number_0( pfile, ( cpp_string_0 *)&result->val, ce, 1); 
parse_number_0( pfile, ( cpp_string_0 *)&result->val, c, 0); 
recog_data_0.operand[2] = x2; 
recog_data_0.operand[0] = x2b; 
recog_data_0.operand[5] = x4; 
recog_data_0.operand[3] = x3c; 
recog_data_0.operand[1] = x2i; 
if ( rtx_equal_p( x3f->fld[0].rtx, recog_data_0.operand[5]) ) 
recog_data_0.operand[4] = x3g; 
if ( rtx_equal_p( x2k->fld[0].rtx, recog_data_0.operand[3]) ) 
if ( rtx_equal_p( x2l->fld[0].rtx, recog_data_0.operand[4]) ) 
if ( rtx_equal_p( x1h->fld[0].rtx, recog_data_0.operand[5]) ) 
rtx op1; // [rsp+138h] [rbp-28h] 
rtx op0; // [rsp+140h] [rbp-20h] 
rtx xa; // [rsp+150h] [rbp-10h] 
xa = x; 
op0 = x->fld[0].rtx; 
op1 = ( rtx)x[1]; 
if ( ( unsigned __int16)*( _DWORD *)op0 == 85 && rtx_equal_p( op0->fld[0].rtx, op1) && !side_effects_p( op1) ) 
if ( ( unsigned __int16)*( _DWORD *)op0 == 85 && rtx_equal_p( op0->fld[0].rtx, op1) && !side_effects_p( op1) ) 
if ( ( unsigned __int16)*( _DWORD *)op0 == 85 && rtx_equal_p( op0->fld[0].rtx, op1) && !side_effects_p( op1) ) 
if ( ( unsigned __int16)*( _DWORD *)op0 == 85 && rtx_equal_p( op0->fld[0].rtx, op1) && !side_effects_p( op1) ) 
v2 = simplify_gen_unary( NOT, mode, *( rtx *)&op0[1], mode); 
xa = gen_binary( AND, mode, v2, op1); 
if ( !memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)memref), newa) 
addra = force_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)addr), addr); 
v9 = *( tree_node **)( *( _QWORD *)&memref[1] + 8LL); 
*( _QWORD *)&newb[1] = get_mem_attrs( v10, v9, 0LL, 0LL, align, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)newb)); 
while ( ( sch_istable[*( unsigned __int8 *)p] & 4) != 0 ) 
( rtx_code)( unsigned __int16)*( _DWORD *)comparison, 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 24655, "k6_fpu_unit_blockage"); 
casenum = mult_operator( recog_data_0.operand[3], SFmode) != 0; 
if ( which_alternative || mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( which_alternative || !mult_operator( recog_data_0.operand[3], SFmode) ) 
casenum = mult_operator( recog_data_0.operand[3], XFmode) != 0; 
casenum = mult_operator( recog_data_0.operand[3], TFmode) != 0; 
else if ( mult_operator( recog_data_0.operand[3], SFmode) ) 
else if ( which_alternative == 2 || !mult_operator( recog_data_0.operand[3], SFmode) ) 
else if ( mult_operator( recog_data_0.operand[3], DFmode) ) 
else if ( which_alternative == 2 || !mult_operator( recog_data_0.operand[3], DFmode) ) 
else if ( mult_operator( recog_data_0.operand[3], XFmode) ) 
else if ( mult_operator( recog_data_0.operand[3], TFmode) ) 
rtx op0; // [rsp+48h] [rbp-B8h] 
rtx tem; // [rsp+70h] [rbp-90h] 
rtx src; // [rsp+78h] [rbp-88h] 
rtx srca; // [rsp+78h] [rbp-88h] 
rtx dest; // [rsp+80h] [rbp-80h] 
rtx inner; // [rsp+98h] [rbp-68h] BYREF 
rtx newa; // [rsp+B0h] [rbp-50h] 
mask = ( 8 * eflags_p) | ( 4 * ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)operands[1])] == MODE_INT)) | ( 2 * unordered_p) | stack_top_dies; 
if ( !output_fp_compare_alt[mask] ) 
return output_fp_compare_alt[mask]; 
fatal_insn_not_found( insn, "insn-attrtab.c", 13642, "get_attr_length_address"); 
if ( !constant_call_address_operand( recog_data_0.operand[1], VOIDmode) ) 
v1 = _mm_sub_pd( ( __m128d)_mm_unpacklo_epi32( ( __m128i)nids, ( __m128i)xmm*(short *)0x8021E0), ( __m128d)xmm*(short *)0x8021F0); 
v1 = _mm_sub_pd( ( __m128d)_mm_unpacklo_epi32( ( __m128i)nids, ( __m128i)xmm*(short *)0x8021E0), ( __m128d)xmm*(short *)0x8021F0); 
( __m128d)_mm_unpacklo_epi32( _mm_loadl_epi64( ( const __m128i *)&nelts), ( __m128i)xmm*(short *)0x8021E0), 
( __m128d)xmm*(short *)0x8021F0); 
( __m128d)_mm_unpacklo_epi32( _mm_loadl_epi64( ( const __m128i *)&total_bytes), ( __m128i)xmm*(short *)0x8021E0), 
( __m128d)xmm*(short *)0x8021F0); 
( __m128d)_mm_unpacklo_epi32( _mm_loadl_epi64( ( const __m128i *)&nelts), ( __m128i)xmm*(short *)0x8021E0), 
tema = adjust_address_1( v2, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ad), 0LL, 0, 1); 
if ( undobuf_0.frees ) 
buf = undobuf_0.frees; 
undobuf_0.frees = undobuf_0.frees->next; 
undobuf_0.frees = undobuf_0.frees->next; 
buf->next = undobuf_0.undos; 
undobuf_0.undos = buf; 
targeta = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target)); 
return *( _OWORD *)element->bits == 0LL; 
if ( reg_renumber[allocno_0[( __int64)*( int *)&allocno_order[4 * i]].reg] < 0 ) 
if ( reg_renumber[allocno_0[( __int64)*( int *)&allocno_order[4 * ia]].reg] < 0 ) 
fprintf( file, " %d", ( unsigned int)allocno_0[( __int64)*( int *)&allocno_order[4 * ia]].reg); 
&& j != allocno_0[( __int64)*( int *)&allocno_order[4 * ia]].reg ) 
if ( allocno_0[( __int64)*( int *)&allocno_order[4 * ia]].size != 1 ) 
fprintf( file, " ( %d)", ( unsigned int)allocno_0[( __int64)*( int *)&allocno_order[4 * ia]].size); 
fprintf( file, ";; %d conflicts:", ( unsigned int)allocno_0[( __int64)ib].reg); 
fprintf( file, " %d", ( unsigned int)allocno_0[( __int64)j_0].reg); 
if ( ( ( 1LL << j_0a) & allocno_0[( __int64)ib].hard_reg_conflicts) != 0 ) 
if ( ( ( 1LL << j_0b) & allocno_0[( __int64)ib].hard_reg_preferences) != 0 ) 
fprintf( file, ";; %d preferences:", ( unsigned int)allocno_0[( __int64)ib].reg); 
if ( ( ( 1LL << j_0c) & allocno_0[( __int64)ib].hard_reg_preferences) != 0 ) 
if ( ( !avail_p || *( ( _DWORD *)uid_cuid_1 + *( int *)( list_entry->fld[0].rtwint + 8)) >= uid_limit) 
&& ( avail_p || *( ( _DWORD *)uid_cuid_1 + *( int *)( list_entry->fld[0].rtwint + 8)) <= uid_limit) ) 
if ( type1 == ( tree_node *)*( &global_trees + 10) ) 
if ( type1 == ( tree_node *)*( &global_trees + 9) ) 
if ( type1 == ( tree_node *)*( &global_trees + 8) ) 
if ( type1 == ( tree_node *)*( &global_trees + 7) ) 
if ( type1 == ( tree_node *)*( &global_trees + 6) ) 
classa = mode_class_0[mode]; 
if ( insn_data_0[icode].operand->predicate( test, wider_mode) ) 
v7 = insn_data_0[icode].genfun( test, xa, v6, label); 
v8 = insn_data_0[icodea].genfun( xb); 
v10 = insn_data_0[icodeb].genfun( xc, ya); 
memset( dc, 0, sizeof( diagnostic_context_0)); 
if ( in_section_0 != in_text ) 
in_section_0 = in_text; 
lang_expand_expr = ( lang_expand_expr_t)c_expand_expr; 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)valuea)] != MODE_INT ) 
while ( ( sch_istable[*( ( unsigned __int8 *)p - 1)] & 0x88) == 0 ); 
return gen_rtx_fmt_e( CLOBBER, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), const_int_rtx[64]); 
return gen_rtx_fmt_ee( ( rtx_code)( unsigned __int16)*( _DWORD *)xa, mode, xa->fld[0].rtx, *( rtx *)&xa[1]); 
offset_0 = subreg_lowpart_offset( mode, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa)); 
res = simplify_gen_subreg( mode, xa, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), offset_0); 
return gen_rtx_fmt_e( CLOBBER, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), const_int_rtx[64]); 
return gen_rtx_fmt_e( CLOBBER, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), const_int_rtx[64]); 
timevar_push( TV_REST_OF_COMPILATION_0); 
timevar_push( TV_INTEGRATION_0); 
timevar_pop( TV_INTEGRATION_0); 
timevar_push( TV_INTEGRATION_0); 
timevar_pop( TV_INTEGRATION_0); 
timevar_push( TV_JUMP_0); 
timevar_pop( TV_JUMP_0); 
timevar_push( TV_JUMP_0); 
timevar_pop( TV_JUMP_0); 
timevar_push( TV_JUMP_0); 
timevar_pop( TV_JUMP_0); 
timevar_push( TV_TO_SSA_0); 
timevar_pop( TV_TO_SSA_0); 
timevar_push( TV_SSA_CCP_0); 
timevar_pop( TV_SSA_CCP_0); 
timevar_push( TV_SSA_DCE_0); 
timevar_pop( TV_SSA_DCE_0); 
timevar_push( TV_FROM_SSA_0); 
timevar_pop( TV_FROM_SSA_0); 
rtint < 0 || insn_data_0[rtint].n_dups > 0)) ) 
if ( ( sch_istable[( unsigned __int8)ca] & 0x100) == 0 ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 
&& insn_data_0[icode].operand->predicate( r0, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) 
&& insn_data_0[icode].operand->predicate( r0, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)) 
&& insn_data_0[icode].operand[1].predicate( 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)) ) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)) ) 
&& insn_data_0[icode].operand[2].predicate( 
return insn_data_0[icode].genfun( r0, r1, c); 
for ( dep_ptr = ( dependence_0 *)dep_chain->data.l[-dest_idx]; dep_ptr; dep_ptr = dep_ptr->next ) 
if ( dep_ptr == ( dependence_0 *)dep_chain->data.l[-src_idx] ) 
for ( op_no = recog_data_0.n_operands; --op_no >= 0; matchpa->with[op_no] = -1 ) 
for ( op_no = 0; op_no < recog_data_0.n_operands; ++op_no ) 
p = recog_data_0.constraints[op_no]; 
if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE ) 
&& ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE ) 
recog_data_0.operand[1] = x3; 
recog_data_0.operand[2] = x3a; 
recog_data_0.operand[0] = x2ba; 
recog_data_0.operand[2] = x3a; 
recog_data_0.operand[0] = x2bb; 
|| !rtx_equal_p( x2bc->fld[0].rtx, recog_data_0.operand[1]) 
|| !rtx_equal_p( *( rtx *)&x2bc[1], recog_data_0.operand[2]) 
|| !ix86_binary_operator_ok( MINUS, SImode, recog_data_0.operand) ) 
recog_data_0.operand[1] = x4; 
recog_data_0.operand[2] = x4a; 
recog_data_0.operand[0] = x2a; 
|| !rtx_equal_p( x2c->fld[0].rtx, recog_data_0.operand[1]) 
|| !rtx_equal_p( *( rtx *)&x2c[1], recog_data_0.operand[2]) 
|| !ix86_binary_operator_ok( PLUS, DImode, recog_data_0.operand) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op0)] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op0)] == MODE_COMPLEX_FLOAT; 
return offsettable_address_p( 0, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op), op->fld[0].rtx) != 0; 
v5 = *( tree_node **)( *( _QWORD *)&mem[1] + 8LL); 
*( _QWORD *)&mem[1] = get_mem_attrs( v6, v5, offset, v4, align, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)mem)); 
else if ( ( unsigned __int16)*( _DWORD *)trueop == 55 && mode_class_0[modea] == MODE_FLOAT ) 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)trueop)] != MODE_FLOAT 
|| mode_class_0[modea] != MODE_INT 
if_stmt = if_stack_0[if_stack_pointer - 1].if_stmt; 
fatal_insn_not_found( insn, "insn-attrtab.c", 6314, "ppro_p2_unit_ready_cost"); 
return &arg0; 
if ( ( sch_istable[( unsigned __int8)c] & 4) == 0 ) 
if ( peep2_insn_data_0[na].insn == global_rtl[0] ) 
return peep2_insn_data_0[na].insn; 
return new_loc_descr( ( dwarf_location_atom)( i + 48), i, 0LL); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)y->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)y)); 
real_value_truncate( &v3, ( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( type->block.abstract_origin)) >> 1), value); 
sprintf( producer, "%s %s", lang_hooks_0.name, version_string); 
if ( !strcmp( lang_hooks_0.name, "GNU C++") ) 
else if ( !strcmp( lang_hooks_0.name, "GNU Ada") ) 
else if ( !strcmp( lang_hooks_0.name, "GNU F77") ) 
else if ( !strcmp( lang_hooks_0.name, "GNU Pascal") ) 
else if ( !strcmp( lang_hooks_0.name, "GNU Java") ) 
diagnostic_buffer->state.format_args = ( va_list_0 *)ap; 
induction_1 *v; // [rsp+0h] [rbp-20h] 
induction_1 *v; // [rsp+0h] [rbp-20h] 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
if ( ( *( ( _WORD *)v + 50) & 1) == 0 && ( ( *( ( _WORD *)v + 50) >> 1) & 1) == 0 ) 
if ( ( *( ( _WORD *)v + 50) & 1) == 0 && ( ( *( ( _WORD *)v + 50) >> 1) & 1) == 0 ) 
check_final_value( loop, v); 
formal_list = ( char *)&arg0; 
if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_VERBOSE ) 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v13 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( ( sch_istable[*( unsigned __int8 *)*format] & 4) == 0 ) 
while ( ( sch_istable[*( unsigned __int8 *)fcp] & 4) != 0 ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
fatal_insn_not_found( insn, "insn-attrtab.c", 5131, "k6_load_unit_blockage_range"); 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x2; 
recog_data_0.operand[1] = x2; 
recog_data_0.operand[1] = x1a; 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x2a; 
if ( ( target_flags & 1) != 0 && ix86_unary_operator_ok( NEG, TFmode, recog_data_0.operand) && pnum_clobbers ) 
recog_data_0.operand[1] = x2c; 
&& ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[0] != 66 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 66) ) 
recog_data_0.operand[1] = x2c; 
&& ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[0] != 66 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 66) ) 
recog_data_0.operand[1] = x2b; 
if ( ( target_flags & 1) != 0 && ix86_unary_operator_ok( ABS, TFmode, recog_data_0.operand) && pnum_clobbers ) 
recog_data_0.operand[1] = x1b; 
*operandsa = force_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operandsa), *operandsa); 
op0 = force_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operandsa), op0); 
*operandsa = force_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operandsa), *operandsa); 
op0 = force_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operandsa), op0); 
v2 = swap_condition( ( rtx_code)( unsigned __int16)*( _DWORD *)operandsa[1]); 
v3 = reverse_condition_maybe_unordered( ( rtx_code)( unsigned __int16)*( _DWORD *)operandsa[1]); 
tmp = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operandsa)); 
tmp = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)*operandsa)); 
if ( !recog_data_0.n_operands || !recog_data_0.n_alternatives ) 
if ( !recog_data_0.n_operands || !recog_data_0.n_alternatives ) 
for ( c = 0; c < recog_data_0.n_operands; ++c ) 
constraints[c] = recog_data_0.constraints[c]; 
for ( opno = 0; opno < recog_data_0.n_operands; ++opno ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op)); 
op1 = recog_data_0.operand[match]; 
op2 = recog_data_0.operand[opno]; 
if ( stricta <= 0 || strict_memory_address_p( recog_data_0.operand_mode[opno], op) ) 
for ( eopno = 0; eopno < recog_data_0.n_operands; ++eopno ) 
x_1 = gen_rtx_MEM( ( machine_mode)( unsigned __int8)decla->real_cst.real_cst.r[2], address); 
reg_mode = promote_mode( type, ( machine_mode)( unsigned __int8)decla->real_cst.real_cst.r[2], &unsignedp, 0); 
timevar_push( TV_LEX_0); 
timevar_pop( TV_LEX_0); 
fatal_insn_not_found( insn, "insn-attrtab.c", 9038, "fpu_unit_blockage_range"); 
lang_hooks_0.tree_inlining.add_pending_fn_decls( &id, prev_fn); 
v0 = edge_info_0; 
v3 = edge_info_0; 
if ( ( ( reaching_defs[*( int *)( basic_block_for_insn->data.l[insn->fld[0].rtint] + 88)]->elms[*( ( _DWORD *)uid_cuid_1 
+ def_insn->fld[0].rtint) >> 6] >> ( *( ( _BYTE *)uid_cuid_1 + 4 * def_insn->fld[0].rtint) & 0x3F)) & 1) != 0 ) 
if ( *( ( _DWORD *)uid_cuid_1 + def_insn->fld[0].rtint) >= *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint) ) 
if ( *( ( _DWORD *)uid_cuid_1 + def_insn->fld[0].rtint) >= *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint) ) 
LOBYTE( v8) = canon_hash( *( rtx *)&xa[1], ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint)); 
src_elt = lookup( v10, v8 & 0x1F, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint)); 
invalidate( *( rtx *)( xa->fld[0].rtwint + 8), ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint)); 
new_set->fld[0].rtwint = ( __int64)gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)new_set->fld[0].rtwint)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)static_chain_incoming_rtx), 
fancy_abort( &off_88ECD0[4], 3071, "eliminate_regs_in_insn"); 
for ( i = 0; i < recog_data_0.n_operands; ++i ) 
orig_operand[i] = recog_data_0.operand[i]; 
substed_operand[i] = recog_data_0.operand[i]; 
if ( insn_is_asm || insn_data_0[icode].operand[i].eliminable ) 
if ( recog_data_0.operand_type[i] && ( unsigned __int16)*( _DWORD *)orig_operand[i] == 61 ) 
v4 = eliminate_regs( recog_data_0.operand[i], VOIDmode, v9); 
*recog_data_0.operand_loc[i] = 0LL; 
if ( recog_data_0.operand_type[i] 
for ( i = 0; i < recog_data_0.n_dups; ++i ) 
*recog_data_0.dup_loc[i] = *recog_data_0.operand_loc[recog_data_0.dup_num[i]]; 
if ( ( unsigned __int16)**( _DWORD **)&this_insn_0[2] == 39 && multiple_sets( this_insn_0) ) 
if ( ( unsigned __int16)**( _DWORD **)&this_insn_0[2] == 39 && multiple_sets( this_insn_0) ) 
for ( i = **( _DWORD **)( *( _QWORD *)&this_insn_0[2] + 8LL) - 1; i >= 0; --i ) 
output_p = find_regno_note( this_insn_0, REG_INC, regno) != 0LL; 
qty_0[*( ( int *)reg_qty + regno)].death = output_p + 2 * this_insn_number; 
mark_life( regno, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 0); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 
if ( !e->aux && ( ( transp_0[pb->index]->elms[( unsigned int)j >> 6] >> ( j & 0x3F)) & 1) != 0 ) 
v2 = transp_0[pb->index]; 
rtx insn; // [rsp+48h] [rbp-28h] 
for ( insn = bb->end; ; insn = ( rtx)insn[1] ) 
for ( insn = bb->end; ; insn = ( rtx)insn[1] ) 
if ( insn ) 
v4 = insn != ( rtx)bb->head[1]; 
uid = insn->fld[0].rtuint; 
if ( rtx_class[( unsigned __int16)*( _DWORD *)insn] == 105 ) 
if ( rtx_class[code] == 99 && QTextBlock::operator<( op0, op1) ) 
if ( rtx_class[code] == 99 && QTextBlock::operator<( op0a, op1a) ) 
expr_0->reaching_reg = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v0->fld[0].rtwint)); 
old_cost = ix86_memory_move_cost( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)src), dclass, 1); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)src), 
val = cselib_lookup( src, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)set->fld[0].rtwint), 0); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)this_rtx), 
run->base = ( cpp_token_0 *)xmalloc( 24LL * count); 
r->new_reg = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)r->old_reg)); 
v5 = simplify_and_const_int( 0LL, ( machine_mode)BYTE2( *( _DWORD *)varopa), *( rtx *)&varopa[1], constopb); 
( __m128i)xmm*(short *)0x8021E0), 
( __m128d)xmm*(short *)0x8021F0); 
( __m128i)xmm*(short *)0x8021E0), 
( __m128d)xmm*(short *)0x8021F0); 
( __m128i)xmm*(short *)0x8021E0), 
( __m128d)xmm*(short *)0x8021F0); 
( __m128i)xmm*(short *)0x8021E0), 
( __m128d)xmm*(short *)0x8021F0); 
v6 = ( tree_node *)global_trees; 
v6 = ( tree_node *)global_trees; 
result->val.node = ( cpp_hashnode_0 *)source; 
fatal_insn_not_found( insn, "insn-attrtab.c", 4923, "k6_load_unit_ready_cost"); 
if ( memory_operand( recog_data_0.operand[1], VOIDmode) && ix86_cpu == PROCESSOR_K6 ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) && ix86_cpu == PROCESSOR_K6 
|| !memory_operand( recog_data_0.operand[0], VOIDmode) && ix86_cpu == PROCESSOR_K6 ) 
if ( !which_alternative && memory_operand( recog_data_0.operand[1], VOIDmode) && ix86_cpu == PROCESSOR_K6 ) 
if ( which_alternative == 1 && memory_operand( recog_data_0.operand[1], VOIDmode) && ix86_cpu == PROCESSOR_K6 ) 
if ( memory_operand( recog_data_0.operand[0], VOIDmode) && ix86_cpu == PROCESSOR_K6 ) 
if ( constant_call_address_operand( recog_data_0.operand[0], VOIDmode) || ix86_cpu != PROCESSOR_K6 ) 
if ( constant_call_address_operand( recog_data_0.operand[1], VOIDmode) || ix86_cpu != PROCESSOR_K6 ) 
array = *( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)&expa->block.vars; 
array = *( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)&expa->block.vars; 
domain = *( tree *)( *( _QWORD *)( array.low + 8) + 24LL); 
unit_size = *( tree *)( *( _QWORD *)( *( _QWORD *)( array.low + 8) + 8LL) + 40LL); 
v7 = build( MINUS_EXPR, *( tree *)( array.high + 8), array.high, initial); 
v7 = build( MINUS_EXPR, *( tree *)( array.high + 8), array.high, initial); 
emit_stack_restore( ( save_level)( thisblock->next == 0LL), thisblock->data.cond.next_label, 0LL); 
return gen_rtx_fmt_e( CLOBBER, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), const_int_rtx[64]); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa->fld[0].rtwint)); 
v3 = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg)); 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 
fixup_var_refs( reg, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg), 0, reg, 0LL); 
if ( ( ( *( ( _DWORD *)cfun + 106) >> 8) & 1) != 0 && qty_0[qtyno].n_calls_crossed > 0 ) 
else if ( qty_0[qtyno].n_calls_crossed ) 
useda |= 1LL << find_free_reg_eliminables[i].from; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v17 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
|| !qty_0[qtyno].n_calls_crossed 
|| 4 * qty_0[qtyno].n_calls_crossed >= qty_0[qtyno].n_refs ) 
|| 4 * qty_0[qtyno].n_calls_crossed >= qty_0[qtyno].n_refs ) 
if ( file != build_expr_wfl_last_file ) 
build_expr_wfl_last_file = file; 
build_expr_wfl_last_filenode = identifier; 
wfl->int_cst.int_cst.high = ( __int64)build_expr_wfl_last_filenode; 
if ( get_varargs_alias_set_set == -1 ) 
get_varargs_alias_set_set = new_alias_set( ); 
return get_varargs_alias_set_set; 
if ( ( sch_istable[*v4] & 4) == 0 ) 
( machine_mode)( unsigned __int8)decl->real_cst.real_cst.r[2], 
|| mode_class_0[modea] == MODE_FLOAT 
|| mode_class_0[modea] == MODE_COMPLEX_FLOAT 
|| mode_class_0[modea] == MODE_VECTOR_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_VECTOR_FLOAT ) 
num0 = num_sign_bit_copies( x, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op0)] == MODE_FLOAT ) 
fancy_abort( &off_88ECD0[4], 2839, "elimination_effects"); 
elimination_effects( x->fld[0].rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
fancy_abort( &off_88ECD0[4], 2698, "elimination_effects"); 
tree type; // [rsp+88h] [rbp-78h] 
tree p; // [rsp+90h] [rbp-70h] 
tree fndecla; // [rsp+B8h] [rbp-48h] 
tree actparmsa; // [rsp+C0h] [rbp-40h] 
actparmsa = actparms; 
fndecla = fndecl; 
temp = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
return expand_unop( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), optab_table[17], x, temp, 0); 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x1a; 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x2; 
recog_data_0.operand[1] = x1b; 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[0] != 66 
|| ( unsigned __int16)*( _DWORD *)recog_data_0.operand[1] != 66 ) 
recog_data_0.operand[0] = x2c; 
recog_data_0.operand[1] = x1c; 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x2e; 
recog_data_0.operand[1] = x2d; 
recog_data_0.operand[0] = x1; 
htab_empty( hash_table_0); 
if ( ( sch_istable[( unsigned __int8)c] & 0x10) != 0 ) 
escape_0 = byte_7F6018[*_ascii_bytes]; 
if ( byte_7F6018[*_ascii_bytes] ) 
escape = byte_7F6018[*_limited_str]; 
if ( byte_7F6018[*_limited_str] ) 
validate_change( insn, recog_data_0.operand_loc[match_number], src, 1); 
v1 = &arg0; 
fprintf( file, "; pref %s", dump_flow_info_reg_class_names[classa]); 
dump_flow_info_reg_class_names[classa], 
dump_flow_info_reg_class_names[altclass]); 
fprintf( file, "; %s or none", dump_flow_info_reg_class_names[classa]); 
rttree = ( tree_node *)tem[6]; 
v3 = QCameraExposure::setAutoIsoSensitivity( ( tree)tem); 
if ( !doing_eh_warned && do_warn ) 
doing_eh_warned = 1; 
v3 = ( int)( ( double)( qty_0[q2].size * qty_0[q2].freq * floor_log2_wide( qty_0[q2].n_refs)) 
v3 = ( int)( ( double)( qty_0[q2].size * qty_0[q2].freq * floor_log2_wide( qty_0[q2].n_refs)) 
v3 = ( int)( ( double)( qty_0[q2].size * qty_0[q2].freq * floor_log2_wide( qty_0[q2].n_refs)) 
/ ( double)( qty_0[q2].death - qty_0[q2].birth) 
/ ( double)( qty_0[q2].death - qty_0[q2].birth) 
- ( int)( ( double)( qty_0[q1].size * qty_0[q1].freq * floor_log2_wide( qty_0[q1].n_refs)) 
- ( int)( ( double)( qty_0[q1].size * qty_0[q1].freq * floor_log2_wide( qty_0[q1].n_refs)) 
- ( int)( ( double)( qty_0[q1].size * qty_0[q1].freq * floor_log2_wide( qty_0[q1].n_refs)) 
/ ( double)( qty_0[q1].death - qty_0[q1].birth) 
/ ( double)( qty_0[q1].death - qty_0[q1].birth) 
output_do_verbatim( buffer, msgid, ( va_list_0 *)ap); 
if ( use == sibcall_use_tail_recursion_0 ) 
else if ( use == sibcall_use_sibcall_0 ) 
if ( use != sibcall_use_normal_0 ) 
ivs->entries = ( initial_value_pair_0 *)xmalloc( 0x50uLL); 
ivs->entries = ( initial_value_pair_0 *)xrealloc( ivs->entries, 16LL * ivs->max_entries); 
ivs->entries[ivs->num_entries].pseudo = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)reg)); 
&& ( lang_hooks_0.tree_inlining.disregard_inline_limits( fna) || 10 * fna->decl.u1.i <= compiler_params->value / 2) ) 
if ( !lang_hooks_0.tree_inlining.disregard_inline_limits( fna) ) 
if ( inlinable && lang_hooks_0.tree_inlining.cannot_inline_tree_fn( &fna) ) 
v1 = swap_condition( ( rtx_code)( unsigned __int16)*( _DWORD *)operands[1]); 
for ( i = recog_data_0.n_operands - 1; i >= 0; --i ) 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[i] == 66 ) 
return modified_in_p( recog_data_0.operand[i]->fld[0].rtx, dep_insn); 
recog_data_0.operand[1] = x3; 
recog_data_0.operand[2] = x3a; 
recog_data_0.operand[0] = x2be; 
if ( ix86_match_ccmode( insn, CCGCmode) && ( unsigned __int8)recog_data_0.operand[2]->fld[0].rtwint != 128LL ) 
recog_data_0.operand[2] = x3a; 
recog_data_0.operand[0] = x2bf; 
|| !rtx_equal_p( x2bg->fld[0].rtx, recog_data_0.operand[1]) 
|| !rtx_equal_p( *( rtx *)&x2bg[1], recog_data_0.operand[2]) 
|| !ix86_binary_operator_ok( MINUS, QImode, recog_data_0.operand) ) 
recog_data_0.operand[1] = x4; 
recog_data_0.operand[2] = x4a; 
recog_data_0.operand[0] = x2a; 
|| !rtx_equal_p( x2c->fld[0].rtx, recog_data_0.operand[1]) 
|| !rtx_equal_p( *( rtx *)&x2c[1], recog_data_0.operand[2]) 
if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_VERBOSE ) 
rtx moffsety; // [rsp+E8h] [rbp-58h] 
rtx moffsetx; // [rsp+F0h] [rbp-50h] 
rtx basey; // [rsp+F8h] [rbp-48h] 
rtx basex; // [rsp+100h] [rbp-40h] 
rtx rtly; // [rsp+108h] [rbp-38h] 
rtx rtlx; // [rsp+110h] [rbp-30h] 
moffsetx = v23; 
moffsetx = adjust_offset_for_component_ref( ( tree)v25, v23); 
moffsety = v22; 
*( ( _OWORD *)&newdecl->block + 10) = *( ( _OWORD *)&olddecl->block + 10); 
*( ( _OWORD *)&newdecl->block + 10) = *( ( _OWORD *)&olddecl->block + 10); 
if ( QTextBlock::operator<( op0a, op1a) ) 
&& mode_class_0[mode] == MODE_INT 
if ( op1a == const_int_rtx[64] && ( codea == LT || codea == GE) && mode_class_0[mode] == MODE_INT ) 
recog_data_0.operand[0] = x3; 
recog_data_0.operand[1] = ( rtx)x1[1]; 
recog_data_0.operand[2] = x3b; 
recog_data_0.operand[0] = x3; 
recog_data_0.operand[1] = ( rtx)x1[1]; 
recog_data_0.operand[2] = x3d; 
recog_data_0.operand[0] = x2e; 
recog_data_0.operand[0] = x2e; 
recog_data_0.operand[0] = x2f; 
if ( rtx_equal_p( *( rtx *)&x2h[1], recog_data_0.operand[0]) ) 
if ( rtx_equal_p( x1f->fld[0].rtx, recog_data_0.operand[0]) 
htab_clear_slot( hash_table_0, x); 
cpp_register_pragma( parse_in, 0LL, "pack", ( pragma_cb)handle_pragma_pack); 
cpp_register_pragma( parse_in, 0LL, "weak", ( pragma_cb)handle_pragma_weak); 
tree_code_length[1] = ( lang_hooks_0.identifier_size - 24 + 7) >> 3; 
if ( debug_info_level_0 != DINFO_LEVEL_NORMAL ) 
if ( debug_info_level_0 != DINFO_LEVEL_VERBOSE ) 
&& mode_class_0[modea] != MODE_INT 
&& mode_class_0[modea] != MODE_PARTIAL_INT ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)op)] == MODE_FLOAT 
if ( legitimate_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)opa), y, 0) ) 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( typea->block.abstract_origin)) >> 1), 
|| ( mode_class_0[( unsigned __int8)HIBYTE( WORD2( typea->block.abstract_origin)) >> 1] == MODE_VECTOR_INT 
|| mode_class_0[( unsigned __int8)HIBYTE( WORD2( typea->block.abstract_origin)) >> 1] == MODE_VECTOR_FLOAT) 
&& mode_class_0[( unsigned __int8)HIBYTE( WORD2( typea->block.abstract_origin)) >> 1] != MODE_VECTOR_INT 
&& mode_class_0[( unsigned __int8)HIBYTE( WORD2( typea->block.abstract_origin)) >> 1] != MODE_VECTOR_FLOAT; 
v2 = sprintf( ( char *)&v5 - 32, "%s.%d", "__compound_literal", ( unsigned int)var_labelno); 
++var_labelno; 
&& ( mode_class_0[modea] == MODE_INT 
|| mode_class_0[modea] == MODE_PARTIAL_INT 
|| mode_class_0[modea] == MODE_COMPLEX_INT 
|| mode_class_0[modea] == MODE_VECTOR_INT) ) 
modea = mode_for_size( v6, mode_class_0[modea], 0); 
fatal_insn_not_found( insn, "insn-attrtab.c", 20460, "get_attr_prefix_data16"); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] != MODE_COMPLEX_INT ) 
v11 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_COMPLEX_FLOAT; 
if ( debug_info_level_0 != DINFO_LEVEL_TERSE || !deptha ) 
g1_add_vala = gen_rtx_fmt_ee( MULT, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)g1_add_val), g1_add_val, mult); 
fatal_insn_not_found( insn, "insn-attrtab.c", 20323, "get_attr_prefix_0f"); 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
v11 = !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0; 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[0] == 67 ) 
rtx = recog_data_0.operand[0]->fld[0].rtx; 
rtx = recog_data_0.operand[0]; 
v7 = ( unsigned __int16)*( _DWORD *)recog_data_0.operand[0] == 67 
? ( rtx)recog_data_0.operand[0]->fld[0].rtwint 
if ( ( unsigned __int16)*( _DWORD *)recog_data_0.operand[0] == 67 ) 
v5 = recog_data_0.operand[0]->fld[0].rtx; 
v5 = recog_data_0.operand[0]; 
v3 = ( unsigned __int16)*( _DWORD *)recog_data_0.operand[0] == 67 
? ( rtx)recog_data_0.operand[0]->fld[0].rtwint 
( *direction)[13 * loop_ptr->depth + sub] = eq; 
( *direction)[13 * loop_ptr->depth + sub] = lt; 
( *direction)[13 * loop_ptr->depth + sub] = gt; 
( *direction)[13 * loop_ptr->depth + sub] = independent; 
rtx insn; // [rsp+40h] [rbp-20h] 
for ( insn = bb->head; ; insn = insn[1].fld[0].rtx ) 
for ( insn = bb->head; ; insn = insn[1].fld[0].rtx ) 
for ( insn = bb->head; ; insn = insn[1].fld[0].rtx ) 
if ( insn ) 
v3 = insn != bb->end[1].fld[0].rtx; 
if ( rtx_class[( unsigned __int16)*( _DWORD *)insn] == 105 ) 
for ( def_link = df_0->insns[insn->fld[0].rtuint].defs; def_link; def_link = def_link->next ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)notea), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)notea), 
file_table_0.table = ( char **)xcalloc( 0x40uLL, 8uLL); 
file_table_0.allocated = 64; 
file_table_0.in_use = 1; 
file_table_0.last_lookup_index = 0; 
LOBYTE( v23) = canon_hash( xa, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa)); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] != MODE_COMPLEX_INT ) 
v21 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)p_0->exp)] != MODE_COMPLEX_INT ) 
v16 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)p_0->exp)] == MODE_COMPLEX_FLOAT; 
elt = lookup_for_remove( xa, hash, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)xa)); 
recog_data_0.operand[0] = x2; 
recog_data_0.operand[1] = x3g; 
recog_data_0.operand[2] = x3h; 
recog_data_0.operand[2] = x2i; 
recog_data_0.operand[1] = x4a; 
recog_data_0.operand[2] = x2j; 
recog_data_0.operand[1] = x3j; 
recog_data_0.operand[2] = x3k; 
recog_data_0.operand[2] = x2l; 
recog_data_0.operand[1] = x3l; 
recog_data_0.operand[2] = x3m; 
recog_data_0.operand[2] = x2n; 
recog_data_0.operand[0] = x2; 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0->fld[0].rtwint)); 
word = operand_sub*(short *)0xforce( 
word = operand_sub*(short *)0xforce( op0, offset, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0)); 
word = operand_sub*(short *)0xforce( op0, offset, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op0)); 
induction_1 *v; // [rsp+88h] [rbp-28h] 
induction_1 *v; // [rsp+88h] [rbp-28h] 
for ( v = bl_0->biv; ; v = v->next_iv ) 
for ( v = bl_0->biv; ; v = v->next_iv ) 
for ( v = bl_0->biv; ; v = v->next_iv ) 
v10 = v != 0LL; 
if ( rtx_class[( unsigned __int16)*( _DWORD *)v->insn] == 105 ) 
if ( ( unsigned __int16)**( _DWORD **)&v->insn[2] == 47 ) 
v9 = ( rtx)v->insn[2]; 
v9 = single_set_2( v->insn, *( rtx *)&v->insn[2]); 
v9 = single_set_2( v->insn, *( rtx *)&v->insn[2]); 
e = new_cselib_val( ++next_unknown_value, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
val_rtx = new_cselib_val( ++next_unknown_value, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x))->u.val_rtx; 
loop_ptr = ( loop_1 *)*( ( _QWORD *)&loop_chain->name + loop_chain->elements_used); 
highest_order_field_bit_offset = QCameraExposure::setAutoIsoSensitivity( decl); 
eliminable_regset |= 1LL << global_alloc_eliminables[i].from; 
no_global_alloc_regs |= 1LL << global_alloc_eliminables[i].from; 
allocno_0 = (  struct allocno *)xcalloc( max_allocno, 0x40uLL); 
allocno_0[( __int64)num].reg = ie; 
allocno_0[( __int64)num].size = ( v3 
allocno_0[( __int64)num].calls_crossed += *( _DWORD *)( reg_n_info->data.l[ie] + 32); 
allocno_0[( __int64)num].n_refs += *( _DWORD *)( reg_n_info->data.l[ie] + 16); 
allocno_0[( __int64)num].freq += *( _DWORD *)( reg_n_info->data.l[ie] + 20); 
if ( allocno_0[( __int64)num].live_length < *( _DWORD *)( reg_n_info->data.l[ie] + 28) ) 
allocno_0[( __int64)num].live_length = *( _DWORD *)( reg_n_info->data.l[ie] + 28); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[ig])] != MODE_COMPLEX_INT ) 
v15 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[ig])] == MODE_COMPLEX_FLOAT; 
allocno_0[ii].hard_reg_conflicts &= ~eliminable_regset; 
allocno_0[ii].hard_reg_copy_preferences &= ~eliminable_regset; 
allocno_0[ii].hard_reg_preferences &= ~eliminable_regset; 
if ( !allocno_0[ik].size ) 
allocno_0[ik].size = 1; 
global_trees = ( splay_tree_value)make_node( ERROR_MARK); 
*( &global_trees + 1) = ( splay_tree_value)make_signed_type( mode_bitsize[2]); 
*( &global_trees + 2) = ( splay_tree_value)make_signed_type( mode_bitsize[3]); 
*( &global_trees + 3) = ( splay_tree_value)make_signed_type( mode_bitsize[4]); 
*( &global_trees + 4) = ( splay_tree_value)make_signed_type( mode_bitsize[5]); 
*( &global_trees + 5) = ( splay_tree_value)make_signed_type( mode_bitsize[6]); 
*( &global_trees + 6) = ( splay_tree_value)make_unsigned_type( mode_bitsize[2]); 
*( &global_trees + 7) = ( splay_tree_value)make_unsigned_type( mode_bitsize[3]); 
*( &global_trees + 8) = ( splay_tree_value)make_unsigned_type( mode_bitsize[4]); 
*( &global_trees + 9) = ( splay_tree_value)make_unsigned_type( mode_bitsize[5]); 
*( &global_trees + 10) = ( splay_tree_value)make_unsigned_type( mode_bitsize[6]); 
set_0 sets[106]; // [rsp+30h] [rbp-D50h] BYREF 
sets[0].src = ( rtx)body[1]; 
sets[0].dest = body->fld[0].rtx; 
sets[n_sets].src = ( rtx)x[1]; 
sets[n_sets++].dest = x->fld[0].rtx; 
dest = sets[i].dest; 
sets[i].dest = dest; 
src = sets[i].src; 
src = gen_rtx_fmt_eee( IF_THEN_ELSE, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)src), cond, src, dest); 
v1 = cselib_lookup( src, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest), 1); 
sets[i].src_elt = v1; 
sets[i].dest_addr_elt = v3; 
for ( dep_ptr = ( dependence_0 *)dep_chain->data.l[0]; dep_ptr; dep_ptr = ( dependence_0 *)dep_chain->data.l[v1] ) 
for ( dep_ptr = ( dependence_0 *)dep_chain->data.l[0]; dep_ptr; dep_ptr = ( dependence_0 *)dep_chain->data.l[v1] ) 
bi = ( block_info_0)b->aux; 
pred = insn_data_0[code].operand->predicate; 
preda = insn_data_0[code].operand[1].predicate; 
predb = insn_data_0[code].operand[3].predicate; 
predc = insn_data_0[code].operand[2].predicate; 
pat = insn_data_0[code].genfun( target, xinner, op2, opalign); 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( sizetype_tab[0]->block.abstract_origin)) >> 1), 
&& mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)xa)] != MODE_INT ) 
v29 = operand_sub*(short *)0xforce( xa, i, mode); 
imag = ( tree_node *)low; 
v4 = ( tree_node *)v3; 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 29148, "ppro_p0_unit_blockage"); 
|| !symbolic_operand( recog_data_0.operand[1], SImode) ) 
|| !symbolic_operand( recog_data_0.operand[1], DImode) ) 
if ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], DImode) ) 
if ( which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
if ( which_alternative || pic_symbolic_operand( recog_data_0.operand[2], SImode) ) 
&& const1_operand( recog_data_0.operand[2], VOIDmode) ) 
if ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) ) 
if ( mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( which_alternative || mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( which_alternative || !mult_operator( recog_data_0.operand[3], SFmode) ) 
if ( mult_operator( recog_data_0.operand[3], XFmode) ) 
if ( mult_operator( recog_data_0.operand[3], TFmode) ) 
else if ( mult_operator( recog_data_0.operand[3], SFmode) ) 
else if ( which_alternative == 2 || !mult_operator( recog_data_0.operand[3], SFmode) ) 
else if ( mult_operator( recog_data_0.operand[3], DFmode) ) 
else if ( which_alternative == 2 || !mult_operator( recog_data_0.operand[3], DFmode) ) 
else if ( mult_operator( recog_data_0.operand[3], XFmode) ) 
&& can_fix_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)toa), fmode, 0, &must_trunc) != CODE_FOR_nothing ) 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)froma), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)froma), 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)toa), 
v10 = gen_rtx_fmt_e( v9, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)toa), froma); 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v14 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
invalidate( p->exp->fld[0].rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)p->exp)); 
( machine_mode)( unsigned __int8)BYTE2( **( _DWORD **)( *( _QWORD *)&x[2] + 8LL * ib + 8))); 
hash += canon_hash( elt, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)elt)); 
record = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)x)] == MODE_CC; 
tree t; // [rsp+30h] [rbp-20h] 
t = build( MODIFY_EXPR, tt, valist, tree); 
*( ( _DWORD *)&t->common + 4) = *( ( _DWORD *)&t->common + 4) & 0xFFFFFEFF | 0x100; 
*( ( _DWORD *)&t->common + 4) = *( ( _DWORD *)&t->common + 4) & 0xFFFFFEFF | 0x100; 
expand_expr( t, const_int_rtx[64], VOIDmode, EXPAND_NORMAL); 
|| mode_class_0[mode] == MODE_COMPLEX_INT 
|| mode_class_0[mode] == MODE_COMPLEX_FLOAT) 
( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( exp->common.type->block.abstract_origin)) >> 1), 
src = gen_lowpart( ( machine_mode)BYTE2( *( _DWORD *)memrefa), *( rtx *)&body[1]); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] == mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest->fld[0].rtwint)] ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest)] == mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)dest->fld[0].rtwint)] ) 
newreg = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest)); 
quals = lang_hooks_0.tree_dump.type_quals( t); 
if ( !lang_hooks_0.tree_dump.dump_tree( di_0a, t) ) 
newa = simplify_gen_binary( ( rtx_code)( unsigned __int16)*( _DWORD *)*loc, v10, pc->exp, c); 
if ( ( sch_istable[token->val.c] & 0xAC) != 0 ) 
rtx insn; // [rsp+28h] [rbp-18h] 
for ( insn = bb->end; ; insn = ( rtx)insn[1] ) 
for ( insn = bb->end; ; insn = ( rtx)insn[1] ) 
if ( insn ) 
v3 = insn != ( rtx)bb->head[1]; 
if ( rtx_class[( unsigned __int16)*( _DWORD *)insn] == 105 ) 
for ( link = df_0->insns[insn->fld[0].rtuint].defs; link; link = link->next ) 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 23517, "athlon_ieu_unit_conflict_cost"); 
&& symbolic_operand( recog_data_0.operand[1], SImode) 
&& ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode)) ) 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
if ( ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0) 
&& q_regs_operand( recog_data_0.operand[0], QImode) 
&& symbolic_operand( recog_data_0.operand[1], DImode) 
&& ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode)) ) 
|| pic_symbolic_operand( recog_data_0.operand[2], DImode) 
|| pic_symbolic_operand( recog_data_0.operand[2], SImode) 
|| pic_symbolic_operand( recog_data_0.operand[2], SImode) 
if ( ( which_alternative == 2 || incdec_operand( recog_data_0.operand[2], HImode)) 
&& !incdec_operand( recog_data_0.operand[2], HImode) ) 
if ( ( which_alternative == 3 || incdec_operand( recog_data_0.operand[2], QImode)) 
&& !incdec_operand( recog_data_0.operand[2], QImode) ) 
|| !const1_operand( recog_data_0.operand[2], VOIDmode)) 
&& const1_operand( recog_data_0.operand[2], VOIDmode) ) 
if ( ( ( ( 1 << ix86_cpu) & x86_double_with_add) == 0 || !const1_operand( recog_data_0.operand[2], VOIDmode)) 
fatal_insn( "Attempt to delete prologue/epilogue insn:", insn, "flow.c", 1615, "propagate_one_insn"); 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)*dest)] != MODE_COMPLEX_INT ) 
v25 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)*dest)] == MODE_COMPLEX_FLOAT; 
&& ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)*dest)] == MODE_COMPLEX_INT 
|| mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)*dest)] == MODE_COMPLEX_FLOAT) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] != MODE_COMPLEX_INT ) 
v12 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] == MODE_COMPLEX_FLOAT; 
if ( operator+=<char [3], QByteArray>( src, insn) ) 
insert_expr_in_table( src, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)dest), insn, v6, v3 & 1); 
( rtx_code)( unsigned __int16)*( _DWORD *)ext_dep, 
( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ext_dep), 
&& ( mode_class_0[( unsigned __int8)HIBYTE( WORD2( type->block.abstract_origin)) >> 1] == MODE_FLOAT 
|| mode_class_0[( unsigned __int8)HIBYTE( WORD2( type->block.abstract_origin)) >> 1] == MODE_INT) 
if ( mode_class_0[orig_mode] == MODE_INT ) 
mode = *( ( unsigned __int16 *)&insn_data_0[1234].operand[1] + 8); 
pred = insn_data_0[1234].operand[1].predicate; 
fatal_insn_not_found( insn, "insn-attrtab.c", 5148, "k6_branch_unit_ready_cost"); 
x = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *rtwint)); 
optab_0 optablea; // [rsp+58h] [rbp-8h] 
optab_0 optablea; // [rsp+58h] [rbp-8h] 
optablea = optable; 
v9 = sch_tolower[*( unsigned __int8 *)q]; 
optablea->handlers[mode].libfunc = v14; 
rtx insn; // [rsp+50h] [rbp-20h] 
for ( insn = bb->end; ; insn = ( rtx)insn[1] ) 
for ( insn = bb->end; ; insn = ( rtx)insn[1] ) 
if ( insn ) 
v4 = insn != ( rtx)bb->head[1]; 
uid = insn->fld[0].rtuint; 
if ( rtx_class[( unsigned __int16)*( _DWORD *)insn] == 105 ) 
return true_dependence( *( ( rtx *)data + 1), *( machine_mode *)data, *x, ( int ( *)( rtx, int))cse_rtx_varies_p); 
set_diagnostic_context( &dc, msgid, ( va_list_0 *)ap, file, line, 1); 
allocno_0[( __int64)a1].hard_reg_copy_preferences |= allocno_0[( __int64)a2].hard_reg_copy_preferences; 
allocno_0[( __int64)a1].hard_reg_copy_preferences |= allocno_0[( __int64)a2].hard_reg_copy_preferences; 
allocno_0[( __int64)a2].hard_reg_copy_preferences |= allocno_0[( __int64)a1].hard_reg_copy_preferences; 
allocno_0[( __int64)a2].hard_reg_copy_preferences |= allocno_0[( __int64)a1].hard_reg_copy_preferences; 
allocno_0[( __int64)a1].hard_reg_preferences |= allocno_0[( __int64)a2].hard_reg_preferences; 
allocno_0[( __int64)a1].hard_reg_preferences |= allocno_0[( __int64)a2].hard_reg_preferences; 
allocno_0[( __int64)a2].hard_reg_preferences |= allocno_0[( __int64)a1].hard_reg_preferences; 
allocno_0[( __int64)a2].hard_reg_preferences |= allocno_0[( __int64)a1].hard_reg_preferences; 
allocno_0[( __int64)a1].hard_reg_full_preferences |= allocno_0[( __int64)a2].hard_reg_full_preferences; 
allocno_0[( __int64)a1].hard_reg_full_preferences |= allocno_0[( __int64)a2].hard_reg_full_preferences; 
allocno_0[( __int64)a2].hard_reg_full_preferences |= allocno_0[( __int64)a1].hard_reg_full_preferences; 
allocno_0[( __int64)a2].hard_reg_full_preferences |= allocno_0[( __int64)a1].hard_reg_full_preferences; 
in_section_0 = no_section; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v23 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
fancy_abort( &off_88ECD0[4], 4328, "clear_reload_reg_in_use"); 
if ( mode_class_0[rld[i].mode] != MODE_COMPLEX_INT ) 
v19 = mode_class_0[rld[i].mode] == MODE_COMPLEX_FLOAT; 
&& insn_data_0[icode].operand->predicate( r0, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) 
&& insn_data_0[icode].operand->predicate( r0, *( ( unsigned __int16 *)insn_data_0[icode].operand + 8)) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[1] + 8)) 
&& insn_data_0[icode].operand[1].predicate( 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)) ) 
( machine_mode)*( ( unsigned __int16 *)&insn_data_0[icode].operand[2] + 8)) ) 
&& insn_data_0[icode].operand[2].predicate( 
return insn_data_0[icode].genfun( r0, r1, c); 
rounded_size = ( tree_node *)*( &global_trees + 15); 
fatal_insn( "wrong insn in the fallthru edge", insn, "cfgrtl.c", 1717, "verify_flow_info"); 
fatal_insn( "flow control insn inside a basic block", xc, "cfgrtl.c", 1829, "verify_flow_info"); 
fatal_insn( "insn outside basic block", xd, "cfgrtl.c", 1887, "verify_flow_info"); 
fatal_insn( "return not followed by barrier", xd, "cfgrtl.c", 1895, "verify_flow_info"); 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v18 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[mode] != MODE_COMPLEX_INT ) 
v15 = mode_class_0[mode] == MODE_COMPLEX_FLOAT; 
if ( operator+=<char [3], QByteArray>( r, temp->fld[0].rtx) ) 
if ( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)r)] != MODE_COMPLEX_INT ) 
v13 = mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)r)] == MODE_COMPLEX_FLOAT; 
if ( mode_class_0[mode] == MODE_COMPLEX_FLOAT || mode_class_0[mode] == MODE_COMPLEX_INT ) 
if ( mode_class_0[mode] == MODE_COMPLEX_FLOAT || mode_class_0[mode] == MODE_COMPLEX_INT ) 
tree *v38; // [rsp+68h] [rbp-3D8h] 
tree v39; // [rsp+70h] [rbp-3D0h] 
tree *v40; // [rsp+80h] [rbp-3C0h] 
tree v41; // [rsp+88h] [rbp-3B8h] 
tree *regno_decl; // [rsp+A0h] [rbp-3A0h] 
tree v43; // [rsp+A8h] [rbp-398h] 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x1; 
teml = gen_peephole2_1246( insn, recog_data_0.operand); 
recog_data_0.operand[0] = x1; 
temm = gen_peephole2_1249( insn, recog_data_0.operand); 
recog_data_0.operand[1] = x1; 
|| ( *_pmatch_len = 0, ( temn = gen_peephole2_1252( insn, recog_data_0.operand)) == 0LL) ) 
recog_data_0.operand[0] = x1; 
recog_data_0.operand[1] = x1; 
temi = gen_peephole2_1245( insn, recog_data_0.operand); 
recog_data_0.operand[0] = x1; 
temj = gen_peephole2_1248( insn, recog_data_0.operand); 
recog_data_0.operand[1] = x1; 
|| ( *_pmatch_len = 0, ( temk = gen_peephole2_1251( insn, recog_data_0.operand)) == 0LL) ) 
recog_data_0.operand[0] = x1; 
induction_1 *tv; // [rsp+28h] [rbp-78h] 
induction_1 *tv; // [rsp+28h] [rbp-78h] 
induction_1 *v; // [rsp+38h] [rbp-68h] 
induction_1 *v; // [rsp+38h] [rbp-68h] 
induction_1 *va; // [rsp+38h] [rbp-68h] 
induction_1 *va; // [rsp+38h] [rbp-68h] 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
for ( v = bl_0->giv; v; v = v->next_iv ) 
if ( ( ( *( ( _WORD *)v + 50) >> 2) & 1) == 0 && !v->same ) 
if ( ( ( *( ( _WORD *)v + 50) >> 2) & 1) == 0 && !v->same ) 
benefit = loop_giv_reduce_benefit( loop, bl_0, v, test_reg); 
|| benefit * threshold * v->lifetime >= insn_count 
for ( tv = bl_0->biv; tv; tv = tv->next_iv ) 
for ( tv = bl_0->biv; tv; tv = tv->next_iv ) 
fatal_insn_not_found( executing_insn, "insn-attrtab.c", 27955, "k6_alux_unit_blockage"); 
if ( general_operand( recog_data_0.operand[0], QImode) ) 
|| !aligned_operand( recog_data_0.operand[1], HImode)) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
if ( get_attr_type( executing_insn) == TYPE_IMOVX && general_operand( recog_data_0.operand[0], QImode) ) 
if ( ( !q_regs_operand( recog_data_0.operand[0], QImode) || ( ( 1 << ix86_cpu) & x86_movx) != 0) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
else if ( general_operand( recog_data_0.operand[0], QImode) ) 
if ( which_alternative || !general_operand( recog_data_0.operand[0], QImode) ) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
if ( which_alternative == 2 || !general_operand( recog_data_0.operand[0], QImode) ) 
if ( which_alternative == 3 || !general_operand( recog_data_0.operand[0], QImode) ) 
|| ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) ) 
&& const1_operand( recog_data_0.operand[2], VOIDmode) 
&& general_operand( recog_data_0.operand[0], QImode) ) 
if ( ( ( 1 << ix86_cpu) & x86_double_with_add) != 0 && const1_operand( recog_data_0.operand[2], VOIDmode) ) 
if ( general_operand( recog_data_0.operand[0], QImode) ) 
uid_cuid_0 = xcalloc( max_uid + 1, 4uLL); 
*( ( _DWORD *)uid_cuid_0 + insn->fld[0].rtint) = i; 
*( ( _DWORD *)uid_cuid_0 + insn->fld[0].rtint) = ++i; 
free( uid_cuid_0); 
v9 = rhs ? rhs : ( tree_node *)*( &global_trees + 11); 
num = num_sign_bit_copies( *( rtx *)&seta[1], ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
scan_rtx_address( insn, ( rtx *)x->fld, GENERAL_REGS, action, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)); 
