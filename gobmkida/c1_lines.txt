if ( !accumulate_influence_working_area_initialized ) 
accumulate_influence_working[ii] = 0; 
accumulate_influence_working_area_initialized = 1; 
accumulate_influence_queue[0] = pos; 
accumulate_influence_working[pos] = strength; 
iia = accumulate_influence_queue[queue_start]; 
current_strength = inv_attenuation * accumulate_influence_working[iia] / 4096; 
if ( !accumulate_influence_working[delta[d] + iia] ) 
accumulate_influence_queue[queue_end++] = delta[d] + iia; 
accumulate_influence_working[v7] += contribution; 
if ( !accumulate_influence_working[delta[d] + iia] ) 
accumulate_influence_queue[queue_end++] = delta[d] + iia; 
accumulate_influence_working[v9] += contribution_0; 
iib = accumulate_influence_queue[k]; 
if ( ( double)accumulate_influence_working[iib] > 81.5 || !influence[iib] ) 
influence[iib] += accumulate_influence_working[iib]; 
accumulate_influence_working[iib] = 0; 
v4 = ( char *)off_58C786; 
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
if ( compute_escape_influence_cached_board[ii] != board[ii] ) 
compute_escape_influence_cached_board[ii] = board[ii]; 
compute_escape_influence_active_caches[k] = 0; 
if ( compute_escape_influence_active_caches[color == 1] ) 
escape_value[iia] = compute_escape_influence_escape_values[2 * iia + ( color == 1)]; 
compute_escape_influence_escape_values[2 * iic + ( color == 1)] = escape_value[iic]; 
compute_escape_influence_active_caches[color == 1] = 1; 
memcpy( q, base, sizeof( influence_data)); 
move_val = QueuePage::QueuePage( &i, &j, gameinfo->to_move); 
decide_position_snames[dragon[pos].crude_status], 
   if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
   if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
sizeof( reading_cache)); 
do_compute_effective_worm_sizes_worms[pos][k] = 0; 
do_compute_effective_worm_sizes_worms[pos][0] = worm[pos].origin; 
if ( do_compute_effective_worm_sizes_worms[pos][l] == do_compute_effective_worm_sizes_worms[pos2][ka] ) 
if ( do_compute_effective_worm_sizes_worms[pos][l] == do_compute_effective_worm_sizes_worms[pos2][ka] ) 
do_compute_effective_worm_sizes_worms[pos][nworms[pos]++] = do_compute_effective_worm_sizes_worms[pos2][ka]; 
do_compute_effective_worm_sizes_worms[pos][nworms[pos]++] = do_compute_effective_worm_sizes_worms[pos2][ka]; 
v4 = do_compute_effective_worm_sizes_worms[pos][kb]; 
cwa[pos][kc] = do_compute_effective_worm_sizes_worms[pos][kc]; 
read_function_name = ( const char *)&unk_4E4177; 
memcpy( &owl_stack[++owl_stack_pointer], *owl, sizeof( local_owl_data)); 
if ( !dragon_escape_mx_initialized ) 
memset( dragon_escape_mx, 0, sizeof( dragon_escape_mx)); 
memset( dragon_escape_mx, 0, sizeof( dragon_escape_mx)); 
dragon_escape_mx_initialized = 1; 
dragon_escape_mx[ii] = 1; 
&& !dragon_escape_mx[ii + 20] 
dragon_escape_mx[ii + 20] = 1; 
&& !dragon_escape_mx[ii - 1] 
dragon_escape_mx[ii - 1] = 1; 
&& !dragon_escape_mx[ii - 20] 
dragon_escape_mx[ii - 20] = 1; 
&& !dragon_escape_mx[ii + 1] 
dragon_escape_mx[ii + 1] = 1; 
&& !dragon_escape_mx[ii + 19] 
dragon_escape_mx[ii + 19] = 1; 
&& !dragon_escape_mx[ii - 21] 
dragon_escape_mx[ii - 21] = 1; 
&& !dragon_escape_mx[ii - 19] 
dragon_escape_mx[ii - 19] = 1; 
&& !dragon_escape_mx[ii + 21] 
dragon_escape_mx[ii + 21] = 1; 
if ( dragon_escape_mx[queue[k]] != 1 ) 
dragon_escape_mx[queue[k]] = 0; 
qToBigEndian<unsigned int>( gameinfoa->computer_player, stdout); 
gg_snprintf( eyevalue_to_string_result, 0x1DuLL, "[%d, %d, %d, %d]", e->a, e->b, e->c, d); 
gg_snprintf( eyevalue_to_string_result, 0x1DuLL, "%d%d%d%d", e->a, e->b, e->c, v2); 
return eyevalue_to_string_result; 
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
liberties = findlib( str, 241, find_worm_attacks_and_defenses_libs); 
pos = find_worm_attacks_and_defenses_libs[k]; 
liberties = findlib( str, 241, find_worm_threats_libs); 
aa = find_worm_threats_libs[k]; 
bb = delta[l] + find_worm_threats_libs[k]; 
if ( finish_and_score_game_current_seed != seed ) 
finish_and_score_game_current_seed = seeda; 
if ( board[20 * i + 21 + j] != finish_and_score_game_current_board[i][j] ) 
finish_and_score_game_current_board[i][j] = board[20 * i + 21 + j]; 
if ( !strncmp( commanda, dword_4EBC6B, 5uLL) ) 
if ( !gg_optind || !_getopt_initialized ) 
_getopt_initialized = 1; 
for ( k = 0; commands_0[k].name; ++k ) 
if ( !strcmp( command, commands_0[k].name) ) 
for ( k = 0; commands_0[k].name; ++k ) 
gtp_printf( "%s\n", commands_0[k].name); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[c]); 
memcpy( routines, off_4E4370, sizeof( routines)); 
memcpy( b, off_4E7550, sizeof( b)); 
move_val = QueuePage::QueuePage( &i, &j, next); 
score = QQmlJS::Managed::operator new( &lower_bound, &upper_bound); 
if ( result == *( double *)_mm_and_si128( v5, ( __m128i)xmmword_4ED940).m128i_i64 && winner == dummy ) 
if ( !location_to_string_init ) 
location_to_buffer( pos_0, &location_to_string_buf[5 * pos_0]); 
location_to_string_init = 1; 
return &location_to_string_buf[5 * pos]; 
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
memcpy( dd, &dragon[dd->origin], sizeof( dragon_data)); 
memcpy( dd_0, &dragon[dd_0->origin], sizeof( dragon_data)); 
memcpy( dd_1, &dragon[dd_1->origin], sizeof( dragon_data)); 
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
init_owl( &owl_defend_owl, targeta, 0, 0, 1); 
owl_make_domains( owl_defend_owl, 0LL); 
prepare_goal_list( targeta, owl_defend_owl, owl_goal_worm, &goal_worms_computed, kworma, 1); 
result = do_owl_defend( targeta, &move, &wid, owl_defend_owl, 0, 0, 0); 
owl_defend_owl->goal, 
pattern_0 *pata; // [rsp+1BF8h] [rbp-8h] 
pattern_0 *pata; // [rsp+1BF8h] [rbp-8h] 
pata = pat; 
for ( ia = m + pata->mini; ia != m + pata->maxi + 1; ++ia ) 
for ( ia = m + pata->mini; ia != m + pata->maxi + 1; ++ia ) 
for ( ja = n + pata->minj; ja != n + pata->maxj + 1; ++ja ) 
for ( ja = n + pata->minj; ja != n + pata->maxj + 1; ++ja ) 
if ( ( pata->edge_constraints & 2) != 0 ) 
for ( ib = pata->maxi + m + 1; ib != 63; ++ib ) 
if ( ( pata->edge_constraints & 4) != 0 ) 
for ( jc = pata->maxj + n + 1; jc != 63; ++jc ) 
if ( ( pata->edge_constraints & 1) != 0 ) 
for ( id = 0; id != pata->mini + m; ++id ) 
if ( ( pata->edge_constraints & 8) != 0 ) 
for ( ie = 0; ie != pata->maxi + m + 1; ++ie ) 
for ( je = 0; je != pata->minj + n; ++je ) 
if ( ( pata->edge_constraints & 2) == 0 ) 
for ( ig = pata->maxi + m + 1; ig != 63; ++ig ) 
for ( jf = 0; jf != pata->minj + n; ++jf ) 
for ( k = 0; k != pata->patlen; ++k ) 
to_test = pata->patlen; 
edges = pata->edge_constraints; 
if ( ij == pata->maxi ) 
if ( ij == pata->mini ) 
if ( ji == pata->maxj ) 
if ( ji == pata->minj ) 
if ( ij > pata->maxi ) 
if ( ij < pata->mini ) 
if ( ji > pata->maxj ) 
if ( ji < pata->minj ) 
if ( play_aftermath_current_color != colora ) 
play_aftermath_current_color = colora; 
if ( board[pos] != 3 && board[pos] != play_aftermath_current_board[pos] ) 
play_aftermath_current_board[pos] = board[pos]; 
qToBigEndian<unsigned int>( gameinfoa->computer_player, stdout); 
gtp_main_loop( commands_0, gtp_input); 
move_val = QueuePage::QueuePage( &i, &j, gameinfoa->to_move); 
qToBigEndian<unsigned int>( 0, stdout); 
score = QQmlJS::Managed::operator new( &lower_bound, &upper_bound); 
fprintf( of_0, aD_4, ( unsigned int)pdfa->states[i].att); 
fprintf( of_0, &off_58C786[2]); 
fprintf( of_0, off_58C786); 
gprintf( off_4E3F18); 
gprintf( &off_4E3F18[4]); 
memcpy( &worm[stones[k]], &worm[posa], sizeof( worm_data)); 
memcpy( &worm[pos], &worm[str], sizeof( worm_data)); 
if ( purge_persistent_owl_cache_last_purge_position_number != position_number ) 
purge_persistent_owl_cache_last_purge_position_number = position_number; 
memcpy( &persistent_owl_cache[k], &persistent_owl_cache[persistent_owl_cache_size - 1], sizeof( owl_cache)); 
if ( purge_persistent_reading_cache_last_purge_position_number != position_number ) 
purge_persistent_reading_cache_last_purge_position_number = position_number; 
sizeof( reading_cache)); 
v8 = ( const char *)&unk_4E2577; 
v8 = ( const char *)&off_4E2573; 
v9 = ( const char *)&unk_4E2577; 
v9 = ( const char *)&off_4E2573; 
gprintf( off_58C786); 
gprintf( off_58C786); 
gprintf( off_58C786); 
gprintf( off_58C786); 
return ( const char *)&unk_4E39DD; 
return ( const char *)&unk_4E39FA; 
if ( !safe_move_initialized ) 
safe_move_initialized = 1; 
return ( const char *)&unk_4E3998; 
return ( const char *)&unk_4E39B6; 
memset( segment_region_marked, 0, sizeof( segment_region_marked)); 
memset( segment_region_marked, 0, sizeof( segment_region_marked)); 
if ( board[ii] != 3 && !segment_region_marked[ii] && region_owner( q, ii) ) 
segment_region_marked[ii] = 1; 
if ( board[d + tt] != 3 && !segment_region_marked[d + tt] && region_owner( q, d + tt) == color ) 
segment_region_marked[d + tt] = 1; 
owl_node_limit = 1000 * set_depth_values_node_limits[10 - level] / set_depth_values_node_limits[0]; 
owl_node_limit = 1000 * set_depth_values_node_limits[10 - level] / set_depth_values_node_limits[0]; 
sgf_dumptree = &sgffile_begindump_local_tree; 
show_dragons_snames[dd->crude_status], 
show_dragons_snames[dd->status], 
gprintf( ", owl status %s\n", show_dragons_snames[dd->owl_status]); 
memset( &spec_fd[i], 0, sizeof( spec_fd_t)); 
if ( stones_on_board_stone_count_for_position != position_number ) 
stones_on_board_white_stones = 0; 
stones_on_board_black_stones = 0; 
++stones_on_board_white_stones; 
++stones_on_board_black_stones; 
stones_on_board_stone_count_for_position = position_number; 
v3 = stones_on_board_black_stones; 
v2 = stones_on_board_white_stones; 
sizeof( reading_cache)); 
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
pattern_0 *patterna; // [rsp+38h] [rbp-8h] 
pattern_0 *patterna; // [rsp+38h] [rbp-8h] 
patterna = pattern; 
