if ( !accumulate_influence_working_area_initialized ) 
memset( accumulate_influence_working, 0, sizeof( accumulate_influence_working)); 
memset( accumulate_influence_working, 0, sizeof( accumulate_influence_working)); 
accumulate_influence_working_area_initialized = 1; 
accumulate_influence_queue[0] = pos; 
accumulate_influence_working[pos] = strength; 
v15 = inv_attenuation * accumulate_influence_working[v7] / 4096; 
if ( !( ( v12 * v154 + v13 * v153 < 0) ^ __OFADD__( v12 * v154, v13 * v153) | ( v12 * v154 + v13 * v153 == 0)) ) 
v50 = accumulate_influence_working[v22]; 
accumulate_influence_queue[v10++] = v22; 
accumulate_influence_working[v22] = v49 + v50; 
if ( !( ( v12 * v150 + v13 * v149 < 0) ^ __OFADD__( v12 * v150, v13 * v149) | ( v12 * v150 + v13 * v149 == 0)) ) 
v75 = accumulate_influence_working[v51]; 
accumulate_influence_queue[v10++] = v51; 
accumulate_influence_working[v51] = v74 + v75; 
if ( !( ( v12 * v148 + v13 * v147 < 0) ^ __OFADD__( v12 * v148, v13 * v147) | ( v12 * v148 + v13 * v147 == 0)) ) 
v104 = accumulate_influence_working[v53]; 
accumulate_influence_queue[v10++] = v53; 
accumulate_influence_working[v53] = v103 + v104; 
if ( !( ( v82 * v174 + v13 * v166 < 0) ^ __OFADD__( v82 * v174, v13 * v166) | ( v82 * v174 + v13 * v166 == 0)) ) 
v124 = accumulate_influence_working[v83]; 
accumulate_influence_queue[v10++] = v83; 
accumulate_influence_working[v83] = v123 + v124; 
if ( !( ( v12 * v173 + v13 * v77 < 0) ^ __OFADD__( v12 * v173, v13 * v77) | ( v12 * v173 + v13 * v77 == 0)) ) 
if ( ( v12 * v172 + v13 * v165 < 0) ^ __OFADD__( v12 * v172, v13 * v165) | ( v12 * v172 + v13 * v165 == 0) ) 
v128 = accumulate_influence_working[v107]; 
accumulate_influence_queue[v10++] = v107; 
accumulate_influence_working[v107] = v127 + v128; 
v111 = ( v109 + v110 < 0) ^ __OFADD__( v109, v110) | ( v109 + v110 == 0); 
v126 = accumulate_influence_working[v108]; 
accumulate_influence_queue[v10++] = v108; 
accumulate_influence_working[v108] = v125 + v126; 
v106 = accumulate_influence_working[v85]; 
accumulate_influence_queue[v10++] = v85; 
accumulate_influence_working[v85] = v105 + v106; 
if ( !( ( v12 * v152 + v13 * v151 < 0) ^ __OFADD__( v12 * v152, v13 * v151) | ( v12 * v152 + v13 * v151 == 0)) ) 
v27 = accumulate_influence_working[v23]; 
accumulate_influence_queue[v10++] = v23; 
accumulate_influence_working[v23] = v26 + v27; 
v29 = accumulate_influence_working[v28]; 
accumulate_influence_queue[v10++] = v28; 
accumulate_influence_working[v28] = v18 + v29; 
v31 = accumulate_influence_working[v30]; 
accumulate_influence_queue[v10++] = v30; 
accumulate_influence_working[v30] = v18 + v31; 
v33 = accumulate_influence_working[v32]; 
accumulate_influence_queue[v10++] = v32; 
accumulate_influence_working[v32] = v18 + v33; 
v35 = accumulate_influence_working[v34]; 
accumulate_influence_queue[v10++] = v34; 
accumulate_influence_working[v34] = v18 + v35; 
v62 = accumulate_influence_working[v38]; 
accumulate_influence_queue[v10++] = v38; 
accumulate_influence_working[v38] = v61 + v62; 
v46 = accumulate_influence_working[v39]; 
accumulate_influence_queue[v10++] = v39; 
accumulate_influence_working[v39] = v45 + v46; 
v97 = accumulate_influence_working[v63]; 
accumulate_influence_queue[v10++] = v63; 
accumulate_influence_working[v63] = v96 + v97; 
v71 = accumulate_influence_working[v64]; 
accumulate_influence_queue[v10++] = v64; 
accumulate_influence_working[v64] = v70 + v71; 
v7 = accumulate_influence_queue[v11++]; 
v130 = accumulate_influence_queue[i]; 
v131 = accumulate_influence_working[v130]; 
accumulate_influence_working[v130] = 0; 
if ( !byte_9C689F[v21] && dword_A9019C[v21] != v8 ) 
if ( !byte_9C689F[v21] && dword_A9019C[v21] != v8 ) 
dword_A9019C[v21] = v8; 
if ( !byte_9C688C[v21] && string_number[v21 + 384] != v8 ) 
if ( !byte_9C689F[v26] && dword_A9019C[v26] != v8 ) 
if ( !byte_9C689F[v26] && dword_A9019C[v26] != v8 ) 
dword_A9019C[v26] = v8; 
if ( !byte_9C688C[v26] && string_number[v26 + 384] != v8 ) 
&& ( ( unsigned __int8)byte_9C689F[v31] != color || string[string[239].neighborlist[v31 + 160]].mark != v7) 
&& ( ( unsigned __int8)byte_9C688C[v31] != color || string[string[239].neighborlist[v31 + 141]].mark != v7) 
|| ( unsigned __int8)byte_9C689F[v34] == color 
|| ( unsigned __int8)byte_9C688C[v34] == color 
&& ( ( unsigned __int8)byte_9C689F[v35] != color 
&& ( ( unsigned __int8)byte_9C688C[v35] != color 
*( _OWORD *)( p_defense_point - 6) = *( _OWORD *)&v5->color; 
*( _OWORD *)( p_defense_point - 6) = *( _OWORD *)&v5->color; 
v7 = gtest.hash[v6]; 
v9 = gtest.hash[v6]; 
gtest.hash[v6] = v10; 
if ( byte_9C689F[i * 2] != 3 ) 
if ( v9 == ( unsigned __int8)byte_9C688C[v67] ) 
|| byte_9C688D[v67] != 3 && !*( &v213 + v67)) ) 
if ( !( ( v151 + v152 < 0) ^ __OFADD__( v151, v152) | ( v151 + v152 == 0)) ) 
if ( byte_9C689F[v8] || dword_A9019C[v8] == v9 ) 
if ( byte_9C689F[v8] || dword_A9019C[v8] == v9 ) 
if ( ( unsigned __int8)byte_9C689F[v8] == color ) 
dword_A9019C[v8] = v9; 
if ( byte_9C688C[v8] || string_number[v8 + 384] == v9 ) 
if ( ( unsigned __int8)byte_9C688C[v8] == color ) 
byte_B7702F[2 * v24 + v0] = 43; 
byte_B7702C[v0 + v25] = 43; 
byte_B7702C[v0 + v27] = 43; 
byte_B7702F[2 * v23 + v0] = 43; 
byte_B7702C[2 * v23 - 4 + v0 + v0] = 43; 
&& to_move != ( unsigned __int8)byte_9C689F[v17] 
&& to_move != ( unsigned __int8)byte_9C688C[v17] 
v56 = ( const char *)&unk_4A65B3; 
if ( byte_9C689F[pos] ) 
if ( !byte_9C688C[pos] ) 
if ( !byte_9C689F[blib] ) 
if ( byte_9C688C[blib] ) 
&& v22 != ( unsigned __int8)byte_9C689F[pos] 
&& v22 != ( unsigned __int8)byte_9C688C[pos] 
&& v22 != ( unsigned __int8)byte_9C689F[v126] 
&& v22 != ( unsigned __int8)byte_9C688C[v126] 
&& v22 != ( unsigned __int8)byte_9C689F[v127] 
&& v22 != ( unsigned __int8)byte_9C688C[v127] 
|| v21 == ( unsigned __int8)byte_9C689F[v23] 
|| v21 == ( unsigned __int8)byte_9C688C[v23] 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
if ( !( ( v9 + v10 < 0) ^ __OFADD__( v9, v10) | ( v9 + v10 == 0)) ) 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v10 + v11 < 0) ^ __OFADD__( v10, v11) | ( v10 + v11 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v10 + v11 < 0) ^ __OFADD__( v10, v11) | ( v10 + v11 == 0)) 
if ( ( v10 + v11 < 0) ^ __OFADD__( v10, v11) | ( v10 + v11 == 0) ) 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
*( _OWORD *)value = 0LL; 
if ( byte_9C689F[v31] != 3 && *i == *v30 ) 
if ( byte_9C689F[v28] != 3 && *j == *v27 ) 
if ( byte_9C689F[v38] != 3 && *k == *v37 ) 
if ( byte_9C689F[v42] != 3 && *m == *v41 ) 
if ( byte_9C689F[v46] != 3 && *n == *v45 ) 
*( _OWORD *)&v12[i + 32] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 32] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 36] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 36] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 40] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 40] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 44] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 44] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 48] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 48] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 52] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 52] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 56] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 56] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 60] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 60] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 64] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 64] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 68] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 68] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 72] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 72] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 76] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 76] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 80] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 80] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 84] = xmmword_4A7EF0; 
*( _OWORD *)&v12[i + 84] = xmmword_4A7EF0; 
memcpy( v9, v7, sizeof( worm_data)); 
*( ( _OWORD *)v1 - 33) = 0LL; 
*( ( _OWORD *)v1 - 34) = 0LL; 
*( ( _OWORD *)v1 - 35) = 0LL; 
|| ( v6 = byte_9C689F[v3], v6 != 3) && v16[v3 + 19] == 3 
|| ( v7 = byte_9C688C[v3], v7 != 3) && v16[v3] == 3 
return off_4A8558[color]; 
memset( forbidden, 0, sizeof( forbidden)); 
memset( forbidden, 0, sizeof( forbidden)); 
forbidden[strings[0]] = 1; 
&& ( memset( forbidden, 0, sizeof( forbidden)), 
&& ( memset( forbidden, 0, sizeof( forbidden)), 
forbidden[strings[0]] = 1; 
*( _OWORD *)&conn->distances[v5 + 397] = xmmword_4AEDF0; 
*( _OWORD *)&conn->distances[v5 + 397] = xmmword_4AEDF0; 
*( _OWORD *)&conn->deltas[v5 + 397] = 0LL; 
*( _OWORD *)&conn->coming_from[v5 + 397] = 0LL; 
*( _OWORD *)&conn->vulnerable1[v5 + 397] = 0LL; 
*( _OWORD *)&conn->vulnerable2[v5 + 397] = 0LL; 
*( _OWORD *)&conn->deltas[v5 + 1] = xmmword_4AEDF0; 
*( _OWORD *)&conn->deltas[v5 + 1] = xmmword_4AEDF0; 
*( _OWORD *)&conn->coming_from[v5 + 1] = 0LL; 
*( _OWORD *)&conn->vulnerable1[v5 + 1] = 0LL; 
*( _OWORD *)&conn->vulnerable2[v5 + 1] = 0LL; 
*( _OWORD *)&conn->queue[v5 + 1] = 0LL; 
v8 = ( unsigned __int8)byte_9C689F[v6]; 
if ( dword_A2CDEC[v6] != v8 ) 
dword_A2CDEC[v6] = v8; 
*( _QWORD *)compute_escape_influence_active_caches = 0LL; 
if ( compute_escape_influence_active_caches[v9] ) 
if ( byte_9C689F[i * 2] != 3 ) 
escape_value[i * 2 - 1] = *( ( _BYTE *)&compute_escape_influence_cached_board[i + 399] + v9 + 2); 
escape_value[i * 2] = compute_escape_influence_escape_values[1 * i + v9]; 
if ( byte_9C689F[j] != 3 ) 
compute_escape_influence_escape_values[2 * j + v10] = escape_value[j]; 
compute_escape_influence_active_caches[v10] = 1; 
*value = ( eyevalue)16843009; 
*value = ( eyevalue)33686018; 
*value = ( eyevalue)16843009; 
*value = ( eyevalue)33686018; 
*value = ( eyevalue)( 16843009 * ( unsigned __int8)v40); 
gg_snprintf( eyevalue_to_string_result, 0x1DuLL, v41, v27, ( unsigned int)v27); 
gg_snprintf( eyevalue_to_string_result, 0x1DuLL, v37, a, v34, v35, add_moves); 
v25 = ( int *)eyevalue_to_string_result; 
gprintf( v39, eyevalue_to_string_result, v38); 
memcpy( q, base, sizeof( influence_data)); 
if ( byte_9C689F[i] != 3 ) 
v49 = byte_9C688D[v46]; 
&& color == ( unsigned __int8)byte_9C689F[v37] 
if ( !byte_9C688C[v121] ) 
v127 = ( unsigned __int8)byte_9C688D[v121]; 
v133 = ( unsigned __int8)byte_9C688D[v121]; 
if ( !byte_9C689F[v121] ) 
v123 = byte_9C689E[v121]; 
if ( byte_9C689F[k] != 3 && mx[k - 1] == 1 ) 
|| byte_9C689F[v20] == v17 && string[239].neighborlist[v20 + 160] == string_number[v10] 
|| byte_9C688C[v20] == v17 && string[239].neighborlist[v20 + 141] == string_number[v10] 
return dword_4A74B0[safety]; 
v16 = _mm_mul_pd( ( __m128d)xmmword_4A67A0, v15); 
gprintf( "status=%s, escape=%d\n", decide_position_snames[v2[4]], ( unsigned int)dragon2[*v2].escape_route); 
memcpy( v6, &persistent_reading_cache[v7], sizeof( reading_cache)); 
*( _OWORD *)aux_temp.states[v21 + 1].next = 0LL; 
*( _OWORD *)aux_temp.states[v24].next = 0LL; 
*( _OWORD *)( i + 12122544) = 0LL; 
*( _OWORD *)( i + 12122528) = 0LL; 
*( _OWORD *)( i + 12122512) = 0LL; 
*( _OWORD *)( i + 12122496) = 0LL; 
*( _OWORD *)( i + 12122480) = 0LL; 
*( _OWORD *)( i + 12122464) = 0LL; 
*( _OWORD *)aux_dfa[i / 0x78].name = 0LL; 
*( _OWORD *)&aux_temp.max_states = 0LL; 
*( _OWORD *)&aux_temp.pre_rotated = 0LL; 
*( _OWORD *)&aux_temp.name[64] = 0LL; 
*( _OWORD *)&aux_temp.name[48] = 0LL; 
*( _OWORD *)&aux_temp.name[32] = 0LL; 
*( _OWORD *)&aux_temp.name[16] = 0LL; 
*( _OWORD *)aux_temp.name = 0LL; 
*( _OWORD *)( i + 12122544) = 0LL; 
*( _OWORD *)( i + 12122528) = 0LL; 
*( _OWORD *)( i + 12122512) = 0LL; 
*( _OWORD *)( i + 12122496) = 0LL; 
*( _OWORD *)( i + 12122480) = 0LL; 
*( _OWORD *)( i + 12122464) = 0LL; 
*( _OWORD *)aux_dfa[i / 0x78].name = 0LL; 
*( _OWORD *)&aux_temp.max_states = 0LL; 
*( _OWORD *)&aux_temp.pre_rotated = 0LL; 
*( _OWORD *)&aux_temp.name[64] = 0LL; 
*( _OWORD *)&aux_temp.name[48] = 0LL; 
*( _OWORD *)&aux_temp.name[32] = 0LL; 
*( _OWORD *)&aux_temp.name[16] = 0LL; 
*( _OWORD *)aux_temp.name = 0LL; 
*( _OWORD *)( ( char *)&aux_count + v1) = xmmword_4A7BD0; 
*( _OWORD *)( ( char *)&aux_count + v1) = xmmword_4A7BD0; 
*( _OWORD *)( ( char *)&gpleft + v1) = xmmword_4A7BD0; 
*( _OWORD *)( ( char *)&gpleft + v1) = xmmword_4A7BD0; 
*( _OWORD *)&gtest.hash[v1 / 8] = xmmword_4A7BD0; 
*( _OWORD *)&gtest.hash[v1 / 8] = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154800) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154800) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154816) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154816) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154832) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154832) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154848) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154848) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154864) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154864) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154880) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154880) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154896) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154896) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154912) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154912) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154928) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154928) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154944) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154944) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154960) = xmmword_4A7BD0; 
*( _OWORD *)( v1 + 12154960) = xmmword_4A7BD0; 
*( _OWORD *)( ( char *)&aux_count + v4) = xmmword_4A7BD0; 
*( _OWORD *)( ( char *)&aux_count + v4) = xmmword_4A7BD0; 
*( _OWORD *)( ( char *)&aux_count + v4) = xmmword_4A7BD0; 
*( _OWORD *)( ( char *)&gpleft + v4) = xmmword_4A7BD0; 
*( _OWORD *)( ( char *)&gpleft + v4) = xmmword_4A7BD0; 
*( _OWORD *)( ( char *)&gpleft + v4) = xmmword_4A7BD0; 
*( _OWORD *)&gtest.hash[v4 / 8] = xmmword_4A7BD0; 
*( _OWORD *)&gtest.hash[v4 / 8] = xmmword_4A7BD0; 
*( _OWORD *)&gtest.hash[v4 / 8] = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154800) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154800) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154816) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154816) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154832) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154832) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154848) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154848) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154864) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154864) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154880) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154880) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154896) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154896) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154912) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154912) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154928) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154928) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154944) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154944) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154960) = xmmword_4A7BD0; 
*( _OWORD *)( v4 + 12154960) = xmmword_4A7BD0; 
*( _OWORD *)&v27[v29] = *( _OWORD *)&next[v29 / 4]; 
*( _OWORD *)&v27[v29] = *( _OWORD *)&next[v29 / 4]; 
current_minsize = minsize; 
current_attacks = ( struct aa_move *)base; 
memset( conditional_attack_point, 0, sizeof( conditional_attack_point)); 
memset( conditional_attack_point, 0, sizeof( conditional_attack_point)); 
gg_sort( v18 - 12, v19, 4uLL, target_comp_func); 
gg_sort( base, ( unsigned int)v17, 0x14uLL, move_comp_func); 
v10 = ( _DWORD *)( do_compute_effective_worm_sizes_worms + 3024); 
v6 = do_compute_effective_worm_sizes_worms[21]; 
v16 = do_compute_effective_worm_sizes_worms; 
v22 = do_compute_effective_worm_sizes_worms[v18][v21]; 
if ( do_compute_effective_worm_sizes_worms[v15][0] != v22 ) 
do_compute_effective_worm_sizes_worms[v15][v20++] = do_compute_effective_worm_sizes_worms[v18][v21]; 
do_compute_effective_worm_sizes_worms[v15][v20++] = do_compute_effective_worm_sizes_worms[v18][v21]; 
v29 = do_compute_effective_worm_sizes_worms[v25][v28]; 
if ( do_compute_effective_worm_sizes_worms[v15][0] != v29 ) 
do_compute_effective_worm_sizes_worms[v15][v27++] = do_compute_effective_worm_sizes_worms[v25][v28]; 
do_compute_effective_worm_sizes_worms[v15][v27++] = do_compute_effective_worm_sizes_worms[v25][v28]; 
v35 = do_compute_effective_worm_sizes_worms[v31][v34]; 
if ( do_compute_effective_worm_sizes_worms[v15][0] != v35 ) 
do_compute_effective_worm_sizes_worms[v15][v33++] = do_compute_effective_worm_sizes_worms[v31][v34]; 
do_compute_effective_worm_sizes_worms[v15][v33++] = do_compute_effective_worm_sizes_worms[v31][v34]; 
v41 = do_compute_effective_worm_sizes_worms[v37][v40]; 
if ( do_compute_effective_worm_sizes_worms[v15][0] != v41 ) 
do_compute_effective_worm_sizes_worms[v15][v39++] = do_compute_effective_worm_sizes_worms[v37][v40]; 
do_compute_effective_worm_sizes_worms[v15][v39++] = do_compute_effective_worm_sizes_worms[v37][v40]; 
v50 = do_compute_effective_worm_sizes_worms[v43][v47]; 
v50 = do_compute_effective_worm_sizes_worms[v43][v49]; 
memcpy( &worm[( int)v59], v56, sizeof( worm_data)); 
memcpy( &worm[( int)v62], v56, sizeof( worm_data)); 
memcpy( &worm[( int)v61], v56, sizeof( worm_data)); 
v9 = dword_4A7E78[escape_influence.is_territorial_influence == 0]; 
v9 = dword_4A7E70[q->is_territorial_influence == 0]; 
v20 = _mm_cvttps_epi32( _mm_mul_ps( *( __m128 *)&q->safe[4 * i - 1600], ( __m128)xmmword_4A7EC0)); 
( __m128d)xmmword_4A7ED0)), 
( __m128d)xmmword_4A7ED0))); 
v21 = _mm_cvttps_epi32( _mm_mul_ps( *( __m128 *)&q->safe[4 * i], ( __m128)xmmword_4A7EC0)); 
( __m128d)xmmword_4A7ED0)), 
( __m128d)xmmword_4A7ED0))); 
( __m128)xmmword_4A7EE0); 
( __m128)xmmword_4A7EE0); 
( __m128)xmmword_4A7EE0); 
( __m128)xmmword_4A7EE0); 
segment_region( q, whose_moyo_restricted, 4, q->moyo_segmentation); 
( __m128i)xmmword_4A5BD0))) ) 
if ( ( v15 = v14 - 20, v16 = v13 + 20LL, v8 == ( unsigned __int8)byte_9C688C[v14]) 
*( _OWORD *)&moves.pos[v234] = *( _OWORD *)&libs[v234]; 
*( _OWORD *)&moves.pos[v234] = *( _OWORD *)&libs[v234]; 
*( _OWORD *)&moves.score[v234] = 0LL; 
*( _OWORD *)&stats.nodes = 0LL; 
if ( v46 > *( float *)&dword_9C7D6C[19 * ( *move / 20) - 19 + v37] ) 
*( float *)&dword_9C7D6C[19 * ( *move / 20) - 19 + v37] = v46; 
if ( v46 > *( float *)&dword_9C7D6C[19 * ( *move / 20) - 19 + v40] ) 
*( float *)&dword_9C7D6C[19 * ( *move / 20) - 19 + v40] = v46; 
if ( v42 > *( float *)&dword_9C7D6C[19 * ( *move / 20) - 19 + v43] ) 
*( float *)&dword_9C7D6C[19 * ( *move / 20) - 19 + v43] = v42; 
if ( ( byte_9C689F[does_attack.pos] == 3 || !second_owl->goal[v46]) 
&& ( byte_9C688C[does_attack.pos] == 3 || !second_owl->goal[does_attack.pos - 20]) ) 
|| byte_9C688C[does_attack.pos] != 3 && v45->goal[does_attack.pos - 20] 
&& ( byte_9C688C[v209] == 3 || !v52->goal[v209 - 20]) 
if ( byte_9C689F[v209] != 3 && second_owl->goal[v53] 
|| byte_9C688C[v209] != 3 && second_owl->goal[v209 - 20] 
if ( ( byte_9C689F[callback_data.pos] == 3 || !second_owl->goal[v58]) 
&& ( byte_9C688C[callback_data.pos] == 3 || !second_owl->goal[callback_data.pos - 20]) 
|| byte_9C688C[callback_data.pos] != 3 && v57->goal[callback_data.pos - 20] 
|| byte_9C689F[v59] != 3 && owl->goal[v59 - 1] 
|| byte_9C688C[v59] != 3 && owl->goal[v59 - 20] 
if ( ( byte_9C689F[v188] == 3 || !second_owl->goal[v65]) 
&& ( byte_9C688C[v188] == 3 || !second_owl->goal[v188 - 20]) 
|| byte_9C689F[v66] != 3 && owl->goal[v66 - 1] 
|| byte_9C688C[v66] != 3 && owl->goal[v66 - 20] 
&& ( byte_9C688C[v188] == 3 || !v63->goal[v188 - 20]) 
if ( ( byte_9C689F[v173.pos] == 3 || !second_owl->goal[v72]) 
&& ( byte_9C688C[v173.pos] == 3 || !second_owl->goal[v173.pos - 20]) 
|| byte_9C688C[v173.pos] != 3 && v71->goal[v173.pos - 20] 
&& ( byte_9C688C[v174[0]] == 3 || !v76->goal[v174[0] - 20]) 
if ( byte_9C689F[v174[0]] != 3 && second_owl->goal[v77] 
|| byte_9C688C[v174[0]] != 3 && second_owl->goal[v174[0] - 20] 
if ( ( byte_9C689F[v180.pos] == 3 || !second_owl->goal[v82]) 
&& ( byte_9C688C[v180.pos] == 3 || !second_owl->goal[v180.pos - 20]) 
&& ( byte_9C688C[v180.pos] == 3 || !v81->goal[v180.pos - 20]) 
if ( byte_9C689F[v79] != 3 && v83->goal[v79 - 1] ) 
if ( byte_9C688C[v79] != 3 && v83->goal[v79 - 20] ) 
if ( ( byte_9C689F[v181[0]] == 3 || !second_owl->goal[v90]) 
&& ( byte_9C688C[v181[0]] == 3 || !second_owl->goal[v181[0] - 20]) 
if ( ( byte_9C689F[v87] == 3 || !v91->goal[v87 - 1]) && ( byte_9C688C[v87] == 3 || !v91->goal[v87 - 20]) ) 
if ( ( byte_9C689F[v87] == 3 || !v91->goal[v87 - 1]) && ( byte_9C688C[v87] == 3 || !v91->goal[v87 - 20]) ) 
&& ( byte_9C688C[v181[0]] == 3 || !v89->goal[v181[0] - 20]) 
v140 = ( eyevalue)-1; 
v144.name = ( const char *)&unk_4AD54A; 
while ( byte_9C689F[v74] != ( _BYTE)v129 || v72->goal[v74 - 1] != 1 ) 
v78 = ( eyevalue)-1; 
if ( byte_9C689F[i] != 3 ) 
if ( dword_A9019C[( _QWORD)v188] != liberty_mark ) 
dword_A9019C[( _QWORD)v188] = v124; 
&& ( byte_9C689E[( _QWORD)v188] != ( _BYTE)v91 || string[239].neighborlist[( _QWORD)v188 + 159] != v20) 
&& ( byte_9C688D[( _QWORD)v188] != ( _BYTE)v91 || string[239].neighborlist[( _QWORD)v188 + 142] != v20) 
&& ( byte_9C688D[( _QWORD)v188] != ( _BYTE)v91 || string[239].neighborlist[( _QWORD)v188 + 142] != v20) ) 
|| 3 - color != ( unsigned __int8)byte_9C689F[pos] && 3 - color != board[pos + 1]) 
if ( v2 != ( unsigned __int8)byte_9C689F[pos] 
if ( v2 != ( unsigned __int8)byte_9C688C[pos] 
if ( !dragon_escape_mx_initialized ) 
memset( dragon_escape_mx, 0, sizeof( dragon_escape_mx)); 
memset( dragon_escape_mx, 0, sizeof( dragon_escape_mx)); 
dragon_escape_mx_initialized = 1; 
dragon_escape_mx[i] = 1; 
if ( v15 != 3 && !dword_9A89D0[v14] ) 
dword_9A89D0[v14] = 1; 
v17 = ( unsigned __int8)byte_9C689F[v14]; 
&& ( v29 = ( unsigned __int8)byte_9C689E[v14], v29 != 3) 
v19 = ( unsigned __int8)byte_9C688C[v14]; 
&& ( v33 = ( unsigned __int8)byte_9C688D[v14], v33 != 3) 
if ( v21 != 3 && !dword_9A8984[v14] ) 
&& ( v34 = ( unsigned __int8)byte_9C688D[v14], v34 != 3) 
dword_9A8984[v14] = 1; 
if ( !dword_9A89CC[v14] ) 
dword_9A89CC[v14] = 1; 
&& ( v50 = ( unsigned __int8)byte_9C688E[v14], v50 != 3) 
if ( !( _BYTE)v15 && !dword_9A89D4[v14] ) 
dword_9A89D4[v14] = 1; 
if ( dragon_escape_mx[v53] != 1 ) 
dragon_escape_mx[v53] = 0; 
gg_snprintf( eyevalue_to_string_result, 0x1DuLL, "[%d, %d, %d, %d]", a, b, e->c, v6); 
gg_snprintf( eyevalue_to_string_result, 0x1DuLL, "%d%d%d%d", a, b, c, v6); 
return eyevalue_to_string_result; 
v8 = ( unsigned __int8)byte_9C689F[pos]; 
v10 = ( unsigned __int8)byte_9C688C[( _QWORD)v5]; 
v10 = ( unsigned __int8)byte_9C688C[( _QWORD)v5]; 
&& ( ( unsigned __int8)byte_9C689E[( _QWORD)v5] != color || string[239].neighborlist[( _QWORD)v5 + 159] != v7) 
&& ( ( unsigned __int8)byte_9C688D[( _QWORD)v5] != color || string[239].neighborlist[( _QWORD)v5 + 142] != v7) 
&& ( ( unsigned __int8)byte_9C688D[( _QWORD)v5] != color || string[239].neighborlist[( _QWORD)v5 + 142] != v7) ) 
v29 = ( unsigned __int8)byte_9C689E[( _QWORD)v5]; 
v33 = ( unsigned __int8)byte_9C688D[( _QWORD)v5]; 
v37 = ( unsigned __int8)byte_9C688D[( _QWORD)v5]; 
v8 = ( unsigned __int8)byte_9C689F[pos]; 
v10 = ( unsigned __int8)byte_9C688C[( _QWORD)v5]; 
v10 = ( unsigned __int8)byte_9C688C[( _QWORD)v5]; 
|| ( v39 = ( unsigned __int8)byte_9C689F[( _QWORD)v14], v39 == color) 
|| ( v40 = ( unsigned __int8)byte_9C688C[( _QWORD)v14], v40 == color) 
|| ( v45 = ( unsigned __int8)byte_9C689F[( _QWORD)v42], v45 == color) 
|| ( v46 = ( unsigned __int8)byte_9C688C[( _QWORD)v42], v46 == color) 
|| ( v53 = ( unsigned __int8)byte_9C689F[( _QWORD)v48], v53 == color) 
|| ( v54 = ( unsigned __int8)byte_9C688C[( _QWORD)v48], v54 == color) 
v59 = ( unsigned __int8)byte_9C689F[( _QWORD)v56]; 
v60 = ( unsigned __int8)byte_9C688C[( _QWORD)v56]; 
|| ( unsigned __int8)byte_9C689F[( _QWORD)v14] == color 
|| ( unsigned __int8)byte_9C688C[( _QWORD)v14] == color 
|| ( unsigned __int8)byte_9C689F[( _QWORD)v64] == color 
|| ( unsigned __int8)byte_9C688C[( _QWORD)v64] == color 
&& ( ( unsigned __int8)byte_9C689F[( _QWORD)v67] != color || string[239].neighborlist[( _QWORD)v67 + 160] != v9) 
&& ( ( unsigned __int8)byte_9C688C[( _QWORD)v67] != color || string[239].neighborlist[( _QWORD)v67 + 141] != v9) 
&& ( ( unsigned __int8)byte_9C689F[( _QWORD)v69] != color || string[239].neighborlist[( _QWORD)v69 + 160] != v9) 
&& ( ( unsigned __int8)byte_9C688C[( _QWORD)v69] != color || string[239].neighborlist[( _QWORD)v69 + 141] != v9) 
( __m128i)xmmword_4A5BD0))) ) 
return dword_4A66D0[defense]; 
|| byte_9C689F[v21] == v22 && string[239].neighborlist[v21 + 160] == string_number[v11] 
|| byte_9C688C[v21] == v22 && string[239].neighborlist[v21 + 141] == string_number[v11] 
v19 = ( unsigned __int8)byte_9C689C[i]; 
if ( !byte_9C689F[v10] && dword_A9019C[v10] != v7 ) 
if ( !byte_9C689F[v10] && dword_A9019C[v10] != v7 ) 
dword_A9019C[v10] = v7; 
if ( !byte_9C688C[v10] && string_number[v10 + 384] != v7 ) 
v25 = *( _OWORD *)( v23 + 4 * v22 - 96); 
*( _OWORD *)&libs[v22] = *( _OWORD *)( v23 + 4 * v22 - 112); 
*( _OWORD *)&libs[v22] = *( _OWORD *)( v23 + 4 * v22 - 112); 
*( _OWORD *)&libs[v22 + 4] = v25; 
v26 = *( _OWORD *)( v23 + 4 * v22 - 64); 
*( _OWORD *)&libs[v22 + 8] = *( _OWORD *)( v23 + 4 * v22 - 80); 
*( _OWORD *)&libs[v22 + 8] = *( _OWORD *)( v23 + 4 * v22 - 80); 
*( _OWORD *)&libs[v22 + 12] = v26; 
v27 = *( _OWORD *)( v23 + 4 * v22 - 32); 
*( _OWORD *)&libs[v22 + 16] = *( _OWORD *)( v23 + 4 * v22 - 48); 
*( _OWORD *)&libs[v22 + 16] = *( _OWORD *)( v23 + 4 * v22 - 48); 
*( _OWORD *)&libs[v22 + 20] = v27; 
v28 = *( _OWORD *)( v23 + 4 * v22); 
*( _OWORD *)&libs[v22 + 24] = *( _OWORD *)( v23 + 4 * v22 - 16); 
*( _OWORD *)&libs[v22 + 24] = *( _OWORD *)( v23 + 4 * v22 - 16); 
*( _OWORD *)&libs[v22 + 28] = v28; 
v33 = *( _OWORD *)( v30 + v32 * 4); 
*( _OWORD *)&v29[v32 - 4] = *( _OWORD *)( v30 + v32 * 4 - 16); 
*( _OWORD *)&v29[v32 - 4] = *( _OWORD *)( v30 + v32 * 4 - 16); 
*( _OWORD *)&v29[v32] = v33; 
if ( finish_and_score_game_current_seed != seed ) 
finish_and_score_game_current_seed = seed; 
if ( finish_and_score_game_current_board[v6][v7] != v8 ) 
finish_and_score_game_current_board[v6][v7] = v8; 
v3 = ( &s)[computer_player]; 
_OWORD *v5; // rax 
_OWORD *v5; // rax 
_OWORD *v6; // rbp 
_OWORD *v6; // rbp 
_OWORD *v8; // rax 
_OWORD *v8; // rax 
_OWORD *v9; // rbx 
_OWORD *v9; // rbx 
v5 = malloc( 0x20uLL); 
if ( !v5 ) 
v6 = v5; 
v6 = v5; 
*v5 = 0LL; 
v5[1] = 0LL; 
*( ( _QWORD *)v5 + 1) = parent; 
*p = ( SGFNode *)v5; 
node( ( SGFNode *)v5); 
v8 = malloc( 0x20uLL); 
if ( !v8 ) 
v9 = v8; 
v9 = v8; 
*v8 = 0LL; 
v8[1] = 0LL; 
*( ( _QWORD *)v8 + 1) = v6; 
*( ( _QWORD *)v8 + 1) = v6; 
*( ( _QWORD *)v6 + 2) = v8; 
*( ( _QWORD *)v6 + 2) = v8; 
node( ( SGFNode *)v8); 
v6 = v9; 
v6 = v9; 
v6 = v9; 
v6 = v9; 
p_next = ( SGFNode **)( v6 + 1); 
gametree( p_next, *( ( SGFNode **)v6 + 1), 115); 
*( _OWORD *)v8 = 0LL; 
*( ( _OWORD *)v8 + 1) = 0LL; 
*( _OWORD *)v12 = 0LL; 
*( ( _OWORD *)v12 + 1) = 0LL; 
*( ( _OWORD *)v9 + 1) = 0LL; 
if ( dword_9C6C1C[v2] == 3 - color ) 
return dword_9C6C1C[move_history_pointer]; 
if ( ( unsigned __int8)( *v9 - 1) <= 1u && dword_9FB088[v10 / 4] == origin ) 
$58E8A322B99FFF983766F42E1DE15117 v30; // esi 
$58E8A322B99FFF983766F42E1DE15117 v204; // [rsp+58h] [rbp-40h] 
if ( !gg_optind || !_getopt_initialized ) 
_getopt_initialized = 1; 
_getopt_initialized = 1; 
v30 = ordering; 
v30 = ordering; 
v204 = v30; 
v204 = v30; 
v55 = *( _OWORD *)&v51[v54 - 6]; 
v56 = *( _OWORD *)&v51[v54 - 4]; 
v57 = *( _OWORD *)&v52[v54 - 4]; 
*( _OWORD *)&v51[v54 - 6] = *( _OWORD *)&v52[v54 - 6]; 
*( _OWORD *)&v51[v54 - 6] = *( _OWORD *)&v52[v54 - 6]; 
*( _OWORD *)&v51[v54 - 4] = v57; 
*( _OWORD *)&v52[v54 - 6] = v55; 
*( _OWORD *)&v52[v54 - 4] = v56; 
v58 = *( _OWORD *)&v51[v54 - 2]; 
v59 = *( _OWORD *)&v51[v54]; 
v60 = *( _OWORD *)&v52[v54]; 
*( _OWORD *)&v51[v54 - 2] = *( _OWORD *)&v52[v54 - 2]; 
*( _OWORD *)&v51[v54 - 2] = *( _OWORD *)&v52[v54 - 2]; 
*( _OWORD *)&v51[v54] = v60; 
*( _OWORD *)&v52[v54 - 2] = v58; 
*( _OWORD *)&v52[v54] = v59; 
v62 = *( _OWORD *)&argv[v61]; 
v63 = *( _OWORD *)&argv[v61 + 2]; 
v65 = *( _OWORD *)&argv[v64 + 2]; 
*( _OWORD *)&argv[v61] = *( _OWORD *)&argv[v64]; 
*( _OWORD *)&argv[v61] = *( _OWORD *)&argv[v64]; 
*( _OWORD *)&argv[v61 + 2] = v65; 
*( _OWORD *)&argv[v64] = v62; 
*( _OWORD *)&argv[v64 + 2] = v63; 
v70 = *( _OWORD *)&v67[v69 - 6]; 
v71 = *( _OWORD *)&v67[v69 - 4]; 
v72 = *( _OWORD *)&v31[v69 + 2]; 
*( _OWORD *)&v67[v69 - 6] = *( _OWORD *)&v31[v69]; 
*( _OWORD *)&v67[v69 - 6] = *( _OWORD *)&v31[v69]; 
*( _OWORD *)&v67[v69 - 4] = v72; 
*( _OWORD *)&v31[v69] = v70; 
*( _OWORD *)&v31[v69 + 2] = v71; 
v73 = *( _OWORD *)&v67[v69 - 2]; 
v74 = *( _OWORD *)&v67[v69]; 
v75 = *( _OWORD *)&v31[v69 + 6]; 
*( _OWORD *)&v67[v69 - 2] = *( _OWORD *)&v31[v69 + 4]; 
*( _OWORD *)&v67[v69 - 2] = *( _OWORD *)&v31[v69 + 4]; 
*( _OWORD *)&v67[v69] = v75; 
*( _OWORD *)&v31[v69 + 4] = v73; 
*( _OWORD *)&v31[v69 + 6] = v74; 
v77 = *( _OWORD *)&v8[v76]; 
v78 = *( _OWORD *)&v8[v76 + 2]; 
v80 = *( _OWORD *)&v8[v79 + 2]; 
*( _OWORD *)&v8[v76] = *( _OWORD *)&v8[v79]; 
*( _OWORD *)&v8[v76] = *( _OWORD *)&v8[v79]; 
*( _OWORD *)&v8[v76 + 2] = v80; 
*( _OWORD *)&v8[v79] = v77; 
*( _OWORD *)&v8[v79 + 2] = v78; 
v30 = v204; 
v30 = v204; 
v126 = *( _OWORD *)&v123[v125 - 6]; 
v127 = *( _OWORD *)&v123[v125 - 4]; 
v128 = *( _OWORD *)&v87[v125 + 2]; 
*( _OWORD *)&v123[v125 - 6] = *( _OWORD *)&v87[v125]; 
*( _OWORD *)&v123[v125 - 6] = *( _OWORD *)&v87[v125]; 
*( _OWORD *)&v123[v125 - 4] = v128; 
*( _OWORD *)&v87[v125] = v126; 
*( _OWORD *)&v87[v125 + 2] = v127; 
v129 = *( _OWORD *)&v123[v125 - 2]; 
v130 = *( _OWORD *)&v123[v125]; 
v131 = *( _OWORD *)&v87[v125 + 6]; 
*( _OWORD *)&v123[v125 - 2] = *( _OWORD *)&v87[v125 + 4]; 
*( _OWORD *)&v123[v125 - 2] = *( _OWORD *)&v87[v125 + 4]; 
*( _OWORD *)&v123[v125] = v131; 
*( _OWORD *)&v87[v125 + 4] = v129; 
*( _OWORD *)&v87[v125 + 6] = v130; 
v133 = *( _OWORD *)&argv[v132]; 
v134 = *( _OWORD *)&argv[v132 + 2]; 
v136 = *( _OWORD *)&argv[v135 + 2]; 
*( _OWORD *)&argv[v132] = *( _OWORD *)&argv[v135]; 
*( _OWORD *)&argv[v132] = *( _OWORD *)&argv[v135]; 
*( _OWORD *)&argv[v132 + 2] = v136; 
*( _OWORD *)&argv[v135] = v133; 
*( _OWORD *)&argv[v135 + 2] = v134; 
v111 = *( _OWORD *)&v107[v110 - 6]; 
v112 = *( _OWORD *)&v107[v110 - 4]; 
v113 = *( _OWORD *)&v108[v110 - 4]; 
*( _OWORD *)&v107[v110 - 6] = *( _OWORD *)&v108[v110 - 6]; 
*( _OWORD *)&v107[v110 - 6] = *( _OWORD *)&v108[v110 - 6]; 
*( _OWORD *)&v107[v110 - 4] = v113; 
*( _OWORD *)&v108[v110 - 6] = v111; 
*( _OWORD *)&v108[v110 - 4] = v112; 
v114 = *( _OWORD *)&v107[v110 - 2]; 
v115 = *( _OWORD *)&v107[v110]; 
v116 = *( _OWORD *)&v108[v110]; 
*( _OWORD *)&v107[v110 - 2] = *( _OWORD *)&v108[v110 - 2]; 
*( _OWORD *)&v107[v110 - 2] = *( _OWORD *)&v108[v110 - 2]; 
*( _OWORD *)&v107[v110] = v116; 
*( _OWORD *)&v108[v110 - 2] = v114; 
*( _OWORD *)&v108[v110] = v115; 
v118 = *( _OWORD *)&argv[v117]; 
v119 = *( _OWORD *)&argv[v117 + 2]; 
v121 = *( _OWORD *)&argv[v120 + 2]; 
*( _OWORD *)&argv[v117] = *( _OWORD *)&argv[v120]; 
*( _OWORD *)&argv[v117] = *( _OWORD *)&argv[v120]; 
*( _OWORD *)&argv[v117 + 2] = v121; 
*( _OWORD *)&argv[v120] = v118; 
*( _OWORD *)&argv[v120 + 2] = v119; 
if ( v30 == REQUIRE_ORDER ) 
*( _OWORD *)&state->x[20] = *( _OWORD *)&x[20]; 
*( _OWORD *)&state->x[20] = *( _OWORD *)&x[20]; 
*( _OWORD *)&state->x[16] = *( _OWORD *)&x[16]; 
*( _OWORD *)&state->x[16] = *( _OWORD *)&x[16]; 
*( _OWORD *)&state->x[12] = *( _OWORD *)&x[12]; 
*( _OWORD *)&state->x[12] = *( _OWORD *)&x[12]; 
*( _OWORD *)&state->x[8] = *( _OWORD *)&x[8]; 
*( _OWORD *)&state->x[8] = *( _OWORD *)&x[8]; 
*( _OWORD *)&state->x[4] = *( _OWORD *)&x[4]; 
*( _OWORD *)&state->x[4] = *( _OWORD *)&x[4]; 
*( _OWORD *)state->x = *( _OWORD *)x; 
*( _OWORD *)&x[20] = *( _OWORD *)&state->x[20]; 
*( _OWORD *)&x[20] = *( _OWORD *)&state->x[20]; 
*( _OWORD *)&x[16] = *( _OWORD *)&state->x[16]; 
*( _OWORD *)&x[16] = *( _OWORD *)&state->x[16]; 
v1 = *( _OWORD *)state->x; 
v2 = *( _OWORD *)&state->x[4]; 
v3 = *( _OWORD *)&state->x[8]; 
*( _OWORD *)&x[12] = *( _OWORD *)&state->x[12]; 
*( _OWORD *)&x[12] = *( _OWORD *)&state->x[12]; 
*( _OWORD *)&x[8] = v3; 
*( _OWORD *)&x[4] = v2; 
*( _OWORD *)x = v1; 
v25 = *( _OWORD *)&v10[v24]; 
v26 = *( _OWORD *)&v10[v24 + 16]; 
v27 = *( _OWORD *)&v8[v24 + 16]; 
*( _OWORD *)&v10[v24] = *( _OWORD *)&v8[v24]; 
*( _OWORD *)&v10[v24] = *( _OWORD *)&v8[v24]; 
*( _OWORD *)&v10[v24 + 16] = v27; 
*( _OWORD *)&v8[v24] = v25; 
*( _OWORD *)&v8[v24 + 16] = v26; 
v28 = *( _OWORD *)&v10[v24 + 32]; 
v29 = *( _OWORD *)&v10[v24 + 48]; 
v30 = *( _OWORD *)&v8[v24 + 48]; 
*( _OWORD *)&v10[v24 + 32] = *( _OWORD *)&v8[v24 + 32]; 
*( _OWORD *)&v10[v24 + 32] = *( _OWORD *)&v8[v24 + 32]; 
*( _OWORD *)&v10[v24 + 48] = v30; 
*( _OWORD *)&v8[v24 + 32] = v28; 
*( _OWORD *)&v8[v24 + 48] = v29; 
v31 = *( _OWORD *)&v10[v24]; 
v32 = *( _OWORD *)&v10[v24 + 16]; 
v33 = *( _OWORD *)&v8[v24 + 16]; 
*( _OWORD *)&v10[v24] = *( _OWORD *)&v8[v24]; 
*( _OWORD *)&v10[v24] = *( _OWORD *)&v8[v24]; 
*( _OWORD *)&v10[v24 + 16] = v33; 
*( _OWORD *)&v8[v24] = v31; 
*( _OWORD *)&v8[v24 + 16] = v32; 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v1]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v2]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v4]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[defense]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v2]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v4]); 
if ( _mm_movemask_epi8( _mm_cmpeq_epi8( _mm_load_si128( ( const __m128i *)&xmmword_4B3190), v5)) != 0xFFFF ) 
v7 = ( unsigned int)_mm_movemask_epi8( _mm_cmpeq_epi8( v5, ( __m128i)xmmword_4B31A0)); 
name = commands_0[0].name; 
if ( commands_0[0].name ) 
v3 = ( const char **)( commands_0 + 16); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v1]); 
name = commands_0[0].name; 
if ( commands_0[0].name ) 
v2 = ( const char **)( commands_0 + 16); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v1]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v7]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v1]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[does_attack]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[does_defend]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v1]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v1]); 
&& ( unsigned __int8)byte_9C689F[pos] != color 
&& ( unsigned __int8)byte_9C688C[pos] != color ) 
*( struct influence_data **)( ( char *)&current_influence + v0 * 8) = ( struct influence_data *)( v5 | ( v6 << 32)); 
_OWORD s[4]; // [rsp+70h] [rbp-268h] BYREF 
_OWORD s[4]; // [rsp+70h] [rbp-268h] BYREF 
memset( s, 0, 0x230uLL); 
++*( ( _DWORD *)&s[5 * v11] + ( unsigned int)v10); 
fprintf( stderr, "%-14s%6d", ( const char *)qword_4A92B8[v16], v20); 
if ( byte_9C689F[v15] == v13 && string[239].neighborlist[v15 + 160] == string_number[v10] 
|| byte_9C688C[v15] == v13 && string[239].neighborlist[v15 + 141] == string_number[v10] 
v14 = byte_9C689F[v12]; 
v14 = byte_9C689F[v12]; 
v15 = byte_9C688C[v12]; 
v15 = byte_9C688C[v12]; 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4A7EF0); 
v21 = _mm_load_si128( ( const __m128i *)&xmmword_4A7F00); 
*( _OWORD *)( ( char *)moyos->size + v23) = *( _OWORD *)&v16[v22 - 1084]; 
*( _OWORD *)( ( char *)moyos->size + v23) = *( _OWORD *)&v16[v22 - 1084]; 
*( _OWORD *)( ( char *)moyos->territorial_value + v23) = *( _OWORD *)&v16[v22]; 
*( _OWORD *)( ( char *)moyos->territorial_value + v23) = *( _OWORD *)&v16[v22]; 
v2 = xmmword_4A6770; 
v3 = xmmword_4A6780; 
v4 = xmmword_4A6790; 
*( _OWORD *)( v5 + 10436624) = v2; 
*( _OWORD *)( v5 + 10436640) = v3; 
*( _OWORD *)( v5 + 10436656) = v4; 
v4 = xmmword_4A6790; 
v3 = xmmword_4A6780; 
v2 = xmmword_4A6770; 
return board[pos + 19] == 3 || byte_9C688D[pos] == 3; 
if ( 3 - color != ( unsigned __int8)byte_9C689F[pos] ) 
v9 = ( unsigned __int8)byte_9C689F[pos]; 
v10 = ( unsigned __int8)byte_9C688C[pos]; 
v3 = byte_9C688C[pos]; 
&& ( board_ko_pos != pos || 3 - color != ( unsigned __int8)byte_9C689F[pos] && 3 - color != board[pos + 1]) ) 
v11 = ( unsigned __int8)byte_9C689F[v3]; 
if ( !byte_9C689F[v3] ) 
v11 = ( unsigned __int8)byte_9C689F[v3]; 
if ( byte_9C689F[v3] ) 
v12 = ( unsigned __int8)byte_9C688C[v3]; 
if ( byte_9C688C[v3] ) 
v4 = ( unsigned __int8)byte_9C689F[pos]; 
if ( byte_9C689F[pos] 
v5 = ( unsigned __int8)byte_9C688C[pos]; 
if ( byte_9C688C[pos] ) 
*( _OWORD *)&pdfa->max_states = 0LL; 
*( _OWORD *)&pdfa->pre_rotated = 0LL; 
*( _OWORD *)&pdfa->name[64] = 0LL; 
*( _OWORD *)&pdfa->name[48] = 0LL; 
*( _OWORD *)&pdfa->name[32] = 0LL; 
*( _OWORD *)&pdfa->name[16] = 0LL; 
*( _OWORD *)pdfa->name = 0LL; 
( __m128i)xmmword_4A5BD0))) 
( __m128i)xmmword_4A5BD0))) ) 
if ( byte_9C689F[pos] != v3 || ( result = 1, string[239].neighborlist[pos + 160] != string_number[str]) ) 
if ( byte_9C688C[pos] != v3 || ( result = 1, string[239].neighborlist[pos + 141] != string_number[str]) ) 
if ( !location_to_string_init ) 
strcpy( location_to_string_buf[0], "Pass"); 
v3 = byte_A51B76; 
byte_A51B75[5 * i] = v5; 
byte_A51B76[5 * i] = v6 / 0xAu + 48; 
location_to_string_init = 1; 
*( _OWORD *)&b_eye[v6].value.a = v9; 
*( _OWORD *)&b_eye[v6].color = v9; 
*( _OWORD *)&w_eye[v6].value.a = v9; 
*( _OWORD *)&w_eye[v6].color = v9; 
*( _OWORD *)&v11->value.a = 0LL; 
*( _OWORD *)&v11->color = 0LL; 
if ( *( int *)( ( char *)&owl_black_eye[0].color + v6) == 4 
*( _OWORD *)( ( char *)v11 + i - 32) = xmmword_4A6750; 
*( _OWORD *)( ( char *)v11 + i - 32) = xmmword_4A6750; 
*( _OWORD *)&v11->adjacent[( unsigned __int64)i / 4] = xmmword_4A6760; 
*( _OWORD *)&v11->adjacent[( unsigned __int64)i / 4] = xmmword_4A6760; 
v20 = dragon[dword_9FB088[v17 / 4]].id; 
v23 = dragon[dword_9FB088[v17 / 4]].id; 
if ( *( int *)( ( char *)&owl_black_eye[0].color + v28) == 4 && v27 == *( _DWORD *)( v28 + 10532636) ) 
if ( v75 != 3 && v75 && v72 == dword_9FB088[v73 / 4] ) 
v76 = &dragon2[dword_9FB084[v73 / 4]].genus; 
v79 = dragon2[dword_9FB084[v73 / 4]].lunch; 
if ( dword_9FB08C[v73 / 4] != *( int *)( ( char *)&dragon[0].id + 5 * v73) 
|| dragon2[dword_9FB084[v73 / 4]].escape_route > 4 
v80 = dword_9FB084[v73 / 4]; 
*( _OWORD *)( v82 - 17) = *( _OWORD *)&dragon[v84 / 0x4C].effective_size; 
*( _OWORD *)( v82 - 17) = *( _OWORD *)&dragon[v84 / 0x4C].effective_size; 
*( _OWORD *)( v82 - 13) = *( _OWORD *)( v84 + 10435040); 
*( _OWORD *)( v82 - 13) = *( _OWORD *)( v84 + 10435040); 
*( _OWORD *)( v82 - 9) = *( _OWORD *)( v84 + 10435056); 
*( _OWORD *)( v82 - 9) = *( _OWORD *)( v84 + 10435056); 
*( _OWORD *)( v82 - 6) = *( _OWORD *)( v84 + 10435068); 
*( _OWORD *)( v82 - 6) = *( _OWORD *)( v84 + 10435068); 
*( _OWORD *)( v82 - 21) = *( _OWORD *)&dragon[v84 / 0x4C].color; 
*( _OWORD *)( v82 - 21) = *( _OWORD *)&dragon[v84 / 0x4C].color; 
*( _OWORD *)( v82 + 2) = *( _OWORD *)&dragon[v85 / 0x4C].effective_size; 
*( _OWORD *)( v82 + 2) = *( _OWORD *)&dragon[v85 / 0x4C].effective_size; 
*( _OWORD *)( v82 + 6) = *( _OWORD *)( v85 + 10435040); 
*( _OWORD *)( v82 + 6) = *( _OWORD *)( v85 + 10435040); 
*( _OWORD *)( v82 + 10) = *( _OWORD *)( v85 + 10435056); 
*( _OWORD *)( v82 + 10) = *( _OWORD *)( v85 + 10435056); 
*( _OWORD *)( v82 + 13) = *( _OWORD *)( v85 + 10435068); 
*( _OWORD *)( v82 + 13) = *( _OWORD *)( v85 + 10435068); 
*( _OWORD *)( v82 - 2) = *( _OWORD *)&dragon[v85 / 0x4C].color; 
*( _OWORD *)( v82 - 2) = *( _OWORD *)&dragon[v85 / 0x4C].color; 
v90 = byte_9C689F[v86]; 
me[0] = ( eyevalue)v126; 
me[v129] = ( eyevalue)v128; 
me[v132] = ( eyevalue)v131; 
me[v135] = ( eyevalue)v134; 
if ( byte_9C688C[v122] != 3 ) 
*( _OWORD *)( v177 - 17) = *( _OWORD *)&dragon[v179 / 0x4C].effective_size; 
*( _OWORD *)( v177 - 17) = *( _OWORD *)&dragon[v179 / 0x4C].effective_size; 
*( _OWORD *)( v177 - 13) = *( _OWORD *)( v179 + 10435040); 
*( _OWORD *)( v177 - 13) = *( _OWORD *)( v179 + 10435040); 
*( _OWORD *)( v177 - 9) = *( _OWORD *)( v179 + 10435056); 
*( _OWORD *)( v177 - 9) = *( _OWORD *)( v179 + 10435056); 
*( _OWORD *)( v177 - 6) = *( _OWORD *)( v179 + 10435068); 
*( _OWORD *)( v177 - 6) = *( _OWORD *)( v179 + 10435068); 
v176 = *( _OWORD *)&dragon[v179 / 0x4C].color; 
*( _OWORD *)( v177 - 21) = v176; 
*( _OWORD *)( v177 + 2) = *( _OWORD *)&dragon[v180 / 0x4C].effective_size; 
*( _OWORD *)( v177 + 2) = *( _OWORD *)&dragon[v180 / 0x4C].effective_size; 
*( _OWORD *)( v177 + 6) = *( _OWORD *)( v180 + 10435040); 
*( _OWORD *)( v177 + 6) = *( _OWORD *)( v180 + 10435040); 
*( _OWORD *)( v177 + 10) = *( _OWORD *)( v180 + 10435056); 
*( _OWORD *)( v177 + 10) = *( _OWORD *)( v180 + 10435056); 
*( _OWORD *)( v177 + 13) = *( _OWORD *)( v180 + 10435068); 
*( _OWORD *)( v177 + 13) = *( _OWORD *)( v180 + 10435068); 
v176 = *( _OWORD *)&dragon[v180 / 0x4C].color; 
*( _OWORD *)( v177 - 2) = v176; 
*( _OWORD *)( v187 - 17) = *( _OWORD *)&dragon[v189 / 0x4C].effective_size; 
*( _OWORD *)( v187 - 17) = *( _OWORD *)&dragon[v189 / 0x4C].effective_size; 
*( _OWORD *)( v187 - 13) = *( _OWORD *)( v189 + 10435040); 
*( _OWORD *)( v187 - 13) = *( _OWORD *)( v189 + 10435040); 
*( _OWORD *)( v187 - 9) = *( _OWORD *)( v189 + 10435056); 
*( _OWORD *)( v187 - 9) = *( _OWORD *)( v189 + 10435056); 
*( _OWORD *)( v187 - 6) = *( _OWORD *)( v189 + 10435068); 
*( _OWORD *)( v187 - 6) = *( _OWORD *)( v189 + 10435068); 
*( _OWORD *)( v187 - 21) = *( _OWORD *)&dragon[v189 / 0x4C].color; 
*( _OWORD *)( v187 - 21) = *( _OWORD *)&dragon[v189 / 0x4C].color; 
*( _OWORD *)( v187 + 2) = *( _OWORD *)&dragon[v190 / 0x4C].effective_size; 
*( _OWORD *)( v187 + 2) = *( _OWORD *)&dragon[v190 / 0x4C].effective_size; 
*( _OWORD *)( v187 + 6) = *( _OWORD *)( v190 + 10435040); 
*( _OWORD *)( v187 + 6) = *( _OWORD *)( v190 + 10435040); 
*( _OWORD *)( v187 + 10) = *( _OWORD *)( v190 + 10435056); 
*( _OWORD *)( v187 + 10) = *( _OWORD *)( v190 + 10435056); 
*( _OWORD *)( v187 + 13) = *( _OWORD *)( v190 + 10435068); 
*( _OWORD *)( v187 + 13) = *( _OWORD *)( v190 + 10435068); 
*( _OWORD *)( v187 - 2) = *( _OWORD *)&dragon[v190 / 0x4C].color; 
*( _OWORD *)( v187 - 2) = *( _OWORD *)&dragon[v190 / 0x4C].color; 
if ( dword_9FB088[v206 / 4] == dragon[v200].origin 
memcpy( &worm[( int)v9], v5, sizeof( worm_data)); 
memcpy( &worm[( int)v10], v5, sizeof( worm_data)); 
memcpy( &worm[( int)v8], v5, sizeof( worm_data)); 
*( _OWORD *)&worm[k].defense_codes[6] = 0LL; 
*( _OWORD *)&worm[k].defense_codes[2] = 0LL; 
*( _OWORD *)&worm[k].defense_points[8] = 0LL; 
*( _OWORD *)&worm[k].defense_points[4] = 0LL; 
*( _OWORD *)worm[k].defense_points = 0LL; 
*( _OWORD *)&worm[k].attack_codes[6] = 0LL; 
*( _OWORD *)&worm[k].attack_codes[2] = 0LL; 
*( _OWORD *)&worm[k].attack_points[8] = 0LL; 
*( _OWORD *)&worm[k].attack_points[4] = 0LL; 
*( _OWORD *)worm[k].attack_points = 0LL; 
memcpy( &worm[( int)v25], &worm[v21], sizeof( worm_data)); 
memcpy( &worm[( int)v30], &worm[v21], sizeof( worm_data)); 
memcpy( &worm[( int)v31], &worm[v21], sizeof( worm_data)); 
v40 = findlib( m, 241, &find_worm_attacks_and_defenses_libs); 
v44 = *( int *)( ( char *)&find_worm_attacks_and_defenses_libs + v43); 
memcpy( &worm[( int)v69], v63, sizeof( worm_data)); 
memcpy( &worm[( int)v70], v63, sizeof( worm_data)); 
memcpy( &worm[( int)v67], v63, sizeof( worm_data)); 
memcpy( &worm[( int)v95], &worm[v87], sizeof( worm_data)); 
memcpy( &worm[( int)v97], &worm[v87], sizeof( worm_data)); 
memcpy( &worm[( int)v96], &worm[v87], sizeof( worm_data)); 
if ( ( unsigned __int8)( byte_9C688C[n] - 1) <= 1u 
if ( ( unsigned __int8)( byte_9C689F[v125] - 1) <= 1u 
memcpy( &worm[( int)v147], v144, sizeof( worm_data)); 
memcpy( &worm[( int)v150], v144, sizeof( worm_data)); 
memcpy( &worm[( int)v149], v144, sizeof( worm_data)); 
v156 = findlib( ii, 241, &find_worm_threats_libs); 
v160 = *( int *)( ( char *)&find_worm_threats_libs + v159); 
v162 = *( int *)( ( char *)&find_worm_threats_libs + v159); 
v165 = *( int *)( ( char *)&find_worm_threats_libs + v159); 
v168 = *( int *)( ( char *)&find_worm_threats_libs + v159); 
v171 = *( int *)( ( char *)&find_worm_threats_libs + v159); 
memcpy( &worm[( int)v184], v179, sizeof( worm_data)); 
memcpy( &worm[( int)v183], v179, sizeof( worm_data)); 
memcpy( &worm[( int)v181], v179, sizeof( worm_data)); 
if ( a2 > *( float *)&dword_9C7D6C[19 * ( move / 20) - 19 + v3] ) 
*( float *)&dword_9C7D6C[19 * ( move / 20) - 19 + v3] = a2; 
if ( byte_9C689F[pos] != v2 || ( result = 1, string[239].neighborlist[pos + 160] != string_number[str]) ) 
if ( byte_9C688C[pos] != v2 || ( result = 1, string[239].neighborlist[pos + 141] != string_number[str]) ) 
*( _OWORD *)&pdfa->max_states = 0LL; 
*( _OWORD *)&pdfa->pre_rotated = 0LL; 
*( _OWORD *)&pdfa->name[64] = 0LL; 
*( _OWORD *)&pdfa->name[48] = 0LL; 
*( _OWORD *)&pdfa->name[32] = 0LL; 
*( _OWORD *)&pdfa->name[16] = 0LL; 
*( _OWORD *)pdfa->name = 0LL; 
v14 = ( unsigned __int8)byte_9C689F[origin]; 
if ( byte_9C689F[origin] ) 
v14 = ( unsigned __int8)byte_9C689F[origin]; 
if ( byte_9C689F[origin] ) 
if ( dword_A9019C[origin] != v6 ) 
dword_A9019C[origin] = v6; 
if ( byte_9C688C[origin] || string_number[origin + 384] == v6 ) 
if ( v9 == ( unsigned __int8)byte_9C688C[origin] ) 
v3 = _mm_load_si128( ( const __m128i *)&xmmword_557150); 
_mm_and_si128( _mm_shuffle_epi32( ( __m128i)v4, 233), ( __m128i)xmmword_557160)), 
( __m128i)xmmword_557170); 
v14 = *( _OWORD *)&v12->pos; 
*( _OWORD *)&moves[v13].same_dragon = *( _OWORD *)&v12->same_dragon; 
*( _OWORD *)&moves[v13].same_dragon = *( _OWORD *)&v12->same_dragon; 
*( _OWORD *)&moves[v13].pos = v14; 
v19 = *( _OWORD *)&v17->pos; 
*( _OWORD *)&moves[v18].same_dragon = *( _OWORD *)&v17->same_dragon; 
*( _OWORD *)&moves[v18].same_dragon = *( _OWORD *)&v17->same_dragon; 
*( _OWORD *)&moves[v18].pos = v19; 
v23 = *( _OWORD *)&v21->pos; 
*( _OWORD *)&moves[v22].same_dragon = *( _OWORD *)&v21->same_dragon; 
*( _OWORD *)&moves[v22].same_dragon = *( _OWORD *)&v21->same_dragon; 
*( _OWORD *)&moves[v22].pos = v23; 
*( _OWORD *)( v13 + 12003980) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v13 + 12003980) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v13 + 12003968) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v13 + 12003968) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v13 + 12003952) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)( v13 + 12003952) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)&dragon_goal_worms[v13 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
*( _OWORD *)&dragon_goal_worms[v13 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
init_owl( &owl_defend_owl, target, 0, 0, 1); 
v10 = owl_defend_owl; 
current_owl_data = owl_defend_owl; 
if ( !owl_defend_owl->lunches_are_current ) 
owl_find_lunches( owl_defend_owl); 
prepare_goal_list( target, owl_defend_owl, kworm, ( int *)1, v13, v14); 
v20 = do_owl_defend( target, &v21, wormid, owl_defend_owl, 0, 0, 0); 
owl_defend_owl->goal, 
&& ( byte_9C689F[vital_point] == 3 || !owl->goal[vital_point - 1]) 
&& ( byte_9C688C[vital_point] == 3 || !owl->goal[vital_point - 20]) 
*( _OWORD *)( v16 + 12003980) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v16 + 12003980) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v16 + 12003968) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v16 + 12003968) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v16 + 12003952) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)( v16 + 12003952) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)&dragon_goal_worms[v16 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
*( _OWORD *)&dragon_goal_worms[v16 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
*( _OWORD *)( v12 + 12003980) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v12 + 12003980) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v12 + 12003968) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v12 + 12003968) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v12 + 12003952) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)( v12 + 12003952) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)&dragon_goal_worms[v12 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
*( _OWORD *)&dragon_goal_worms[v12 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
v14 = ( eyevalue)( *( _DWORD *)probable_eyes - matches_found); 
*( _OWORD *)&owl->lunch[4] = 0LL; 
*( _OWORD *)owl->lunch = 0LL; 
for ( i = 22LL; ( unsigned __int8)( byte_9C689F[i] - 1) > 1u || goal->goal[i - 1] != 1; i += 2LL ) 
for ( j = 22LL; ( unsigned __int8)( byte_9C689F[j] - 1) > 1u || goal->goal[j - 1] != 1; j += 2LL ) 
for ( k = 22LL; ( unsigned __int8)( byte_9C689F[k] - 1) > 1u || goal->goal[k - 1] != 1; k += 2LL ) 
&& v9 != ( unsigned __int8)byte_9C689F[v10] 
&& v9 != ( unsigned __int8)byte_9C688C[v10] 
&& v9 != ( unsigned __int8)byte_9C689F[v11] 
&& v9 != ( unsigned __int8)byte_9C688C[v11] 
&& v9 != ( unsigned __int8)byte_9C689F[v12] 
&& v9 != ( unsigned __int8)byte_9C688C[v12] 
&& v9 != ( unsigned __int8)byte_9C689F[v13] 
&& v9 != ( unsigned __int8)byte_9C688C[v13] 
number_of_matches = 0; 
v3 = number_of_matches; 
if ( !number_of_matches ) 
if ( number_of_matches > 0 ) 
if ( number_of_matches > 0 ) 
v27 = handicap_matches; 
if ( number_of_matches == v4 ) 
LODWORD( v4) = number_of_matches; 
anchor = handicap_matches[( unsigned int)v4].anchor; 
ll = handicap_matches[v28].ll; 
v6 = number_of_matches & 3; 
if ( ( unsigned __int64)( unsigned int)number_of_matches - 1 < 3 ) 
if ( ( number_of_matches & 3) != 0 ) 
v9 = &handicap_matches[v8]; 
if ( number_of_matches == 1 ) 
v16 = number_of_matches & 0xFFFFFFFE; 
v17 = handicap_matches; 
v23 = handicap_matches[v12].value; 
handicap_matches[v22].value = v24; 
v13 = handicap_matches; 
if ( ( number_of_matches & 0xFFFFFFFC) == v8 ) 
if ( play_aftermath_current_color == color ) 
play_aftermath_current_color = color; 
v5 = ( unsigned __int8)byte_9C689F[v4]; 
if ( v5 != 3 && dword_9AA2BC[v4] != v5 ) 
dword_9AA2BC[v4] = v5; 
*( _OWORD *)&aftermath.white_prisoners = 0LL; 
sgftreeWriteResult( &sgftree, COERCE_DOUBLE( ( unsigned __int64)dword_4B3DC8[gameinfo->to_move == 1]), v4, 1); 
gtp_main_loop( commands_0, gtp_input); 
v16 = *( _OWORD *)&move_history_color[v15 + 55]; 
*( _OWORD *)&move_history_color[v15] = *( _OWORD *)&move_history_color[v15 + 51]; 
*( _OWORD *)&move_history_color[v15] = *( _OWORD *)&move_history_color[v15 + 51]; 
*( _OWORD *)&move_history_color[v15 + 4] = v16; 
v17 = *( _OWORD *)&move_history_pos[v15 + 55]; 
*( _OWORD *)&move_history_pos[v15] = *( _OWORD *)&move_history_pos[v15 + 51]; 
*( _OWORD *)&move_history_pos[v15] = *( _OWORD *)&move_history_pos[v15 + 51]; 
*( _OWORD *)&move_history_pos[v15 + 4] = v17; 
v18 = *( _OWORD *)&move_history_color[v15 + 63]; 
*( _OWORD *)&move_history_color[v15 + 8] = *( _OWORD *)&move_history_color[v15 + 59]; 
*( _OWORD *)&move_history_color[v15 + 8] = *( _OWORD *)&move_history_color[v15 + 59]; 
*( _OWORD *)&move_history_color[v15 + 12] = v18; 
v19 = *( _OWORD *)&move_history_pos[v15 + 63]; 
*( _OWORD *)&move_history_pos[v15 + 8] = *( _OWORD *)&move_history_pos[v15 + 59]; 
*( _OWORD *)&move_history_pos[v15 + 8] = *( _OWORD *)&move_history_pos[v15 + 59]; 
*( _OWORD *)&move_history_pos[v15 + 12] = v19; 
v20 = *( _OWORD *)&move_history_color[v15 + 55]; 
*( _OWORD *)&move_history_color[v15] = *( _OWORD *)&move_history_color[v15 + 51]; 
*( _OWORD *)&move_history_color[v15] = *( _OWORD *)&move_history_color[v15 + 51]; 
*( _OWORD *)&move_history_color[v15 + 4] = v20; 
v21 = *( _OWORD *)&move_history_pos[v15 + 55]; 
*( _OWORD *)&move_history_pos[v15] = *( _OWORD *)&move_history_pos[v15 + 51]; 
*( _OWORD *)&move_history_pos[v15] = *( _OWORD *)&move_history_pos[v15 + 51]; 
*( _OWORD *)&move_history_pos[v15 + 4] = v21; 
*( _OWORD *)&owl_goal_worm[11] = 0LL; 
*( _OWORD *)&owl_goal_worm[8] = 0LL; 
*( _OWORD *)&owl_goal_worm[4] = 0LL; 
*( _OWORD *)owl_goal_worm = 0LL; 
*( _OWORD *)( v25 + 12003980) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v25 + 12003980) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v25 + 12003968) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v25 + 12003968) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v25 + 12003952) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)( v25 + 12003952) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)&dragon_goal_worms[v25 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
*( _OWORD *)&dragon_goal_worms[v25 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
*( _OWORD *)&best_moves[4] = 0LL; 
*( _OWORD *)best_moves = 0LL; 
*( _OWORD *)best_move_values = 0LL; 
*( _OWORD *)&best_move_values[4] = 0LL; 
memcpy( &worm[v7], v2, sizeof( worm_data)); 
memcpy( &worm[v8], v2, sizeof( worm_data)); 
memcpy( &worm[v5], v2, sizeof( worm_data)); 
if ( purge_persistent_owl_cache_last_purge_position_number != position_number ) 
purge_persistent_owl_cache_last_purge_position_number = position_number; 
memcpy( &persistent_owl_cache[v1], &persistent_owl_cache[v0], sizeof( owl_cache)); 
v4 = ( unsigned __int8)byte_9C689C[i]; 
if ( purge_persistent_reading_cache_last_purge_position_number != position_number ) 
purge_persistent_reading_cache_last_purge_position_number = position_number; 
v13 = ( unsigned __int8)byte_9C689C[v12]; 
memcpy( &persistent_reading_cache[v1], &persistent_reading_cache[v4], sizeof( reading_cache)); 
memcpy( &v5[v9], v8, sizeof( local_owl_data)); 
memcpy( &v5[v12], v11, sizeof( local_owl_data)); 
v2 = ( Hashnode **)malloc( ( size_t)&loc_493E00); 
memset( v3, 0, ( size_t)&loc_493E00); 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4A89F0); 
*v110 = ( eyevalue)v62; 
byte_A5304F[v45] = 1; 
*( _OWORD *)&best_moves[1] = *( _OWORD *)&best_moves[2]; 
*( _OWORD *)&best_moves[1] = *( _OWORD *)&best_moves[2]; 
*( _OWORD *)&best_move_values[1] = *( _OWORD *)&best_move_values[2]; 
*( _OWORD *)&best_move_values[1] = *( _OWORD *)&best_move_values[2]; 
*( _OWORD *)&best_moves[5] = *( _OWORD *)&best_moves[6]; 
*( _OWORD *)&best_moves[5] = *( _OWORD *)&best_moves[6]; 
*( _OWORD *)&best_move_values[5] = *( _OWORD *)&best_move_values[6]; 
*( _OWORD *)&best_move_values[5] = *( _OWORD *)&best_move_values[6]; 
*( _OWORD *)&best_moves[5] = *( _OWORD *)&best_moves[6]; 
*( _OWORD *)&best_moves[5] = *( _OWORD *)&best_moves[6]; 
*( _OWORD *)&best_move_values[5] = *( _OWORD *)&best_move_values[6]; 
*( _OWORD *)&best_move_values[5] = *( _OWORD *)&best_move_values[6]; 
v11 = ( const char *)&off_4A71AB; 
v12 = ( const char *)&off_4A71AB; 
v12 = ( const char *)&unk_4A71AF; 
v11 = ( const char *)&unk_4A71AF; 
if ( dword_9FB088[v20 / 4] == dragon[pos].origin ) 
v18 = *( _OWORD *)&state->move_history_color[v13 + 4]; 
*( _OWORD *)&move_history_color[v13] = *( _OWORD *)&state->move_history_color[v13]; 
*( _OWORD *)&move_history_color[v13] = *( _OWORD *)&state->move_history_color[v13]; 
*( _OWORD *)&move_history_color[v13 + 4] = v18; 
v19 = *( _OWORD *)&state->move_history_pos[v13 + 4]; 
*( _OWORD *)&move_history_pos[v13] = *( _OWORD *)&state->move_history_pos[v13]; 
*( _OWORD *)&move_history_pos[v13] = *( _OWORD *)&state->move_history_pos[v13]; 
*( _OWORD *)&move_history_pos[v13 + 4] = v19; 
v14 = *( _OWORD *)&state->move_history_color[v13 + 4]; 
*( _OWORD *)&move_history_color[v13] = *( _OWORD *)&state->move_history_color[v13]; 
*( _OWORD *)&move_history_color[v13] = *( _OWORD *)&state->move_history_color[v13]; 
*( _OWORD *)&move_history_color[v13 + 4] = v14; 
v15 = *( _OWORD *)&state->move_history_pos[v13 + 4]; 
*( _OWORD *)&move_history_pos[v13] = *( _OWORD *)&state->move_history_pos[v13]; 
*( _OWORD *)&move_history_pos[v13] = *( _OWORD *)&state->move_history_pos[v13]; 
*( _OWORD *)&move_history_pos[v13 + 4] = v15; 
v16 = *( _OWORD *)&state->move_history_color[v13 + 12]; 
*( _OWORD *)&move_history_color[v13 + 8] = *( _OWORD *)&state->move_history_color[v13 + 8]; 
*( _OWORD *)&move_history_color[v13 + 8] = *( _OWORD *)&state->move_history_color[v13 + 8]; 
*( _OWORD *)&move_history_color[v13 + 12] = v16; 
v17 = *( _OWORD *)&state->move_history_pos[v13 + 12]; 
*( _OWORD *)&move_history_pos[v13 + 8] = *( _OWORD *)&state->move_history_pos[v13 + 8]; 
*( _OWORD *)&move_history_pos[v13 + 8] = *( _OWORD *)&state->move_history_pos[v13 + 8]; 
*( _OWORD *)&move_history_pos[v13 + 12] = v17; 
return ( const char *)*( &off_4A8690 + result); 
v151 = *( int *)( ( char *)&stones_on_board_stone_count_for_position + v150); 
return off_4A8658[routine]; 
if ( !safe_move_initialized ) 
safe_move_initialized = 1; 
return off_4A85F0[status]; 
v14 = ( unsigned __int8)byte_9C689C[i]; 
&& ( byte_9C689F[v3] != v4 || ( result = 1, string[239].neighborlist[v3 + 160] != string_number[str])) 
&& ( byte_9C688C[v3] != v4 || ( result = 1, string[239].neighborlist[v3 + 141] != string_number[str])) 
&& ( byte_9C689F[v5] != v6 || ( result = 1, string[239].neighborlist[v5 + 160] != string_number[str])) 
&& ( byte_9C688C[v5] != v6 || ( result = 1, string[239].neighborlist[v5 + 141] != string_number[str])) 
&& ( byte_9C689F[v7] != v8 || ( result = 1, string[239].neighborlist[v7 + 160] != string_number[str])) 
&& ( byte_9C688C[v7] != v8 || ( result = 1, string[239].neighborlist[v7 + 141] != string_number[str])) 
if ( byte_9C689F[v9] != v10 || ( result = 1, string[239].neighborlist[v9 + 160] != string_number[str]) ) 
if ( byte_9C688C[v9] != v10 || ( result = 1, string[239].neighborlist[v9 + 141] != string_number[str]) ) 
memset( segment_region_marked, 0, sizeof( segment_region_marked)); 
memset( segment_region_marked, 0, sizeof( segment_region_marked)); 
if ( board[i] != 3 && !segment_region_marked[i] && region_owner( q, i) ) 
segment_region_marked[i] = 1; 
if ( segment_region_marked[v11] ) 
if ( !segment_region_marked[v14] ) 
segment_region_marked[v14] = 1; 
if ( !segment_region_marked[v16] ) 
segment_region_marked[v16] = 1; 
if ( !segment_region_marked[v20] ) 
segment_region_marked[v20] = 1; 
segment_region_marked[v11] = 1; 
|| byte_9C689F[move] != 3 && owla->goal[move - 1] 
|| byte_9C688C[move] != 3 && owla->goal[move - 20] 
if ( !( v6 ^ __OFSUB__( v3, 5) | ( v3 == 5)) ) 
if ( 2 * set_depth_values_node_limits[10 - level] > 19 ) 
v20 = 2 * set_depth_values_node_limits[10 - level]; 
v18 = dragon2[dword_9FB084[v16 / 4]].safety; 
*( _OWORD *)&result->child = 0LL; 
*( _OWORD *)&result->props = 0LL; 
*( _OWORD *)&v6->child = 0LL; 
*( _OWORD *)&v6->props = 0LL; 
*( _OWORD *)&v6->props = 0LL; 
*( _OWORD *)&v4->child = 0LL; 
*( _OWORD *)&v4->props = 0LL; 
*( _OWORD *)&v3->child = 0LL; 
*( _OWORD *)&v3->props = 0LL; 
v3 = &sgffile_begindump_local_tree; 
*( _OWORD *)&v5->next = 0LL, 
*( _OWORD *)&result->child = 0LL; 
*( _OWORD *)&result->props = 0LL; 
*( _OWORD *)&result->child = 0LL; 
*( _OWORD *)&result->props = 0LL; 
*( _OWORD *)&result->props = 0LL; 
v4 = dword_9FB088[v2 / 4]; 
show_dragons_snames[dragon[i].crude_status], 
show_dragons_snames[dragon[i].status], 
gprintf( ", owl status %s\n", show_dragons_snames[dragon[i].owl_status]); 
return off_4A8588[status]; 
if ( stones_on_board_stone_count_for_position != position_number ) 
stones_on_board_white_stones = 0; 
stones_on_board_black_stones = 0; 
stones_on_board_black_stones = ++v1; 
stones_on_board_stone_count_for_position = position_number; 
stones_on_board_white_stones = ++v2; 
stones_on_board_black_stones = ++v1; 
stones_on_board_white_stones = ++v2; 
v1 = stones_on_board_black_stones; 
v2 = stones_on_board_white_stones; 
*( _OWORD *)&delta_territory_cache[21] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[21] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[25] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[25] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[29] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[29] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[33] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[33] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[37] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[37] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[41] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[41] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[45] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[45] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[49] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[49] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[53] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[53] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[57] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[57] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[61] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[61] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[65] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[65] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[69] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[69] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[73] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[73] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[77] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[77] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[81] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[81] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[85] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[85] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[89] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[89] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[93] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[93] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[97] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[97] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[101] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[101] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[105] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[105] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[109] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[109] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[113] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[113] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[117] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[117] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[121] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[121] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[125] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[125] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[129] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[129] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[133] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[133] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[137] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[137] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[141] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[141] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[145] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[145] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[149] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[149] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[153] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[153] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[157] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[157] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[161] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[161] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[165] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[165] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[169] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[169] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[173] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[173] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[177] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[177] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[181] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[181] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[185] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[185] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[189] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[189] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[193] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[193] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[197] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[197] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[201] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[201] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[205] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[205] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[209] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[209] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[213] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[213] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[217] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[217] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[221] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[221] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[225] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[225] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[229] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[229] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[233] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[233] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[237] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[237] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[241] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[241] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[245] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[245] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[249] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[249] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[253] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[253] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[257] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[257] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[261] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[261] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[265] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[265] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[269] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[269] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[273] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[273] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[277] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[277] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[281] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[281] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[285] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[285] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[289] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[289] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[293] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[293] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[297] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[297] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[301] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[301] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[305] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[305] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[309] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[309] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[313] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[313] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[317] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[317] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[321] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[321] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[325] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[325] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[329] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[329] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[333] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[333] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[337] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[337] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[341] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[341] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[345] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[345] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[349] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[349] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[353] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[353] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[357] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[357] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[361] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[361] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[365] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[365] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[369] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[369] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[373] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[373] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[377] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[377] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[381] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[381] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[385] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[385] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[389] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[389] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[393] = xmmword_4A7F10; 
*( _OWORD *)&delta_territory_cache[393] = xmmword_4A7F10; 
if ( byte_9C689F[i] != 3 ) 
v22 = ( unsigned __int8)byte_9C688C[j]; 
|| byte_9C688D[j] != 3 && *( ( _BYTE *)&v91 + j + 5) == 1) ) 
v24 = ( unsigned __int8)byte_9C688C[k]; 
|| byte_9C688D[k] != 3 && *( ( _BYTE *)&v91 + k + 5) == 2) ) 
v26 = ( unsigned __int8)byte_9C688C[m]; 
|| byte_9C688D[m] != 3 && *( ( _BYTE *)&v91 + m + 5) == 3) ) 
v28 = ( unsigned __int8)byte_9C688C[n]; 
|| byte_9C688D[n] != 3 && *( ( _BYTE *)&v91 + n + 5) == 4) ) 
memcpy( &persistent_reading_cache[v11], &persistent_reading_cache[99], sizeof( reading_cache)); 
v27 = byte_9C688C[i]; 
|| byte_9C688D[i] != 3 && v42[i + 21] == 1) ) 
if ( ( unsigned __int8)( byte_9C689F[v28] - 1) <= 1u && *j ) 
if ( ( unsigned __int8)( byte_9C688C[k] - 1) >= 2u 
|| !byte_9C688D[k] && v42[k + 21] == 2) ) 
if ( byte_9C688C[m] != 3 
|| byte_9C688D[m] != 3 && ( unsigned __int8)( v42[m + 21] - 1) <= 2u) ) 
v23 = dword_4A89E0[v51]; 
v9 = off_4AC590[komaster]; 
v14 = off_4AC590[komaster]; 
v18 = off_4AC590[komaster]; 
*( _OWORD *)defend_lib_score = *( _OWORD *)params; 
*( _OWORD *)defend_capture_score = *( _OWORD *)( params + 11); 
*( _OWORD *)defend_atari_score = *( _OWORD *)( params + 17); 
*( _OWORD *)defend_save_score = *( _OWORD *)( params + 23); 
*( _OWORD *)attack_string_lib_score = *( _OWORD *)( params + 39); 
*( _OWORD *)attack_capture_score = *( _OWORD *)( params + 45); 
*( _OWORD *)attack_save_score = *( _OWORD *)( params + 51); 
*( _OWORD *)defend_not_adjacent_lib_score = *( _OWORD *)( params + 6); 
*( _OWORD *)defend_open_score = *( _OWORD *)( params + 29); 
*( _OWORD *)attack_own_lib_score = *( _OWORD *)( params + 34); 
*( _OWORD *)attack_open_score = *( _OWORD *)( params + 57); 
if ( !byte_9C689F[v15] && dword_A9019C[v15] != v14 ) 
if ( !byte_9C689F[v15] && dword_A9019C[v15] != v14 ) 
dword_A9019C[v15] = v14; 
if ( !byte_9C688C[v15] && string_number[v15 + 384] != v14 ) 
v283 = _mm_or_ps( _mm_andnot_ps( v16, v15), _mm_and_ps( _mm_xor_ps( ( __m128)xmmword_4A4620, v15), v16)); 
v106 = _mm_or_ps( _mm_andnot_ps( v105, v287), _mm_and_ps( _mm_xor_ps( ( __m128)xmmword_4A4620, v287), v105)); 
v112 = _mm_and_pd( _mm_xor_pd( ( __m128d)xmmword_4AABC0, v110), v111); 
v122 = qword_4AAB78[v121]; 
v183 = qword_4AABD0[dragon2[dragon[*( _QWORD *)&value[0]].id].safety == 5]; 
*( _OWORD *)value = v199; 
if ( ( ( int)( *v247 + ::move[v8].numneg_shape) < 0) ^ __OFADD__( *v247, ::move[v8].numneg_shape) | ( *v247 + ::move[v8].numneg_shape == 0) ) 
if ( ( v253 + v254 < 0) ^ __OFADD__( v253, v254) | ( v253 + v254 == 0) ) 
v8 = off_4A8558[v26]; 
fprintf( outputfile, off_4A898D, *v28); 
