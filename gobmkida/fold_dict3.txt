if ( *( int *)( ( char *)&owl_black_eye[0].color + v6) == 4 
*( _OWORD *)( ( char *)v11 + i - 32) = xmmword_494790; 
*( _OWORD *)( ( char *)v11 + i - 32) = xmmword_494790; 
*( _OWORD *)&v11->adjacent[( unsigned __int64)i / 4] = xmmword_4947A0; 
*( _OWORD *)&v11->adjacent[( unsigned __int64)i / 4] = xmmword_4947A0; 
v21 = dragon[dword_9E8088[v18 / 4]].id; 
if ( *( int *)( ( char *)&owl_black_eye[0].color + v24) == 4 && v23 == *( _DWORD *)( v24 + 10454812) ) 
if ( v62 != 3 && v62 && v59 == dword_9E8088[v60 / 4] ) 
v63 = &dragon2[dword_9E8084[v60 / 4]].genus; 
lunch = dragon2[dword_9E8084[v60 / 4]].lunch; 
if ( dword_9E808C[v60 / 4] != *( int *)( ( char *)&dragon[0].id + 5 * v60) 
|| dragon2[dword_9E8084[v60 / 4]].escape_route > 4 
v67 = dword_9E8084[v60 / 4]; 
*( _OWORD *)( v69 - 17) = *( _OWORD *)&dragon[v71 / 0x4C].effective_size; 
*( _OWORD *)( v69 - 17) = *( _OWORD *)&dragon[v71 / 0x4C].effective_size; 
*( _OWORD *)( v69 - 13) = *( _OWORD *)( v71 + 10357216); 
*( _OWORD *)( v69 - 13) = *( _OWORD *)( v71 + 10357216); 
*( _OWORD *)( v69 - 9) = *( _OWORD *)( v71 + 10357232); 
*( _OWORD *)( v69 - 9) = *( _OWORD *)( v71 + 10357232); 
*( _OWORD *)( v69 - 6) = *( _OWORD *)( v71 + 10357244); 
*( _OWORD *)( v69 - 6) = *( _OWORD *)( v71 + 10357244); 
*( _OWORD *)( v69 - 21) = *( _OWORD *)&dragon[v71 / 0x4C].color; 
*( _OWORD *)( v69 - 21) = *( _OWORD *)&dragon[v71 / 0x4C].color; 
*( _OWORD *)( v69 + 2) = *( _OWORD *)&dragon[v72 / 0x4C].effective_size; 
*( _OWORD *)( v69 + 2) = *( _OWORD *)&dragon[v72 / 0x4C].effective_size; 
*( _OWORD *)( v69 + 6) = *( _OWORD *)( v72 + 10357216); 
*( _OWORD *)( v69 + 6) = *( _OWORD *)( v72 + 10357216); 
*( _OWORD *)( v69 + 10) = *( _OWORD *)( v72 + 10357232); 
*( _OWORD *)( v69 + 10) = *( _OWORD *)( v72 + 10357232); 
*( _OWORD *)( v69 + 13) = *( _OWORD *)( v72 + 10357244); 
*( _OWORD *)( v69 + 13) = *( _OWORD *)( v72 + 10357244); 
*( _OWORD *)( v69 - 2) = *( _OWORD *)&dragon[v72 / 0x4C].color; 
*( _OWORD *)( v69 - 2) = *( _OWORD *)&dragon[v72 / 0x4C].color; 
v77 = byte_9B389F[v73]; 
me[0] = ( eyevalue)v97; 
me[v100] = ( eyevalue)v99; 
me[v103] = ( eyevalue)v102; 
me[v106] = ( eyevalue)v105; 
if ( byte_9B388C[v93] != 3 ) 
*( _OWORD *)( v130 - 17) = *( _OWORD *)&dragon[v132 / 0x4C].effective_size; 
*( _OWORD *)( v130 - 17) = *( _OWORD *)&dragon[v132 / 0x4C].effective_size; 
*( _OWORD *)( v130 - 13) = *( _OWORD *)( v132 + 10357216); 
*( _OWORD *)( v130 - 13) = *( _OWORD *)( v132 + 10357216); 
*( _OWORD *)( v130 - 9) = *( _OWORD *)( v132 + 10357232); 
*( _OWORD *)( v130 - 9) = *( _OWORD *)( v132 + 10357232); 
*( _OWORD *)( v130 - 6) = *( _OWORD *)( v132 + 10357244); 
*( _OWORD *)( v130 - 6) = *( _OWORD *)( v132 + 10357244); 
v129 = *( _OWORD *)&dragon[v132 / 0x4C].color; 
*( _OWORD *)( v130 - 21) = v129; 
*( _OWORD *)( v130 + 2) = *( _OWORD *)&dragon[v133 / 0x4C].effective_size; 
*( _OWORD *)( v130 + 2) = *( _OWORD *)&dragon[v133 / 0x4C].effective_size; 
*( _OWORD *)( v130 + 6) = *( _OWORD *)( v133 + 10357216); 
*( _OWORD *)( v130 + 6) = *( _OWORD *)( v133 + 10357216); 
*( _OWORD *)( v130 + 10) = *( _OWORD *)( v133 + 10357232); 
*( _OWORD *)( v130 + 10) = *( _OWORD *)( v133 + 10357232); 
*( _OWORD *)( v130 + 13) = *( _OWORD *)( v133 + 10357244); 
*( _OWORD *)( v130 + 13) = *( _OWORD *)( v133 + 10357244); 
v129 = *( _OWORD *)&dragon[v133 / 0x4C].color; 
*( _OWORD *)( v130 - 2) = v129; 
*( _OWORD *)( v141 - 17) = *( _OWORD *)&dragon[v143 / 0x4C].effective_size; 
*( _OWORD *)( v141 - 17) = *( _OWORD *)&dragon[v143 / 0x4C].effective_size; 
*( _OWORD *)( v141 - 13) = *( _OWORD *)( v143 + 10357216); 
*( _OWORD *)( v141 - 13) = *( _OWORD *)( v143 + 10357216); 
*( _OWORD *)( v141 - 9) = *( _OWORD *)( v143 + 10357232); 
*( _OWORD *)( v141 - 9) = *( _OWORD *)( v143 + 10357232); 
*( _OWORD *)( v141 - 6) = *( _OWORD *)( v143 + 10357244); 
*( _OWORD *)( v141 - 6) = *( _OWORD *)( v143 + 10357244); 
*( _OWORD *)( v141 - 21) = *( _OWORD *)&dragon[v143 / 0x4C].color; 
*( _OWORD *)( v141 - 21) = *( _OWORD *)&dragon[v143 / 0x4C].color; 
*( _OWORD *)( v141 + 2) = *( _OWORD *)&dragon[v144 / 0x4C].effective_size; 
*( _OWORD *)( v141 + 2) = *( _OWORD *)&dragon[v144 / 0x4C].effective_size; 
*( _OWORD *)( v141 + 6) = *( _OWORD *)( v144 + 10357216); 
*( _OWORD *)( v141 + 6) = *( _OWORD *)( v144 + 10357216); 
*( _OWORD *)( v141 + 10) = *( _OWORD *)( v144 + 10357232); 
*( _OWORD *)( v141 + 10) = *( _OWORD *)( v144 + 10357232); 
*( _OWORD *)( v141 + 13) = *( _OWORD *)( v144 + 10357244); 
*( _OWORD *)( v141 + 13) = *( _OWORD *)( v144 + 10357244); 
*( _OWORD *)( v141 - 2) = *( _OWORD *)&dragon[v144 / 0x4C].color; 
*( _OWORD *)( v141 - 2) = *( _OWORD *)&dragon[v144 / 0x4C].color; 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v2]); 
*( _OWORD *)v8 = 0LL; 
*( ( _OWORD *)v8 + 1) = 0LL; 
*( _OWORD *)v12 = 0LL; 
*( ( _OWORD *)v12 + 1) = 0LL; 
*( ( _OWORD *)v9 + 1) = 0LL; 
( __m128i)xmmword_493C10))) ) 
return dword_494710[defense]; 
v11 = ( const char *)&off_4951EB; 
v12 = ( const char *)&off_4951EB; 
v12 = ( const char *)&unk_4951EF; 
v11 = ( const char *)&unk_4951EF; 
memcpy( &worm[v7], v2, sizeof( worm_data)); 
memcpy( &worm[v8], v2, sizeof( worm_data)); 
memcpy( &worm[v5], v2, sizeof( worm_data)); 
v4 = ( unsigned __int8)byte_9B389F[pos]; 
if ( byte_9B389F[pos] 
v5 = ( unsigned __int8)byte_9B388C[pos]; 
if ( byte_9B388C[pos] ) 
*( _OWORD *)( v12 + 11926156) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v12 + 11926156) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v12 + 11926144) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v12 + 11926144) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v12 + 11926128) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)( v12 + 11926128) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)&dragon_goal_worms[v12 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
*( _OWORD *)&dragon_goal_worms[v12 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v1]); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
gg_snprintf( eyevalue_to_string_result, 0x1DuLL, "[%d, %d, %d, %d]", a, b, e->c, v6); 
gg_snprintf( eyevalue_to_string_result, 0x1DuLL, "%d%d%d%d", a, b, c, v6); 
return eyevalue_to_string_result; 
*( _OWORD *)( i + 12044720) = 0LL; 
*( _OWORD *)( i + 12044704) = 0LL; 
*( _OWORD *)( i + 12044688) = 0LL; 
*( _OWORD *)( i + 12044672) = 0LL; 
*( _OWORD *)( i + 12044656) = 0LL; 
*( _OWORD *)( i + 12044640) = 0LL; 
*( _OWORD *)aux_dfa[i / 0x78].name = 0LL; 
*( _OWORD *)&aux_temp.max_states = 0LL; 
*( _OWORD *)&aux_temp.pre_rotated = 0LL; 
*( _OWORD *)&aux_temp.name[64] = 0LL; 
*( _OWORD *)&aux_temp.name[48] = 0LL; 
*( _OWORD *)&aux_temp.name[32] = 0LL; 
*( _OWORD *)&aux_temp.name[16] = 0LL; 
*( _OWORD *)aux_temp.name = 0LL; 
*( _OWORD *)&result->props = 0LL; 
*( _OWORD *)&v3->child = 0LL; 
*( _OWORD *)&v3->props = 0LL; 
if ( a2 > *( float *)&dword_9B4D6C[19 * ( move / 20) - 19 + v3] ) 
*( float *)&dword_9B4D6C[19 * ( move / 20) - 19 + v3] = a2; 
*( _OWORD *)( i + 12044720) = 0LL; 
*( _OWORD *)( i + 12044704) = 0LL; 
*( _OWORD *)( i + 12044688) = 0LL; 
*( _OWORD *)( i + 12044672) = 0LL; 
*( _OWORD *)( i + 12044656) = 0LL; 
*( _OWORD *)( i + 12044640) = 0LL; 
*( _OWORD *)aux_dfa[i / 0x78].name = 0LL; 
*( _OWORD *)&aux_temp.max_states = 0LL; 
*( _OWORD *)&aux_temp.pre_rotated = 0LL; 
*( _OWORD *)&aux_temp.name[64] = 0LL; 
*( _OWORD *)&aux_temp.name[48] = 0LL; 
*( _OWORD *)&aux_temp.name[32] = 0LL; 
*( _OWORD *)&aux_temp.name[16] = 0LL; 
*( _OWORD *)aux_temp.name = 0LL; 
*( _OWORD *)( ( char *)&aux_count + v1) = xmmword_495C10; 
*( _OWORD *)( ( char *)&aux_count + v1) = xmmword_495C10; 
*( _OWORD *)( ( char *)&gpleft + v1) = xmmword_495C10; 
*( _OWORD *)( ( char *)&gpleft + v1) = xmmword_495C10; 
*( _OWORD *)&gtest.hash[v1 / 8] = xmmword_495C10; 
*( _OWORD *)&gtest.hash[v1 / 8] = xmmword_495C10; 
*( _OWORD *)( v1 + 12076976) = xmmword_495C10; 
*( _OWORD *)( v1 + 12076976) = xmmword_495C10; 
*( _OWORD *)( v1 + 12076992) = xmmword_495C10; 
*( _OWORD *)( v1 + 12076992) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077008) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077008) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077024) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077024) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077040) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077040) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077056) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077056) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077072) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077072) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077088) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077088) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077104) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077104) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077120) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077120) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077136) = xmmword_495C10; 
*( _OWORD *)( v1 + 12077136) = xmmword_495C10; 
return off_496638[status]; 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
v9 = off_49A4E0[komaster]; 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
v8 = off_4965A0[v34]; 
fprintf( outputfile, off_4969D5, *v26); 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_495F60); 
v21 = _mm_load_si128( ( const __m128i *)&xmmword_495F70); 
*( _OWORD *)( ( char *)moyos->size + v23) = *( _OWORD *)&v16[v22 - 1084]; 
*( _OWORD *)( ( char *)moyos->size + v23) = *( _OWORD *)&v16[v22 - 1084]; 
*( _OWORD *)( ( char *)moyos->territorial_value + v23) = *( _OWORD *)&v16[v22]; 
*( _OWORD *)( ( char *)moyos->territorial_value + v23) = *( _OWORD *)&v16[v22]; 
return dword_9B3C1C[move_history_pointer]; 
if ( v2 != ( unsigned __int8)byte_9B389F[pos] 
if ( v2 != ( unsigned __int8)byte_9B388C[pos] 
if ( *( float *)&dword_9B53A8[v1] > 0.0 ) 
gtp_print_vertex( dword_9B53D8[v1] / 20 - 1, dword_9B53D8[v1] + ~( 20 * ( dword_9B53D8[v1] / 20))); 
gtp_print_vertex( dword_9B53D8[v1] / 20 - 1, dword_9B53D8[v1] + ~( 20 * ( dword_9B53D8[v1] / 20))); 
gtp_print_vertex( dword_9B53D8[v1] / 20 - 1, dword_9B53D8[v1] + ~( 20 * ( dword_9B53D8[v1] / 20))); 
gtp_printf( " %.2f ", *( float *)&dword_9B53A8[v1]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v4]); 
*( _OWORD *)&x[20] = *( _OWORD *)&state->x[20]; 
*( _OWORD *)&x[20] = *( _OWORD *)&state->x[20]; 
*( _OWORD *)&x[16] = *( _OWORD *)&state->x[16]; 
*( _OWORD *)&x[16] = *( _OWORD *)&state->x[16]; 
v1 = *( _OWORD *)state->x; 
v2 = *( _OWORD *)&state->x[4]; 
v3 = *( _OWORD *)&state->x[8]; 
*( _OWORD *)&x[12] = *( _OWORD *)&state->x[12]; 
*( _OWORD *)&x[12] = *( _OWORD *)&state->x[12]; 
*( _OWORD *)&x[8] = v3; 
*( _OWORD *)&x[4] = v2; 
*( _OWORD *)x = v1; 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
memcpy( &persistent_reading_cache[v11], &persistent_reading_cache[99], sizeof( reading_cache)); 
v27 = byte_9B388C[i]; 
|| byte_9B388D[i] != 3 && v42[i + 21] == 1) ) 
if ( ( unsigned __int8)( byte_9B389F[v28] - 1) <= 1u && *j ) 
if ( ( unsigned __int8)( byte_9B388C[k] - 1) >= 2u 
|| !byte_9B388D[k] && v42[k + 21] == 2) ) 
if ( byte_9B388C[m] != 3 
|| byte_9B388D[m] != 3 && ( unsigned __int8)( v42[m + 21] - 1) <= 2u) ) 
*( _OWORD *)&v5->next = 0LL, 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
v9 = ( unsigned __int8)byte_9B389F[pos]; 
v10 = ( unsigned __int8)byte_9B388C[pos]; 
*( _QWORD *)&v2 = ( unsigned int)dword_9B53A8[v1]; 
gtp_print_vertex( dword_9B53D8[v1] / 20 - 1, dword_9B53D8[v1] + ~( 20 * ( dword_9B53D8[v1] / 20))); 
gtp_print_vertex( dword_9B53D8[v1] / 20 - 1, dword_9B53D8[v1] + ~( 20 * ( dword_9B53D8[v1] / 20))); 
gtp_print_vertex( dword_9B53D8[v1] / 20 - 1, dword_9B53D8[v1] + ~( 20 * ( dword_9B53D8[v1] / 20))); 
v2 = *( float *)&dword_9B53A8[v1]; 
return !( ( v10 + v11 < 0) ^ __OFADD__( v10, v11) | ( v10 + v11 == 0)) 
memcpy( q, base, sizeof( influence_data)); 
if ( byte_9B389F[i] != 3 ) 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
if ( byte_9B389F[v4] == v5 && string[239].neighborlist[v4 + 160] == string_number[str] 
|| byte_9B388C[v4] == v5 && string[239].neighborlist[v4 + 141] == string_number[str] 
if ( !byte_9B388C[v124] ) 
v130 = ( unsigned __int8)byte_9B388D[v124]; 
v136 = ( unsigned __int8)byte_9B388D[v124]; 
if ( !byte_9B389F[v124] ) 
v126 = byte_9B389E[v124]; 
if ( byte_9B389F[k] != 3 && mx[k - 1] == 1 ) 
name = commands_0[0].name; 
if ( commands_0[0].name ) 
v2 = ( const char **)( commands_0 + 16); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v1]); 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_496A30); 
*v98 = ( eyevalue)v49; 
byte_A4004F[v42] = 1; 
v21 = *( int *)( ( char *)&stones_on_board_stone_count_for_position + v20); 
|| byte_9B389F[vital_point] != 3 && owl->goal[vital_point - 1] 
|| byte_9B388C[vital_point] != 3 && owl->goal[vital_point - 20] 
( __m128i)xmmword_493C10))) 
( __m128i)xmmword_493C10))) ) 
v143 = *( int *)( ( char *)&stones_on_board_stone_count_for_position + v142); 
v182 = *( _OWORD *)( v173 + 4 * v181 + 10179524); 
*( _OWORD *)&best_moves[v181 + v173 / 4] = *( _OWORD *)( v173 + 4 * v181 + 10179508); 
*( _OWORD *)&best_moves[v181 + v173 / 4] = *( _OWORD *)( v173 + 4 * v181 + 10179508); 
*( _OWORD *)( v173 + 4 * v181 + 10179520) = v182; 
v183 = *( _OWORD *)( v173 + 4 * v181 + 10179476); 
*( _OWORD *)&best_move_values[v181 + v173 / 4] = *( _OWORD *)( v173 + 4 * v181 + 10179460); 
*( _OWORD *)&best_move_values[v181 + v173 / 4] = *( _OWORD *)( v173 + 4 * v181 + 10179460); 
*( _OWORD *)( v173 + 4 * v181 + 10179472) = v183; 
v184 = *( _OWORD *)( v173 + 4 * v181 + 10179556); 
*( _OWORD *)( v173 + 4 * v181 + 10179536) = *( _OWORD *)( v173 + 4 * v181 + 10179540); 
*( _OWORD *)( v173 + 4 * v181 + 10179536) = *( _OWORD *)( v173 + 4 * v181 + 10179540); 
*( _OWORD *)&close_worms[v181 / 4][v173 / 4] = v184; 
v171 = *( _OWORD *)( v173 + 4 * v181 + 10179492); 
*( _OWORD *)( v173 + 4 * v181 + 10179488) = v171; 
v187 = *( _OWORD *)&best_moves[v186 + 5]; 
*( _OWORD *)&best_moves[v186] = *( _OWORD *)&best_moves[v186 + 1]; 
*( _OWORD *)&best_moves[v186] = *( _OWORD *)&best_moves[v186 + 1]; 
*( _OWORD *)&best_moves[v186 + 4] = v187; 
v171 = *( _OWORD *)&best_move_values[v186 + 1]; 
*( _OWORD *)&best_move_values[v186] = v171; 
v223 = *( _OWORD *)( v214 + 4 * v222 + 10179524); 
*( _OWORD *)&best_moves[v222 + v214 / 4] = *( _OWORD *)( v214 + 4 * v222 + 10179508); 
*( _OWORD *)&best_moves[v222 + v214 / 4] = *( _OWORD *)( v214 + 4 * v222 + 10179508); 
*( _OWORD *)( v214 + 4 * v222 + 10179520) = v223; 
v224 = *( _OWORD *)( v214 + 4 * v222 + 10179476); 
*( _OWORD *)&best_move_values[v222 + v214 / 4] = *( _OWORD *)( v214 + 4 * v222 + 10179460); 
*( _OWORD *)&best_move_values[v222 + v214 / 4] = *( _OWORD *)( v214 + 4 * v222 + 10179460); 
*( _OWORD *)( v214 + 4 * v222 + 10179472) = v224; 
v225 = *( _OWORD *)( v214 + 4 * v222 + 10179556); 
*( _OWORD *)( v214 + 4 * v222 + 10179536) = *( _OWORD *)( v214 + 4 * v222 + 10179540); 
*( _OWORD *)( v214 + 4 * v222 + 10179536) = *( _OWORD *)( v214 + 4 * v222 + 10179540); 
*( _OWORD *)&close_worms[v222 / 4][v214 / 4] = v225; 
*( _OWORD *)( v214 + 4 * v222 + 10179488) = *( _OWORD *)( v214 + 4 * v222 + 10179492); 
*( _OWORD *)( v214 + 4 * v222 + 10179488) = *( _OWORD *)( v214 + 4 * v222 + 10179492); 
v228 = *( _OWORD *)&best_moves[v227 + 5]; 
*( _OWORD *)&best_moves[v227] = *( _OWORD *)&best_moves[v227 + 1]; 
*( _OWORD *)&best_moves[v227] = *( _OWORD *)&best_moves[v227 + 1]; 
*( _OWORD *)&best_moves[v227 + 4] = v228; 
*( _OWORD *)&best_move_values[v227] = *( _OWORD *)&best_move_values[v227 + 1]; 
*( _OWORD *)&best_move_values[v227] = *( _OWORD *)&best_move_values[v227 + 1]; 
v241 = *( _OWORD *)( v232 + 4 * v240 + 10179524); 
*( _OWORD *)&best_moves[v240 + v232 / 4] = *( _OWORD *)( v232 + 4 * v240 + 10179508); 
*( _OWORD *)&best_moves[v240 + v232 / 4] = *( _OWORD *)( v232 + 4 * v240 + 10179508); 
*( _OWORD *)( v232 + 4 * v240 + 10179520) = v241; 
v242 = *( _OWORD *)( v232 + 4 * v240 + 10179476); 
*( _OWORD *)&best_move_values[v240 + v232 / 4] = *( _OWORD *)( v232 + 4 * v240 + 10179460); 
*( _OWORD *)&best_move_values[v240 + v232 / 4] = *( _OWORD *)( v232 + 4 * v240 + 10179460); 
*( _OWORD *)( v232 + 4 * v240 + 10179472) = v242; 
v243 = *( _OWORD *)( v232 + 4 * v240 + 10179556); 
*( _OWORD *)( v232 + 4 * v240 + 10179536) = *( _OWORD *)( v232 + 4 * v240 + 10179540); 
*( _OWORD *)( v232 + 4 * v240 + 10179536) = *( _OWORD *)( v232 + 4 * v240 + 10179540); 
*( _OWORD *)&close_worms[v240 / 4][v232 / 4] = v243; 
*( _OWORD *)( v232 + 4 * v240 + 10179488) = *( _OWORD *)( v232 + 4 * v240 + 10179492); 
*( _OWORD *)( v232 + 4 * v240 + 10179488) = *( _OWORD *)( v232 + 4 * v240 + 10179492); 
v246 = *( _OWORD *)&best_moves[v245 + 5]; 
*( _OWORD *)&best_moves[v245] = *( _OWORD *)&best_moves[v245 + 1]; 
*( _OWORD *)&best_moves[v245] = *( _OWORD *)&best_moves[v245 + 1]; 
*( _OWORD *)&best_moves[v245 + 4] = v246; 
*( _OWORD *)&best_move_values[v245] = *( _OWORD *)&best_move_values[v245 + 1]; 
*( _OWORD *)&best_move_values[v245] = *( _OWORD *)&best_move_values[v245 + 1]; 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
current_minsize = minsize; 
current_attacks = ( struct aa_move *)base; 
memset( conditional_attack_point, 0, sizeof( conditional_attack_point)); 
memset( conditional_attack_point, 0, sizeof( conditional_attack_point)); 
gg_sort( v18 - 12, v19, 4uLL, target_comp_func); 
gg_sort( base, ( unsigned int)v17, 0x14uLL, move_comp_func); 
*( _OWORD *)( v14 + 192) = 0LL; 
*( _OWORD *)( v14 + 176) = 0LL; 
*( _OWORD *)( v14 + 160) = 0LL; 
*( _OWORD *)( v14 + 144) = 0LL; 
*( _OWORD *)( v14 + 128) = 0LL; 
*( _OWORD *)( v14 + 112) = 0LL; 
*( _OWORD *)( v14 + 96) = 0LL; 
*( _OWORD *)( v14 + 80) = 0LL; 
*( _OWORD *)( v14 + 64) = 0LL; 
*( _OWORD *)( v14 + 48) = 0LL; 
v27 = findlib( j, 241, &find_worm_attacks_and_defenses_libs); 
v31 = *( int *)( ( char *)&find_worm_attacks_and_defenses_libs + v30); 
if ( ( unsigned __int8)( byte_9B388C[n] - 1) <= 1u 
if ( ( unsigned __int8)( byte_9B389F[v94] - 1) <= 1u 
v115 = findlib( jj, 241, find_worm_threats_libs); 
v118 = find_worm_threats_libs[( _QWORD)kk]; 
v121 = find_worm_threats_libs[( _QWORD)kk]; 
*( _OWORD *)( p_defense_point - 6) = *( _OWORD *)&v4->color; 
*( _OWORD *)( p_defense_point - 6) = *( _OWORD *)&v4->color; 
*( struct influence_data **)( ( char *)&current_influence + v0 * 8) = ( struct influence_data *)( v5 | ( v6 << 32)); 
*( _OWORD *)&owl->lunch[4] = 0LL; 
*( _OWORD *)owl->lunch = 0LL; 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
if ( !safe_move_initialized ) 
safe_move_initialized = 1; 
*value = ( eyevalue)16843009; 
*value = ( eyevalue)33686018; 
*( _OWORD *)&pdfa->max_states = 0LL; 
*( _OWORD *)&pdfa->pre_rotated = 0LL; 
*( _OWORD *)&pdfa->name[64] = 0LL; 
*( _OWORD *)&pdfa->name[48] = 0LL; 
*( _OWORD *)&pdfa->name[32] = 0LL; 
*( _OWORD *)&pdfa->name[16] = 0LL; 
*( _OWORD *)pdfa->name = 0LL; 
return off_4965D0[status]; 
*( _OWORD *)( ( char *)&aux_count + v4) = xmmword_495C10; 
*( _OWORD *)( ( char *)&aux_count + v4) = xmmword_495C10; 
*( _OWORD *)( ( char *)&aux_count + v4) = xmmword_495C10; 
*( _OWORD *)( ( char *)&gpleft + v4) = xmmword_495C10; 
*( _OWORD *)( ( char *)&gpleft + v4) = xmmword_495C10; 
*( _OWORD *)( ( char *)&gpleft + v4) = xmmword_495C10; 
*( _OWORD *)&gtest.hash[v4 / 8] = xmmword_495C10; 
*( _OWORD *)&gtest.hash[v4 / 8] = xmmword_495C10; 
*( _OWORD *)&gtest.hash[v4 / 8] = xmmword_495C10; 
*( _OWORD *)( v4 + 12076976) = xmmword_495C10; 
*( _OWORD *)( v4 + 12076976) = xmmword_495C10; 
*( _OWORD *)( v4 + 12076992) = xmmword_495C10; 
*( _OWORD *)( v4 + 12076992) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077008) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077008) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077024) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077024) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077040) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077040) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077056) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077056) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077072) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077072) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077088) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077088) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077104) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077104) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077120) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077120) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077136) = xmmword_495C10; 
*( _OWORD *)( v4 + 12077136) = xmmword_495C10; 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v4]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v1]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[defense]); 
sgftreeWriteResult( &sgftree, COERCE_DOUBLE( ( unsigned __int64)dword_4A1CB8[gameinfo->to_move == 1]), v4, 1); 
v7 = gtest.hash[v6]; 
v9 = gtest.hash[v6]; 
gtest.hash[v6] = v10; 
|| byte_9B389F[move] != 3 && owla->goal[move - 1] 
|| byte_9B388C[move] != 3 && owla->goal[move - 20] 
*( _OWORD *)&result->child = 0LL; 
*( _OWORD *)&result->props = 0LL; 
if ( purge_persistent_reading_cache_last_purge_position_number != position_number ) 
purge_persistent_reading_cache_last_purge_position_number = position_number; 
v13 = ( unsigned __int8)byte_9B389C[v12]; 
memcpy( &persistent_reading_cache[v1], &persistent_reading_cache[v4], sizeof( reading_cache)); 
v14 = ( eyevalue)( *( _DWORD *)probable_eyes - matches_found); 
if ( byte_9B389F[pos] != v2 || ( result = 1, string[239].neighborlist[pos + 160] != string_number[str]) ) 
if ( byte_9B388C[pos] != v2 || ( result = 1, string[239].neighborlist[pos + 141] != string_number[str]) ) 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return dword_4954F0[safety]; 
v14 = _mm_mul_pd( ( __m128d)xmmword_4947E0, v13); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
if ( !byte_9B389F[v10] && dword_A7D19C[v10] != v7 ) 
if ( !byte_9B389F[v10] && dword_A7D19C[v10] != v7 ) 
dword_A7D19C[v10] = v7; 
if ( !byte_9B388C[v10] && string_number[v10 + 384] != v7 ) 
v25 = *( _OWORD *)( v23 + 4 * v22 - 96); 
*( _OWORD *)&libs[v22] = *( _OWORD *)( v23 + 4 * v22 - 112); 
*( _OWORD *)&libs[v22] = *( _OWORD *)( v23 + 4 * v22 - 112); 
*( _OWORD *)&libs[v22 + 4] = v25; 
v26 = *( _OWORD *)( v23 + 4 * v22 - 64); 
*( _OWORD *)&libs[v22 + 8] = *( _OWORD *)( v23 + 4 * v22 - 80); 
*( _OWORD *)&libs[v22 + 8] = *( _OWORD *)( v23 + 4 * v22 - 80); 
*( _OWORD *)&libs[v22 + 12] = v26; 
v27 = *( _OWORD *)( v23 + 4 * v22 - 32); 
*( _OWORD *)&libs[v22 + 16] = *( _OWORD *)( v23 + 4 * v22 - 48); 
*( _OWORD *)&libs[v22 + 16] = *( _OWORD *)( v23 + 4 * v22 - 48); 
*( _OWORD *)&libs[v22 + 20] = v27; 
v28 = *( _OWORD *)( v23 + 4 * v22); 
*( _OWORD *)&libs[v22 + 24] = *( _OWORD *)( v23 + 4 * v22 - 16); 
*( _OWORD *)&libs[v22 + 24] = *( _OWORD *)( v23 + 4 * v22 - 16); 
*( _OWORD *)&libs[v22 + 28] = v28; 
v33 = *( _OWORD *)( v30 + v32 * 4); 
*( _OWORD *)&v29[v32 - 4] = *( _OWORD *)( v30 + v32 * 4 - 16); 
*( _OWORD *)&v29[v32 - 4] = *( _OWORD *)( v30 + v32 * 4 - 16); 
*( _OWORD *)&v29[v32] = v33; 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
v18 = *( _OWORD *)&state->move_history_color[v13 + 4]; 
*( _OWORD *)&move_history_color[v13] = *( _OWORD *)&state->move_history_color[v13]; 
*( _OWORD *)&move_history_color[v13] = *( _OWORD *)&state->move_history_color[v13]; 
*( _OWORD *)&move_history_color[v13 + 4] = v18; 
v19 = *( _OWORD *)&state->move_history_pos[v13 + 4]; 
*( _OWORD *)&move_history_pos[v13] = *( _OWORD *)&state->move_history_pos[v13]; 
*( _OWORD *)&move_history_pos[v13] = *( _OWORD *)&state->move_history_pos[v13]; 
*( _OWORD *)&move_history_pos[v13 + 4] = v19; 
v14 = *( _OWORD *)&state->move_history_color[v13 + 4]; 
*( _OWORD *)&move_history_color[v13] = *( _OWORD *)&state->move_history_color[v13]; 
*( _OWORD *)&move_history_color[v13] = *( _OWORD *)&state->move_history_color[v13]; 
*( _OWORD *)&move_history_color[v13 + 4] = v14; 
v15 = *( _OWORD *)&state->move_history_pos[v13 + 4]; 
*( _OWORD *)&move_history_pos[v13] = *( _OWORD *)&state->move_history_pos[v13]; 
*( _OWORD *)&move_history_pos[v13] = *( _OWORD *)&state->move_history_pos[v13]; 
*( _OWORD *)&move_history_pos[v13 + 4] = v15; 
v16 = *( _OWORD *)&state->move_history_color[v13 + 12]; 
*( _OWORD *)&move_history_color[v13 + 8] = *( _OWORD *)&state->move_history_color[v13 + 8]; 
*( _OWORD *)&move_history_color[v13 + 8] = *( _OWORD *)&state->move_history_color[v13 + 8]; 
*( _OWORD *)&move_history_color[v13 + 12] = v16; 
v17 = *( _OWORD *)&state->move_history_pos[v13 + 12]; 
*( _OWORD *)&move_history_pos[v13 + 8] = *( _OWORD *)&state->move_history_pos[v13 + 8]; 
*( _OWORD *)&move_history_pos[v13 + 8] = *( _OWORD *)&state->move_history_pos[v13 + 8]; 
*( _OWORD *)&move_history_pos[v13 + 12] = v17; 
&& v9 != ( unsigned __int8)byte_9B389F[v12] 
&& v9 != ( unsigned __int8)byte_9B388C[v12] 
v16 = *( _OWORD *)&move_history_color[v15 + 55]; 
*( _OWORD *)&move_history_color[v15] = *( _OWORD *)&move_history_color[v15 + 51]; 
*( _OWORD *)&move_history_color[v15] = *( _OWORD *)&move_history_color[v15 + 51]; 
*( _OWORD *)&move_history_color[v15 + 4] = v16; 
v17 = *( _OWORD *)&move_history_pos[v15 + 55]; 
*( _OWORD *)&move_history_pos[v15] = *( _OWORD *)&move_history_pos[v15 + 51]; 
*( _OWORD *)&move_history_pos[v15] = *( _OWORD *)&move_history_pos[v15 + 51]; 
*( _OWORD *)&move_history_pos[v15 + 4] = v17; 
v18 = *( _OWORD *)&move_history_color[v15 + 63]; 
*( _OWORD *)&move_history_color[v15 + 8] = *( _OWORD *)&move_history_color[v15 + 59]; 
*( _OWORD *)&move_history_color[v15 + 8] = *( _OWORD *)&move_history_color[v15 + 59]; 
*( _OWORD *)&move_history_color[v15 + 12] = v18; 
v19 = *( _OWORD *)&move_history_pos[v15 + 63]; 
*( _OWORD *)&move_history_pos[v15 + 8] = *( _OWORD *)&move_history_pos[v15 + 59]; 
*( _OWORD *)&move_history_pos[v15 + 8] = *( _OWORD *)&move_history_pos[v15 + 59]; 
*( _OWORD *)&move_history_pos[v15 + 12] = v19; 
v20 = *( _OWORD *)&move_history_color[v15 + 55]; 
*( _OWORD *)&move_history_color[v15] = *( _OWORD *)&move_history_color[v15 + 51]; 
*( _OWORD *)&move_history_color[v15] = *( _OWORD *)&move_history_color[v15 + 51]; 
*( _OWORD *)&move_history_color[v15 + 4] = v20; 
v21 = *( _OWORD *)&move_history_pos[v15 + 55]; 
*( _OWORD *)&move_history_pos[v15] = *( _OWORD *)&move_history_pos[v15 + 51]; 
*( _OWORD *)&move_history_pos[v15] = *( _OWORD *)&move_history_pos[v15 + 51]; 
*( _OWORD *)&move_history_pos[v15 + 4] = v21; 
v14 = off_49A4E0[komaster]; 
v18 = off_49A4E0[komaster]; 
*( _OWORD *)( v13 + 11926156) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v13 + 11926156) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v13 + 11926144) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v13 + 11926144) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v13 + 11926128) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)( v13 + 11926128) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)&dragon_goal_worms[v13 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
*( _OWORD *)&dragon_goal_worms[v13 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
number_of_matches = 0; 
v3 = number_of_matches; 
if ( !number_of_matches ) 
if ( number_of_matches > 0 ) 
v6 = number_of_matches & 3; 
if ( ( unsigned __int64)( unsigned int)number_of_matches - 1 >= 3 ) 
v13 = handicap_matches; 
while ( ( number_of_matches & 0xFFFFFFFC) != v8 ); 
if ( ( number_of_matches & 3) != 0 ) 
v9 = &handicap_matches[v8]; 
if ( number_of_matches == 1 ) 
v16 = number_of_matches & 0xFFFFFFFE; 
v17 = handicap_matches; 
v23 = handicap_matches[v12].value; 
handicap_matches[v22].value = v24; 
if ( number_of_matches > 0 ) 
v27 = handicap_matches; 
if ( number_of_matches == v4 ) 
LODWORD( v4) = number_of_matches; 
anchor = handicap_matches[( unsigned int)v4].anchor; 
ll = handicap_matches[v28].ll; 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
v264 = _mm_or_ps( _mm_andnot_ps( v16, v15), _mm_and_ps( _mm_xor_ps( ( __m128)xmmword_492660, v15), v16)); 
v105 = _mm_or_ps( _mm_andnot_ps( v104, v262), _mm_and_ps( _mm_xor_ps( ( __m128)xmmword_492660, v262), v104)); 
v111 = _mm_and_pd( _mm_xor_pd( ( __m128d)xmmword_498B10, v109), v110); 
v122 = qword_498AC0[v121]; 
v174 = qword_498B20[dragon2[dragon[*( _QWORD *)&value[0]].id].safety == 5]; 
*( _OWORD *)value = v194; 
if ( ( ( int)( *v226 + ::move[v8].numneg_shape) < 0) ^ __OFADD__( *v226, ::move[v8].numneg_shape) | ( *v226 + ::move[v8].numneg_shape == 0) ) 
if ( ( v231 + v232 < 0) ^ __OFADD__( v231, v232) | ( v231 + v232 == 0) ) 
( __m128i)xmmword_493C10))) ) 
if ( ( v15 = v14 - 20, v16 = v13 + 20LL, v8 == ( unsigned __int8)byte_9B388C[v14]) 
if ( ( v10 + v11 < 0) ^ __OFADD__( v10, v11) | ( v10 + v11 == 0) ) 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v7]); 
memset( segment_region_marked, 0, sizeof( segment_region_marked)); 
memset( segment_region_marked, 0, sizeof( segment_region_marked)); 
if ( board[i] != 3 && !segment_region_marked[i] && region_owner( q, i) ) 
segment_region_marked[i] = 1; 
if ( !segment_region_marked[v12] ) 
segment_region_marked[v12] = 1; 
if ( !segment_region_marked[v14] ) 
segment_region_marked[v14] = 1; 
if ( !segment_region_marked[v16] ) 
segment_region_marked[v16] = 1; 
if ( !segment_region_marked[v18] ) 
segment_region_marked[v18] = 1; 
_OWORD *v5; // rax 
_OWORD *v5; // rax 
_OWORD *v6; // rbp 
_OWORD *v6; // rbp 
_OWORD *v8; // rax 
_OWORD *v8; // rax 
_OWORD *v9; // rbx 
_OWORD *v9; // rbx 
v5 = malloc( 0x20uLL); 
if ( !v5 ) 
v6 = v5; 
v6 = v5; 
*v5 = 0LL; 
v5[1] = 0LL; 
*( ( _QWORD *)v5 + 1) = parent; 
*p = ( SGFNode *)v5; 
node( ( SGFNode *)v5); 
v8 = malloc( 0x20uLL); 
if ( !v8 ) 
v9 = v8; 
v9 = v8; 
*v8 = 0LL; 
v8[1] = 0LL; 
*( ( _QWORD *)v8 + 1) = v6; 
*( ( _QWORD *)v8 + 1) = v6; 
*( ( _QWORD *)v6 + 2) = v8; 
*( ( _QWORD *)v6 + 2) = v8; 
node( ( SGFNode *)v8); 
v6 = v9; 
v6 = v9; 
v6 = v9; 
v6 = v9; 
p_next = ( SGFNode **)( v6 + 1); 
gametree( p_next, *( ( SGFNode **)v6 + 1), 115); 
|| 3 - color != ( unsigned __int8)byte_9B389F[pos] && 3 - color != board[pos + 1]) 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
if ( byte_9B389F[origin] || dword_A7D19C[origin] == v6 ) 
if ( byte_9B389F[origin] || dword_A7D19C[origin] == v6 ) 
if ( v9 == ( unsigned __int8)byte_9B389F[origin] ) 
dword_A7D19C[origin] = v6; 
if ( byte_9B388C[origin] || string_number[origin + 384] == v6 ) 
if ( v9 == ( unsigned __int8)byte_9B388C[origin] ) 
if ( ( byte_9B389F[v40] == 3 || !*( _BYTE *)( *( _QWORD *)&v135.same_dragon + v44)) 
&& ( byte_9B388C[v40] == 3 || !*( _BYTE *)( *( _QWORD *)&v135.same_dragon + v40 - 20)) 
|| byte_9B388C[v40] != 3 && v43->goal[v40 - 20] 
if ( byte_9B389F[v51] != 3 && *( _BYTE *)( *( _QWORD *)&v135.same_dragon + v57) 
|| byte_9B388C[v51] != 3 && *( _BYTE *)( *( _QWORD *)&v135.same_dragon + v51 - 20) 
&& ( byte_9B388C[v51] == 3 || !v55->goal[v51 - 20]) 
|| byte_9B389F[v58] != 3 && owl->goal[v58 - 1] 
|| byte_9B388C[v58] != 3 && owl->goal[v58 - 20] 
if ( ( byte_9B389F[v64] == 3 || !*( _BYTE *)( *( _QWORD *)&v135.same_dragon + v67)) 
&& ( byte_9B388C[v64] == 3 || !*( _BYTE *)( *( _QWORD *)&v135.same_dragon + v64 - 20)) 
|| byte_9B388C[v64] != 3 && v66->goal[v64 - 20] 
if ( byte_9B389F[v74] != 3 && *( _BYTE *)( *( _QWORD *)&v135.same_dragon + v77) 
|| byte_9B388C[v74] != 3 && *( _BYTE *)( *( _QWORD *)&v135.same_dragon + v74 - 20) 
&& ( byte_9B388C[v74] == 3 || !v76->goal[v74 - 20]) 
|| byte_9B389F[v74] != 3 && owl->goal[v74 - 1] 
|| byte_9B388C[v74] != 3 && owl->goal[v74 - 20] 
*( _OWORD *)&v4->child = 0LL; 
*( _OWORD *)&v4->props = 0LL; 
pattern_0 *v7; // rbx 
pattern_0 *v7; // rbx 
pattern_0 *v43; // rdi 
pattern_0 *v43; // rdi 
pattern_0 *v82; // [rsp+8h] [rbp-1C30h] 
pattern_0 *v82; // [rsp+8h] [rbp-1C30h] 
v7 = pat; 
v82 = pat; 
v7 = v82; 
v7 = v82; 
edge_constraints = v7->edge_constraints; 
v32 = v82->maxj; 
v37 = v82->minj; 
v83 = ( unsigned int)v82->minj; 
v56 = v82->minj; 
v43 = v82; 
v43 = v82; 
patlen = ( unsigned int)v82->patlen; 
v43 = v82; 
v43 = v82; 
v81 = ( unsigned int)v82->patlen; 
LODWORD( v83) = v43->edge_constraints; 
if ( v69 != v43->maxi ) 
if ( v69 != v43->mini ) 
if ( v68 != v43->maxj ) 
if ( v68 != v43->minj ) 
v43 = v82; 
v43 = v82; 
if ( v69 <= v82->maxi ) 
if ( v69 >= v82->mini ) 
if ( v68 <= v82->maxj ) 
if ( v68 >= v82->minj ) 
v43 = v82; 
v43 = v82; 
v3 = byte_9B388C[pos]; 
return ( const char *)*( &off_4966D8 + result); 
if ( byte_9B389F[i * 2] != 3 ) 
if ( v139 == ( unsigned __int8)byte_9B388C[v42] ) 
|| byte_9B388D[v42] != 3 && !v137[v42 + 21]) ) 
if ( !( ( v95 + v96 < 0) ^ __OFADD__( v95, v96) | ( v95 + v96 == 0)) ) 
safety = dragon2[dword_9E8084[v133 / 4]].safety; 
*( _OWORD *)&v26[v28] = *( _OWORD *)&next[v28 / 4]; 
*( _OWORD *)&v26[v28] = *( _OWORD *)&next[v28 / 4]; 
memcpy( v6, &persistent_reading_cache[v7], sizeof( reading_cache)); 
*( _OWORD *)value = 0LL; 
if ( byte_9B389F[v27] != 3 && *i == *v26 ) 
if ( byte_9B389F[v24] != 3 && *j == *v23 ) 
if ( byte_9B389F[v31] != 3 && *k == *v30 ) 
if ( byte_9B389F[v35] != 3 && *m == *v34 ) 
if ( byte_9B389F[v39] != 3 && *n == *v38 ) 
gprintf( "status=%s, escape=%d\n", decide_position_snames[v2[4]], ( unsigned int)dragon2[*v2].escape_route); 
*( _OWORD *)&result->child = 0LL; 
*( _OWORD *)&result->props = 0LL; 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
v39 = *( int *)( ( char *)&stones_on_board_stone_count_for_position + v37); 
v48 = *( int *)( ( char *)&stones_on_board_stone_count_for_position + v46); 
*( _OWORD *)&best_moves[4] = 0LL; 
*( _OWORD *)best_moves = 0LL; 
*( _OWORD *)best_move_values = 0LL; 
*( _OWORD *)&best_move_values[4] = 0LL; 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
v6 = do_compute_effective_worm_sizes_worms[21]; 
v11 = do_compute_effective_worm_sizes_worms; 
do_compute_effective_worm_sizes_worms[v10][v16++] = do_compute_effective_worm_sizes_worms[v14][v17]; 
do_compute_effective_worm_sizes_worms[v10][v16++] = do_compute_effective_worm_sizes_worms[v14][v17]; 
v18 = do_compute_effective_worm_sizes_worms[v14][v17]; 
if ( do_compute_effective_worm_sizes_worms[v10][0] != v18 ) 
v27 = worm[do_compute_effective_worm_sizes_worms[v21][v26]].effective_size + 1.0; 
v27 = v25 + worm[do_compute_effective_worm_sizes_worms[v21][v26]].effective_size; 
worm[do_compute_effective_worm_sizes_worms[v21][v26]].effective_size = v27; 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
|| ( v6 = byte_9B389F[v3], v6 != 3) && v16[v3 + 19] == 3 
|| ( v7 = byte_9B388C[v3], v7 != 3) && v16[v3] == 3 
*( _OWORD *)&pdfa->max_states = 0LL; 
*( _OWORD *)&pdfa->pre_rotated = 0LL; 
*( _OWORD *)&pdfa->name[64] = 0LL; 
*( _OWORD *)&pdfa->name[48] = 0LL; 
*( _OWORD *)&pdfa->name[32] = 0LL; 
*( _OWORD *)&pdfa->name[16] = 0LL; 
*( _OWORD *)pdfa->name = 0LL; 
|| v17 == ( unsigned __int8)byte_9B389F[v19] 
|| v17 == ( unsigned __int8)byte_9B388C[v19] 
v18 = dragon2[dword_9E8084[v16 / 4]].safety; 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v1]); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[does_attack]); 
v3 = ( &s)[computer_player]; 
if ( byte_9B389F[i] != 3 ) 
v23 = ( unsigned __int8)byte_9B388C[k]; 
|| byte_9B388D[k] != 3 && j == *( ( char *)&v86 + k + 5)) ) 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
if ( !byte_9B389F[v19] && dword_A7D19C[v19] != v9 ) 
if ( !byte_9B389F[v19] && dword_A7D19C[v19] != v9 ) 
dword_A7D19C[v19] = v9; 
if ( !byte_9B388C[v19] && string_number[v19 + 384] != v9 ) 
&& ( ( unsigned __int8)byte_9B389F[v25] != color || string[string[239].neighborlist[v25 + 160]].mark != v8) 
&& ( ( unsigned __int8)byte_9B388C[v25] != color || string[string[239].neighborlist[v25 + 141]].mark != v8) 
|| ( unsigned __int8)byte_9B389F[v27] == color && string[string[239].neighborlist[v27 + 160]].mark == v8 
|| ( unsigned __int8)byte_9B388C[v27] == color && string[string[239].neighborlist[v27 + 141]].mark == v8 
v14 = byte_9B389F[v12]; 
v14 = byte_9B389F[v12]; 
v15 = byte_9B388C[v12]; 
v15 = byte_9B388C[v12]; 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v2]); 
gtp_main_loop( commands_0, gtp_input); 
*( _OWORD *)&v6->child = 0LL; 
*( _OWORD *)&v6->props = 0LL; 
*( _OWORD *)&v6->props = 0LL; 
v19 = ( unsigned __int8)byte_9B389C[i]; 
if ( *( float *)&dword_9B53A8[v1] > 0.0 ) 
gtp_print_vertex( dword_9B53D8[v1] / 20 - 1, dword_9B53D8[v1] + ~( 20 * ( dword_9B53D8[v1] / 20))); 
gtp_print_vertex( dword_9B53D8[v1] / 20 - 1, dword_9B53D8[v1] + ~( 20 * ( dword_9B53D8[v1] / 20))); 
gtp_print_vertex( dword_9B53D8[v1] / 20 - 1, dword_9B53D8[v1] + ~( 20 * ( dword_9B53D8[v1] / 20))); 
gtp_printf( " %.2f ", *( float *)&dword_9B53A8[v1]); 
v23 = *( float *)&dword_496A28[v48]; 
return board[pos + 19] == 3 || byte_9B388D[pos] == 3; 
&& color == ( unsigned __int8)byte_9B389F[v37] 
|| byte_9B389F[v21] == v22 && string[239].neighborlist[v21 + 160] == string_number[v11] 
|| byte_9B388C[v21] == v22 && string[239].neighborlist[v21 + 141] == string_number[v11] 
if ( board[v185] || ( v105 = liberty_mark, dword_A7D19C[( _QWORD)v181] == liberty_mark) ) 
dword_A7D19C[( _QWORD)v181] = v105; 
&& ( byte_9B389E[( _QWORD)v181] != ( _BYTE)v136 || string[239].neighborlist[( _QWORD)v181 + 159] != v20) 
&& ( byte_9B388D[( _QWORD)v181] != ( _BYTE)v136 || string[239].neighborlist[( _QWORD)v181 + 142] != v20) 
&& ( byte_9B388D[( _QWORD)v181] != ( _BYTE)v136 || string[239].neighborlist[( _QWORD)v181 + 142] != v20) ) 
v6 = dword_495EF8[j < 4]; 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
*( _OWORD *)aux_temp.states[v20 + 1].next = 0LL; 
*( _OWORD *)aux_temp.states[v23].next = 0LL; 
if ( play_aftermath_current_color == color ) 
play_aftermath_current_color = color; 
v5 = ( unsigned __int8)byte_9B389F[v4]; 
if ( v5 != 3 && dword_9972BC[v4] != v5 ) 
dword_9972BC[v4] = v5; 
*( _OWORD *)&aftermath.white_prisoners = 0LL; 
return off_4966A0[routine]; 
if ( purge_persistent_owl_cache_last_purge_position_number != position_number ) 
purge_persistent_owl_cache_last_purge_position_number = position_number; 
v4 = ( unsigned __int8)byte_9B389C[i]; 
memcpy( &persistent_owl_cache[v1], &persistent_owl_cache[v0], sizeof( owl_cache)); 
v3 = &sgffile_begindump_local_tree; 
&& v14 != ( unsigned __int8)byte_9B389F[v15] 
&& v14 != ( unsigned __int8)byte_9B388C[v15] 
v44 = ( const char *)&unk_4945F3; 
if ( !byte_9B389F[v73] ) 
if ( !byte_9B388C[v73] ) 
if ( ( unsigned __int8)( *v9 - 1) <= 1u && dword_9E8088[v10 / 4] == origin ) 
v114 = ( eyevalue)-1; 
v117.name = ( const char *)&unk_49B49A; 
for ( i = 22LL; byte_9B389F[i] != ( _BYTE)v103 || v61->goal[i - 1] != 1; i += 2LL ) 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
v4 = dword_9E8088[v2 / 4]; 
show_dragons_snames[dragon[i].crude_status], 
show_dragons_snames[dragon[i].status], 
gprintf( ", owl status %s\n", show_dragons_snames[dragon[i].owl_status]); 
*( _OWORD *)&libs.pos[v204] = *( _OWORD *)&new_kom_pos[v204]; 
*( _OWORD *)&libs.pos[v204] = *( _OWORD *)&new_kom_pos[v204]; 
*( _OWORD *)&libs.score[v204] = 0LL; 
*( _OWORD *)&conn->distances[v6 + 397] = xmmword_49CD40; 
*( _OWORD *)&conn->distances[v6 + 397] = xmmword_49CD40; 
*( _OWORD *)&conn->deltas[v6 + 397] = 0LL; 
*( _OWORD *)&conn->coming_from[v6 + 397] = 0LL; 
*( _OWORD *)&conn->vulnerable1[v6 + 397] = 0LL; 
*( _OWORD *)&conn->vulnerable2[v6 + 397] = 0LL; 
*( _OWORD *)&conn->deltas[v6 + 1] = xmmword_49CD40; 
*( _OWORD *)&conn->deltas[v6 + 1] = xmmword_49CD40; 
*( _OWORD *)&conn->coming_from[v6 + 1] = 0LL; 
*( _OWORD *)&conn->vulnerable1[v6 + 1] = 0LL; 
*( _OWORD *)&conn->vulnerable2[v6 + 1] = 0LL; 
*( _OWORD *)&conn->queue[v6 + 1] = 0LL; 
init_owl( &owl_defend_owl, target, 0, 0, 1); 
v10 = owl_defend_owl; 
current_owl_data = owl_defend_owl; 
if ( !owl_defend_owl->lunches_are_current ) 
owl_find_lunches( owl_defend_owl); 
prepare_goal_list( target, owl_defend_owl, kworm, ( int *)1, v13, v14); 
v20 = do_owl_defend( target, &v21, wormid, owl_defend_owl, 0, 0, 0); 
owl_defend_owl->goal, 
if ( !dragon_escape_mx_initialized ) 
memset( dragon_escape_mx, 0, sizeof( dragon_escape_mx)); 
memset( dragon_escape_mx, 0, sizeof( dragon_escape_mx)); 
dragon_escape_mx_initialized = 1; 
dragon_escape_mx[i] = 1; 
if ( v14 != 3 && !dword_9959D0[( _QWORD)v13] ) 
dword_9959D0[( _QWORD)v13] = 1; 
v16 = ( unsigned __int8)byte_9B389F[( _QWORD)v13]; 
&& ( v28 = ( unsigned __int8)byte_9B389E[( _QWORD)v13], v28 != 3) 
v18 = ( unsigned __int8)byte_9B388C[( _QWORD)v13]; 
&& ( v32 = ( unsigned __int8)byte_9B388D[( _QWORD)v13], v32 != 3) 
if ( v20 != 3 && !dword_995984[( _QWORD)v13] ) 
&& ( v33 = ( unsigned __int8)byte_9B388D[( _QWORD)v13], v33 != 3) 
dword_995984[( _QWORD)v13] = 1; 
if ( !( _BYTE)v14 && !dword_9959D4[( _QWORD)v13] ) 
dword_9959D4[( _QWORD)v13] = 1; 
&& ( v49 = ( unsigned __int8)byte_9B388E[( _QWORD)v13], v49 != 3) 
if ( !dword_9959CC[( _QWORD)v13] ) 
dword_9959CC[( _QWORD)v13] = 1; 
if ( dragon_escape_mx[v51] != 1 ) 
dragon_escape_mx[v51] = 0; 
if ( stones_on_board_stone_count_for_position != position_number ) 
stones_on_board_white_stones = 0; 
stones_on_board_black_stones = 0; 
stones_on_board_black_stones = ++v1; 
stones_on_board_white_stones = ++v2; 
stones_on_board_stone_count_for_position = position_number; 
stones_on_board_black_stones = ++v1; 
stones_on_board_white_stones = ++v2; 
v1 = stones_on_board_black_stones; 
v2 = stones_on_board_white_stones; 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
memcpy( &v5[v9], v8, sizeof( local_owl_data)); 
memcpy( &v5[v12], v11, sizeof( local_owl_data)); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[does_defend]); 
if ( !accumulate_influence_working_area_initialized ) 
memset( accumulate_influence_working, 0, sizeof( accumulate_influence_working)); 
memset( accumulate_influence_working, 0, sizeof( accumulate_influence_working)); 
accumulate_influence_working_area_initialized = 1; 
accumulate_influence_queue[0] = pos; 
accumulate_influence_working[pos] = strength; 
v15 = inv_attenuation * accumulate_influence_working[v8] / 4096; 
v22 = accumulate_influence_working[v19]; 
accumulate_influence_queue[v52++] = v19; 
accumulate_influence_working[v19] = v21 + v22; 
v26 = accumulate_influence_working[v23]; 
accumulate_influence_queue[v52++] = v23; 
accumulate_influence_working[v23] = v25 + v26; 
v30 = accumulate_influence_working[v27]; 
accumulate_influence_queue[v52++] = v27; 
accumulate_influence_working[v27] = v29 + v30; 
v46 = accumulate_influence_working[v31]; 
accumulate_influence_queue[v52++] = v31; 
accumulate_influence_working[v31] = v17 + v46; 
v37 = *( int *)( ( char *)&stones_on_board_stone_count_for_position + v36 * 4); 
v45 = accumulate_influence_working[v38]; 
accumulate_influence_queue[v52++] = v38; 
accumulate_influence_working[v38] = v44 + v45; 
v8 = dword_A3DED4[v12++]; 
v48 = accumulate_influence_queue[i]; 
v49 = accumulate_influence_working[v48]; 
accumulate_influence_working[v48] = 0; 
|| byte_9B389F[v20] == v17 && string[239].neighborlist[v20 + 160] == string_number[v10] 
|| byte_9B388C[v20] == v17 && string[239].neighborlist[v20 + 141] == string_number[v10] 
if ( !( v6 ^ __OFSUB__( v3, 5) | ( v3 == 5)) ) 
if ( 2 * set_depth_values_node_limits[10 - level] > 19 ) 
v17 = 2 * set_depth_values_node_limits[10 - level]; 
if ( byte_9B389F[pos] != v3 || ( result = 1, string[239].neighborlist[pos + 160] != string_number[str]) ) 
if ( byte_9B388C[pos] != v3 || ( result = 1, string[239].neighborlist[pos + 141] != string_number[str]) ) 
v8 = ( unsigned __int8)byte_9B389F[pos]; 
v10 = ( unsigned __int8)byte_9B388C[( _QWORD)v5]; 
v10 = ( unsigned __int8)byte_9B388C[( _QWORD)v5]; 
&& ( ( unsigned __int8)byte_9B389E[( _QWORD)v5] != color || string[239].neighborlist[( _QWORD)v5 + 159] != v7) 
&& ( ( unsigned __int8)byte_9B388D[( _QWORD)v5] != color || string[239].neighborlist[( _QWORD)v5 + 142] != v7) 
&& ( ( unsigned __int8)byte_9B388D[( _QWORD)v5] != color || string[239].neighborlist[( _QWORD)v5 + 142] != v7) ) 
v22 = ( unsigned __int8)byte_9B389E[( _QWORD)v5]; 
v26 = ( unsigned __int8)byte_9B388D[( _QWORD)v5]; 
v30 = ( unsigned __int8)byte_9B388D[( _QWORD)v5]; 
v8 = ( unsigned __int8)byte_9B389F[pos]; 
v10 = ( unsigned __int8)byte_9B388C[( _QWORD)v5]; 
v10 = ( unsigned __int8)byte_9B388C[( _QWORD)v5]; 
&& ( ( unsigned __int8)byte_9B389F[( _QWORD)v35] != color || string[239].neighborlist[( _QWORD)v35 + 160] != v7) 
&& ( ( unsigned __int8)byte_9B388C[( _QWORD)v35] != color || string[239].neighborlist[( _QWORD)v35 + 141] != v7) 
&& ( ( unsigned __int8)byte_9B389F[( _QWORD)v35] != color || string[239].neighborlist[( _QWORD)v35 + 160] != v9) 
&& ( ( unsigned __int8)byte_9B388C[( _QWORD)v35] != color || string[239].neighborlist[( _QWORD)v35 + 141] != v9) 
for ( j = 22LL; ( unsigned __int8)( byte_9B389F[j] - 1) > 1u || v8->goal[j - 1] != 1; j += 2LL ) 
v2 = xmmword_4947B0; 
v3 = xmmword_4947C0; 
v4 = xmmword_4947D0; 
*( _OWORD *)( v5 + 10358800) = v2; 
*( _OWORD *)( v5 + 10358816) = v3; 
*( _OWORD *)( v5 + 10358832) = v4; 
v4 = xmmword_4947D0; 
v3 = xmmword_4947C0; 
v2 = xmmword_4947B0; 
v11 = ( unsigned __int8)byte_9B389F[v3]; 
if ( byte_9B389F[v3] ) 
v12 = ( unsigned __int8)byte_9B388C[v3]; 
if ( byte_9B388C[v3] ) 
v11 = *( _OWORD *)( v2 + 4 * v10 + 10179524); 
*( _OWORD *)&best_moves[v10 + v2 / 4] = *( _OWORD *)( v2 + 4 * v10 + 10179508); 
*( _OWORD *)&best_moves[v10 + v2 / 4] = *( _OWORD *)( v2 + 4 * v10 + 10179508); 
*( _OWORD *)( v2 + 4 * v10 + 10179520) = v11; 
v12 = *( _OWORD *)( v2 + 4 * v10 + 10179476); 
*( _OWORD *)&best_move_values[v10 + v2 / 4] = *( _OWORD *)( v2 + 4 * v10 + 10179460); 
*( _OWORD *)&best_move_values[v10 + v2 / 4] = *( _OWORD *)( v2 + 4 * v10 + 10179460); 
*( _OWORD *)( v2 + 4 * v10 + 10179472) = v12; 
v13 = *( _OWORD *)( v2 + 4 * v10 + 10179556); 
*( _OWORD *)( v2 + 4 * v10 + 10179536) = *( _OWORD *)( v2 + 4 * v10 + 10179540); 
*( _OWORD *)( v2 + 4 * v10 + 10179536) = *( _OWORD *)( v2 + 4 * v10 + 10179540); 
*( _OWORD *)&close_worms[v10 / 4][v2 / 4] = v13; 
v14 = *( _OWORD *)( v2 + 4 * v10 + 10179508); 
*( _OWORD *)( v2 + 4 * v10 + 10179488) = *( _OWORD *)( v2 + 4 * v10 + 10179492); 
*( _OWORD *)( v2 + 4 * v10 + 10179488) = *( _OWORD *)( v2 + 4 * v10 + 10179492); 
*( _OWORD *)&best_moves[v10 + v2 / 4] = v14; 
v17 = *( _OWORD *)&best_moves[v16 + 5]; 
*( _OWORD *)&best_moves[v16] = *( _OWORD *)&best_moves[v16 + 1]; 
*( _OWORD *)&best_moves[v16] = *( _OWORD *)&best_moves[v16 + 1]; 
*( _OWORD *)&best_moves[v16 + 4] = v17; 
v18 = *( _OWORD *)&best_move_values[v16 + 5]; 
*( _OWORD *)&best_move_values[v16] = *( _OWORD *)&best_move_values[v16 + 1]; 
*( _OWORD *)&best_move_values[v16] = *( _OWORD *)&best_move_values[v16 + 1]; 
*( _OWORD *)&best_move_values[v16 + 4] = v18; 
if ( !location_to_string_init ) 
strcpy( location_to_string_buf[0], "Pass"); 
v3 = byte_A3EB76; 
byte_A3EB75[5 * i] = v5; 
byte_A3EB76[5 * i] = v6 / 0xAu + 48; 
location_to_string_init = 1; 
*value = ( eyevalue)16843009; 
gg_snprintf( eyevalue_to_string_result, 0x1DuLL, v41, v27, ( unsigned int)v27); 
*value = ( eyevalue)33686018; 
*value = ( eyevalue)( 16843009 * ( unsigned __int8)v40); 
gg_snprintf( eyevalue_to_string_result, 0x1DuLL, v37, a, v34, v35, add_moves); 
v25 = ( int *)eyevalue_to_string_result; 
gprintf( v39, eyevalue_to_string_result, v38); 
*( _OWORD *)&stats.nodes = 0LL; 
if ( v47 > *( float *)&dword_9B4D6C[19 * ( *move / 20) - 19 + v38] ) 
*( float *)&dword_9B4D6C[19 * ( *move / 20) - 19 + v38] = v47; 
if ( v47 > *( float *)&dword_9B4D6C[19 * ( *move / 20) - 19 + v41] ) 
*( float *)&dword_9B4D6C[19 * ( *move / 20) - 19 + v41] = v47; 
if ( v43 > *( float *)&dword_9B4D6C[19 * ( *move / 20) - 19 + v44] ) 
*( float *)&dword_9B4D6C[19 * ( *move / 20) - 19 + v44] = v43; 
return !( ( v5 + v6 < 0) ^ __OFADD__( v5, v6) | ( v5 + v6 == 0)); 
&& ( unsigned __int8)byte_9B389F[pos] != color 
&& ( unsigned __int8)byte_9B388C[pos] != color ) 
v14 = ( unsigned __int8)byte_9B389C[i]; 
v9 = dword_495EB8[escape_influence.is_territorial_influence == 0]; 
v9 = dword_495EB0[q->is_territorial_influence == 0]; 
v18 = _mm_cvttps_epi32( _mm_mul_ps( *( __m128 *)&q->safe[4 * i - 1600], ( __m128)xmmword_495F30)); 
( __m128d)xmmword_495F40)), 
( __m128d)xmmword_495F40))); 
v19 = _mm_cvttps_epi32( _mm_mul_ps( *( __m128 *)&q->safe[4 * i], ( __m128)xmmword_495F30)); 
( __m128d)xmmword_495F40)), 
( __m128d)xmmword_495F40))); 
( __m128)xmmword_495F50); 
( __m128)xmmword_495F50); 
( __m128)xmmword_495F50); 
( __m128)xmmword_495F50); 
segment_region( q, whose_moyo_restricted, 4, q->moyo_segmentation); 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v1]); 
v14 = *( _OWORD *)&v12->pos; 
*( _OWORD *)&moves[v13].same_dragon = *( _OWORD *)&v12->same_dragon; 
*( _OWORD *)&moves[v13].same_dragon = *( _OWORD *)&v12->same_dragon; 
*( _OWORD *)&moves[v13].pos = v14; 
v19 = *( _OWORD *)&v17->pos; 
*( _OWORD *)&moves[v18].same_dragon = *( _OWORD *)&v17->same_dragon; 
*( _OWORD *)&moves[v18].same_dragon = *( _OWORD *)&v17->same_dragon; 
*( _OWORD *)&moves[v18].pos = v19; 
v23 = *( _OWORD *)&v21->pos; 
*( _OWORD *)&moves[v22].same_dragon = *( _OWORD *)&v21->same_dragon; 
*( _OWORD *)&moves[v22].same_dragon = *( _OWORD *)&v21->same_dragon; 
*( _OWORD *)&moves[v22].pos = v23; 
v8 = ( unsigned __int8)byte_9B389F[v6]; 
if ( dword_A19DEC[v6] != v8 ) 
dword_A19DEC[v6] = v8; 
*( _QWORD *)compute_escape_influence_active_caches = 0LL; 
if ( compute_escape_influence_active_caches[v9] ) 
if ( byte_9B389F[i * 2] != 3 ) 
escape_value[i * 2 - 1] = *( ( _BYTE *)&compute_escape_influence_cached_board[i + 399] + v9 + 2); 
escape_value[i * 2] = compute_escape_influence_escape_values[1 * i + v9]; 
if ( byte_9B389F[j] != 3 ) 
compute_escape_influence_escape_values[2 * j + v10] = escape_value[j]; 
compute_escape_influence_active_caches[v10] = 1; 
name = commands_0[0].name; 
if ( commands_0[0].name ) 
v3 = ( const char **)( commands_0 + 16); 
if ( dword_9B3C1C[v2] == 3 - color ) 
if ( byte_9B389F[v8] || dword_A7D19C[v8] == v9 ) 
if ( byte_9B389F[v8] || dword_A7D19C[v8] == v9 ) 
if ( ( unsigned __int8)byte_9B389F[v8] == color ) 
dword_A7D19C[v8] = v9; 
if ( byte_9B388C[v8] || string_number[v8 + 384] == v9 ) 
if ( ( unsigned __int8)byte_9B388C[v8] == color ) 
return off_4965A0[color]; 
*( _OWORD *)&result->child = 0LL; 
*( _OWORD *)&result->props = 0LL; 
*( ( _OWORD *)v1 - 33) = 0LL; 
*( ( _OWORD *)v1 - 34) = 0LL; 
*( ( _OWORD *)v1 - 35) = 0LL; 
if ( !( ( v9 + v10 < 0) ^ __OFADD__( v9, v10) | ( v9 + v10 == 0)) ) 
gtp_printf( "%d", ( unsigned int)gtp_print_code_conversion[v1]); 
$58E8A322B99FFF983766F42E1DE15117 v28; // esi 
$58E8A322B99FFF983766F42E1DE15117 v202; // [rsp+58h] [rbp-40h] 
if ( !gg_optind || !_getopt_initialized ) 
_getopt_initialized = 1; 
v28 = ordering; 
v202 = ordering; 
v53 = *( _OWORD *)&v49[v52 - 6]; 
v54 = *( _OWORD *)&v49[v52 - 4]; 
v55 = *( _OWORD *)&v50[v52 - 4]; 
*( _OWORD *)&v49[v52 - 6] = *( _OWORD *)&v50[v52 - 6]; 
*( _OWORD *)&v49[v52 - 6] = *( _OWORD *)&v50[v52 - 6]; 
*( _OWORD *)&v49[v52 - 4] = v55; 
*( _OWORD *)&v50[v52 - 6] = v53; 
*( _OWORD *)&v50[v52 - 4] = v54; 
v56 = *( _OWORD *)&v49[v52 - 2]; 
v57 = *( _OWORD *)&v49[v52]; 
v58 = *( _OWORD *)&v50[v52]; 
*( _OWORD *)&v49[v52 - 2] = *( _OWORD *)&v50[v52 - 2]; 
*( _OWORD *)&v49[v52 - 2] = *( _OWORD *)&v50[v52 - 2]; 
*( _OWORD *)&v49[v52] = v58; 
*( _OWORD *)&v50[v52 - 2] = v56; 
*( _OWORD *)&v50[v52] = v57; 
v60 = *( _OWORD *)&argv[v59]; 
v61 = *( _OWORD *)&argv[v59 + 2]; 
v63 = *( _OWORD *)&argv[v62 + 2]; 
*( _OWORD *)&argv[v59] = *( _OWORD *)&argv[v62]; 
*( _OWORD *)&argv[v59] = *( _OWORD *)&argv[v62]; 
*( _OWORD *)&argv[v59 + 2] = v63; 
*( _OWORD *)&argv[v62] = v60; 
*( _OWORD *)&argv[v62 + 2] = v61; 
v68 = *( _OWORD *)&v65[v67 - 6]; 
v69 = *( _OWORD *)&v65[v67 - 4]; 
v70 = *( _OWORD *)&v29[v67 + 2]; 
*( _OWORD *)&v65[v67 - 6] = *( _OWORD *)&v29[v67]; 
*( _OWORD *)&v65[v67 - 6] = *( _OWORD *)&v29[v67]; 
*( _OWORD *)&v65[v67 - 4] = v70; 
*( _OWORD *)&v29[v67] = v68; 
*( _OWORD *)&v29[v67 + 2] = v69; 
v71 = *( _OWORD *)&v65[v67 - 2]; 
v72 = *( _OWORD *)&v65[v67]; 
v73 = *( _OWORD *)&v29[v67 + 6]; 
*( _OWORD *)&v65[v67 - 2] = *( _OWORD *)&v29[v67 + 4]; 
*( _OWORD *)&v65[v67 - 2] = *( _OWORD *)&v29[v67 + 4]; 
*( _OWORD *)&v65[v67] = v73; 
*( _OWORD *)&v29[v67 + 4] = v71; 
*( _OWORD *)&v29[v67 + 6] = v72; 
v75 = *( _OWORD *)&argv[v74]; 
v76 = *( _OWORD *)&argv[v74 + 2]; 
v78 = *( _OWORD *)&argv[v77 + 2]; 
*( _OWORD *)&argv[v74] = *( _OWORD *)&argv[v77]; 
*( _OWORD *)&argv[v74] = *( _OWORD *)&argv[v77]; 
*( _OWORD *)&argv[v74 + 2] = v78; 
*( _OWORD *)&argv[v77] = v75; 
*( _OWORD *)&argv[v77 + 2] = v76; 
v28 = v202; 
v28 = v202; 
v124 = *( _OWORD *)&v121[v123 - 6]; 
v125 = *( _OWORD *)&v121[v123 - 4]; 
v126 = *( _OWORD *)&v85[v123 + 2]; 
*( _OWORD *)&v121[v123 - 6] = *( _OWORD *)&v85[v123]; 
*( _OWORD *)&v121[v123 - 6] = *( _OWORD *)&v85[v123]; 
*( _OWORD *)&v121[v123 - 4] = v126; 
*( _OWORD *)&v85[v123] = v124; 
*( _OWORD *)&v85[v123 + 2] = v125; 
v127 = *( _OWORD *)&v121[v123 - 2]; 
v128 = *( _OWORD *)&v121[v123]; 
v129 = *( _OWORD *)&v85[v123 + 6]; 
*( _OWORD *)&v121[v123 - 2] = *( _OWORD *)&v85[v123 + 4]; 
*( _OWORD *)&v121[v123 - 2] = *( _OWORD *)&v85[v123 + 4]; 
*( _OWORD *)&v121[v123] = v129; 
*( _OWORD *)&v85[v123 + 4] = v127; 
*( _OWORD *)&v85[v123 + 6] = v128; 
v131 = *( _OWORD *)&argv[v130]; 
v132 = *( _OWORD *)&argv[v130 + 2]; 
v134 = *( _OWORD *)&argv[v133 + 2]; 
*( _OWORD *)&argv[v130] = *( _OWORD *)&argv[v133]; 
*( _OWORD *)&argv[v130] = *( _OWORD *)&argv[v133]; 
*( _OWORD *)&argv[v130 + 2] = v134; 
*( _OWORD *)&argv[v133] = v131; 
*( _OWORD *)&argv[v133 + 2] = v132; 
v109 = *( _OWORD *)&v105[v108 - 6]; 
v110 = *( _OWORD *)&v105[v108 - 4]; 
v111 = *( _OWORD *)&v106[v108 - 4]; 
*( _OWORD *)&v105[v108 - 6] = *( _OWORD *)&v106[v108 - 6]; 
*( _OWORD *)&v105[v108 - 6] = *( _OWORD *)&v106[v108 - 6]; 
*( _OWORD *)&v105[v108 - 4] = v111; 
*( _OWORD *)&v106[v108 - 6] = v109; 
*( _OWORD *)&v106[v108 - 4] = v110; 
v112 = *( _OWORD *)&v105[v108 - 2]; 
v113 = *( _OWORD *)&v105[v108]; 
v114 = *( _OWORD *)&v106[v108]; 
*( _OWORD *)&v105[v108 - 2] = *( _OWORD *)&v106[v108 - 2]; 
*( _OWORD *)&v105[v108 - 2] = *( _OWORD *)&v106[v108 - 2]; 
*( _OWORD *)&v105[v108] = v114; 
*( _OWORD *)&v106[v108 - 2] = v112; 
*( _OWORD *)&v106[v108] = v113; 
v116 = *( _OWORD *)&argv[v115]; 
v117 = *( _OWORD *)&argv[v115 + 2]; 
v119 = *( _OWORD *)&argv[v118 + 2]; 
*( _OWORD *)&argv[v115] = *( _OWORD *)&argv[v118]; 
*( _OWORD *)&argv[v115] = *( _OWORD *)&argv[v118]; 
*( _OWORD *)&argv[v115 + 2] = v119; 
*( _OWORD *)&argv[v118] = v116; 
*( _OWORD *)&argv[v118 + 2] = v117; 
if ( v28 == REQUIRE_ORDER ) 
&& ( board_ko_pos != pos || 3 - color != ( unsigned __int8)byte_9B389F[pos] && 3 - color != board[pos + 1]) ) 
return !( ( v10 + v11 < 0) ^ __OFADD__( v10, v11) | ( v10 + v11 == 0)); 
*( _OWORD *)&b_eye[v7].value.a = v9; 
*( _OWORD *)&b_eye[v7].color = v9; 
*( _OWORD *)&w_eye[v7].value.a = v9; 
*( _OWORD *)&w_eye[v7].color = v9; 
if ( 3 - color != ( unsigned __int8)byte_9B389F[pos] ) 
if ( finish_and_score_game_current_seed != seed ) 
finish_and_score_game_current_seed = seed; 
if ( finish_and_score_game_current_board[v6][v7] != v8 ) 
finish_and_score_game_current_board[v6][v7] = v8; 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
v2 = _mm_load_si128( ( const __m128i *)&xmmword_545000); 
*( _OWORD *)defend_lib_score = *( _OWORD *)params; 
*( _OWORD *)defend_capture_score = *( _OWORD *)( params + 11); 
*( _OWORD *)defend_atari_score = *( _OWORD *)( params + 17); 
*( _OWORD *)defend_save_score = *( _OWORD *)( params + 23); 
*( _OWORD *)attack_string_lib_score = *( _OWORD *)( params + 39); 
*( _OWORD *)attack_capture_score = *( _OWORD *)( params + 45); 
*( _OWORD *)attack_save_score = *( _OWORD *)( params + 51); 
*( _OWORD *)defend_not_adjacent_lib_score = *( _OWORD *)( params + 6); 
*( _OWORD *)defend_open_score = *( _OWORD *)( params + 29); 
*( _OWORD *)attack_own_lib_score = *( _OWORD *)( params + 34); 
*( _OWORD *)attack_open_score = *( _OWORD *)( params + 57); 
return !( ( v7 + v8 < 0) ^ __OFADD__( v7, v8) | ( v7 + v8 == 0)); 
v16 = *( _OWORD *)&v7[v15]; 
v17 = *( _OWORD *)&v7[v15 + 16]; 
v18 = *( _OWORD *)&v8[v15 + 16]; 
*( _OWORD *)&v7[v15] = *( _OWORD *)&v8[v15]; 
*( _OWORD *)&v7[v15] = *( _OWORD *)&v8[v15]; 
*( _OWORD *)&v7[v15 + 16] = v18; 
*( _OWORD *)&v8[v15] = v16; 
*( _OWORD *)&v8[v15 + 16] = v17; 
v19 = *( _OWORD *)&v7[v15 + 32]; 
v20 = *( _OWORD *)&v7[v15 + 48]; 
v21 = *( _OWORD *)&v8[v15 + 48]; 
*( _OWORD *)&v7[v15 + 32] = *( _OWORD *)&v8[v15 + 32]; 
*( _OWORD *)&v7[v15 + 32] = *( _OWORD *)&v8[v15 + 32]; 
*( _OWORD *)&v7[v15 + 48] = v21; 
*( _OWORD *)&v8[v15 + 32] = v19; 
*( _OWORD *)&v8[v15 + 48] = v20; 
v22 = *( _OWORD *)&v7[v15]; 
v23 = *( _OWORD *)&v7[v15 + 16]; 
v24 = *( _OWORD *)&v8[v15 + 16]; 
*( _OWORD *)&v7[v15] = *( _OWORD *)&v8[v15]; 
*( _OWORD *)&v7[v15] = *( _OWORD *)&v8[v15]; 
*( _OWORD *)&v7[v15 + 16] = v24; 
*( _OWORD *)&v8[v15] = v22; 
*( _OWORD *)&v8[v15 + 16] = v23; 
*( _OWORD *)( i + 10642852) = xmmword_495F80; 
*( _OWORD *)( i + 10642852) = xmmword_495F80; 
*( _OWORD *)( i + 10642868) = xmmword_495F80; 
*( _OWORD *)( i + 10642868) = xmmword_495F80; 
*( _OWORD *)( i + 10642884) = xmmword_495F80; 
*( _OWORD *)( i + 10642884) = xmmword_495F80; 
*( _OWORD *)( i + 10642900) = xmmword_495F80; 
*( _OWORD *)( i + 10642900) = xmmword_495F80; 
*( _OWORD *)( i + 10642916) = xmmword_495F80; 
*( _OWORD *)( i + 10642916) = xmmword_495F80; 
*( _OWORD *)( i + 10642932) = xmmword_495F80; 
*( _OWORD *)( i + 10642932) = xmmword_495F80; 
*( _OWORD *)( i + 10642948) = xmmword_495F80; 
*( _OWORD *)( i + 10642948) = xmmword_495F80; 
*( _OWORD *)( i + 10642964) = xmmword_495F80; 
*( _OWORD *)( i + 10642964) = xmmword_495F80; 
v31 = byte_9B388D[v28]; 
memcpy( v9, v7, sizeof( worm_data)); 
*( _OWORD *)&state->x[20] = *( _OWORD *)&x[20]; 
*( _OWORD *)&state->x[20] = *( _OWORD *)&x[20]; 
*( _OWORD *)&state->x[16] = *( _OWORD *)&x[16]; 
*( _OWORD *)&state->x[16] = *( _OWORD *)&x[16]; 
*( _OWORD *)&state->x[12] = *( _OWORD *)&x[12]; 
*( _OWORD *)&state->x[12] = *( _OWORD *)&x[12]; 
*( _OWORD *)&state->x[8] = *( _OWORD *)&x[8]; 
*( _OWORD *)&state->x[8] = *( _OWORD *)&x[8]; 
*( _OWORD *)&state->x[4] = *( _OWORD *)&x[4]; 
*( _OWORD *)&state->x[4] = *( _OWORD *)&x[4]; 
*( _OWORD *)state->x = *( _OWORD *)x; 
if ( !byte_9B389F[v15] && dword_A7D19C[v15] != v14 ) 
if ( !byte_9B389F[v15] && dword_A7D19C[v15] != v14 ) 
dword_A7D19C[v15] = v14; 
if ( !byte_9B388C[v15] && string_number[v15 + 384] != v14 ) 
*( _OWORD *)( v16 + 11926156) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v16 + 11926156) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v16 + 11926144) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v16 + 11926144) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v16 + 11926128) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)( v16 + 11926128) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)&dragon_goal_worms[v16 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
*( _OWORD *)&dragon_goal_worms[v16 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
*( _OWORD *)&v13[i + 32] = xmmword_495F60; 
*( _OWORD *)&v13[i + 32] = xmmword_495F60; 
*( _OWORD *)&v13[i + 36] = xmmword_495F60; 
*( _OWORD *)&v13[i + 36] = xmmword_495F60; 
*( _OWORD *)&v13[i + 40] = xmmword_495F60; 
*( _OWORD *)&v13[i + 40] = xmmword_495F60; 
*( _OWORD *)&v13[i + 44] = xmmword_495F60; 
*( _OWORD *)&v13[i + 44] = xmmword_495F60; 
*( _OWORD *)&v13[i + 48] = xmmword_495F60; 
*( _OWORD *)&v13[i + 48] = xmmword_495F60; 
*( _OWORD *)&v13[i + 52] = xmmword_495F60; 
*( _OWORD *)&v13[i + 52] = xmmword_495F60; 
*( _OWORD *)&v13[i + 56] = xmmword_495F60; 
*( _OWORD *)&v13[i + 56] = xmmword_495F60; 
*( _OWORD *)&v13[i + 60] = xmmword_495F60; 
*( _OWORD *)&v13[i + 60] = xmmword_495F60; 
*( _OWORD *)&v13[i + 64] = xmmword_495F60; 
*( _OWORD *)&v13[i + 64] = xmmword_495F60; 
*( _OWORD *)&v13[i + 68] = xmmword_495F60; 
*( _OWORD *)&v13[i + 68] = xmmword_495F60; 
*( _OWORD *)&v13[i + 72] = xmmword_495F60; 
*( _OWORD *)&v13[i + 72] = xmmword_495F60; 
*( _OWORD *)&v13[i + 76] = xmmword_495F60; 
*( _OWORD *)&v13[i + 76] = xmmword_495F60; 
*( _OWORD *)&v13[i + 80] = xmmword_495F60; 
*( _OWORD *)&v13[i + 80] = xmmword_495F60; 
*( _OWORD *)&v13[i + 84] = xmmword_495F60; 
*( _OWORD *)&v13[i + 84] = xmmword_495F60; 
*( _OWORD *)&v13[j + 1905] = 0LL; 
*( _OWORD *)&v13[j + 1901] = 0LL; 
*( _OWORD *)&v13[j + 1897] = 0LL; 
*( _OWORD *)&v13[j + 1893] = 0LL; 
*( _OWORD *)&v13[j + 1889] = 0LL; 
*( _OWORD *)&v13[j + 1885] = 0LL; 
*( _OWORD *)&v13[j + 1881] = 0LL; 
*( _OWORD *)&v13[j + 1877] = 0LL; 
*( _OWORD *)&v13[j + 1873] = 0LL; 
*( _OWORD *)&v13[j + 1869] = 0LL; 
*( _OWORD *)&v13[j + 1953] = 0LL; 
*( _OWORD *)&v13[j + 1957] = 0LL; 
*( _OWORD *)&v13[j + 1961] = 0LL; 
*( _OWORD *)&v13[j + 1965] = 0LL; 
*( _OWORD *)&v13[j + 1969] = 0LL; 
*( _OWORD *)&v13[j + 1973] = 0LL; 
*( _OWORD *)&v13[j + 1977] = 0LL; 
*( _OWORD *)&v13[j + 1981] = 0LL; 
*( _OWORD *)&v13[j + 1985] = 0LL; 
*( _OWORD *)&v13[j + 1989] = 0LL; 
*( _OWORD *)&v13[j + 2073] = 0LL; 
*( _OWORD *)&v13[j + 2069] = 0LL; 
*( _OWORD *)&v13[j + 2065] = 0LL; 
*( _OWORD *)&v13[j + 2061] = 0LL; 
*( _OWORD *)&v13[j + 2057] = 0LL; 
*( _OWORD *)&v13[j + 2053] = 0LL; 
*( _OWORD *)&v13[j + 2049] = 0LL; 
*( _OWORD *)&v13[j + 2045] = 0LL; 
*( _OWORD *)&v13[j + 2041] = 0LL; 
*( _OWORD *)&v13[j + 2037] = 0LL; 
*( _OWORD *)&v13[j + 2121] = 0LL; 
*( _OWORD *)&v13[j + 2125] = 0LL; 
*( _OWORD *)&v13[j + 2129] = 0LL; 
*( _OWORD *)&v13[j + 2133] = 0LL; 
*( _OWORD *)&v13[j + 2137] = 0LL; 
*( _OWORD *)&v13[j + 2141] = 0LL; 
*( _OWORD *)&v13[j + 2145] = 0LL; 
*( _OWORD *)&v13[j + 2149] = 0LL; 
*( _OWORD *)&v13[j + 2153] = 0LL; 
*( _OWORD *)&v13[j + 2157] = 0LL; 
*( _OWORD *)&v13[j + 2241] = 0LL; 
*( _OWORD *)&v13[j + 2237] = 0LL; 
*( _OWORD *)&v13[j + 2233] = 0LL; 
*( _OWORD *)&v13[j + 2229] = 0LL; 
*( _OWORD *)&v13[j + 2225] = 0LL; 
*( _OWORD *)&v13[j + 2221] = 0LL; 
*( _OWORD *)&v13[j + 2217] = 0LL; 
*( _OWORD *)&v13[j + 2213] = 0LL; 
*( _OWORD *)&v13[j + 2209] = 0LL; 
*( _OWORD *)&v13[j + 2205] = 0LL; 
*( _OWORD *)&v13[j + 2325] = 0LL; 
*( _OWORD *)&v13[j + 2321] = 0LL; 
*( _OWORD *)&v13[j + 2317] = 0LL; 
*( _OWORD *)&v13[j + 2313] = 0LL; 
*( _OWORD *)&v13[j + 2309] = 0LL; 
*( _OWORD *)&v13[j + 2305] = 0LL; 
*( _OWORD *)&v13[j + 2301] = 0LL; 
*( _OWORD *)&v13[j + 2297] = 0LL; 
*( _OWORD *)&v13[j + 2293] = 0LL; 
*( _OWORD *)&v13[j + 2289] = 0LL; 
byte_B6402F[2 * v23 + v0] = 43; 
byte_B6402C[v0 + v24] = 43; 
byte_B6402C[v0 + v26] = 43; 
byte_B6402F[2 * v22 + v0] = 43; 
byte_B6402C[2 * v22 - 4 + v0 + v0] = 43; 
if ( byte_9B389F[v15] == v13 && string[239].neighborlist[v15 + 160] == string_number[v10] 
|| byte_9B388C[v15] == v13 && string[239].neighborlist[v15 + 141] == string_number[v10] 
_OWORD s[4]; // [rsp+70h] [rbp-268h] BYREF 
_OWORD s[4]; // [rsp+70h] [rbp-268h] BYREF 
memset( s, 0, 0x230uLL); 
++*( ( _DWORD *)&s[5 * v11] + ( unsigned int)v10); 
fprintf( stderr, "%-14s%6d", ( const char *)qword_4972F8[v17], v21); 
v79 = ( eyevalue)-1; 
if ( byte_9B389F[i] != 3 ) 
|| v16 == ( unsigned __int8)byte_9B389F[v18] 
|| v16 == ( unsigned __int8)byte_9B388C[v18] 
if ( _mm_movemask_epi8( _mm_cmpeq_epi8( _mm_load_si128( ( const __m128i *)&xmmword_4A1080), v5)) != 0xFFFF ) 
v7 = ( unsigned int)_mm_movemask_epi8( _mm_cmpeq_epi8( v5, ( __m128i)xmmword_4A1090)); 
*( _OWORD *)&owl_goal_worm[11] = 0LL; 
*( _OWORD *)&owl_goal_worm[8] = 0LL; 
*( _OWORD *)&owl_goal_worm[4] = 0LL; 
*( _OWORD *)owl_goal_worm = 0LL; 
*( _OWORD *)( v25 + 11926156) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v25 + 11926156) = *( _OWORD *)&owl_goal_worm[11]; 
*( _OWORD *)( v25 + 11926144) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v25 + 11926144) = *( _OWORD *)&owl_goal_worm[8]; 
*( _OWORD *)( v25 + 11926128) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)( v25 + 11926128) = *( _OWORD *)&owl_goal_worm[4]; 
*( _OWORD *)&dragon_goal_worms[v25 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
*( _OWORD *)&dragon_goal_worms[v25 / 0x3C][0] = *( _OWORD *)owl_goal_worm; 
