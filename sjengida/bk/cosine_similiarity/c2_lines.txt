v4 = qword_41A1B0[v6]; 
v3 = bishop_mobility_dir[v1]; 
v8 = setup_attackers_rook_o[v2]; 
v20 = setup_attackers_bishop_o[v19]; 
result += board[square + ( __int64)*( int *)( ( char *)jpt_401814 + v25)] == 3; 
v4 = setup_attackers_rook_o[v2]; 
v13 = setup_attackers_bishop_o[v12]; 
result += board[square + ( __int64)*( int *)( ( char *)jpt_401814 + v18)] == 4; 
v43 = &dword_66359C[bking_loc]; 
v34 = &dword_66359C[wking_loc]; 
CheckBadFlow_pawnmated = 0; 
CheckBadFlow_knightmated = 0; 
CheckBadFlow_bishopmated = 0; 
CheckBadFlow_rookmated = 0; 
CheckBadFlow_queenmated = 0; 
if ( v3 != CheckBadFlow_pawnmated ) 
if ( !( v3 | CheckBadFlow_pawnmated) ) 
if ( v2 == CheckBadFlow_knightmated ) 
if ( !( v2 | CheckBadFlow_knightmated) ) 
if ( v15 == CheckBadFlow_bishopmated ) 
if ( !( v15 | CheckBadFlow_bishopmated) ) 
if ( v36 != CheckBadFlow_rookmated ) 
else if ( !( v36 | CheckBadFlow_rookmated) ) 
if ( v29 != CheckBadFlow_queenmated ) 
else if ( !( v29 | CheckBadFlow_queenmated) ) 
v40 = CheckBadFlow_pawnmated - 1; 
v41 = CheckBadFlow_bishopmated - 1; 
CheckBadFlow_pawnmated = v40; 
CheckBadFlow_bishopmated = v41; 
v42 = CheckBadFlow_rookmated - 1; 
v43 = CheckBadFlow_queenmated - 1; 
CheckBadFlow_rookmated = v42; 
CheckBadFlow_queenmated = v43; 
v44 = CheckBadFlow_knightmated - 1; 
CheckBadFlow_knightmated = v44; 
sprintf( str, "%c@%c%d", ( unsigned int)dword_41A370[move.promoted], ( unsigned int)v2, ( unsigned int)v3); 
v7 = ( unsigned int)dword_41A330[move.promoted]; 
v24 = ( const char *)&unk_41A8B9; 
sprintf( v2, v24, ( unsigned int)dword_41A330[board[move.from]], v20, v23, v5); 
v7 = ( unsigned int)dword_41A330[board[move.from]]; 
sprintf( str, "%cx%c%d=%c", v7, v8, v5, ( unsigned int)dword_41A330[move.promoted]); 
sprintf( str, "%c%d=%c", v17, v5, ( unsigned int)dword_41A330[move.promoted]); 
*( ( _OWORD *)v7 + 2) = *( _OWORD *)&v5->from; 
*( ( _OWORD *)v7 + 2) = *( _OWORD *)&v5->from; 
fprintf( stream, " %s |", ( const char *)*( &off_41A3B0 + *( int *)( v6 + 4 * i))); 
fprintf( stream, " %s |", ( const char *)*( &off_41A3B0 + *( int *)( v4 + 4 * j))); 
if ( dword_66359C[wking_loc] ) 
if ( dword_66359C[bking_loc] ) 
&& ( dword_66359C[wking_loc] & 0xFFFFFFFD) != 8 
while ( board[wking_loc + ( __int64)*( int *)( ( char *)jpt_401814 + v8)] != 4 ) 
v11 = dword_66359C[bking_loc]; 
while ( board[bking_loc + ( __int64)*( int *)( ( char *)jpt_401814 + v19)] != 3 ) 
if ( wking_loc + *( _DWORD *)( ( char *)jpt_401814 + v8) == ( _DWORD)target ) 
v13 = dword_66359C[wking_loc + v12--] == 13; 
v13 = dword_66359C[wking_loc + v12--] == 13; 
v18 = &dword_66359C[wking_loc]; 
if ( bking_loc + *( _DWORD *)( ( char *)jpt_401814 + v14) == ( _DWORD)target ) 
v13 = dword_66359C[bking_loc + v16--] == 13; 
v13 = dword_66359C[bking_loc + v16--] == 13; 
v29 = &dword_66359C[bking_loc]; 
if ( dword_66359C[v5] ) 
if ( dword_66359C[v5] ) 
if ( dword_66359C[v17] ) 
if ( dword_66359C[v17] ) 
*( _OWORD *)&my_partner[240] = 0LL; 
*( _OWORD *)&my_partner[224] = 0LL; 
*( _OWORD *)&my_partner[208] = 0LL; 
*( _OWORD *)&my_partner[192] = 0LL; 
*( _OWORD *)&my_partner[176] = 0LL; 
*( _OWORD *)&my_partner[160] = 0LL; 
*( _OWORD *)&my_partner[144] = 0LL; 
*( _OWORD *)&my_partner[128] = 0LL; 
*( _OWORD *)&my_partner[112] = 0LL; 
*( _OWORD *)&my_partner[96] = 0LL; 
*( _OWORD *)&my_partner[80] = 0LL; 
*( _OWORD *)&my_partner[64] = 0LL; 
*( _OWORD *)&my_partner[48] = 0LL; 
*( _OWORD *)&my_partner[32] = 0LL; 
*( _OWORD *)&my_partner[16] = 0LL; 
*( _OWORD *)my_partner = 0LL; 
if ( !strncmp( v1, off_41899E, 3uLL) ) 
v2 = ( const char *)&unk_418DF5; 
v2 = ( const char *)&unk_418E1D; 
*( _OWORD *)&move.from = *( _OWORD *)&v6[best].from; 
*( _OWORD *)&move.from = *( _OWORD *)&v6[best].from; 
memcpy( board, &unk_41A420, sizeof( board)); 
*( _OWORD *)is_promoted = 0LL; 
*( _OWORD *)&is_promoted[4] = 0LL; 
*( _OWORD *)&is_promoted[8] = 0LL; 
*( _OWORD *)&is_promoted[12] = 0LL; 
*( _OWORD *)&is_promoted[16] = 0LL; 
*( _OWORD *)&is_promoted[20] = 0LL; 
*( _OWORD *)&is_promoted[24] = 0LL; 
*( _OWORD *)&is_promoted[28] = 0LL; 
*( _OWORD *)&is_promoted[32] = 0LL; 
*( _OWORD *)&is_promoted[36] = 0LL; 
*( _OWORD *)&is_promoted[40] = 0LL; 
*( _OWORD *)&is_promoted[44] = 0LL; 
*( _OWORD *)&is_promoted[48] = 0LL; 
*( _OWORD *)&is_promoted[52] = 0LL; 
*( _OWORD *)&is_promoted[56] = 0LL; 
*( _OWORD *)&holding[1][12] = 0LL; 
*( _OWORD *)&holding[1][8] = 0LL; 
*( _OWORD *)&holding[1][4] = 0LL; 
*( _OWORD *)&holding[1][0] = 0LL; 
*( _OWORD *)&holding[0][12] = 0LL; 
*( _OWORD *)&holding[0][8] = 0LL; 
*( _OWORD *)&holding[0][4] = 0LL; 
*( _OWORD *)&holding[0][0] = 0LL; 
v10 = setup_attackers_bishop_o[v9]; 
while ( board[square + ( __int64)*( int *)( ( char *)jpt_401814 + v14)] != 3 ) 
v16 = setup_attackers_rook_o[v15]; 
v3 = setup_attackers_bishop_o[v2]; 
while ( board[square + ( __int64)*( int *)( ( char *)jpt_401814 + v7)] != 4 ) 
v21 = setup_attackers_rook_o[v8]; 
v3 = 2 * ( ( ( dword_66359C[sq] + 1) & 0xFFFFFFFE ^ 8 | c ^ ( dword_66359C[sq] + 1) & 1) == 0); 
v3 = 2 * ( ( ( dword_66359C[sq] + 1) & 0xFFFFFFFE ^ 8 | c ^ ( dword_66359C[sq] + 1) & 1) == 0); 
result += board[square + ( __int64)*( int *)( ( char *)jpt_404015 + v2)] == 13; 
result += board[square + ( __int64)*( int *)( ( char *)jpt_401814 + v2)] == 13; 
v4 = &dword_66359C[square]; 
*( _OWORD *)material = *( _OWORD *)std_material; 
*( _OWORD *)&material[4] = *( _OWORD *)&std_material[4]; 
*( _OWORD *)&material[4] = *( _OWORD *)&std_material[4]; 
*( _OWORD *)&material[8] = *( _OWORD *)&std_material[8]; 
*( _OWORD *)&material[8] = *( _OWORD *)&std_material[8]; 
*( __int128 *)( ( char *)s + 8 * v15) = *( _OWORD *)&moves.from; 
*( __int128 *)( ( char *)s + 8 * v20) = *( _OWORD *)&v69.from; 
*( _OWORD *)&material[8] = *( _OWORD *)&std_material[8]; 
*( _OWORD *)&material[8] = *( _OWORD *)&std_material[8]; 
*( _OWORD *)&material[4] = *( _OWORD *)&std_material[4]; 
*( _OWORD *)&material[4] = *( _OWORD *)&std_material[4]; 
*( _OWORD *)material = *( _OWORD *)std_material; 
*( _OWORD *)material = *( _OWORD *)std_material; 
*( _OWORD *)&material[4] = *( _OWORD *)&std_material[4]; 
*( _OWORD *)&material[4] = *( _OWORD *)&std_material[4]; 
*( _OWORD *)&material[8] = *( _OWORD *)&std_material[8]; 
*( _OWORD *)&material[8] = *( _OWORD *)&std_material[8]; 
*( _OWORD *)material = *( _OWORD *)zh_material; 
*( _OWORD *)&material[4] = *( _OWORD *)&zh_material[4]; 
*( _OWORD *)&material[4] = *( _OWORD *)&zh_material[4]; 
*( _OWORD *)&material[8] = *( _OWORD *)&zh_material[8]; 
*( _OWORD *)&material[8] = *( _OWORD *)&zh_material[8]; 
*( _OWORD *)material = *( _OWORD *)losers_material; 
*( _OWORD *)&material[4] = *( _OWORD *)&losers_material[4]; 
*( _OWORD *)&material[4] = *( _OWORD *)&losers_material[4]; 
*( _OWORD *)&material[8] = *( _OWORD *)&losers_material[8]; 
*( _OWORD *)&material[8] = *( _OWORD *)&losers_material[8]; 
*( _OWORD *)material = *( _OWORD *)suicide_material; 
*( _OWORD *)&material[4] = *( _OWORD *)&suicide_material[4]; 
*( _OWORD *)&material[4] = *( _OWORD *)&suicide_material[4]; 
*( _OWORD *)&material[8] = *( _OWORD *)&suicide_material[8]; 
*( _OWORD *)&material[8] = *( _OWORD *)&suicide_material[8]; 
*( _OWORD *)opening_history = 0LL; 
*( _OWORD *)&opening_history[16] = 0LL; 
*( _OWORD *)&opening_history[32] = 0LL; 
*( _OWORD *)&opening_history[48] = 0LL; 
*( _OWORD *)&opening_history[64] = 0LL; 
*( _OWORD *)&opening_history[80] = 0LL; 
*( _OWORD *)&opening_history[96] = 0LL; 
*( _OWORD *)&opening_history[112] = 0LL; 
*( _OWORD *)&opening_history[128] = 0LL; 
*( _OWORD *)&opening_history[144] = 0LL; 
*( _OWORD *)&opening_history[160] = 0LL; 
*( _OWORD *)&opening_history[176] = 0LL; 
*( _OWORD *)&opening_history[192] = 0LL; 
*( _OWORD *)&opening_history[208] = 0LL; 
*( _OWORD *)&opening_history[224] = 0LL; 
*( _OWORD *)&opening_history[240] = 0LL; 
*( _OWORD *)&material[8] = *( _OWORD *)&std_material[8]; 
*( _OWORD *)&material[8] = *( _OWORD *)&std_material[8]; 
*( _OWORD *)&material[4] = *( _OWORD *)&std_material[4]; 
*( _OWORD *)&material[4] = *( _OWORD *)&std_material[4]; 
*( _OWORD *)material = *( _OWORD *)std_material; 
v10 = setup_attackers_bishop_o[v9]; 
while ( board[square + ( __int64)*( int *)( ( char *)jpt_401814 + v15)] != 3 ) 
v17 = setup_attackers_rook_o[v16]; 
v3 = setup_attackers_bishop_o[v2]; 
while ( board[square + ( __int64)*( int *)( ( char *)jpt_401814 + v7)] != 4 ) 
v21 = setup_attackers_rook_o[v8]; 
*( _OWORD *)v11 = 0LL; 
*( _OWORD *)&holding[1][12] = 0LL; 
*( _OWORD *)&holding[1][8] = 0LL; 
*( _OWORD *)&holding[1][4] = 0LL; 
*( _OWORD *)&holding[1][0] = 0LL; 
*( _OWORD *)&holding[0][12] = 0LL; 
*( _OWORD *)&holding[0][8] = 0LL; 
*( _OWORD *)&holding[0][4] = 0LL; 
*( _OWORD *)&holding[0][0] = 0LL; 
v2 = *( _OWORD *)&compmove.from; 
v2 = *( _OWORD *)&v10.from; 
*( _OWORD *)&retstr->from = v2; 
*( _OWORD *)&pv[0][v19 / 3 + v20 / 0x18].from = *( _OWORD *)&v41[v15].from; 
*( _OWORD *)&pv[0][v19 / 3 + v20 / 0x18].from = *( _OWORD *)&v41[v15].from; 
*( _OWORD *)( ( char *)&( *v25)[0].from + v23) = *( _OWORD *)&( *v25)[v24].from; 
*( _OWORD *)( ( char *)&( *v25)[0].from + v23) = *( _OWORD *)&( *v25)[v24].from; 
memcpy( board, &unk_41A660, sizeof( board)); 
*( _OWORD *)is_promoted = 0LL; 
*( _OWORD *)&is_promoted[4] = 0LL; 
*( _OWORD *)&is_promoted[8] = 0LL; 
*( _OWORD *)&is_promoted[12] = 0LL; 
*( _OWORD *)&is_promoted[16] = 0LL; 
*( _OWORD *)&is_promoted[20] = 0LL; 
*( _OWORD *)&is_promoted[24] = 0LL; 
*( _OWORD *)&is_promoted[28] = 0LL; 
*( _OWORD *)&is_promoted[32] = 0LL; 
*( _OWORD *)&is_promoted[36] = 0LL; 
*( _OWORD *)&is_promoted[40] = 0LL; 
*( _OWORD *)&is_promoted[44] = 0LL; 
*( _OWORD *)&is_promoted[48] = 0LL; 
*( _OWORD *)&is_promoted[52] = 0LL; 
*( _OWORD *)&is_promoted[56] = 0LL; 
*( _OWORD *)&holding[1][12] = 0LL; 
*( _OWORD *)&holding[1][8] = 0LL; 
*( _OWORD *)&holding[1][4] = 0LL; 
*( _OWORD *)&holding[1][0] = 0LL; 
*( _OWORD *)&holding[0][12] = 0LL; 
*( _OWORD *)&holding[0][8] = 0LL; 
*( _OWORD *)&holding[0][4] = 0LL; 
*( _OWORD *)&holding[0][0] = 0LL; 
*( _OWORD *)pieces = 0LL; 
*( _OWORD *)&pieces[4] = 0LL; 
*( _OWORD *)&pieces[8] = 0LL; 
*( _OWORD *)&pieces[12] = 0LL; 
*( _OWORD *)&pieces[16] = 0LL; 
*( _OWORD *)&pieces[20] = 0LL; 
*( _OWORD *)&pieces[24] = 0LL; 
*( _OWORD *)&pieces[28] = 0LL; 
*( _OWORD *)&pieces[32] = 0LL; 
*( _OWORD *)&pieces[36] = 0LL; 
*( _OWORD *)&pieces[40] = 0LL; 
*( _OWORD *)&pieces[44] = 0LL; 
*( _OWORD *)&pieces[48] = 0LL; 
*( _OWORD *)&pieces[52] = 0LL; 
*( _OWORD *)&pieces[56] = 0LL; 
*( _OWORD *)&is_promoted[56] = 0LL; 
*( _OWORD *)&is_promoted[52] = 0LL; 
*( _OWORD *)&is_promoted[48] = 0LL; 
*( _OWORD *)&is_promoted[44] = 0LL; 
*( _OWORD *)&is_promoted[40] = 0LL; 
*( _OWORD *)&is_promoted[36] = 0LL; 
*( _OWORD *)&is_promoted[32] = 0LL; 
*( _OWORD *)&is_promoted[28] = 0LL; 
*( _OWORD *)&is_promoted[24] = 0LL; 
*( _OWORD *)&is_promoted[20] = 0LL; 
*( _OWORD *)&is_promoted[16] = 0LL; 
*( _OWORD *)&is_promoted[12] = 0LL; 
*( _OWORD *)&is_promoted[8] = 0LL; 
*( _OWORD *)&is_promoted[4] = 0LL; 
*( _OWORD *)is_promoted = 0LL; 
*( _OWORD *)&hand_value[8] = *( _OWORD *)&std_hand_value[8]; 
*( _OWORD *)&hand_value[8] = *( _OWORD *)&std_hand_value[8]; 
*( _OWORD *)&hand_value[4] = *( _OWORD *)&std_hand_value[4]; 
*( _OWORD *)&hand_value[4] = *( _OWORD *)&std_hand_value[4]; 
*( _OWORD *)hand_value = *( _OWORD *)std_hand_value; 
if ( dword_66359C[sq] != 13 ) 
v7 = Rook_square_d1[c]; 
v3 = rook_mobility_dir[v1]; 
v1 += board[square + ( __int64)*( int *)( ( char *)jpt_404015 + v2)] == 13; 
v1 += board[square + ( __int64)*( int *)( ( char *)jpt_401814 + v2)] == 13; 
v4 = &dword_66359C[square]; 
if ( captured != 13 && search_rc_index[captured] == search_rc_index[path[v9].captured] ) 
if ( captured != 13 && search_rc_index[captured] == search_rc_index[path[v9].captured] ) 
*( _OWORD *)( ( char *)&killer3[299].from + 3 * v50) = *( _OWORD *)&v124[v52].from; 
*( _OWORD *)( ( char *)&killer3[299].from + 3 * v50) = *( _OWORD *)&v124[v52].from; 
v122 = *( _OWORD *)&killer1[v92].from; 
*( _OWORD *)&killer1[v98].from = *( _OWORD *)&killer2[v92].from; 
*( _OWORD *)&killer1[v98].from = *( _OWORD *)&killer2[v92].from; 
*( _OWORD *)&killer2[v98].from = v122; 
v122 = *( _OWORD *)&killer2[v92].from; 
*( _OWORD *)&killer2[v102].from = *( _OWORD *)&killer3[v92].from; 
*( _OWORD *)&killer2[v102].from = *( _OWORD *)&killer3[v92].from; 
*( _OWORD *)&killer3[v102].from = v122; 
*( _OWORD *)&killer3[v103].from = *( _OWORD *)&v124[v89].from; 
*( _OWORD *)&killer3[v103].from = *( _OWORD *)&v124[v89].from; 
*( _OWORD *)&pv[0][v68 / 3 + v69 / 0x18].from = *( _OWORD *)&v124[v70].from; 
*( _OWORD *)&pv[0][v68 / 3 + v69 / 0x18].from = *( _OWORD *)&v124[v70].from; 
*( _OWORD *)( ( char *)&( *v75)[0].from + v73) = *( _OWORD *)&( *v75)[v74].from; 
*( _OWORD *)( ( char *)&( *v75)[0].from + v73) = *( _OWORD *)&( *v75)[v74].from; 
*( _OWORD *)( ( char *)&killer3[299].from + 3 * v19) = *( _OWORD *)&v89[v21].from; 
*( _OWORD *)( ( char *)&killer3[299].from + 3 * v19) = *( _OWORD *)&v89[v21].from; 
*( _OWORD *)&move.from = *( _OWORD *)&v89[m].from; 
*( _OWORD *)&move.from = *( _OWORD *)&v89[m].from; 
*( _OWORD *)&pv[0][v66 / 3 + v67 / 0x18].from = *( _OWORD *)&v89[v68].from; 
*( _OWORD *)&pv[0][v66 / 3 + v67 / 0x18].from = *( _OWORD *)&v89[v68].from; 
*( _OWORD *)( ( char *)&( *v72)[0].from + v71) = *( _OWORD *)&( *v72)[301 * v64].from; 
*( _OWORD *)( ( char *)&( *v72)[0].from + v71) = *( _OWORD *)&( *v72)[301 * v64].from; 
*( _OWORD *)&v85.from = *( _OWORD *)&v89[m].from; 
*( _OWORD *)&v85.from = *( _OWORD *)&v89[m].from; 
*( _OWORD *)&v85.from = *( _OWORD *)&v89[m].from; 
*( _OWORD *)&v85.from = *( _OWORD *)&v89[m].from; 
*( _OWORD *)&pv[0][v31 / 3 + v32 / 0x18].from = *( _OWORD *)&v28->from; 
*( _OWORD *)&pv[0][v31 / 3 + v32 / 0x18].from = *( _OWORD *)&v28->from; 
*( _OWORD *)( ( char *)&( *v36)[0].from + v35) = *( _OWORD *)&( *v36)[301 * v29].from; 
*( _OWORD *)( ( char *)&( *v36)[0].from + v35) = *( _OWORD *)&( *v36)[301 * v29].from; 
*( _OWORD *)&v85.from = *( _OWORD *)&v89[m].from; 
*( _OWORD *)&v85.from = *( _OWORD *)&v89[m].from; 
v87 = *( _OWORD *)&killer1[v45].from; 
*( _OWORD *)&killer1[v50].from = *( _OWORD *)&killer2[v45].from; 
*( _OWORD *)&killer1[v50].from = *( _OWORD *)&killer2[v45].from; 
*( _OWORD *)&killer2[v50].from = v87; 
v87 = *( _OWORD *)&killer2[v45].from; 
*( _OWORD *)&killer2[v54].from = *( _OWORD *)&killer3[v45].from; 
*( _OWORD *)&killer2[v54].from = *( _OWORD *)&killer3[v45].from; 
*( _OWORD *)&killer3[v54].from = v87; 
*( _OWORD *)&killer3[v55].from = *( _OWORD *)&v89[v43].from; 
*( _OWORD *)&killer3[v55].from = *( _OWORD *)&v89[v43].from; 
*( _OWORD *)&v85.from = *( _OWORD *)&v89[v43].from; 
*( _OWORD *)&v85.from = *( _OWORD *)&v89[v43].from; 
v56 = *( _OWORD *)&v85.from; 
*( _OWORD *)&pv[0][v46 / 3 + v57 / 0x18].from = v56; 
*( _OWORD *)( ( char *)&( *v62)[0].from + v60) = *( _OWORD *)&( *v62)[v61].from; 
*( _OWORD *)( ( char *)&( *v62)[0].from + v60) = *( _OWORD *)&( *v62)[v61].from; 
*( _OWORD *)&v6->from = *( _OWORD *)&v7->from; 
*( _OWORD *)&v6->from = *( _OWORD *)&v7->from; 
v18 = -material[dword_661668[32 * v16 + 2 * v17]]; 
v18 = material[dword_661668[32 * ( unsigned __int64)( v12 == 0) + 2 * v17]]; 
v4 = setup_attackers_rook_o[v3]; 
v10 = setup_attackers_bishop_o[v9]; 
v16 = square + ( __int64)*( int *)( ( char *)jpt_401814 + v15); 
v24 = setup_epd_line_rankoffsets[v12 + 1]; 
*( ( _OWORD *)str + 15) = 0LL; 
*( ( _OWORD *)str + 14) = 0LL; 
*( ( _OWORD *)str + 13) = 0LL; 
*( ( _OWORD *)str + 12) = 0LL; 
*( ( _OWORD *)str + 11) = 0LL; 
*( ( _OWORD *)str + 10) = 0LL; 
*( ( _OWORD *)str + 9) = 0LL; 
*( ( _OWORD *)str + 8) = 0LL; 
*( ( _OWORD *)str + 7) = 0LL; 
*( ( _OWORD *)str + 6) = 0LL; 
*( ( _OWORD *)str + 5) = 0LL; 
*( ( _OWORD *)str + 4) = 0LL; 
*( ( _OWORD *)str + 3) = 0LL; 
*( ( _OWORD *)str + 2) = 0LL; 
*( ( _OWORD *)str + 1) = 0LL; 
*( _OWORD *)str = 0LL; 
return dword_4145D0[piece]; 
return dword_414610[piece]; 
v30 = *( _OWORD *)&v47[v2].from; 
puts( ( &off_419408)[phase]); 
v30 = *( _OWORD *)&pn_move.from; 
*( _OWORD *)( ( char *)&killer2[0].from + v13) = *( _OWORD *)&dummy.from; 
*( _OWORD *)( ( char *)&killer2[0].from + v13) = *( _OWORD *)&dummy.from; 
*( _OWORD *)( ( char *)&killer3[0].from + v13) = *( _OWORD *)&dummy.from; 
*( _OWORD *)( ( char *)&killer3[0].from + v13) = *( _OWORD *)&dummy.from; 
*( _OWORD *)( ( char *)&path[0].from + v13) = *( _OWORD *)&dummy.from; 
*( _OWORD *)( ( char *)&path[0].from + v13) = *( _OWORD *)&dummy.from; 
v30 = *( _OWORD *)&compmove.from; 
v30 = *( _OWORD *)&dummy.from; 
*( _OWORD *)&v29->from = v30; 
