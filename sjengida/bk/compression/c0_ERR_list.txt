['ndira = is_attacked_rook_o[ib];', 'ndira = nk_attacked_rook_o[ib];']
['if ( board[l_king_mobility_king_o[d] + square] == 13 )']
['a_sq += setup_attackers_rook_o[i];']
['a_sqa += setup_attackers_bishop_o[ia];']
['if ( board[is_attacked_knight_o[ia] + square] == 3 )', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 )']
['a_sq += setup_attackers_rook_o[i];']
['a_sqa += setup_attackers_bishop_o[ia];']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( board[extended_in_check_knight_o[sqq] + bking_loc] == 3 )']
['if ( board[extended_in_check_knight_o[sqh] + wking_loc] == 4 )']
['CheckBadFlow_pawnmated = 0;']
['CheckBadFlow_knightmated = 0;']
['CheckBadFlow_bishopmated = 0;']
['CheckBadFlow_rookmated = 0;']
['CheckBadFlow_queenmated = 0;']
['if ( pawnmates != CheckBadFlow_pawnmated )']
['if ( pawnmates != CheckBadFlow_pawnmated )']
['else if ( !CheckBadFlow_knightmated )']
['else if ( !CheckBadFlow_knightmated )']
['if ( bishopmates != CheckBadFlow_bishopmated )']
['else if ( !CheckBadFlow_bishopmated )']
['if ( rookmates != CheckBadFlow_rookmated )']
['else if ( !CheckBadFlow_rookmated )']
['if ( queenmates != CheckBadFlow_queenmated )']
['else if ( !CheckBadFlow_queenmated )']
['CheckBadFlow_pawnmated = 0;']
['CheckBadFlow_bishopmated = 0;']
['CheckBadFlow_pawnmated = 0;']
['CheckBadFlow_bishopmated = 0;']
['CheckBadFlow_rookmated = 0;']
['CheckBadFlow_queenmated = 0;']
['CheckBadFlow_rookmated = 0;']
['CheckBadFlow_queenmated = 0;']
['CheckBadFlow_knightmated = 0;']
['CheckBadFlow_knightmated = 0;']
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c )']
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c )']
['memcpy( type_to_char, &unk_429610, sizeof( type_to_char));']
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c )']
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c )']
['memcpy( type_to_char, &unk_429650, sizeof( type_to_char));', 'stream = fopen( input, &off_428D0D[2]);']
['stream = fopen( input, &off_428D0D[2]);']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['memcpy( piece_rep, &off_429690, sizeof( piece_rep));', 'if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )', 'stream = fopen( input, &off_428D0D[2]);']
['memcpy( piece_rep, &off_429690, sizeof( piece_rep));', 'if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )', 'stream = fopen( input, &off_428D0D[2]);']
['if ( f_in_check_knight_o[lh] + wking_loc == target )']
['if ( f_in_check_knight_o[lbg] + bking_loc == target )']
['if ( board[l_king_mobility_king_o[d] + square] == 13 )']
['if ( board[l_king_mobility_king_o[d] + square] == 13 )']
['if ( board[extended_in_check_knight_o[sqq] + bking_loc] == 3 )']
['if ( board[l_king_mobility_king_o[d] + square] == 13 )']
['if ( f_in_check_knight_o[lh] + wking_loc == target )', 'if ( f_in_check_knight_o[lbg] + bking_loc == target )']
['if ( board[l_king_mobility_king_o[d] + square] == 13 )']
['if ( board[l_king_mobility_king_o[d] + square] == 13 )']
['if ( board[extended_in_check_knight_o[sqh] + wking_loc] == 4 )']
['if ( f_in_check_knight_o[lh] + wking_loc == target )', 'if ( f_in_check_knight_o[lbg] + bking_loc == target )']
['if ( board[l_king_mobility_king_o[d] + square] == 13 )']
['if ( board[l_king_mobility_king_o[d] + square] == 13 )']
['if ( board[extended_in_check_knight_o[sqq] + bking_loc] == 3 )']
['if ( sq == Rook_square_d1[c] )']
['if ( sq == Rook_square_d1[c] )']
['if ( sq == Rook_square_d1[c] )']
['if ( sq == Rook_square_d1[c] )']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )']
['else if ( !strcmp( input, off_428D0D) )']
['else if ( !strcmp( input, off_428D0D) )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['memcpy( init_board, &unk_429700, sizeof( init_board));', 'memcpy( init_board, &unk_429940, sizeof( init_board));']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['a_sqa += setup_attackers_bishop_o[ia];']
['if ( board[is_attacked_knight_o[ia] + square] == 3 )', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 )']
['a_sq += setup_attackers_rook_o[i];']
['a_sqa += setup_attackers_bishop_o[ia];']
['if ( board[is_attacked_knight_o[id] + square] == 4 )', 'if ( board[nk_attacked_knight_o[id] + square] == 4 )']
['a_sq += setup_attackers_rook_o[i];']
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c )']
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c )']
['if ( board[is_attacked_knight_o[ia] + square] == 3 )', 'if ( board[is_attacked_knight_o[id] + square] == 4 )', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 )', 'if ( board[nk_attacked_knight_o[id] + square] == 4 )']
['if ( board[is_attacked_knight_o[ia] + square] == 3 )', 'if ( board[is_attacked_knight_o[id] + square] == 4 )', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 )', 'if ( board[nk_attacked_knight_o[id] + square] == 4 )']
['a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'if ( queenmates != CheckBadFlow_queenmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['for ( l = rook_mobility_dir[diridx] + square; board[l] == 13; l += rook_mobility_dir[diridx] )', 'for ( l = rook_mobility_dir[diridx] + square; board[l] == 13; l += rook_mobility_dir[diridx] )']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'if ( queenmates != CheckBadFlow_queenmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'if ( queenmates != CheckBadFlow_queenmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( rookmates != CheckBadFlow_rookmated )']
['for ( l = bishop_mobility_dir[diridx] + square; board[l] == 13; l += bishop_mobility_dir[diridx] )', 'for ( l = bishop_mobility_dir[diridx] + square; board[l] == 13; l += bishop_mobility_dir[diridx] )']
['for ( l = bishop_mobility_dir[diridx] + square; board[l] == 13; l += bishop_mobility_dir[diridx] )', 'for ( l = bishop_mobility_dir[diridx] + square; board[l] == 13; l += bishop_mobility_dir[diridx] )']
['for ( l = bishop_mobility_dir[diridx] + square; board[l] == 13; l += bishop_mobility_dir[diridx] )', 'for ( l = bishop_mobility_dir[diridx] + square; board[l] == 13; l += bishop_mobility_dir[diridx] )']
['for ( l = bishop_mobility_dir[diridx] + square; board[l] == 13; l += bishop_mobility_dir[diridx] )', 'for ( l = bishop_mobility_dir[diridx] + square; board[l] == 13; l += bishop_mobility_dir[diridx] )']
['if ( rookmates != CheckBadFlow_rookmated )']
['if ( rookmates != CheckBadFlow_rookmated )']
['if ( rookmates != CheckBadFlow_rookmated )']
['if ( rookmates != CheckBadFlow_rookmated )']
['if ( rookmates != CheckBadFlow_rookmated )']
['if ( knightmates != CheckBadFlow_knightmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( queenmates != CheckBadFlow_queenmated )']
['if ( queenmates != CheckBadFlow_queenmated )']
['if ( queenmates != CheckBadFlow_queenmated )']
['if ( queenmates != CheckBadFlow_queenmated )']
['if ( queenmates != CheckBadFlow_queenmated )']
['CheckBadFlow_knightmated = 0;']
['CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;']
['CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;']
['CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;']
['CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;']
['CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;']
['CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;']
['CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;']
['CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_knightmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( pawnmates != CheckBadFlow_pawnmated )', 'if ( bishopmates != CheckBadFlow_bishopmated )', 'if ( rookmates != CheckBadFlow_rookmated )', 'if ( queenmates != CheckBadFlow_queenmated )', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['a_sqa += setup_attackers_bishop_o[ia];']
['if ( board[is_attacked_knight_o[ia] + square] == 3 )', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 )']
['a_sq += setup_attackers_rook_o[i];']
['a_sqa += setup_attackers_bishop_o[ia];']
['if ( board[is_attacked_knight_o[id] + square] == 4 )', 'if ( board[nk_attacked_knight_o[id] + square] == 4 )']
['a_sq += setup_attackers_rook_o[i];']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['stream = fopen( input, &off_428D0D[2]);']
['a_sq = calc_attackers_rook_o[i] + square;']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['memcpy( init_board, &unk_429700, sizeof( init_board));', 'memcpy( init_board, &unk_429940, sizeof( init_board));']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_bishopmated = 0;', 'CheckBadFlow_rookmated = 0;']
['CheckBadFlow_pawnmated = 0;', 'CheckBadFlow_rookmated = 0;']
['ndira = is_attacked_rook_o[ib];', 'ndira = nk_attacked_rook_o[ib];']
['ndira = is_attacked_rook_o[ib];', 'ndira = nk_attacked_rook_o[ib];']
['ndira = is_attacked_rook_o[ib];', 'ndira = nk_attacked_rook_o[ib];']
['ndira = is_attacked_rook_o[ib];', 'ndira = nk_attacked_rook_o[ib];']
['ndira = is_attacked_rook_o[ib];', 'a_sqc = is_attacked_rook_o[ie] + square;', 'ndira = nk_attacked_rook_o[ib];', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['if ( board[l_king_mobility_king_o[d] + square] == 13 )']
['if ( sq == Rook_square_d1[c] )']
['if ( board[l_king_mobility_king_o[d] + square] == 13 )']
['if ( board[is_attacked_knight_o[ia] + square] == 3 )', 'if ( board[is_attacked_knight_o[id] + square] == 4 )', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 )', 'if ( board[nk_attacked_knight_o[id] + square] == 4 )']
['if ( board[is_attacked_knight_o[ia] + square] == 3 )', 'if ( board[is_attacked_knight_o[id] + square] == 4 )', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 )', 'if ( board[nk_attacked_knight_o[id] + square] == 4 )']
['a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['ndir = is_attacked_bishop_o[i];', 'ndir = nk_attacked_bishop_o[i];', 'if ( sq == Rook_square_d1[c] )', 'if ( sq == Rook_square_d1[c] + 1 )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['ndir = is_attacked_bishop_o[i];', 'ndir = nk_attacked_bishop_o[i];']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )', 'if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )', 'if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( sq == Rook_square_d1[c] )', 'if ( sq == Rook_square_d1[c] + 1 )', 'stream = fopen( input, &off_428D0D[2]);']
['if ( sq == Rook_square_d1[c] )', 'if ( sq == Rook_square_d1[c] + 1 )', 'stream = fopen( input, &off_428D0D[2]);']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['memcpy( type_to_char, &unk_429650, sizeof( type_to_char));', 'memcpy( type_to_char, &unk_429610, sizeof( type_to_char));', 'if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )', 'if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['memcpy( type_to_char, &unk_429650, sizeof( type_to_char));', 'memcpy( type_to_char, &unk_429610, sizeof( type_to_char));', 'if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )', 'if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['if ( sq == Rook_square_d1[c] )', 'if ( sq == Rook_square_d1[c] + 1 )']
['a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc += is_attacked_rook_o[ie];', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc += is_attacked_rook_o[ie];', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['a_sqb = setup_attackers_knight_o[ib] + square;']
['a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc += is_attacked_rook_o[ie];', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc += is_attacked_rook_o[ie];', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] )']
['stream = fopen( input, &off_428D0D[2]);']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;', 'MEMORY[0] = 0;']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;', 'MEMORY[0] = 0;']
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c )']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['a_sq += setup_attackers_rook_o[i];']
['a_sqa += setup_attackers_bishop_o[ia];']
['else if ( !strcmp( input, off_428D0D) )']
['rankoffset = setup_epd_line_rankoffsets[++rankp];']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )']
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) )']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
['memcpy( t, &unk_424DA0, sizeof( t));', 'memcpy( t, &unk_424DE0, sizeof( t));']
['memcpy( piece_rep, &off_429690, sizeof( piece_rep));', 'memcpy( t, &unk_424DA0, sizeof( t));', 'memcpy( t, &unk_424DE0, sizeof( t));']
['stream = fopen( input, &off_428D0D[2]);']
['memcpy( piece_rep, &off_429690, sizeof( piece_rep));']
['stream = fopen( input, &off_428D0D[2]);']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['a_sq = calc_attackers_rook_o[i] + square;', 'a_sqa = calc_attackers_bishop_o[ia] + square;', 'a_sqb = calc_attackers_rook_o[ic] + square;', 'a_sqc = calc_attackers_bishop_o[id] + square;', 'if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['a_sq = calc_attackers_rook_o[i] + square;', 'a_sqa = calc_attackers_bishop_o[ia] + square;', 'a_sqb = calc_attackers_rook_o[ic] + square;', 'a_sqc = calc_attackers_bishop_o[id] + square;', 'if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4']
['a_sqc = is_attacked_rook_o[ie] + square;', 'a_sqc = nk_attacked_rook_o[ie] + square;']
['stream = fopen( input, &off_428D0D[2]);']
['MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;', 'MEMORY[0] = 0;']
