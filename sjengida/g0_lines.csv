a_sq = rook_o_8[i] + square; 
a_sq += rook_o_8[i]; 
a_sqa = bishop_o_7[ia] + square; 
a_sqa += bishop_o_7[ia]; 
if ( board[knight_o_6[ib] + square] == 3 ) 
a_sqb = rook_o_8[ic] + square; 
a_sqb += rook_o_8[ic]; 
a_sqc = bishop_o_7[id] + square; 
a_sqc += bishop_o_7[id]; 
if ( board[knight_o_6[ie] + square] == 4 ) 
pawnmated_4 = 0; 
knightmated_3 = 0; 
bishopmated_2 = 0; 
rookmated_1 = 0; 
queenmated_0 = 0; 
if ( pawnmates != pawnmated_4 ) 
else if ( !pawnmates && !pawnmated_4 ) 
if ( knightmates != knightmated_3 ) 
else if ( !knightmates && !knightmated_3 ) 
if ( bishopmates != bishopmated_2 ) 
else if ( !bishopmates && !bishopmated_2 ) 
if ( rookmates != rookmated_1 ) 
else if ( !rookmates && !rookmated_1 ) 
if ( queenmates != queenmated_0 ) 
else if ( !queenmates && !queenmated_0 ) 
pawnmated_4 = pawnmates; 
--pawnmated_4; 
bishopmated_2 = bishopmates; 
--bishopmated_2; 
rookmated_1 = rookmates; 
--rookmated_1; 
queenmated_0 = queenmates; 
--queenmated_0; 
knightmated_3 = knightmates; 
--knightmated_3; 
if ( target == knight_o_3[lh] + wking_loc ) 
if ( target == knight_o_3[lbg] + bking_loc ) 
if ( !strncmp( input + 6, off_423B32, 3uLL) ) 
MEMORY[0] = 0; 
MEMORY[0] = 0; 
qmemcpy( init_board, &unk_425340, sizeof( init_board)); 
v3 = bishop_o_5[i]; 
if ( board[knight_o_4[j] + square] == 3 ) 
v9 = rook_o_3[k]; 
v13 = bishop_o_5[m]; 
if ( board[knight_o_4[n] + square] == 4 ) 
v18 = rook_o_3[ii] + square; 
v18 += rook_o_3[ii]; 
if ( board[king_o_1[i] + square] == 13 ) 
if ( board[knight_o_2[i] + square] == 13 ) 
else if ( !strcmp( input, off_4249EB) ) 
v3 = bishop_o_2[i]; 
if ( board[knight_o_1[j] + square] == 3 ) 
v9 = rook_o_0[k]; 
v13 = bishop_o_2[n]; 
if ( board[knight_o_1[ii] + square] == 4 ) 
v18 = rook_o_0[jj] + square; 
v18 += rook_o_0[jj]; 
qmemcpy( init_board, &unk_425A40, sizeof( init_board)); 
&& rc_index_0[path[ply - 1].captured] == rc_index_0[path[ply - 2].captured] ) 
&& rc_index_0[path[ply - 1].captured] == rc_index_0[path[ply - 2].captured] ) 
v2 = rook_o_2[i] + square; 
v2 += rook_o_2[i]; 
v5 = bishop_o_1[j] + square; 
v5 += bishop_o_1[j]; 
v8 = knight_o_0[k] + square; 
rankoffset = rankoffsets_0[0]; 
rankoffset = rankoffsets_0[++rankp]; 
MEMORY[0] = 0; 
