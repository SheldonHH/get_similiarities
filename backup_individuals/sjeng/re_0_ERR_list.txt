[]
['for ( l = bishop_mobility_dir[diridx] + square; board[l] == 13; l += bishop_mobility_dir[diridx] ) \n', 'for ( l = bishop_mobility_dir[diridx] + square; board[l] == 13; l += bishop_mobility_dir[diridx] ) \n']
['a_sq += setup_attackers_rook_o[i]; \n']
['a_sqa += setup_attackers_bishop_o[ia]; \n']
['if ( board[calc_attackers_knight_o[ib] + square] == 3 ) \n', 'if ( board[calc_attackers_knight_o[ie] + square] == 4 ) \n', 'if ( board[is_attacked_knight_o[ia] + square] == 3 ) \n', 'if ( board[is_attacked_knight_o[id] + square] == 4 ) \n', 'if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 ) \n', 'if ( board[nk_attacked_knight_o[id] + square] == 4 ) \n']
['a_sq += setup_attackers_rook_o[i]; \n']
['a_sqa += setup_attackers_bishop_o[ia]; \n']
['if ( board[calc_attackers_knight_o[ib] + square] == 3 ) \n', 'if ( board[calc_attackers_knight_o[ie] + square] == 4 ) \n', 'if ( board[is_attacked_knight_o[ia] + square] == 3 ) \n', 'if ( board[is_attacked_knight_o[id] + square] == 4 ) \n', 'if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 ) \n', 'if ( board[nk_attacked_knight_o[id] + square] == 4 ) \n']
['CheckBadFlow_pawnmated = 0; \n', '--CheckBadFlow_pawnmated; \n']
['CheckBadFlow_knightmated = 0; \n', '--CheckBadFlow_knightmated; \n']
['CheckBadFlow_bishopmated = 0; \n', '--CheckBadFlow_bishopmated; \n']
['CheckBadFlow_rookmated = 0; \n', '--CheckBadFlow_rookmated; \n']
['CheckBadFlow_queenmated = 0; \n', '--CheckBadFlow_queenmated; \n']
['if ( pawnmates != CheckBadFlow_pawnmated ) \n', 'else if ( !CheckBadFlow_pawnmated ) \n']
['if ( pawnmates != CheckBadFlow_pawnmated ) \n', 'else if ( !CheckBadFlow_pawnmated ) \n']
['if ( knightmates != CheckBadFlow_knightmated ) \n', 'else if ( !CheckBadFlow_knightmated ) \n']
['if ( knightmates != CheckBadFlow_knightmated ) \n', 'else if ( !CheckBadFlow_knightmated ) \n']
['if ( bishopmates != CheckBadFlow_bishopmated ) \n', 'else if ( !CheckBadFlow_bishopmated ) \n']
['if ( bishopmates != CheckBadFlow_bishopmated ) \n', 'else if ( !CheckBadFlow_bishopmated ) \n']
['if ( rookmates != CheckBadFlow_rookmated ) \n', 'else if ( !CheckBadFlow_rookmated ) \n']
['else if ( !CheckBadFlow_rookmated ) \n']
['if ( queenmates != CheckBadFlow_queenmated ) \n', 'else if ( !CheckBadFlow_queenmated ) \n']
['else if ( !CheckBadFlow_queenmated ) \n']
['CheckBadFlow_pawnmated = 0; \n', '--CheckBadFlow_pawnmated; \n']
['CheckBadFlow_bishopmated = 0; \n', '--CheckBadFlow_bishopmated; \n']
['CheckBadFlow_pawnmated = 0; \n', '--CheckBadFlow_pawnmated; \n']
['CheckBadFlow_bishopmated = 0; \n', '--CheckBadFlow_bishopmated; \n']
['CheckBadFlow_rookmated = 0; \n', '--CheckBadFlow_rookmated; \n']
['CheckBadFlow_queenmated = 0; \n', '--CheckBadFlow_queenmated; \n']
['CheckBadFlow_rookmated = 0; \n', '--CheckBadFlow_rookmated; \n']
['CheckBadFlow_queenmated = 0; \n', '--CheckBadFlow_queenmated; \n']
['CheckBadFlow_knightmated = 0; \n', '--CheckBadFlow_knightmated; \n']
['CheckBadFlow_knightmated = 0; \n', '--CheckBadFlow_knightmated; \n']
['if ( board[extended_in_check_knight_o[sqq] + bking_loc] == 3 ) \n', 'if ( f_in_check_knight_o[lbg] + bking_loc == target ) \n']
['if ( board[extended_in_check_knight_o[sqh] + wking_loc] == 4 ) \n', 'if ( f_in_check_knight_o[lh] + wking_loc == target ) \n']
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c ) \n']
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c ) \n']
[]
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c ) \n']
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c ) \n']
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c ) \n']
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c ) \n']
[]
[]
['stream = fopen( input, &off_428D0D[2]); \n']
['stream = fopen( input, &off_428D0D[2]); \n']
['if ( board[extended_in_check_knight_o[sqh] + wking_loc] == 4 ) \n', 'if ( f_in_check_knight_o[lh] + wking_loc == target ) \n']
['if ( board[extended_in_check_knight_o[sqq] + bking_loc] == 3 ) \n', 'if ( f_in_check_knight_o[lbg] + bking_loc == target ) \n']
['if ( board[extended_in_check_knight_o[sqh] + wking_loc] == 4 ) \n', 'if ( f_in_check_knight_o[lh] + wking_loc == target ) \n']
['if ( board[extended_in_check_knight_o[sqh] + wking_loc] == 4 ) \n']
['if ( board[extended_in_check_knight_o[sqq] + bking_loc] == 3 ) \n', 'if ( f_in_check_knight_o[lbg] + bking_loc == target ) \n']
['if ( board[extended_in_check_knight_o[sqq] + bking_loc] == 3 ) \n']
['if ( f_in_check_knight_o[lh] + wking_loc == target ) \n']
['if ( board[extended_in_check_knight_o[sqh] + wking_loc] == 4 ) \n', 'if ( f_in_check_knight_o[lh] + wking_loc == target ) \n', 'if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n']
['if ( board[extended_in_check_knight_o[sqh] + wking_loc] == 4 ) \n', 'if ( f_in_check_knight_o[lh] + wking_loc == target ) \n', 'if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n']
['if ( board[extended_in_check_knight_o[sqh] + wking_loc] == 4 ) \n', 'if ( f_in_check_knight_o[lh] + wking_loc == target ) \n']
['if ( f_in_check_knight_o[lbg] + bking_loc == target ) \n']
['if ( board[extended_in_check_knight_o[sqq] + bking_loc] == 3 ) \n', 'if ( f_in_check_knight_o[lbg] + bking_loc == target ) \n', 'if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n']
['if ( board[extended_in_check_knight_o[sqq] + bking_loc] == 3 ) \n', 'if ( f_in_check_knight_o[lbg] + bking_loc == target ) \n', 'if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n']
['if ( board[extended_in_check_knight_o[sqq] + bking_loc] == 3 ) \n', 'if ( f_in_check_knight_o[lbg] + bking_loc == target ) \n']
['if ( pawnmates != CheckBadFlow_pawnmated ) \n', 'else if ( !CheckBadFlow_pawnmated ) \n', 'if ( knightmates != CheckBadFlow_knightmated ) \n', 'else if ( !CheckBadFlow_knightmated ) \n', 'if ( bishopmates != CheckBadFlow_bishopmated ) \n', 'else if ( !CheckBadFlow_bishopmated ) \n', 'if ( rookmates != CheckBadFlow_rookmated ) \n', 'else if ( !CheckBadFlow_rookmated ) \n', 'if ( queenmates != CheckBadFlow_queenmated ) \n', 'else if ( !CheckBadFlow_queenmated ) \n', 'if ( sq == Rook_square_d1[c] ) \n', 'if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4 \n', 'if ( sq == Rook_square_d1[c] + 1 ) \n']
['if ( pawnmates != CheckBadFlow_pawnmated ) \n', 'else if ( !CheckBadFlow_pawnmated ) \n', 'if ( knightmates != CheckBadFlow_knightmated ) \n', 'else if ( !CheckBadFlow_knightmated ) \n', 'if ( bishopmates != CheckBadFlow_bishopmated ) \n', 'else if ( !CheckBadFlow_bishopmated ) \n', 'if ( rookmates != CheckBadFlow_rookmated ) \n', 'else if ( !CheckBadFlow_rookmated ) \n', 'if ( queenmates != CheckBadFlow_queenmated ) \n', 'else if ( !CheckBadFlow_queenmated ) \n', 'if ( sq == Rook_square_d1[c] ) \n', 'if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4 \n', 'if ( sq == Rook_square_d1[c] + 1 ) \n']
['if ( pawnmates != CheckBadFlow_pawnmated ) \n', 'else if ( !CheckBadFlow_pawnmated ) \n', 'if ( knightmates != CheckBadFlow_knightmated ) \n', 'else if ( !CheckBadFlow_knightmated ) \n', 'if ( bishopmates != CheckBadFlow_bishopmated ) \n', 'else if ( !CheckBadFlow_bishopmated ) \n', 'if ( rookmates != CheckBadFlow_rookmated ) \n', 'else if ( !CheckBadFlow_rookmated ) \n', 'if ( queenmates != CheckBadFlow_queenmated ) \n', 'else if ( !CheckBadFlow_queenmated ) \n', 'if ( sq == Rook_square_d1[c] ) \n', 'if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4 \n', 'if ( sq == Rook_square_d1[c] + 1 ) \n']
['if ( pawnmates != CheckBadFlow_pawnmated ) \n', 'else if ( !CheckBadFlow_pawnmated ) \n', 'if ( knightmates != CheckBadFlow_knightmated ) \n', 'else if ( !CheckBadFlow_knightmated ) \n', 'if ( bishopmates != CheckBadFlow_bishopmated ) \n', 'else if ( !CheckBadFlow_bishopmated ) \n', 'if ( rookmates != CheckBadFlow_rookmated ) \n', 'else if ( !CheckBadFlow_rookmated ) \n', 'if ( queenmates != CheckBadFlow_queenmated ) \n', 'else if ( !CheckBadFlow_queenmated ) \n', 'if ( sq == Rook_square_d1[c] ) \n', 'if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4 \n', 'if ( sq == Rook_square_d1[c] + 1 ) \n']
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
['if ( !strncmp( inputa + 6, off_427F8C, 3uLL) ) \n']
[]
[]
[]
[]
['memcpy( t, &unk_424DA0, sizeof( t)); \n', 'memcpy( t, &unk_424DE0, sizeof( t)); \n']
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
['a_sqa += setup_attackers_bishop_o[ia]; \n']
['if ( board[calc_attackers_knight_o[ib] + square] == 3 ) \n', 'if ( board[calc_attackers_knight_o[ie] + square] == 4 ) \n', 'if ( board[is_attacked_knight_o[ia] + square] == 3 ) \n', 'if ( board[is_attacked_knight_o[id] + square] == 4 ) \n', 'if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 ) \n', 'if ( board[nk_attacked_knight_o[id] + square] == 4 ) \n']
['a_sq += setup_attackers_rook_o[i]; \n']
['a_sqa += setup_attackers_bishop_o[ia]; \n']
['if ( board[calc_attackers_knight_o[ib] + square] == 3 ) \n', 'if ( board[calc_attackers_knight_o[ie] + square] == 4 ) \n', 'if ( board[is_attacked_knight_o[ia] + square] == 3 ) \n', 'if ( board[is_attacked_knight_o[id] + square] == 4 ) \n', 'if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 ) \n', 'if ( board[nk_attacked_knight_o[id] + square] == 4 ) \n']
['a_sq += setup_attackers_rook_o[i]; \n']
['if ( sq == Rook_square_d1[c] ) \n', 'if ( sq == Rook_square_d1[c] + 1 ) \n']
['if ( sq == Rook_square_d1[c] ) \n', 'if ( sq == Rook_square_d1[c] + 1 ) \n']
['if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n']
['a_sq = calc_attackers_rook_o[i] + square; \n', 'a_sq = setup_attackers_rook_o[i] + square; \n']
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
['a_sqa += setup_attackers_bishop_o[ia]; \n']
['if ( board[calc_attackers_knight_o[ib] + square] == 3 ) \n', 'if ( board[calc_attackers_knight_o[ie] + square] == 4 ) \n', 'if ( board[is_attacked_knight_o[ia] + square] == 3 ) \n', 'if ( board[is_attacked_knight_o[id] + square] == 4 ) \n', 'if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 ) \n', 'if ( board[nk_attacked_knight_o[id] + square] == 4 ) \n']
['a_sq += setup_attackers_rook_o[i]; \n']
['a_sqa += setup_attackers_bishop_o[ia]; \n']
['if ( board[calc_attackers_knight_o[ib] + square] == 3 ) \n', 'if ( board[calc_attackers_knight_o[ie] + square] == 4 ) \n', 'if ( board[is_attacked_knight_o[ia] + square] == 3 ) \n', 'if ( board[is_attacked_knight_o[id] + square] == 4 ) \n', 'if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n', 'if ( board[nk_attacked_knight_o[ia] + square] == 3 ) \n', 'if ( board[nk_attacked_knight_o[id] + square] == 4 ) \n']
['a_sq += setup_attackers_rook_o[i]; \n']
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
['memcpy( t, &unk_424DA0, sizeof( t)); \n', 'memcpy( t, &unk_424DE0, sizeof( t)); \n']
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
['if ( sq == Rook_square_d1[c] ) \n', 'if ( sq == Rook_square_d1[c] + 1 ) \n']
['if ( sq == Rook_square_d1[c] ) \n', 'if ( ( board[Rook_square_d1[c] + 1] + 1) >> 1 == 4 \n', 'if ( sq == Rook_square_d1[c] + 1 ) \n']
['for ( l = rook_mobility_dir[diridx] + square; board[l] == 13; l += rook_mobility_dir[diridx] ) \n', 'for ( l = rook_mobility_dir[diridx] + square; board[l] == 13; l += rook_mobility_dir[diridx] ) \n']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] ) \n', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] ) \n']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] ) \n', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] ) \n']
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
['a_sq += setup_attackers_rook_o[i]; \n']
['a_sqa += setup_attackers_bishop_o[ia]; \n']
['a_sq = calc_attackers_rook_o[i] + square; \n', 'a_sq = setup_attackers_rook_o[i] + square; \n']
['rankoffset = setup_epd_line_rankoffsets[0]; \n']
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
['&& ( ( ( unsigned __int8)board[Rook_square_d1[c] + 1] + 1) & 1) == c ) \n']
[]
[]
['if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n']
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
['if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n']
['if ( board[l_king_mobility_king_o[d] + square] == 13 ) \n']
['a_sq = calc_attackers_rook_o[i] + square; \n', 'a_sq = setup_attackers_rook_o[i] + square; \n']
[]
[]
[]
[]
[]
[]
[]
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] ) \n', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] ) \n']
['&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] ) \n', '&& search_rc_index[path[ply - 1].captured] == search_rc_index[path[ply - 2].captured] ) \n']
[]
[]
[]
