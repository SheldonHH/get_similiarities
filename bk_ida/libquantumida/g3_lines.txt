complex_float v21; // xmm0_8 
for ( i = 0LL; reg->size > ( int)i; v22->amplitude.imag = v21.real ) 
v21 = quantum_cexp( imag); 
v23 = ( float)( v21.real * v22->amplitude.real) - ( float)( imag * v21.imag); 
v23 = ( float)( v21.real * v22->amplitude.real) - ( float)( imag * v21.imag); 
v21.real = ( float)( v22->amplitude.real * v21.imag) + ( float)( v21.real * imag); 
v21.real = ( float)( v22->amplitude.real * v21.imag) + ( float)( v21.real * imag); 
v21.real = ( float)( v22->amplitude.real * v21.imag) + ( float)( v21.real * imag); 
mem_1 -= 8 * m->rows * ( __int64)m->cols; 
if ( mem_1 > max_0 ) 
if ( mem_1 > max_0 ) 
max_0 = mem_1; 
max_0 = mem_1; 
complex_float amplitude; // 0:xmm0_8.8 
return ( complex_float)__PAIR64__( LODWORD( v16), LODWORD( v15)); 
amplitude = v18->amplitude; 
v26 = quantum_conj( amplitude).m128i_u64[0]; 
return ( complex_float)__PAIR64__( LODWORD( v16), LODWORD( v15)); 
complex_float *t; // rbx 
complex_float *t; // rbx 
t = m.t; 
v28 = t[2].imag != 0.0 || t[2].real != 0.0; 
v28 = t[2].imag != 0.0 || t[2].real != 0.0; 
if ( t[1].imag == 0.0 && t[1].real == 0.0 ) 
if ( t[1].imag == 0.0 && t[1].real == 0.0 ) 
v57 = t[2].real; 
v58 = t[2].imag; 
v61 = t[3].real; 
v62 = t[3].imag; 
v95 = t[1].real; 
v97 = t[1].imag; 
v63 = t->imag; 
v64 = ( float)( v55 * t->real) - ( float)( v54 * v63); 
v65 = ( float)( v54 * t->real) + ( float)( v55 * v63); 
v66 = t[1].real; 
v67 = t[1].imag; 
v83 = t->imag; 
v84 = ( float)( t->real * real) - ( float)( imag * v83); 
v85 = ( float)( t->real * imag) + ( float)( real * v83); 
v86 = t[1].real; 
v87 = t[1].imag; 
v88 = t[2].real; 
v89 = t[2].imag; 
v92 = t[3].real; 
v93 = t[3].imag; 
v101 = t[2].imag; 
if ( t[1].real == 0.0 && t[1].imag == 0.0 ) 
if ( t[1].real == 0.0 && t[1].imag == 0.0 ) 
v103 = t[2].real; 
v103 = t[2].real; 
complex_float *t; // rbx 
complex_float *t; // rbx 
t = m.t; 
v28 = t[2].imag != 0.0 || t[2].real != 0.0; 
v28 = t[2].imag != 0.0 || t[2].real != 0.0; 
if ( t[1].imag == 0.0 && t[1].real == 0.0 ) 
if ( t[1].imag == 0.0 && t[1].real == 0.0 ) 
v57 = t[2].real; 
v58 = t[2].imag; 
v61 = t[3].real; 
v62 = t[3].imag; 
v95 = t[1].real; 
v97 = t[1].imag; 
v63 = t->imag; 
v64 = ( float)( v55 * t->real) - ( float)( v54 * v63); 
v65 = ( float)( v54 * t->real) + ( float)( v55 * v63); 
v66 = t[1].real; 
v67 = t[1].imag; 
v83 = t->imag; 
v84 = ( float)( t->real * real) - ( float)( imag * v83); 
v85 = ( float)( t->real * imag) + ( float)( real * v83); 
v86 = t[1].real; 
v87 = t[1].imag; 
v88 = t[2].real; 
v89 = t[2].imag; 
v92 = t[3].real; 
v93 = t[3].imag; 
v101 = t[2].imag; 
if ( t[1].real == 0.0 && t[1].imag == 0.0 ) 
if ( t[1].real == 0.0 && t[1].imag == 0.0 ) 
v103 = t[2].real; 
v103 = t[2].real; 
counter_0 = 0; 
return counter_0; 
result = counter_0 + inc; 
counter_0 += inc; 
complex_float *t; // rcx 
complex_float *t; // rcx 
complex_float *v10; // rdx 
complex_float *v10; // rdx 
complex_float *v16; // rsi 
complex_float *v16; // rsi 
t = m->t; 
v10 = t + 1; 
v10 = t + 1; 
v11 = ( __int64)&t[( unsigned int)( m->rows - 1) + 1]; 
if ( t->imag != 0.0 || t->real != 0.0 ) 
if ( t->imag != 0.0 || t->real != 0.0 ) 
t = v10; 
t = v10; 
if ( ( complex_float *)v11 == v10 ) 
++v10; 
v16 = m->t; 
if ( v16[v17].real != 0.0 || v16[v17].imag != 0.0 ) 
if ( v16[v17].real != 0.0 || v16[v17].imag != 0.0 ) 
real = v16[v17].real; 
imag = v16[v17].imag; 
result = change + mem_1; 
mem_1 += change; 
if ( mem_1 > max_0 ) 
if ( mem_1 > max_0 ) 
max_0 = result; 
complex_float *v2; // rax 
complex_float *v2; // rax 
v2 = ( complex_float *)calloc( cols * rows, 8uLL); 
v2 = ( complex_float *)calloc( cols * rows, 8uLL); 
if ( !v2 ) 
v3.t = v2; 
mem_1 += 8 * rows * ( __int64)cols; 
if ( mem_1 > max_0 ) 
if ( mem_1 > max_0 ) 
max_0 = mem_1; 
max_0 = mem_1; 
complex_float *v3; // r14 
complex_float *v3; // r14 
v3 = &m.t[v1]; 
real = v3->real; 
imag = v3->imag; 
++v3; 
while ( v3 != &m.t[v1 + 1 + ( unsigned __int64)( unsigned int)( m.cols - 1)] ); 
result = inc + counter_1; 
counter_1 += inc; 
result = counter_1; 
counter_1 = 0; 
freq_0 = frequency; 
counter_1 = 0; 
return counter_1; 
if ( result >= freq_0 ) 
complex_float *t; // r8 
complex_float *t; // r8 
t = v1.t; 
t[state].real = real; 
t[state].imag = imag; 
complex_float *t; // rax 
complex_float *t; // rax 
t = m.t; 
t[3].imag = 0.0; 
t->real = v8; 
t[1].imag = *( float *)&v7; 
t[2].imag = *( float *)&v7; 
t[3].real = v8; 
t[1].real = *( float *)&v9; 
t[2].real = *( float *)&v9; 
complex_float *t; // rax 
complex_float *t; // rax 
t = m.t; 
t->real = v8; 
t[1].imag = 0.0; 
t[2].imag = 0.0; 
t[3].imag = 0.0; 
t[1].real = -*( float *)&v7; 
t[2].real = *( float *)&v7; 
t[3].real = v8; 
SCtype v15; // [rsp+8h] [rbp-40h] 
v15 = _divsc3( imag, v7, v8, v5); 
v5 = v15.real; 
v12 = v15.imag; 
