  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
*( _OWORD *)&s->save_gBase = 0LL; 
*( _OWORD *)&s->save_gMinlen = 0LL; 
*( _OWORD *)&s->save_zn = 0LL; 
*( _OWORD *)&s->save_es = 0LL; 
*( _OWORD *)&s->save_groupPos = 0LL; 
*( _OWORD *)&s->save_nGroups = 0LL; 
*( _OWORD *)&s->save_i = 0LL; 
*( _OWORD *)&s->inUse[240] = 0LL; 
*( _OWORD *)&s->inUse[224] = 0LL; 
*( _OWORD *)&s->inUse[208] = 0LL; 
*( _OWORD *)&s->inUse[192] = 0LL; 
*( _OWORD *)&s->inUse[176] = 0LL; 
*( _OWORD *)&s->inUse[160] = 0LL; 
*( _OWORD *)&s->inUse[144] = 0LL; 
*( _OWORD *)&s->inUse[128] = 0LL; 
*( _OWORD *)&s->inUse[112] = 0LL; 
*( _OWORD *)&s->inUse[96] = 0LL; 
*( _OWORD *)&s->inUse[80] = 0LL; 
*( _OWORD *)&s->inUse[64] = 0LL; 
*( _OWORD *)&s->inUse[48] = 0LL; 
*( _OWORD *)&s->inUse[32] = 0LL; 
*( _OWORD *)&s->inUse[16] = 0LL; 
*( _OWORD *)s->inUse = 0LL; 
*( _OWORD *)( base + 19) = 0LL; 
*( ( _OWORD *)base + 4) = 0LL; 
*( ( _OWORD *)base + 3) = 0LL; 
*( ( _OWORD *)base + 2) = 0LL; 
*( ( _OWORD *)base + 1) = 0LL; 
*( _OWORD *)base = 0LL; 
*( _OWORD *)( limit + 19) = 0LL; 
*( ( _OWORD *)limit + 4) = 0LL; 
*( ( _OWORD *)limit + 3) = 0LL; 
*( ( _OWORD *)limit + 2) = 0LL; 
*( ( _OWORD *)limit + 1) = 0LL; 
*( _OWORD *)limit = 0LL; 
fwrite( &unk_40EBF7, 0xF0uLL, 1uLL, stderr); 
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
v11 = dword_40DE9C[v10]; 
v29 = ( v28 - 1 < 0) ^ __OFADD__( -1LL, v28) | ( v28 == 1); 
v29 = ( v43 - 1 < 0) ^ __OFADD__( -1LL, v43) | ( v43 == 1); 
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
*( _OWORD *)s->inUse = 0LL; 
*( _OWORD *)&s->inUse[16] = 0LL; 
*( _OWORD *)&s->inUse[32] = 0LL; 
*( _OWORD *)&s->inUse[48] = 0LL; 
*( _OWORD *)&s->inUse[64] = 0LL; 
*( _OWORD *)&s->inUse[80] = 0LL; 
*( _OWORD *)&s->inUse[96] = 0LL; 
*( _OWORD *)&s->inUse[112] = 0LL; 
*( _OWORD *)&s->inUse[128] = 0LL; 
*( _OWORD *)&s->inUse[144] = 0LL; 
*( _OWORD *)&s->inUse[160] = 0LL; 
*( _OWORD *)&s->inUse[176] = 0LL; 
*( _OWORD *)&s->inUse[192] = 0LL; 
*( _OWORD *)&s->inUse[208] = 0LL; 
*( _OWORD *)&s->inUse[224] = 0LL; 
*( _OWORD *)&s->inUse[240] = 0LL; 
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b, __c;
  __m64 __b, __c;
  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __c = _mm_unpacklo_pi16(__a, __b);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
  __m64 __b;
  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);
  __b = _mm_unpacklo_pi8(__a, __b);
  return _mm_cvtpi16_ps(__b);
if ( mapSuffix( name, *( Char **)&BZ2_crc32Table[v8], v7) ) 
v57 = __CFADD__( v59 - avail_out, s->strm->total_out_lo32); 
