*( ( _OWORD *)p_nodes + 2) = 0LL; 
*( ( _OWORD *)p_nodes + 1) = 0LL; 
*( _OWORD *)p_nodes = 0LL; 
*( _OWORD *)( ( char *)&a1->cost + v10) = *( _OWORD *)( ( char *)&a1->cost + v8); 
*( _OWORD *)( ( char *)&a1->cost + v10) = *( _OWORD *)( ( char *)&a1->cost + v8); 
*( _OWORD *)( ( char *)&stop_arcs[-1].cost + v31) = *( _OWORD *)( ( char *)&stop_arcs->cost + v28); 
*( _OWORD *)( ( char *)&stop_arcs[-1].cost + v31) = *( _OWORD *)( ( char *)&stop_arcs->cost + v28); 
*( _OWORD *)( ( char *)&stop_arcs->cost + v25) = *( _OWORD *)( ( char *)&stop_arcs->cost + v23); 
*( _OWORD *)( ( char *)&stop_arcs->cost + v25) = *( _OWORD *)( ( char *)&stop_arcs->cost + v23); 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_403180); 
v16 = _mm_load_si128( ( const __m128i *)&xmmword_403190); 
v17 = _mm_shuffle_epi32( ( __m128i)( unsigned __int64)basket_0, 68); 
v18 = _mm_load_si128( ( const __m128i *)&xmmword_4031A0); 
v19 = _mm_load_si128( ( const __m128i *)&xmmword_4031B0); 
v20 = _mm_load_si128( ( const __m128i *)&xmmword_4031C0); 
v21 = _mm_load_si128( ( const __m128i *)&xmmword_4031D0); 
v22 = _mm_load_si128( ( const __m128i *)&xmmword_4031E0); 
v23 = _mm_load_si128( ( const __m128i *)&xmmword_4031F0); 
perm[349] = basket_0 + 8376; 
perm[350] = basket_0 + 8400; 
*( _OWORD *)&nodes->sibling = 0LL; 
*( ( _OWORD *)v8 + 5) = xmmword_403200; 
*( ( _OWORD *)v8 + 5) = xmmword_403200; 
*( _OWORD *)&nodes->firstout = 0LL; 
*( _OWORD *)( ( char *)&a2[-1].cost + v12) = *( _OWORD *)( ( char *)&a2->cost + v9); 
*( _OWORD *)( ( char *)&a2[-1].cost + v12) = *( _OWORD *)( ( char *)&a2->cost + v9); 
v12 = ( BASKET *)*( &net.checksum + v10--); 
*( &net.checksum + v11) = ( __int64)v9; 
v7 = *( _OWORD *)&v5->cost; 
v8 = *( _OWORD *)&v5->head; 
v9 = *( _OWORD *)&v5->nextout; 
*( _OWORD *)&v6->flow = *( _OWORD *)&v5->flow; 
*( _OWORD *)&v6->flow = *( _OWORD *)&v5->flow; 
*( _OWORD *)&v6->nextout = v9; 
*( _OWORD *)&v6->head = v8; 
*( _OWORD *)&v6->cost = v7; 
