if ( !working_area_initialized_6 ) 
working_area_initialized_6 = 1; 
memset( working_5, 0, sizeof( working_5)); 
memset( working_5, 0, sizeof( working_5)); 
queue_4[0] = pos; 
working_5[pos] = strength; 
v12 = dword_A5DF5C[v11]; 
v14 = dword_A5DF5C[v11]; 
v19 = working_5[v12] * inv_attenuation / 4096; 
v23 = working_5[v18]; 
queue_4[v80] = v18; 
working_5[v18] = v22 + v23; 
v28 = working_5[v24]; 
queue_4[v79] = v24; 
working_5[v24] = v27 + v28; 
v33 = working_5[v29]; 
queue_4[v78] = v29; 
working_5[v29] = v32 + v33; 
v38 = working_5[v34]; 
queue_4[v77] = v34; 
working_5[v34] = v37 + v38; 
v46 = working_5[v39]; 
queue_4[v47] = v39; 
working_5[v39] = v45 + v46; 
v54 = working_5[v48]; 
queue_4[v55] = v48; 
working_5[v48] = v53 + v54; 
v62 = working_5[v56]; 
queue_4[v63] = v56; 
working_5[v56] = v62 + v61; 
v70 = working_5[v64]; 
queue_4[v71] = v64; 
working_5[v64] = v70 + v69; 
for ( i = 0LL; ; v72 = queue_4[i] ) 
v74 = working_5[v72]; 
working_5[v72] = 0; 
if ( color != current_color_1 ) 
current_color_1 = color; 
if ( ( _BYTE)v6 != 3 && v6 != current_board_0[i] ) 
current_board_0[i] = v6; 
gg_sort( v8, v7, 4uLL, target_comp_func); 
gg_sort( attacks, v5, 0x14uLL, move_comp_func); 
v48 = CSWTCH_588[defense]; 
v44 = CSWTCH_588[defense]; 
v50 = ( const char *)&unk_4AE301; 
v50 = ( const char *)&unk_4AE355; 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4B0890); 
_OWORD *v4; // rax 
_OWORD *v4; // rax 
v4 = ( _OWORD *)( v3 - 480); 
v4 = ( _OWORD *)( v3 - 480); 
*( _OWORD *)( v3 - 552) = v0; 
*( _OWORD *)( v3 - 516) = v0; 
*( _OWORD *)( v3 - 500) = xmmword_4ADB20; 
*( _OWORD *)( v3 - 500) = xmmword_4ADB20; 
*v4++ = v2; 
while ( ( _OWORD *)v3 != v4 ); 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4B76D0); 
v32 = v25 + dword_785CFC[v30]; 
right = dword_785CFC[v420]; 
if ( cached_board_2[v5] != v10 ) 
cached_board_2[v5] = v10; 
*( _QWORD *)active_caches_1 = 0LL; 
if ( active_caches_1[v9] ) 
escape_value[i] = escape_values_0[2 * i + v8]; 
escape_values_0[2 * k + v8] = escape_value[k]; 
active_caches_1[v9] = 1; 
*value = ( eyevalue)v12; 
*value = ( eyevalue)33686018; 
*value = ( eyevalue)16842752; 
*value = ( eyevalue)16843009; 
*value = ( eyevalue)33686018; 
result_0, 
gprintf( " guess_eye - %s, pessimistic_min=%d\n", result_0, ( unsigned int)v25); 
gg_snprintf( result_0, 0x1DuLL, "%d%d%d%d", v40, ( unsigned int)v40, v41, v41); 
gg_snprintf( result_0, 0x1DuLL, "[%d, %d, %d, %d]", value->a); 
gg_snprintf( result_0, 0x1DuLL, "%d%d%d%d", value->a); 
gprintf( " graph matching - %s, pessimistic_min=%d\n", result_0, ( unsigned int)v25); 
memcpy( q, base, sizeof( influence_data)); 
v10 = ( unsigned __int8)byte_A2CADF[i]; 
+ COERCE_DOUBLE( *( _OWORD *)&_mm_cmpgt_sd( v92, v93) & 0x3FF0000000000000LL)) | *( _QWORD *)&v92.m128d_f64[0] & 0x8000000000000000LL; 
- COERCE_DOUBLE( *( _OWORD *)&_mm_cmpgt_sd( v100, v99) & 0x3FF0000000000000LL)) | *( _QWORD *)&v99.m128d_f64[0] & 0x8000000000000000LL; 
gprintf( "status=%s, escape=%d\n", snames_0[v1[4]], ( unsigned int)dragon2[*v1].escape_route); 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4AEC30); 
v46 = v44 + dword_785CFC[i]; 
v11 = ( unsigned int)dword_785CFC[v77]; 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4AEC30); 
v34 = dword_785CFC[v32]; 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4AEC30); 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4AEC40); 
v6 = &unk_A6E570; 
v24 = worms_2[0][v20 + v21]; 
worms_2[v17][v22] = v24; 
while ( worms_2[0][v23 + v11] != worms_2[0][v20 + v21] ) 
while ( worms_2[0][v23 + v11] != worms_2[0][v20 + v21] ) 
v36 = worms_2[v32 / 0x24]; 
while ( v36 != &dword_A6D9A4[v31 + ( unsigned int)( v35 - 1)] ); 
v41 = worms_2[0][v40++ + v32]; 
*v28 = worms_2[v25 / 0x24][0]; 
v28[1] = dword_A6D9A4[v25]; 
v28[2] = dword_A6D9A8[v25]; 
v28[3] = dword_A6D9AC[v25]; 
v28[4] = dword_A6D9B0[v25]; 
v28[v30] = worms_2[0][v30 + v25]; 
v17 = _mm_cvttps_epi32( _mm_mul_ps( *( __m128 *)&q->white_permeability[i], ( __m128)xmmword_4B08B0)); 
_mm_cvttpd_epi32( _mm_add_pd( _mm_cvtepi32_pd( v17), ( __m128d)xmmword_4B08C0)), 
_mm_cvttpd_epi32( _mm_add_pd( _mm_cvtepi32_pd( _mm_shuffle_epi32( v17, 238)), ( __m128d)xmmword_4B08C0))); 
v20 = _mm_cvttps_epi32( _mm_mul_ps( v19, ( __m128)xmmword_4B08B0)); 
_mm_cvttpd_epi32( _mm_add_pd( _mm_cvtepi32_pd( v20), ( __m128d)xmmword_4B08C0)), 
( __m128d)xmmword_4B08C0))); 
( __m128)xmmword_4B08D0); 
*( __m128 *)&q->black_influence[j] = _mm_mul_ps( _mm_cvtepi32_ps( v34), ( __m128)xmmword_4B08D0); 
memset( marked_3, 0, 0x190uLL); 
if ( board[v36] == 3 || marked_3[v36] ) 
marked_3[v36] = 1; 
if ( board[v49 + delta[0]] != 3 && !marked_3[v51] ) 
marked_3[v51] = 1; 
if ( board[v49 + delta[1]] != 3 && !marked_3[v58] ) 
marked_3[v58] = 1; 
if ( board[v49 + delta[2]] != 3 && !marked_3[v65] ) 
marked_3[v65] = 1; 
if ( board[v72] != 3 && !marked_3[v72] ) 
marked_3[v72] = 1; 
memset( marked_3, 0, 0x190uLL); 
while ( board[v80] == 3 || marked_3[v80] || !whose_moyo_restricted( v81, v80) ) 
marked_3[v80] = 1; 
if ( board[v89] != 3 && !marked_3[v89] && v104 == whose_moyo_restricted( v83, v89) ) 
marked_3[v89] = 1; 
memset( marked_3, 0, 0x190uLL); 
while ( board[v90] == 3 || marked_3[v90] || !whose_area( v91, v90) ) 
marked_3[v90] = 1; 
if ( board[v101] != 3 && !marked_3[v101] && v105 == whose_area( v99, v101) ) 
marked_3[v101] = 1; 
v15 = dword_785CFC[v13]; 
*( _OWORD *)&stats.nodes = 0LL; 
shape_moves[0].name = ( const char *)&unk_4B4F8D; 
if ( !mx_initialized_1 ) 
mx_initialized_1 = 1; 
memset( mx_0, 0, sizeof( mx_0)); 
memset( mx_0, 0, sizeof( mx_0)); 
mx_0[v4] = 1; 
if ( v13 != 3 && !mx_0[v12] ) 
mx_0[v12] = 1; 
if ( v19 != 3 && !mx_0[v18] ) 
mx_0[v18] = 1; 
if ( v25 != 3 && !mx_0[v24] ) 
mx_0[v24] = 1; 
if ( v31 != 3 && !mx_0[v30] ) 
mx_0[v30] = 1; 
if ( !mx_0[( int)v11 + 19] ) 
mx_0[v42] = 1; 
if ( !mx_0[( int)v11 - 21] ) 
mx_0[v44] = 1; 
if ( !mx_0[( int)v11 - 19] ) 
mx_0[v46] = 1; 
if ( !mx_0[( int)v11 + 21] ) 
mx_0[v48] = 1; 
if ( mx_0[v38] != 1 ) 
mx_0[v38] = 0; 
v10 = dword_785CFC[v7]; 
up = dword_785CFC[v7]; 
gg_snprintf( result_0, 0x1DuLL, "[%d, %d, %d, %d]", a, b, c, d); 
gg_snprintf( result_0, 0x1DuLL, "%d%d%d%d", a, b, c, d); 
return result_0; 
v20 = CSWTCH_588[defense]; 
savecode = CSWTCH_588[defense]; 
v16 = CSWTCH_588[v25]; 
savecode = CSWTCH_588[v25]; 
v18 = CSWTCH_588[v17]; 
savecode = CSWTCH_588[v17]; 
if ( ( byte_A2CADF[v9] == 3 || p_origin[171] != origin || *( ( _BYTE *)p_origin + 700)) 
if ( memcmp( v1, &unk_4BC167, 7uLL) ) 
v17[-1] = ( matched_pattern_data)_mm_loadu_si128( v13); 
$58E8A322B99FFF983766F42E1DE15117 v10; // r12d 
v10 = RETURN_IN_ORDER; 
v10 = REQUIRE_ORDER; 
v10 = REQUIRE_ORDER; 
v10 = PERMUTE; 
_getopt_initialized = 1; 
if ( !_getopt_initialized ) 
v10 = ordering; 
if ( v10 == PERMUTE ) 
if ( v10 ) 
if ( ( unsigned __int64)( ( char *)dword_BB8F1C - ( char *)state) <= 8 ) 
for ( i = 0LL; i != 25; dword_BB8F1C[i] = v9 ) 
while ( v1 != ( unsigned int *)&unk_BB8F84 ); 
qword_A2CC98[v0] = v5 | ( v6 << 32); 
*( __m128 *)routines = _mm_loadh_ps( ( const double *)off_4B1710); 
*( __m128 *)&routines[2] = _mm_loadh_ps( ( const double *)off_4B1718); 
*( __m128 *)&routines[4] = _mm_loadh_ps( ( const double *)&off_4B1720); 
*( __m128 *)&routines[6] = _mm_loadh_ps( ( const double *)&off_4B1728); 
if ( byte_A2CADF[i] != 3 ) 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4B0890); 
v15 = *( _OWORD *)&q->black_attenuation[v11 + 68 + v12]; 
*( _OWORD *)&moyos->territorial_value[v12 + 1] = v15; 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4AFA80); 
v5 = _mm_load_si128( ( const __m128i *)&xmmword_4AFA90); 
v6 = _mm_load_si128( ( const __m128i *)&xmmword_4AFAA0); 
v6 = _mm_load_si128( ( const __m128i *)&xmmword_4AFAA0); 
v5 = _mm_load_si128( ( const __m128i *)&xmmword_4AFA90); 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4AFA80); 
v1 = init_1; 
if ( !init_1 ) 
for ( i = ( _BYTE *)( buf_0 + 1); ; i += 5 ) 
strcpy( buf_0[0], "Pass"); 
init_1 = 1; 
return buf_0[v2]; 
*( _OWORD *)&b_eye[v5].color = 0LL; 
*( _OWORD *)&w_eye[v5].color = 0LL; 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4AFAB0); 
*( _OWORD *)( v10 + 48) = v12; 
*( _OWORD *)( v10 + 64) = v12; 
*( _OWORD *)( v10 + 80) = v12; 
*( _OWORD *)( v10 + 96) = v12; 
*( _OWORD *)( v10 + 112) = v12; 
*( _OWORD *)( v10 + 128) = v12; 
*( _OWORD *)( v10 + 144) = v12; 
*( _OWORD *)( v10 + 160) = v12; 
*( _OWORD *)( v10 + 176) = v12; 
*( _OWORD *)( v10 + 192) = v12; 
v23 = findlib( v21, 241, libs_1); 
v38 = ( unsigned __int8)byte_A2CADF[m]; 
v120 = findlib( i1, 241, libs_0); 
v127 = libs_0[v121]; 
v122 = libs_0[v121]; 
v122 = libs_0[v121]; 
v122 = libs_0[v121]; 
v122 = libs_0[v121]; 
v25 = libs_1[v24]; 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4B0890); 
si128 = _mm_load_si128( ( const __m128i *)&xmmword_4B0890); 
v4 = _mm_load_si128( ( const __m128i *)&xmmword_55F390); 
reduced_init_owl( &owl_0, 1); 
v14 = owl_0; 
owl_0->lunches_are_current = 0; 
compute_owl_escape_values( owl_0); 
v15 = owl_0; 
lunches_are_current = owl_0->lunches_are_current; 
current_owl_data = owl_0; 
owl_find_lunches( owl_0); 
v19 = owl_0; 
list_goal_worms( owl_0, &my_eye->color); 
v19 = owl_0; 
store_persistent_owl_cache( 1, v4, 0, 0, result, move, wpos, result_certain, v25, owl_0->goal, board[v4]); 
*( _OWORD *)( v3 - 192) = 0LL; 
*( _OWORD *)( v3 - 208) = 0LL; 
number_of_matches = 0; 
if ( !number_of_matches ) 
if ( number_of_matches <= 0 ) 
v3 = handicap_matches; 
v5 = 24LL * ( unsigned int)( number_of_matches - 1) + 10215832; 
v6 = handicap_matches; 
v11 = number_of_matches; 
if ( number_of_matches <= 0 || ( v12 = v10 % v7 - handicap_matches[0].value, v12 < 0) ) 
if ( number_of_matches <= 0 || ( v12 = v10 % v7 - handicap_matches[0].value, v12 < 0) ) 
v13 = ( _DWORD *)( handicap_matches + 24); 
while ( ++v14 != number_of_matches ) 
v15 = &handicap_matches[v11]; 
gtp_main_loop( commands_0, gtp_input); 
*( _OWORD *)best_moves = 0LL; 
*( _OWORD *)&best_moves[4] = 0LL; 
*( _OWORD *)best_move_values = 0LL; 
*( _OWORD *)&best_move_values[4] = 0LL; 
v27 = *( float *)&dword_A2B05C[v26]; 
v13 = dword_785CFC[v9]; 
v20 = dword_785CFC[v9]; 
if ( last_purge_position_number_0 != position_number ) 
last_purge_position_number_0 = position_number; 
if ( last_purge_position_number_1 != position_number ) 
last_purge_position_number_1 = position_number; 
v8 = ( struct local_owl_data *)memcpy( &v2[owl_stack_pointer], v3, sizeof( local_owl_data)); 
memcpy( v12, v11, sizeof( local_owl_data)); 
while ( byte_A6B97F[v31] ); 
if ( !byte_A6B97F[++v40] ) 
while ( byte_A6B97F[v53] ); 
while ( v1 != &number_of_matches ); 
v11 = ( void *__ptr32 *)&unk_4AF5DA; 
v11 = ( void *__ptr32 *)&unk_4AF5DA; 
v11 = &off_4AF5D6; 
v11 = &off_4AF5D6; 
fprintf_0( outfile, "owl_attack_certain %s\n", v11); 
v12 = ( void *__ptr32 *)&unk_4AF5DA; 
v12 = ( void *__ptr32 *)&unk_4AF5DA; 
v12 = &off_4AF5D6; 
v12 = &off_4AF5D6; 
fprintf_0( outfile, "owl_defense_certain %s\n", v12); 
memset( marked_3, 0, 0x190uLL); 
if ( board[v1] == 3 || marked_3[v1] ) 
marked_3[v1] = 1; 
if ( board[v18] != 3 && !marked_3[v18] ) 
marked_3[v18] = 1; 
if ( board[v15 + delta[1]] != 3 && !marked_3[v24] ) 
marked_3[v24] = 1; 
if ( board[v15 + delta[2]] != 3 && !marked_3[v30] ) 
marked_3[v30] = 1; 
if ( board[v31] != 3 && !marked_3[v31] ) 
marked_3[v31] = 1; 
memset( marked_3, 0, 0x190uLL); 
while ( board[v37] == 3 || marked_3[v37] || !whose_moyo_restricted( &initial_black_influence, v37) ) 
marked_3[v37] = 1; 
if ( board[v46] != 3 && !marked_3[v46] && v124 == whose_moyo_restricted( &initial_black_influence, v46) ) 
marked_3[v46] = 1; 
memset( marked_3, 0, 0x190uLL); 
while ( board[v47] == 3 || marked_3[v47] || !whose_area( &initial_black_influence, v47) ) 
marked_3[v47] = 1; 
if ( board[v56] != 3 && !marked_3[v56] && v125 == whose_area( &initial_black_influence, v56) ) 
marked_3[v56] = 1; 
memset( marked_3, 0, 0x190uLL); 
if ( board[v58] == 3 || marked_3[v58] ) 
marked_3[v58] = 1; 
if ( board[v75] != 3 && !marked_3[v75] ) 
marked_3[v75] = 1; 
if ( board[v72 + delta[1]] != 3 && !marked_3[v81] ) 
marked_3[v81] = 1; 
if ( board[v72 + delta[2]] != 3 && !marked_3[v87] ) 
marked_3[v87] = 1; 
if ( board[v88] != 3 && !marked_3[v88] ) 
marked_3[v88] = 1; 
memset( marked_3, 0, 0x190uLL); 
while ( board[v94] == 3 || marked_3[v94] || !whose_moyo_restricted( &initial_white_influence, v94) ) 
marked_3[v94] = 1; 
if ( board[v103] != 3 && !marked_3[v103] && v126 == whose_moyo_restricted( &initial_white_influence, v103) ) 
marked_3[v103] = 1; 
memset( marked_3, 0, 0x190uLL); 
while ( board[v104] == 3 || marked_3[v104] || !whose_area( &initial_white_influence, v104) ) 
marked_3[v104] = 1; 
if ( board[v113] != 3 && !marked_3[v113] && v127 == whose_area( &initial_white_influence, v113) ) 
marked_3[v113] = 1; 
return ( const char *)*( &CSWTCH_50 + ( unsigned int)result); 
result = ( const char *)&unk_4B09D9; 
result = ( const char *)&unk_4B09C1; 
if ( !initialized_0 ) 
*( _OWORD *)v2 = -1LL; 
initialized_0 = 1; 
result = ( const char *)&unk_4B0989; 
result = ( const char *)&unk_4B09A7; 
v8 = 1000 * node_limits_0[10 - level] / 500; 
v2 = &local_tree_0; 
v22 = snames_2[*( ( int *)v18 + 15)]; 
v23 = snames_2[*( ( int *)v18 + 4)]; 
gprintf( ", owl status %s\n", snames_2[*( ( int *)v18 + 6)]); 
if ( stone_count_for_position_2 != position_number ) 
white_stones_1 = 0; 
black_stones_0 = 0; 
white_stones_1 = v6; 
black_stones_0 = v4; 
stone_count_for_position_2 = position_number; 
result = black_stones_0; 
result += white_stones_1; 
*( _OWORD *)v6 = xmmword_4B08A0; 
|| byte_A2CADF[v26] != 3 && ( v19 = ( unsigned int)v25[19], ( _DWORD)v19 == v24) 
get_move_from_stack( 0, ( int *)&unk_9D420C + v12 * 119 + 114, persistent_reading_cache[v12].move_color); 
get_move_from_stack( 1, ( int *)&unk_9D420C + v40 + 115, &persistent_reading_cache[0].move_color[v40 + 1]); 
get_move_from_stack( 2, ( int *)&unk_9D420C + v40 + 116, &persistent_reading_cache[0].move_color[v40 + 2]); 
get_move_from_stack( 3, ( int *)&unk_9D420C + v40 + 117, &persistent_reading_cache[0].move_color[v40 + 3]); 
get_move_from_stack( 4, ( int *)&unk_9D420C + v40 + 118, &persistent_reading_cache[0].move_color[v40 + 4]); 
|| byte_A2CADF[v22] != 3 && v23[19] == 1 
v1 = spiral; 
v72 = _mm_srli_epi64( _mm_load_si128( ( const __m128i *)&xmmword_5196C0), 0x20u); 
v73 = _mm_srli_epi64( _mm_load_si128( ( const __m128i *)&xmmword_5196D0), 0x20u); 
v74 = _mm_srli_epi64( _mm_load_si128( ( const __m128i *)&xmmword_5196E0), 0x20u); 
v75 = _mm_srli_epi64( _mm_load_si128( ( const __m128i *)&xmmword_5196F0), 0x20u); 
v76 = _mm_srli_epi64( _mm_load_si128( ( const __m128i *)&xmmword_519700), 0x20u); 
v77 = _mm_srli_epi64( _mm_load_si128( ( const __m128i *)&xmmword_519710), 0x20u); 
v78 = _mm_srli_epi64( _mm_load_si128( ( const __m128i *)&xmmword_519720), 0x20u); 
v79 = _mm_srli_epi64( _mm_load_si128( ( const __m128i *)&xmmword_519730), 0x20u); 
v80[0] = _mm_srli_epi64( _mm_load_si128( ( const __m128i *)&xmmword_519740), 0x20u); 
_mm_shuffle_epi32( _mm_mul_epu32( v10, ( __m128i)xmmword_5196C0), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v13, ( __m128i)xmmword_5196C0), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v10, ( __m128i)xmmword_5196D0), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v13, ( __m128i)xmmword_5196D0), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v10, ( __m128i)xmmword_5196E0), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v13, ( __m128i)xmmword_5196E0), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v10, ( __m128i)xmmword_5196F0), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v13, ( __m128i)xmmword_5196F0), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v10, ( __m128i)xmmword_519700), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v13, ( __m128i)xmmword_519700), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v10, ( __m128i)xmmword_519710), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v13, ( __m128i)xmmword_519710), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v10, ( __m128i)xmmword_519720), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v13, ( __m128i)xmmword_519720), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v10, ( __m128i)xmmword_519730), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v13, ( __m128i)xmmword_519730), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v10, ( __m128i)xmmword_519740), 8), 
_mm_shuffle_epi32( _mm_mul_epu32( v13, ( __m128i)xmmword_519740), 8), 
v10[0] = ( __int128)_mm_loadh_ps( ( const double *)off_4B4C10); 
v10[1] = ( __int128)_mm_loadh_ps( ( const double *)off_4B4C18); 
v10[2] = ( __int128)_mm_loadh_ps( ( const double *)&off_4B4C20); 
*( __m128 *)dest = _mm_loadh_ps( ( const double *)off_4B4C10); 
v22 = _mm_loadh_ps( ( const double *)off_4B4C18); 
v23 = _mm_loadh_ps( ( const double *)&off_4B4C20); 
*( __m128 *)dest = _mm_loadh_ps( ( const double *)off_4B4C10); 
v22 = _mm_loadh_ps( ( const double *)off_4B4C18); 
v23 = _mm_loadh_ps( ( const double *)&off_4B4C20); 
fprintf( outputfile, off_4B091C, *v29); 
