['if ( !working_area_initialized_6 )']
['v1 = black_stones_0;', 'v2 = white_stones_1;']
['if ( !working_area_initialized_6 )']
['working_area_initialized_6 = 1;']
['queue_4[0] = pos;']
['working_5[pos] = strength;']
['v4 = off_58C41A;', 'v4 = off_58C41A;']
['working_5[pos] = strength;']
['influence[iib] += working_5[iib];']
['queue_4[queue_end++] = iia + delta[d];', 'queue_4[queue_end++] = iia + delta[d];']
['working_5[ii] = 0;', 'working_5[pos] = strength;', 'working_5[iib] = 0;']
['influence[iib] += working_5[iib];']
['queue_4[queue_end++] = iia + delta[d];', 'queue_4[queue_end++] = iia + delta[d];']
['working_5[ii] = 0;', 'working_5[pos] = strength;', 'working_5[iib] = 0;']
['iib = queue_4[k];']
['influence[iib] += working_5[iib];']
['working_5[ii] = 0;', 'working_5[iib] = 0;']
['w = worms_2[pos][k];']
['if ( board[pos] != 3 && board[pos] != current_board_0[pos] )']
['v2 = &off_4DA70C;', 'v2 = &off_4DA70C;']
['v2 = &off_4DA70C + 2;', 'v2 = &off_4DA70C + 2;', 'v4 = off_58C41A + 2;', 'v4 = off_58C41A + 2;', 'v10 = &off_4D4BBC + 2;', 'v10 = &off_4D4BBC + 2;']
['w = worms_2[pos][k];']
['if ( cached_board_2[ii] != board[ii] )']
['cached_board_2[ii] = board[ii];']
['active_caches_1[k] = 0;']
['working_5[iib] = 0;']
['if ( active_caches_1[color == 1] )']
['escape_value[iia] = escape_values_0[2 * iia + ( color == 1)];']
['escape_values_0[2 * iic + ( color == 1)] = escape_value[iic];']
['active_caches_1[color == 1] = 1;']
['memcpy( q, base, sizeof( influence_data));']
['v8 = ( const char *)&unk_4DD54F;', 'v9 = ( const char *)&off_4D505A;', 'v9 = ( const char *)&unk_4D505E;', 'v1 = ( const char *)&off_4D6806;']
['memset( mx_0, 0, sizeof( mx_0));', 'memset( mx_0, 0, sizeof( mx_0));', 'v1 = ( void *__ptr32 *)( unsigned int)( count_variations - 1);', 'v7 = ( _BYTE *)( &off_4E1420 + 2);', 'location_to_buffer( pos_0, &buf_0[5 * pos_0]);', 'result = do_owl_defend( target, &move, &wid, owl_0, 0, 0, 0);', 'owl_node_limit = 1000 * node_limits_0[10 - level] / node_limits_0[0];', 'owl_node_limit = 1000 * node_limits_0[10 - level] / node_limits_0[0];']
['v1 = ( void *__ptr32 *)( unsigned int)( count_variations - 1);', 'v7 = ( _BYTE *)( &off_4E1420 + 2);', 'result = do_owl_defend( target, &move, &wid, owl_0, 0, 0, 0);', 'owl_node_limit = 1000 * node_limits_0[10 - level] / node_limits_0[0];', 'owl_node_limit = 1000 * node_limits_0[10 - level] / node_limits_0[0];']
['if ( cached_board_2[ii] != board[ii] )', 'if ( worms_2[pos][l] == worms_2[pos2][k] )', 'if ( worms_2[pos][l] == worms_2[pos2][k] )']
['if ( active_caches_1[color == 1] )', 'if ( mx_0[queue[k]] != 1 )']
['v0 = &byte_4E235E;', '&& !mx_0[ii + 20]', '&& !mx_0[ii - 1]', '&& !mx_0[ii - 20]', '&& !mx_0[ii + 1]', '&& !mx_0[ii + 19]', '&& !mx_0[ii - 21]', '&& !mx_0[ii - 19]', '&& !mx_0[ii + 21]']
['gprintf( ", owl status %s\\n", snames_2[dragon[posa].owl_status]);']
['v10 = &off_4D4BBC + 2;', 'v10 = &off_4D4BBC + 2;']
['w = worms_2[pos][k];', 'v4 = off_58C41A;', 'v4 = off_58C41A + 2;', 'v4 = off_58C41A;', 'v4 = off_58C41A + 2;', 'v10 = &off_4D4BBC;', 'v10 = &off_4D4BBC;', 'v10 = &off_4D4BBC + 2;', 'v10 = &off_4D4BBC + 2;']
['w = worms_2[pos][k];']
['current_color_1 = color;']
['current_board_0[pos] = board[pos];']
['memcpy( &owl_stack[++owl_stack_pointer], *owl, sizeof( local_owl_data));']
['memcpy( &owl_stack[++owl_stack_pointer], *owl, sizeof( local_owl_data));']
['fwrite( &unk_4DD750, 1uLL, 2uLL, outfile);', 'memset( marked_3, 0, sizeof( marked_3));', 'memset( marked_3, 0, sizeof( marked_3));']
['gg_snprintf( result_0, 0x1DuLL, "%d%d%d%d", e->a, e->b, e->c, e->d);']
['nextchar = ( char *)&unk_58C728;']
['gprintf( "%o\\n", v1);']
['gtp_main_loop( commands_0, gtp_input);']
['gprintf( "%o ( variation %d)", v1, v0);', 'gprintf( "%o\\n", v1);']
['v1 = ( void *__ptr32 *)( unsigned int)( count_variations - 1);']
['v8 = ( const char *)&unk_4D505E;', 'v9 = ( const char *)&unk_4D505E;']
['v9 = ( const char *)&unk_4D505E;']
['worms_2[pos][0] = worm[pos].origin;', 'worms_2[pos][nworms[pos]++] = worms_2[pos2][k];', 'worms_2[pos][nworms[pos]++] = worms_2[pos2][k];']
['worms_2[pos][0] = worm[pos].origin;', 'worms_2[pos][nworms[pos]++] = worms_2[pos2][k];', 'worms_2[pos][nworms[pos]++] = worms_2[pos2][k];']
['if ( worms_2[pos][l] == worms_2[pos2][k] )', 'if ( worms_2[pos][l] == worms_2[pos2][k] )']
['gprintf( "%o%s:%1m ", v2, ( const char *)( unsigned int)stack[n]);', 'v1 = ( void *__ptr32 *)( unsigned int)( count_variations - 1);']
['w = worms_2[pos][k];']
['w = worms_2[pos][k];']
['w = worms_2[pos][k];', 'v10 = &off_4D4BBC;', 'v10 = &off_4D4BBC;']
['routines[10] = ( const char *)&unk_4D6FAA;']
['memcpy( q, base, sizeof( influence_data));']
['if ( !mx_initialized_1 )']
['memset( mx_0, 0, sizeof( mx_0));', 'memset( mx_0, 0, sizeof( mx_0));']
['memset( mx_0, 0, sizeof( mx_0));', 'memset( mx_0, 0, sizeof( mx_0));']
['mx_initialized_1 = 1;']
['mx_0[ii] = 1;']
['if ( color != current_color_1 )']
['mx_0[ii] = 1;']
['if ( *commanda == aHelp_1[0] )']
['mx_0[ii] = 1;']
['if ( worms_2[pos][l] == worms_2[pos2][k] )', 'if ( worms_2[pos][l] == worms_2[pos2][k] )']
['mx_0[ii] = 1;']
['if ( *commanda == aHelp_1[0] )']
['mx_0[ii] = 1;']
['&& !mx_0[ii + 19]']
['mx_0[ii] = 1;']
['&& !mx_0[ii - 21]']
['mx_0[ii] = 1;']
['&& !mx_0[ii - 19]']
['mx_0[ii] = 1;']
['&& !mx_0[ii + 21]']
['mx_0[ii] = 1;']
['if ( mx_0[queue[k]] != 1 )']
['mx_0[ii] = 1;']
['w = worms_2[pos][k];']
['w = worms_2[pos][k];']
['w = worms_2[pos][k];']
['w = worms_2[pos][k];']
['memset( mx_0, 0, sizeof( mx_0));', 'memset( mx_0, 0, sizeof( mx_0));']
['gg_snprintf( result_0, 0x1DuLL, "%d%d%d%d", e->a, e->b, e->c, e->d);']
['gg_snprintf( result_0, 0x1DuLL, "[%d, %d, %d, %d]", e->a, e->b, e->c, e->d);']
['return result_0;']
['gprintf( "%o ( variation %d)", v1, v0);']
['v2 = &off_4DA70C;', 'v2 = &off_4DA70C;']
['if ( board[ii] != 3 && !marked_3[ii] && region_owner( q, ii) )']
['if ( !working_area_initialized_6 )']
['if ( color != current_color_1 )']
['current_board_0[pos] = board[pos];']
['current_color_1 = color;']
['gprintf( &byte_4D69ED);']
['if ( active_caches_1[color == 1] )', 'if ( mx_0[queue[k]] != 1 )', 'if ( color != current_color_1 )']
['v2 = &off_4DA70C + 2;', 'v2 = &off_4DA70C + 2;']
['if ( !mx_initialized_1 )']
['_getopt_initialized = 1;']
['v1 = v2;', 'v1 = v2;']
['if ( color != current_color_1 )']
['nextchar = ( char *)&unk_58C728;']
['v1 = ( void *__ptr32 *)( unsigned int)( count_variations - 1);']
['return gtp_success( &byte_4E1A32);', 'return gtp_success( &byte_4E1A32);']
['return gtp_success( &byte_4E1A32);', 'return gtp_success( &byte_4E1A32);']
['aa = libs_0[k];']
['if ( *commanda == aHelp_1[0] )']
['return gtp_success( &byte_4E1A32);', 'return gtp_success( &byte_4E1A32);']
['return gtp_success( &byte_4E1A32);', 'return gtp_success( &byte_4E1A32);']
['return gtp_success( &byte_4E1A32);', 'return gtp_success( &byte_4E1A32);']
['return gtp_success( &byte_4E1A32);', 'return gtp_success( &byte_4E1A32);']
['return gtp_success( &byte_4E1A32);', 'return gtp_success( &byte_4E1A32);']
['return gtp_success( &byte_4E1A32);', 'return gtp_success( &byte_4E1A32);']
['return gtp_success( &byte_4E1A32);', 'return gtp_success( &byte_4E1A32);']
['return gtp_success( &byte_4E1A32);', 'return gtp_success( &byte_4E1A32);']
['return gtp_success( &byte_4E1A32);', 'return gtp_success( &byte_4E1A32);']
['routines[10] = ( const char *)&unk_4D6FAA;']
['routines[11] = ( const char *)&unk_4D6FAA;']
['routines[12] = ( const char *)&unk_4D6FAA;']
['routines[13] = ( const char *)&unk_4D6FAA;']
['routines[14] = ( const char *)&unk_4D6FAA;']
['routines[15] = ( const char *)&unk_4D6FAA;']
['if ( mx_0[queue[k]] != 1 )']
['if ( !init_1 )']
['if ( !init_1 )']
['v2 = &off_4DA70C;', 'v2 = &off_4DA70C;']
['init_1 = 1;']
['location_to_buffer( pos_0, &buf_0[5 * pos_0]);']
['liberties = findlib( str, 241, libs_1);']
['pos = libs_1[k];']
['if ( mx_0[queue[k]] != 1 )']
['v1 = ( void *__ptr32 *)( unsigned int)( count_variations - 1);']
['liberties = findlib( str, 241, libs_0);']
['aa = libs_0[k];']
['aa = libs_0[k];', 'bb = libs_0[k] + delta[l];']
['w = worms_2[pos][k];']
['v4 = ( const char *)&unk_4D382E;', 'v8 = ( const char *)&unk_4DD54F;']
['init_owl( &owl_0, target, 0, 0, 1);']
['owl_make_domains( owl_0, 0LL);']
['prepare_goal_list( target, owl_0, owl_goal_worm, &goal_worms_computed, kworm, 1);']
['result = do_owl_defend( target, &move, &wid, owl_0, 0, 0, 0);']
['owl_0->goal,']
['white_stones_1 = 0;', 'black_stones_0 = 0;']
['if ( !working_area_initialized_6 )']
['if ( mx_0[queue[k]] != 1 )']
['v1 = black_stones_0;', 'v2 = white_stones_1;']
['v1 = ( void *__ptr32 *)( unsigned int)( count_variations - 1);']
['v1 = black_stones_0;', 'v2 = white_stones_1;']
['v10 = &off_4D4BBC;', 'v10 = &off_4D4BBC;', 'v1 = black_stones_0;']
['if ( mx_0[queue[k]] != 1 )']
['v1 = black_stones_0;']
['v7 = ( _BYTE *)( &off_4E1420 + 2);']
['if ( color != current_color_1 )']
['active_caches_1[k] = 0;']
['v1 = black_stones_0;', 'v2 = white_stones_1;']
['current_color_1 = color;']
['current_color_1 = color;']
['if ( board[pos] != 3 && board[pos] != current_board_0[pos] )']
['current_board_0[pos] = board[pos];']
['command = strtok( line_ptr, &byte_4E235E);']
['gtp_main_loop( commands_0, gtp_input);']
['gprintf( "%o ( variation %d)", v1, v0);']
['v7 = ( _BYTE *)( &off_4E1420 + 2);']
['w = worms_2[pos][k];', 'v2 = &off_4DA70C;', 'v2 = &off_4DA70C;', 'v2 = &off_4DA70C + 2;', 'v2 = &off_4DA70C + 2;', 'v4 = off_58C41A;', 'v4 = off_58C41A + 2;', 'v4 = off_58C41A;', 'v4 = off_58C41A + 2;']
['if ( last_purge_position_number_0 != position_number )']
['last_purge_position_number_0 = position_number;']
['if ( last_purge_position_number_1 != position_number )']
['last_purge_position_number_1 = position_number;']
['if ( !working_5[delta[d] + iia] )', 'if ( !working_5[delta[d] + iia] )']
['v1 = black_stones_0;']
['v1 = ( const char *)&off_4D6806;']
['v4 = ( const char *)&unk_4D382E;', 'v8 = ( const char *)&unk_4DD54F;']
['v1 = ( const char *)&off_4D6806;']
['v4 = ( const char *)&unk_4D382E;', 'v8 = ( const char *)&unk_4DD54F;']
['reason = ( const char *)&unk_4DB1CE;']
['reason = ( const char *)&unk_4DB1CE;']
['if ( !initialized_0 )']
['initialized_0 = 1;']
['reason = ( const char *)&unk_4DB1CE;']
['reason = ( const char *)&unk_4DB1CE;']
['gprintf( "%o%s:%1m ", v2, ( const char *)( unsigned int)stack[n]);']
['memset( marked_3, 0, sizeof( marked_3));', 'memset( marked_3, 0, sizeof( marked_3));']
['memset( marked_3, 0, sizeof( marked_3));', 'memset( marked_3, 0, sizeof( marked_3));']
['marked_3[ii] = 1;']
['marked_3[ii] = 1;']
['if ( board[ii] != 3 && !marked_3[ii] && region_owner( q, ii) )']
['marked_3[ii] = 1;']
['owl_node_limit = 1000 * node_limits_0[10 - level] / node_limits_0[0];', 'owl_node_limit = 1000 * node_limits_0[10 - level] / node_limits_0[0];']
['sgf_dumptree = &local_tree_0;']
['v6 = snames_2[dragon[posa].status];']
['v6 = snames_2[dragon[posa].status];']
['gprintf( ", owl status %s\\n", snames_2[dragon[posa].owl_status]);']
['if ( stone_count_for_position_2 != position_number )']
['white_stones_1 = 0;']
['black_stones_0 = 0;']
['white_stones_1 = 0;']
['black_stones_0 = 0;']
['stone_count_for_position_2 = position_number;']
['v1 = black_stones_0;']
['v2 = white_stones_1;']
['mx_0[ii + 19] = 1;', 'mx_0[ii - 21] = 1;', 'mx_0[ii - 19] = 1;', 'mx_0[ii + 21] = 1;']
['mx_0[ii + 19] = 1;', 'mx_0[ii - 21] = 1;', 'mx_0[ii - 19] = 1;', 'mx_0[ii + 21] = 1;']
['gprintf( off_4D69FE);']
