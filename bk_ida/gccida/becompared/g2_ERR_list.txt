['p_free_buffs = ( _cpp_buff_0 *)&pfile->free_buffs;']
['result = ( _cpp_buff_0 *)&v6[( min_size + 7) & 0xFFFFFFFFFFFFFFF8LL];']
['v9 = ( tokenrun_0 *)xmalloc( 0x20uLL);']
['v11 = ( cpp_token_0 *)xmalloc( 0x1770uLL);']
['fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");']
['v25 = gen_rtx_MEM( ( machine_mode)*( ( unsigned __int8 *)v25 + 2), fixed);']
['tree_node *elements; // rdi']
['fancy_abort( ( const char *)&a, 9320, "add_byte_size_attribute");']
['elements = result->vector.elements;']
['if ( elements )']
['if ( host_integerp( elements, 1) )']
['fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");']
['fancy_abort( ( const char *)&a, 8599, "add_data_member_location_attribute");']
['if ( v10 == reverse_condition( ( rtx_code)*( _WORD *)v8)']
['*hv = ( __PAIR128__( h2, l2) + *( _OWORD *)&l1) >> 64;']
['return ( ( ( ( __PAIR128__( h2, l2) + *( _OWORD *)&l1) >> 64) ^ v6) & ~( v6 ^ h2)) >> 63;']
['v0 = label_num_59++;']
['return label_58;']
['v0 = label_num_59++;']
['sprintf( label_58, "*.%s%u", "LCFI", v0);']
['assemble_name( asm_out_file, label_58);']
['v7 = ( tree_node *)( ( unsigned __int64)width | ( unsigned __int64)declarator);']
['fancy_abort( ( const char *)&a, 8989, "add_location_or_const_value_attribute");', 'fancy_abort( ( const char *)&a, 8989, "add_location_or_const_value_attribute");']
['if ( *( _WORD *)last_insn != 34 )', 'if ( *( _WORD *)pool_constant_mark != 68 )']
['fancy_abort( ( const char *)&a, 9320, "add_byte_size_attribute");']
['fancy_abort( ( const char *)&a, 8989, "add_location_or_const_value_attribute");', 'fancy_abort( ( const char *)&a, 8989, "add_location_or_const_value_attribute");']
['fancy_abort( ( const char *)&a, 8989, "add_location_or_const_value_attribute");', 'fancy_abort( ( const char *)&a, 8989, "add_location_or_const_value_attribute");']
['fancy_abort( ( const char *)&a, 8989, "add_location_or_const_value_attribute");', 'fancy_abort( ( const char *)&a, 8989, "add_location_or_const_value_attribute");']
['rtx v10; // r13', 'rtx v13; // r14', 'rtx v16; // r14', 'rtx v12; // r14', 'rtx v10; // r13', 'rtx v40; // r14', 'rtx v14; // r14', 'rtx v40; // r14', 'rtx v10; // r12']
['rtx v14; // r12']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx last_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx *single_use; // rax', 'rtx nonnote_insn; // rax', 'rtx init_insns; // rax', 'rtx last_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx last_insn; // rax', 'rtx active_insn; // rax']
['rtx *v24; // r12', 'rtx *v24; // r12']
['rtx v25; // rax', 'rtx v25; // rax', 'rtx v25; // rax', 'rtx v25; // rax']
['rtx v310; // rax']
['rtx v35; // rax', 'rtx v35; // rax', 'rtx v35; // rax', 'rtx v35; // rax', 'rtx v35; // rax']
['rtx addra; // [rsp+8h] [rbp-40h]']
['rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax']
['v7 = gen_rtx_fmt_e0( MEM, v4, rtx);', 'v5 = gen_rtx_fmt_e0( MEM, v3, rtx);']
['*( _QWORD *)&v7[1] = 0LL;', '*( _QWORD *)&v5[1] = 0LL;']
['tem = v20;']
['LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v7 + 3) & 0xF7;', 'LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v7 + 3) & 0xF7;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v5 + 3) & 0xF7;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v5 + 3) & 0xF7;']
['LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v7 + 3) & 0xF7;', 'LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v7 + 3) & 0xF7;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v5 + 3) & 0xF7;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v5 + 3) & 0xF7;']
['*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;']
['LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v7 & 0xEF;', 'LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v7 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;']
['LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v7 & 0xEF;', 'LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v7 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;']
['*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;']
['LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x80 | ( unsigned __int8)v5 & 0x7F;']
['LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x80 | ( unsigned __int8)v5 & 0x7F;']
['*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;']
['LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v7 & 0xEF;', 'LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v7 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x80 | ( unsigned __int8)v5 & 0x7F;']
['LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v7 & 0xEF;', 'LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v7 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x80 | ( unsigned __int8)v5 & 0x7F;']
['*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;']
['( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),']
['return gen_rtx_fmt_ee( EXPR_LIST, ( machine_mode)kind, val, next);']
['v7 = ( rtx *)( v5->fld[0].rtwint + 8);', 'v7 = ( rtx *)( v5->fld[0].rtwint + 8);']
['v7 = ( rtx *)( v5->fld[0].rtwint + 8);', 'v7 = ( rtx *)( v5->fld[0].rtwint + 8);']
['rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax']
['rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax']
['v6 = convert_to_mode( ( machine_mode)v8, v6, 1);']
['v29 = force_reg( ( machine_mode)v15, v10);']
['v6 = v10;']
['v3 = gen_reg_rtx( ( machine_mode)v11);']
['( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),']
['emit_cmp_and_jump_insns( v25, v6, GEU, 0LL, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), 1, v24);']
['( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),']
['v21 = expand_divmod( 0, TRUNC_DIV_EXPR, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v19, v20, 0LL, 1);']
['v3 = expand_mult( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v21, v22, 0LL, 1);']
['v15 = *( ( unsigned __int16 *)&insn_data_0[1234].operand[1] + 8);']
['predicate = insn_data_0[1234].operand[1].predicate;']
['v12 = assign_stack_local( ( machine_mode)v8, v10, -( v7 > v9));']
['v12 = assign_stack_local( ( machine_mode)v8, v10, -( v10 != v9));']
['v18 = adjust_address_1( v12, ( machine_mode)v8, 0LL, 0, 1);']
['result = simplify_subreg( v5, v3.rtx, ( machine_mode)*( unsigned __int8 *)( v3.rtwint + 2), v4);']
['rtx base_term; // rax', 'rtx base_term; // rax']
['base_term = find_base_term( addr_0);']
['if ( base_term )', 'if ( base_term )', 'if ( base_term )']
['if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )', 'if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )', 'if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )', 'if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )']
['if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )', 'if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )', 'if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )', 'if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['( machine_mode)*( ( unsigned __int8 *)mem + 2)) )']
['result = size_11;']
['if ( size_11 < 0 )']
['size_11 = v1;']
['size_11 = 2 * v1;']
['return size_11;']
['if ( ( unsigned int)( mode_class_0[( int)v9] - 5) > 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['while ( !ix86_hard_regno_mode_ok( i, ( machine_mode)v12) )']
['if ( have_insn_for( SET, ( machine_mode)v12) )']
['while ( !ix86_hard_regno_mode_ok( i, ( machine_mode)v13) )']
['if ( have_insn_for( SET, ( machine_mode)v13) )']
['while ( !ix86_hard_regno_mode_ok( i, ( machine_mode)v14) )']
['if ( have_insn_for( SET, ( machine_mode)v14) )']
['v10 = size_11;']
['rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax']
['v18 = gen_rtx_fmt_E( PARALLEL, VOIDmode, v17);']
['rtwint = ( int *)v18->fld[0].rtwint;']
['rtx = v9;', 'rtx = v9;', 'rtx = v12;']
['while ( v1 != ( change_t_0 *)v2 );']
['if ( !legitimate_address_p( ( machine_mode)*( ( unsigned __int8 *)object + 2), rtx, 0) )']
['v5 = gen_reg_rtx( ( machine_mode)v4);']
['rtx v5; // rbx']
['rtx v6; // r13']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['if ( ( mode_class_0[*( ( unsigned __int8 *)x + 2)] & 0xFFFFFFFB) == 2 )']
['if ( *( _WORD *)v9 == 55 && mode_class_0[*( ( unsigned __int8 *)v8 + 2)] == MODE_FLOAT )']
['v5 = expand_compound_operation( rtx);']
['v6 = expand_compound_operation( v4);']
['v7 = *( _WORD *)v5;']
['if ( ( _WORD)v7 != *( _WORD *)v6 )']
['if ( *( _BYTE *)( v5->fld[0].rtwint + 2) != *( _BYTE *)( v6->fld[0].rtwint + 2) )', 'if ( *( _BYTE *)( v5->fld[0].rtwint + 2) != *( _BYTE *)( v6->fld[0].rtwint + 2) )']
['if ( *( _BYTE *)( v5->fld[0].rtwint + 2) != *( _BYTE *)( v6->fld[0].rtwint + 2) )', 'if ( *( _BYTE *)( v5->fld[0].rtwint + 2) != *( _BYTE *)( v6->fld[0].rtwint + 2) )']
['if ( v5[1] != v6[1] )', 'if ( v5[1] != v6[1] )']
['result = size_5;']
['if ( size_5 < 0 )']
['size_5 = 0;']
['if ( ix86_hard_regno_mode_ok( i, ( machine_mode)v2) )']
['while ( !ix86_hard_regno_mode_ok( i, ( machine_mode)v6) )']
['if ( have_insn_for( SET, ( machine_mode)v6) )']
['while ( !ix86_hard_regno_mode_ok( i, ( machine_mode)v7) )']
['if ( have_insn_for( SET, ( machine_mode)v7) )']
['while ( !ix86_hard_regno_mode_ok( i, ( machine_mode)v8) )']
['if ( have_insn_for( SET, ( machine_mode)v8) )']
['v5 = size_5;']
['if ( size_5 % ( int)( mode_alignment >> 3) )']
['v5 = ( mode_alignment >> 3) * ( ( int)( size_5 + ( mode_alignment >> 3) - 1) / ( int)( mode_alignment >> 3));']
['size_5 = mode_size[v3] + v5;']
['if ( ( sch_istable[v6] & 4) == 0 )']
['while ( ( sch_istable[v8] & 4) != 0 );', 'while ( ( sch_istable[v7] & 4) != 0 );']
['rtx start; // rbp']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['rtx v9; // rax', 'rtx v9; // rax', 'rtx v9; // rax', 'rtx v9; // rax']
['start = loop->start;']
['nonnote_insn = prev_nonnote_insn( end);']
['v6 = nonnote_insn;']
['if ( *( _WORD *)nonnote_insn == 35 )', 'if ( *( _WORD *)nonnote_insn == 35 )']
['v6 = (  struct rtx_def *)nonnote_insn[1];']
['if ( start != rtx )']
['if ( start == v8 )']
['v9 = start;', 'v9 = start;']
['v9 = start;', 'v9 = start;']
['v9 = v9[1].fld[0].rtx;', 'v9 = v9[1].fld[0].rtx;', 'v9 = v9[1].fld[0].rtx;', 'v9 = v9[1].fld[0].rtx;']
['v9 = v9[1].fld[0].rtx;', 'v9 = v9[1].fld[0].rtx;', 'v9 = v9[1].fld[0].rtx;', 'v9 = v9[1].fld[0].rtx;']
['if ( v9 == rtx )']
['return mode_class_0[*( ( unsigned __int8 *)op + 2)] == MODE_FLOAT;', 'return mode_class_0[*( ( unsigned __int8 *)op + 2)] == MODE_FLOAT;']
['return mode_class_0[*( ( unsigned __int8 *)op + 2)] == MODE_FLOAT;', 'return mode_class_0[*( ( unsigned __int8 *)op + 2)] == MODE_FLOAT;']
['*( _OWORD *)&e->src = 0LL;', '*( _OWORD *)&e->insns = 0LL;', '*( _OWORD *)&e->flags = 0LL;']
['if ( *( _OWORD *)v6->bits != 0LL )']
['*( _OWORD *)&v7->src = 0LL;', '*( _OWORD *)&v7->insns = 0LL;', '*( _OWORD *)&e->src = 0LL;', '*( _OWORD *)&e->insns = 0LL;', '*( _OWORD *)&e->flags = 0LL;']
['*( _OWORD *)( object_base + 24) = 0LL;', '*( _OWORD *)( object_base + 24) = 0LL;', '*( _OWORD *)( object_base + 24) = 0LL;']
['*( _QWORD *)object_base = *v7;']
['*( _OWORD *)( object_base + 24) = 0LL;', '*( _OWORD *)( object_base + 24) = 0LL;', '*( _OWORD *)( object_base + 24) = 0LL;']
['*( _QWORD *)object_base = *v7;']
['*( _OWORD *)&e->src = 0LL;', '*( _OWORD *)&e->insns = 0LL;', '*( _OWORD *)&e->flags = 0LL;']
['*( _OWORD *)&v7->src = 0LL;', '*( _OWORD *)&v7->insns = 0LL;', '*( _OWORD *)&e->src = 0LL;', '*( _OWORD *)&e->insns = 0LL;', '*( _OWORD *)&e->flags = 0LL;']
['*( _OWORD *)&v7->src = 0LL;', '*( _OWORD *)&v7->insns = 0LL;', '*( _OWORD *)&e->src = 0LL;', '*( _OWORD *)&e->insns = 0LL;', '*( _OWORD *)&e->flags = 0LL;']
['*( _OWORD *)( object_base + 24) = 0LL;', '*( _OWORD *)( object_base + 24) = 0LL;', '*( _OWORD *)( object_base + 24) = 0LL;']
['*( _QWORD *)object_base = *v7;']
['*( _OWORD *)&v7->src = 0LL;', '*( _OWORD *)&v7->insns = 0LL;', '*( _OWORD *)&e->src = 0LL;', '*( _OWORD *)&e->insns = 0LL;', '*( _OWORD *)&e->flags = 0LL;']
['*( _OWORD *)( object_base + 24) = 0LL;', '*( _OWORD *)( object_base + 24) = 0LL;', '*( _OWORD *)( object_base + 24) = 0LL;']
['*( _QWORD *)object_base = *v7;']
['induction_1 *biv; // rbx', 'induction_1 *biv; // rbx']
['induction_1 *biv; // rbx', 'induction_1 *biv; // rbx']
['biv = bl_0->biv;', 'biv = bl_0->biv;', 'biv = bl_0->biv;', 'biv = bl_0->biv;']
['if ( biv )']
['for ( i = *( _QWORD *)( v1 + 40); i; *( _OWORD *)( v3 + 48) = 0LL )', 'while ( ( *( ( _BYTE *)biv + 100) & 0x20) == 0 )']
['for ( i = *( _QWORD *)( v1 + 40); i; *( _OWORD *)( v3 + 48) = 0LL )', 'while ( ( *( ( _BYTE *)biv + 100) & 0x20) == 0 )']
['if ( ( v5 & 8) == 0 || biv->mult_val != const_int_rtx[65] || ( v5 & 0x20) != 0 )']
['end = b->end;']
['add_val = v5->add_val;']
['biv = biv->next_iv;', 'biv = biv->next_iv;']
['biv = biv->next_iv;', 'biv = biv->next_iv;']
['if ( biv )']
['biv = biv->next_iv;', 'biv = biv->next_iv;']
['biv = biv->next_iv;', 'biv = biv->next_iv;']
['if ( !biv )', 'if ( !biv )']
['*( _OWORD *)&result->common.chain = 0LL;', '*( _OWORD *)&result->common.chain = 0LL;']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['*( ( _BYTE *)&v8->block.common + 17) |= 1u;']
['*( _OWORD *)&result->common.chain = 0LL;', '*( _OWORD *)&result->common.chain = 0LL;']
['if ( *( _OWORD *)&t1->block.vars == 0LL )']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['*( _OWORD *)&result->common.chain = 0LL;', '*( _OWORD *)&result->common.chain = 0LL;']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['v3 = ( tree_node *)ggc_alloc( v2);']
['rtx last_value; // rax', 'rtx last_value; // rax']
['rtx v21; // rbp', 'rtx v21; // rbp']
['rtx v25; // rax', 'rtx v25; // rax', 'rtx v25; // rax', 'rtx v25; // rax']
['rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax']
['rtx pinsn[8]; // [rsp+8h] [rbp-40h] BYREF']
['pinsn[0] = a2;']
['v8 = ( unsigned __int16 *)pinsn[0][1];']
['pinsn[0] = ( rtx)v8;']
['return general_operand( op, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4));', 'return general_operand( op, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4));']
['return general_operand( op, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4));', 'return general_operand( op, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4));']
['v16 = ( tree_node *)v12[2];', 'v16 = ( tree_node *)v12[2];']
['while ( v1 != ( change_t_0 *)v2 );']
['( machine_mode)*( unsigned __int8 *)( *( _QWORD *)&v19[2 * v22 + 2] + 2LL));']
['&& ( global_regs[rtuint] || !fixed_regs[rtuint] && mode_class_0[*( ( unsigned __int8 *)v2 + 2)] != MODE_CC) )']
['|| insn_data_0[rtint].n_dups > 0) )']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)*( ( unsigned __int8 *)x + 2), v5, v6);']
['if ( !base_alias_check( rtx, mem_addr, ( machine_mode)*( ( unsigned __int8 *)x + 2), mem_mode) )']
['rtx v49; // r12', 'rtx v59; // r12', 'rtx v59; // r12']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax']
['rtx x; // [rsp+8h] [rbp-50h]', 'rtx x; // [rsp+8h] [rbp-50h]']
['rtx xa; // [rsp+8h] [rbp-50h]']
['v8 = ( rtx)cond[1];']
['if ( rtx_class[v9] == 60 && const_tiny_rtx[0][*( ( unsigned __int8 *)rtx + 2)] == v8 && rtx != want_reg )']
['v8 = ( rtx)rtx[1];']
['nonnote_insn = prev_nonnote_insn( v5);']
['v5 = nonnote_insn;']
['if ( *( _WORD *)nonnote_insn == 35 )', 'if ( *( _WORD *)nonnote_insn == 35 )']
['rtx v6; // r12', 'rtx v6; // r12']
['rtx v7; // rax', 'rtx v7; // rax', 'rtx v7; // rax']
['rtx v11; // rax', 'rtx v11; // rax', 'rtx v11; // rax', 'rtx v11; // rax', 'rtx v11; // rax']
['if ( !rtx_equal_p( rtx, memref->fld[0].rtx) || ( v6 = memref, *( ( unsigned __int8 *)memref + 2) != v4) )']
['v7 = gen_rtx_fmt_e0( MEM, v4, rtx);', 'v5 = gen_rtx_fmt_e0( MEM, v3, rtx);']
['*( _QWORD *)&v7[1] = 0LL;']
['v6 = v7;', 'v6 = v7;']
['v6 = v7;', 'v6 = v7;']
['full_mode = *( ( unsigned __int8 *)v12 + 2);']
['LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v7 + 3) & 0xF7;', 'LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v7 + 3) & 0xF7;']
['LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v7 + 3) & 0xF7;', 'LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v7 + 3) & 0xF7;']
['*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;']
['*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;', '*( ( _BYTE *)v6 + 3) = ( _BYTE)v7;']
['LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v7 & 0xEF;', 'LOBYTE( v7) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v7 & 0xEF;']
['if ( ( sch_istable[( unsigned __int8)v11] & 4) != 0 && !v10[1] )']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v12; // rax']
['rtx v15; // rsi', 'rtx v10; // rsi', 'rtx v13; // rsi', 'rtx v28; // rsi', 'rtx v10; // rsi']
['rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax']
['rtx insna; // [rsp+10h] [rbp-C0h]']
['n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;']
['n_outputs = recog_data_0.n_operands - asm_operand_n_inputs;']
['if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )']
['v7 = recog_data_0.operand[v6];']
['recog_data_0.operand[v6++] = rtx;']
['v12 = recog_data_0.operand[v10];', 'v12 = recog_data_0.operand[v10];', 'v12 = recog_data_0.operand[v10];']
['v12 = recog_data_0.operand[v10];', 'v12 = recog_data_0.operand[v10];', 'v12 = recog_data_0.operand[v10];']
['if ( *( _WORD *)v12 != 61 )']
['rtuint = v12->fld[0].rtuint;']
['v12 = recog_data_0.operand[v10];', 'v12 = recog_data_0.operand[v10];', 'v12 = recog_data_0.operand[v10];']
['induction_1 *v24; // r15', 'induction_1 *v24; // r15']
['induction_1 *v24; // r15', 'induction_1 *v24; // r15']
['rtx src_reg; // [rsp+18h] [rbp-60h] BYREF']
['rtx add_val; // [rsp+20h] [rbp-58h] BYREF']
['rtx mult_val; // [rsp+28h] [rbp-50h] BYREF']
['rtx ext_val; // [rsp+30h] [rbp-48h] BYREF']
['rtx last_consec_insn[8]; // [rsp+38h] [rbp-40h] BYREF']
['if ( general_induction_var( loop, *( rtx *)&v19[1], &src_reg, &add_val, &mult_val, &ext_val, 0, &benefit, VOIDmode)', 'if ( general_induction_var( loop, *( rtx *)&v19[1], &src_reg, &add_val, &mult_val, &ext_val, 0, &benefit, VOIDmode)']
['if ( general_induction_var( loop, *( rtx *)&v19[1], &src_reg, &add_val, &mult_val, &ext_val, 0, &benefit, VOIDmode)', 'if ( general_induction_var( loop, *( rtx *)&v19[1], &src_reg, &add_val, &mult_val, &ext_val, 0, &benefit, VOIDmode)']
['mark_reload_reg_in_use( v11, *( ( _DWORD *)v12 + 18), *( ( reload_type *)v12 + 23), *( ( machine_mode *)v12 + 7));', 'mark_reload_reg_in_use( v11, *( ( _DWORD *)v12 + 18), *( ( reload_type *)v12 + 23), *( ( machine_mode *)v12 + 7));']
['v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v8 = ( ( unsigned int)( mode_class_0[( int)v4] - 5) < 2) + 1;']
['v23 = ( ( unsigned int)( mode_class_0[v20] - 5) < 2) + 1;']
['tree v21; // r12']
['tree v27; // rax']
['tree v29; // rax']
['tree v37; // rdi']
['mode_alignment = get_mode_alignment( ( machine_mode)*( ( unsigned __int8 *)object + 2));']
['rtx v38; // [rsp+10h] [rbp-48h]', 'rtx v65; // [rsp+30h] [rbp-48h]']
['rtx x; // [rsp+8h] [rbp-50h]', 'rtx x; // [rsp+8h] [rbp-50h]', 'rtx x; // [rsp+18h] [rbp-60h]']
['rtx i; // [rsp+8h] [rbp-50h]']
['fld = loc;']
['v5 = expand_compound_operation( rtx);']
['|| ix86_hard_regno_mode_ok( rtuint, ( machine_mode)*( ( unsigned __int8 *)v18 + 2)) )']
['rtwint = ( int *)v18->fld[0].rtwint;']
['v12 = ( rtx *)( rtwint + 2);']
['if ( *( _WORD *)v7 == 47 )', 'if ( *( _WORD *)v9 != 37 )', 'if ( *( _WORD *)v4 != 37 )']
['v6 = expand_compound_operation( v4);']
['if ( !ix86_hard_regno_mode_ok( v7, ( machine_mode)*( unsigned __int8 *)( v9 + 2)) )']
['rtx v133; // r14', 'rtx v13; // r14']
['rtx v12; // r13', 'rtx v12; // r13']
['rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v136; // rax', 'rtx v13; // rax', 'rtx v13; // rax', 'rtx v18; // rax', 'rtx v38; // rax', 'rtx v38; // rax', 'rtx v13; // rax']
['v10 = lang_hooks_0.expand_constant( exp);']
['rtx result; // rax', 'rtx start; // rbp', 'rtx result; // rax', 'rtx *insn_map; // rdx', 'rtx to_rtx; // r14', 'rtx result; // rax', 'rtx rtl; // rbx', 'rtx top; // rbx', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx *v149; // rbx', 'rtx *v12; // rbx', 'rtx *vec; // rcx', 'rtx result; // rax', 'rtx *v50; // rbx', 'rtx *v46; // rbx', 'rtx base_term; // rax', 'rtx base_term; // rax']
['rtx v10; // r13', 'rtx v10; // r13']
['rtx regno_note; // r9', 'rtx regno_note; // rbx']
['rtx v13; // rax', 'rtx v13; // rax', 'rtx v13; // rax']
['rtx rtwint; // rbp', 'rtx rtwint; // r13', 'rtx rtwint; // rax']
['rtx *v27; // rax', 'rtx v37; // rax', 'rtx *v37; // rdx', 'rtx *v47; // rax', 'rtx v37; // rax']
['rtx s1a; // [rsp+0h] [rbp-48h]', 'rtx s1; // [rsp+0h] [rbp-48h]', 'rtx x6ct; // [rsp+0h] [rbp-48h]', 'rtx x6cw; // [rsp+0h] [rbp-48h]', 'rtx x6cx; // [rsp+0h] [rbp-48h]', 'rtx x6dc; // [rsp+0h] [rbp-48h]']
['rtx addra; // [rsp+8h] [rbp-40h]', 'rtx note; // [rsp+8h] [rbp-40h]']
['v21 = get_true_reg( ( rtx *)&pat_src[1]);']
['v10 = copy_to_reg( v9);', 'v15 = copy_to_reg( v14);']
['if ( *( _WORD *)result == 66 )']
['rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax']
['reg_set_0 *v33; // rdx', 'reg_set_0 *v33; // rdx']
['reg_set_0 *v33; // rdx', 'reg_set_0 *v33; // rdx']
['rtx insn; // rcx']
['reg_set_0 *v33; // rdx', 'reg_set_0 *v33; // rdx']
['reg_set_0 *v33; // rdx', 'reg_set_0 *v33; // rdx']
['rtx v35; // rcx', 'rtx v31; // rcx', 'rtx v37; // rcx', 'rtx v38; // rbx', 'rtx v38; // rax', 'rtx v28; // rcx', 'rtx v38; // rax', 'rtx v33; // rcx']
['v33 = reg_set_table[rtuint];']
['if ( v3 )']
['insn = v29->insn;', 'insn = v29->insn;']
['insn = v29->insn;', 'insn = v29->insn;']
['v3 = v3->next;', 'v3 = v3->next;']
['v3 = v3->next;', 'v3 = v3->next;']
['v32 = bmap[*( int *)( v30->data.l[insn->fld[0].rtint] + 88)];']
['while ( v3 );']
['v33 = reg_set_table[rtuint];']
['if ( ( unsigned int)( mode_class_0[v14] - 5) > 1 )']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax']
['rtx *add_vala; // [rsp+B2h] [rbp-50h]']
['rtx v32; // [rsp+32h] [rbp-D0h]', 'rtx v41; // [rsp+28h] [rbp-30h]']
['rtx src_rega[2]; // [rsp+BAh] [rbp-48h] BYREF']
['src_rega[0] = src_reg;']
['add_vala = add_val;']
['v32 = v15;', 'v17 = v15;', 'v20 = v19;', 'v4 = v5;', 'v4 = v5;', 'v10 = v5;', 'v10 = v5;']
['src_rega,']
['add_vala,']
['if ( !find_reg_note( v7, REG_EH_REGION, 0LL) )']
['v23 = v3->fld[0].rtx;']
['for ( i = *( tree_node **)( low + 32); i; i = i->common.chain )']
['for ( i = *( tree_node **)( low + 32); i; i = i->common.chain )']
['rtx v20; // rsi', 'rtx v20; // rsi']
['rtx v21; // rsi', 'rtx v22; // rdi', 'rtx v21; // rdx', 'rtx v24; // rdi', 'rtx v21; // rdx']
['n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;']
['if ( !n_operands || !recog_data_0.n_alternatives || n_operands <= 0 )']
['*( const char **)( ( char *)&constraints[-1] + ( unsigned int)( 8 * n_operands)) = *( const char **)( ( char *)&recog_data_0.constraints[-1]']
['qmemcpy( constraints, recog_data_0.constraints, 8LL * ( ( unsigned int)( 8 * n_operands - 1) >> 3));']
['rtx = recog_data_0.operand[v6];']
['( machine_mode)*( unsigned __int8 *)( v29.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v2.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v23.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v8.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v2.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v2.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v18.rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)rtx + 2));']
['v21 = recog_data_0.operand[v6];', 'v21 = recog_data_0.operand[v6];']
['v21 = recog_data_0.operand[v6];', 'v21 = recog_data_0.operand[v6];']
['v21 = recog_data_0.operand[v6];', 'v21 = recog_data_0.operand[v6];', 'v22 = recog_data_0.operand[v19];', 'v2 = recog_data_0.operand[v1];']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['v36 = *( ( _DWORD *)uid_cuid_0 + v35[1]);']
['frome = mode_class_0[( unsigned __int8)v6] == MODE_FLOAT;', 'v83 = mode_class_0[( unsigned __int8)v6];']
['v83 = mode_class_0[( unsigned __int8)v6];']
['v8 = gen_lowpart( ( machine_mode)v87, ( rtx)v7);']
['v8 = simplify_gen_subreg( ( machine_mode)v87, v8, ( machine_mode)*( ( unsigned __int8 *)v8 + 2), 0);', 'v8 = simplify_gen_subreg( ( machine_mode)v87, v8, ( machine_mode)*( ( unsigned __int8 *)v8 + 2), 0);']
['v8 = simplify_gen_subreg( ( machine_mode)v87, v8, ( machine_mode)*( ( unsigned __int8 *)v8 + 2), 0);', 'v8 = simplify_gen_subreg( ( machine_mode)v87, v8, ( machine_mode)*( ( unsigned __int8 *)v8 + 2), 0);']
['to = simplify_gen_subreg( ( machine_mode)v6, to, ( machine_mode)*( ( unsigned __int8 *)to + 2), 0);', 'to = simplify_gen_subreg( ( machine_mode)v6, to, ( machine_mode)*( ( unsigned __int8 *)to + 2), 0);']
['to = simplify_gen_subreg( ( machine_mode)v6, to, ( machine_mode)*( ( unsigned __int8 *)to + 2), 0);', 'to = simplify_gen_subreg( ( machine_mode)v6, to, ( machine_mode)*( ( unsigned __int8 *)to + 2), 0);']
['v36 = can_extend_p( ( machine_mode)v87, ( machine_mode)v6, unsignedp);']
['v36 = can_extend_p( ( machine_mode)v87, ( machine_mode)v6, unsignedp);']
['v36 = can_extend_p( ( machine_mode)v87, ( machine_mode)v6, unsignedp);']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['v36 = *( ( _DWORD *)uid_cuid_0 + v35[1]);']
['v5 = gen_reg_rtx( ( machine_mode)v4);']
['v24 = force_reg( ( machine_mode)v6, v15);']
['rtl_op = first_rtl_op( ( tree_code)*( ( unsigned __int8 *)&v2->block.common + 16));']
['return build1( ( tree_code)*( ( unsigned __int8 *)&exp->block.common + 16), exp->common.type, v5);']
['rtx v20; // r15', 'rtx v20; // r15', 'rtx v20; // r15']
['rtx v20; // r15', 'rtx v34; // r15', 'rtx v20; // r15', 'rtx v38; // r15', 'rtx v20; // r15']
['rtx v35; // rax', 'rtx v35; // rax', 'rtx v35; // rax', 'rtx v35; // rax', 'rtx v35; // rax']
['rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax']
['rtx v50; // rax']
['rtx sequence[3]; // [rsp+10h] [rbp-58h]']
['v20 = 0LL;']
['v20 = ( rtx)v3[2];']
['if ( ( *( _DWORD *)v20->fld[0].rtwint & 0x4000FFFF) != 1073741885 )']
['if ( volatile_refs_p( *( rtx *)&v20[1]) )']
['|| ( v49 = ( rtx)rtx[2], *( _WORD *)v49 != 47) && ( v49 = single_set_2( rtx, *( rtx *)&rtx[2])) == 0LL )']
['rtx v12; // rbp', 'rtx v12; // rbp']
['rtx v13; // r14']
['rtx v16; // rax', 'rtx v16; // rax', 'rtx v16; // rax', 'rtx v16; // rax']
['rtx note; // [rsp+18h] [rbp-40h] BYREF']
['note = copy_rtx_and_substitute( rtx, map, 0);']
['subst_constants( &note, 0LL, map, 0);']
['v12 = note;', 'v12 = note;']
['v12 = note;', 'v12 = note;']
['v7[3].fld[0].rtwint = ( __int64)note;']
['if ( !v12 )', 'if ( !v12 )']
['v13 = v12;', 'v13 = v12;', 'v13 = v12;']
['v13 = v12;', 'v13 = v12;', 'v13 = v12;']
['v12 = ( rtx)v12[1];']
['v14 = *( ( _BYTE *)v13 + 2);']
['rtx v13; // rbx', 'rtx v12; // rbp', 'rtx v16; // rbp', 'rtx v12; // rbp', 'rtx v10; // rbp', 'rtx v14; // rbp', 'rtx v23; // rbp']
['rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax']
['rtx *insn_map; // rdx']
['rtx v15; // rsi', 'rtx v10; // rsi', 'rtx v13; // rsi', 'rtx v37; // rsi', 'rtx v37; // rsi', 'rtx v10; // rsi']
['rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax']
['rtx v22; // rax', 'rtx v12; // rcx', 'rtx v24; // rcx', 'rtx v22; // rax', 'rtx v28; // rcx', 'rtx v22; // rax']
['rtx v244; // rax']
['rtx v22; // r14', 'rtx v16; // r14', 'rtx v24; // r14', 'rtx v24; // r14', 'rtx v46; // r14']
['rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax']
['v4 = ( tree_node *)memcpy( v3, node, v2);']
['rtx v33; // r12']
['rtx v34; // rax', 'rtx v34; // rax', 'rtx v34; // rax']
['rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax']
['rtx v42; // r12']
['rtx v43; // rax', 'rtx v43; // rax', 'rtx v43; // rax', 'rtx v43; // rax', 'rtx v43; // rax']
['rtx v57; // rax', 'rtx v57; // rax', 'rtx v57; // rax']
['rtx v23; // rax', 'rtx v6; // rax', 'rtx v33; // rax', 'rtx v33; // rax', 'rtx v43; // rax', 'rtx v61; // rax', 'rtx v43; // rax', 'rtx v43; // rax', 'rtx v6; // rax', 'rtx v60; // rax', 'rtx v6; // rax', 'rtx v33; // rax', 'rtx v60; // rax', 'rtx v53; // rax', 'rtx v33; // rax', 'rtx v23; // rax', 'rtx v6; // rax', 'rtx v62; // rax', 'rtx v23; // rax', 'rtx v43; // rax', 'rtx v13; // rax', 'rtx v60; // rax', 'rtx v60; // rax', 'rtx v53; // rax', 'rtx v13; // rax', 'rtx v53; // rax', 'rtx v43; // rax', 'rtx v53; // rax', 'rtx v83; // rax', 'rtx v62; // rax', 'rtx v6; // rax', 'rtx v13; // rax']
['v2 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)x + 2));']
['p_free_buffs = ( _cpp_buff_0 *)&pfile->free_buffs;']
['rtx v17; // rax', 'rtx v16; // rdx', 'rtx v16; // rdx', 'rtx v19; // rdx', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx v10; // rdx', 'rtx v18; // rdx', 'rtx v17; // rbx', 'rtx v15; // rdx', 'rtx v16; // rdx', 'rtx v7; // rdx', 'rtx v27; // rdx', 'rtx v17; // rax', 'rtx v12; // rdx', 'rtx v17; // rax', 'rtx v18; // rdx', 'rtx v12; // rdx']
['v16 = head;', 'v7 = head;']
['v16 = ( rtx)head[1];']
['if ( v16 != bb_note && v16[1].fld[0].rtx != bb_note )', 'if ( v16 != bb_note && v16[1].fld[0].rtx != bb_note )']
['if ( v16 != bb_note && v16[1].fld[0].rtx != bb_note )', 'if ( v16 != bb_note && v16[1].fld[0].rtx != bb_note )']
['reorder_insns( bb_note, bb_note, v16);']
['v8 = ( ( unsigned int)( mode_class_0[( int)v4] - 5) < 2) + 1;']
['v12 = new_cselib_val( ++next_unknown_value, ( machine_mode)v6);']
['htab_empty( hash_table_0);']
['slot_with_hash = htab_find_slot_with_hash( ( __int64)hash_table_0, ( __int64)v9, v8, create != 0);']
['if ( ( mode_class_0[*( ( unsigned __int8 *)x + 2)] & 0xFFFFFFFB) == 2']
['if ( *( _WORD *)v9 == 55 && mode_class_0[*( ( unsigned __int8 *)v8 + 2)] == MODE_FLOAT )']
['*( _QWORD *)htab_find_slot_with_hash( ( __int64)hash_table_0, ( __int64)v3, value, 1) = elt;']
['rtvec v19; // rax']
['rtvec jc; // [rsp+0h] [rbp-58h]']
['v19 = rtvec_alloc( *rtwint);']
['rtvec = v19;']
['v3->fld[v25].rtwint = ( __int64)v19;']
['jc = v19;', 'jc = v19;']
['jc = v19;', 'jc = v19;']
['memmove( v19->elem, rtwint + 2, 8 * v14);']
['rtvec = jc;']
['v3 = ( ( unsigned int)( mode_class_0[v6] - 5) < 2) + ( _DWORD)rtuint;']
['v19 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;']
['v21 = ( ( unsigned int)( mode_class_0[v26] - 5) < 2) + 1;']
['clear_reload_reg_in_use( v4, *( ( _DWORD *)v2 + 18), *( ( reload_type *)v2 + 23), *( ( machine_mode *)v2 + 7));', 'clear_reload_reg_in_use( v4, *( ( _DWORD *)v2 + 18), *( ( reload_type *)v2 + 23), *( ( machine_mode *)v2 + 7));']
['clear_reload_reg_in_use( v4, *( ( _DWORD *)v2 + 18), *( ( reload_type *)v2 + 23), *( ( machine_mode *)v2 + 7));', 'clear_reload_reg_in_use( v4, *( ( _DWORD *)v2 + 18), *( ( reload_type *)v2 + 23), *( ( machine_mode *)v2 + 7));']
['fprintf( file, off_646752, ( unsigned int)dest->index);']
['si128 = _mm_load_si128( ( const __m128i *)&zero_cum_47);']
['v17 = _mm_load_si128( ( const __m128i *)&zero_cum_47);', 'v11 = _mm_load_si128( ( const __m128i *)&zero_cum_47);']
['v17 = _mm_load_si128( ( const __m128i *)&zero_cum_47);']
['while ( ( sch_istable[( unsigned __int8)v2[v3]] & 4) != 0 )']
['if ( !strcmp( name, aE) )']
['return table_21[( int)v8].number;']
['*( _OWORD *)&v7->pred_next = 0LL;']
['rtx v10; // rsi', 'rtx v10; // rsi']
['v10 = ( rtx)dead_insn[2];']
['if ( *( _WORD *)v10 == 47 || ( v10 = single_set_2( dead_insn, v10)) != 0LL )', 'if ( *( _WORD *)v10 == 47 || ( v10 = single_set_2( dead_insn, v10)) != 0LL )', 'if ( *( _WORD *)v10 == 47 || ( v10 = single_set_2( dead_insn, v10)) != 0LL )']
['if ( *( _WORD *)v10 == 47 || ( v10 = single_set_2( dead_insn, v10)) != 0LL )', 'if ( *( _WORD *)v10 == 47 || ( v10 = single_set_2( dead_insn, v10)) != 0LL )', 'if ( *( _WORD *)v10 == 47 || ( v10 = single_set_2( dead_insn, v10)) != 0LL )']
['if ( *( _WORD *)v10 == 47 || ( v10 = single_set_2( dead_insn, v10)) != 0LL )', 'if ( *( _WORD *)v10 == 47 || ( v10 = single_set_2( dead_insn, v10)) != 0LL )', 'if ( *( _WORD *)v10 == 47 || ( v10 = single_set_2( dead_insn, v10)) != 0LL )']
['v11.rtwint = ( __int64)v10->fld[0];']
['if ( reg_note && ( v4.rtwint = ( __int64)reg_note->fld[0], *( _WORD *)v4.rtwint == 36) )', 'if ( reg_note && ( v4.rtwint = ( __int64)reg_note->fld[0], *( _WORD *)v4.rtwint == 36) )']
['if ( reg_note && ( v4.rtwint = ( __int64)reg_note->fld[0], *( _WORD *)v4.rtwint == 36) )', 'if ( reg_note && ( v4.rtwint = ( __int64)reg_note->fld[0], *( _WORD *)v4.rtwint == 36) )']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['nonnote_insn = next_nonnote_insn( ( rtx)v12);']
['if ( nonnote_insn && *( _WORD *)nonnote_insn == 33 && ( unsigned __int16)( **( _WORD **)&nonnote_insn[2] - 44) <= 1u )', 'if ( nonnote_insn && *( _WORD *)nonnote_insn == 33 && ( unsigned __int16)( **( _WORD **)&nonnote_insn[2] - 44) <= 1u )', 'if ( nonnote_insn && *( _WORD *)nonnote_insn == 33 && ( unsigned __int16)( **( _WORD **)&nonnote_insn[2] - 44) <= 1u )']
['if ( nonnote_insn && *( _WORD *)nonnote_insn == 33 && ( unsigned __int16)( **( _WORD **)&nonnote_insn[2] - 44) <= 1u )', 'if ( nonnote_insn && *( _WORD *)nonnote_insn == 33 && ( unsigned __int16)( **( _WORD **)&nonnote_insn[2] - 44) <= 1u )', 'if ( nonnote_insn && *( _WORD *)nonnote_insn == 33 && ( unsigned __int16)( **( _WORD **)&nonnote_insn[2] - 44) <= 1u )']
['if ( nonnote_insn && *( _WORD *)nonnote_insn == 33 && ( unsigned __int16)( **( _WORD **)&nonnote_insn[2] - 44) <= 1u )', 'if ( nonnote_insn && *( _WORD *)nonnote_insn == 33 && ( unsigned __int16)( **( _WORD **)&nonnote_insn[2] - 44) <= 1u )', 'if ( nonnote_insn && *( _WORD *)nonnote_insn == 33 && ( unsigned __int16)( **( _WORD **)&nonnote_insn[2] - 44) <= 1u )']
['delete_related_insns( nonnote_insn);']
['rtx v33; // rax', 'rtx v33; // rax', 'rtx v33; // rax', 'rtx v33; // rax']
['rtx insn; // [rsp+8h] [rbp-40h] BYREF', 'rtx insns; // [rsp+8h] [rbp-30h] BYREF']
['rtx x0; // [rsp+18h] [rbp-40h]', 'rtx x0a; // [rsp+18h] [rbp-40h]', 'rtx v96; // [rsp+18h] [rbp-60h]', 'rtx p; // [rsp+18h] [rbp-40h]']
['insn = insns;']
['v17 = _mm_load_si128( ( const __m128i *)&zero_cum_47);', 'v11 = _mm_load_si128( ( const __m128i *)&zero_cum_47);']
['v17 = ( ( unsigned int)( mode_class_0[v14] - 5) < 2) + 1;']
['v7 = gen_rtx_REG( ( machine_mode)v4, v6);', 'v6 = gen_rtx_REG( ( machine_mode)v4, v5);']
['v23 = v3;', 'v4 = v5;', 'v4 = v5;', 'v4 = v2;', 'v4 = v6;', 'v5 = v8;']
['v23 = v3;', 'v4 = v5;', 'v4 = v5;', 'v4 = v2;', 'v4 = v6;', 'v5 = v8;']
['v17 = _mm_load_si128( ( const __m128i *)&zero_cum_47);', 'v11 = _mm_load_si128( ( const __m128i *)&zero_cum_47);']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v12; // rax']
['v10 = added_links_insn;']
['if ( !v12 )', 'if ( !v12 )']
['v12 = nonzero_bits( v1->fld[0].rtx, ( machine_mode)*( unsigned __int8 *)( v1->fld[0].rtwint + 2));']
['v12 = nonzero_bits( v1->fld[0].rtx, ( machine_mode)*( unsigned __int8 *)( v1->fld[0].rtwint + 2));']
['if ( ( _WORD)v7 != *( _WORD *)v6 )']
['if ( ( _WORD)v7 != *( _WORD *)v6 )']
['v11 = v11[1].fld[0].rtx;', 'v11 = v11[1].fld[0].rtx;', 'v11 = v11[1].fld[0].rtx;', 'v11 = v11[1].fld[0].rtx;', 'v10 = v10[1].fld[0].rtx;', 'v10 = v10[1].fld[0].rtx;', 'v10 = v10[1].fld[0].rtx;', 'v10 = v10[1].fld[0].rtx;']
['v11 = v11[1].fld[0].rtx;', 'v11 = v11[1].fld[0].rtx;', 'v11 = v11[1].fld[0].rtx;', 'v11 = v11[1].fld[0].rtx;', 'v10 = v10[1].fld[0].rtx;', 'v10 = v10[1].fld[0].rtx;', 'v10 = v10[1].fld[0].rtx;', 'v10 = v10[1].fld[0].rtx;']
['if ( !v12 )', 'if ( !v12 )']
['rtx v13; // r14', 'rtx v16; // r14', 'rtx v77; // r14', 'rtx v12; // r14', 'rtx v14; // r14', 'rtx v17; // r13', 'rtx v37; // r14', 'rtx v37; // r14']
['rtx v13; // r14', 'rtx v19; // r15', 'rtx v16; // r14', 'rtx v12; // r14', 'rtx v14; // r14']
['rtx real_insn; // rax', 'rtx real_insn; // rax', 'rtx real_insn; // rax']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax']
['rtx v33; // rax', 'rtx v33; // rax', 'rtx v30; // rdx', 'rtx v23; // rdx', 'rtx v33; // rax', 'rtx v33; // rax', 'rtx v93; // rdx', 'rtx v31; // rdx', 'rtx v34; // rdx', 'rtx v53; // rdx', 'rtx v34; // rdx', 'rtx v33; // rcx', 'rtx v35; // rdx']
['rtx v42; // rax', 'rtx v42; // rax', 'rtx v42; // rax']
['rtx v47; // rax', 'rtx v47; // rax']
['rtx v156; // rbp']
['if ( mode_class_0[*( ( unsigned __int8 *)v2 + 2)] == MODE_INT && *( _WORD *)newval == 54 )']
['if ( rtwint != trunc_int_for_mode( rtwint, ( machine_mode)*( ( unsigned __int8 *)v2 + 2)) )']
['frees = undobuf_0.frees;', 'frees = undobuf_0.frees;', 'frees = undobuf_0.frees;']
['if ( undobuf_0.frees )', 'if ( undobuf_0.frees )']
['undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;']
['undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;']
['undos = undobuf_0.undos;', 'undos = undobuf_0.undos;', 'undos = undobuf_0.undos;']
['undobuf_0.undos = frees;', 'undobuf_0.undos = frees;']
['( machine_mode)*( unsigned __int8 *)( v12.rtwint + 2),']
['v18 = swap_condition( ( rtx_code)aux[22]);']
['v66 = expand_simple_binop( ( machine_mode)*( ( unsigned __int8 *)v56 + 2), LSHIFTRT, v56, v65, 0LL, 1, OPTAB_LIB_WIDEN);']
['( machine_mode)*( ( unsigned __int8 *)doloop_regb + 2),', '( machine_mode)*( ( unsigned __int8 *)doloop_regb + 2),']
['emit_cmp_and_jump_insns( v68, v70, ( rtx_code)( v69 == 0 ? EQ : LEU), 0LL, v88, 0, op1a);']
['( machine_mode)*( ( unsigned __int8 *)doloop_regb + 2),', '( machine_mode)*( ( unsigned __int8 *)doloop_regb + 2),']
['fwrite( &unk_64697D, 1uLL, 0x11uLL, outf);']
['fprintf( file, off_646752, ( unsigned int)dest->index);']
['fprintf( file, &off_646752[1], ( unsigned int)v7++);']
['v10 = bitnames_8[v7++];']
['fprintf( outf, off_646752, ( unsigned int)v5);']
['fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");']
['if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )']
['if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )']
['fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");']
['&& ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )']
['fancy_abort( ( const char *)&a, 1309, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1603, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1479, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1549, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1513, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1555, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1490, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1495, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1561, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1528, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1538, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1588, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1457, "dwarf2out_frame_debug_expr");']
['fancy_abort( ( const char *)&a, 1386, "dwarf2out_frame_debug_expr");']
['*( _QWORD *)&v7[1] = 0LL;', '*( _OWORD *)&yy[1] = 0LL;', '*( _OWORD *)&yy[1] = 0LL;', '*( _QWORD *)&v5[1] = 0LL;']
['*( _OWORD *)v3 = 0LL;']
['*( _QWORD *)&v7[1] = 0LL;', '*( _OWORD *)&yy[1] = 0LL;', '*( _OWORD *)&yy[1] = 0LL;', '*( _QWORD *)&v5[1] = 0LL;']
['*( _OWORD *)equot = 0LL;']
['rtx v42; // rdi', 'rtx v7; // rdi', 'rtx v48; // rdi', 'rtx v37; // rdi']
['rtx v49; // rax']
['rtx v51; // rax', 'rtx v51; // rax']
['rtx v53; // rax', 'rtx v53; // rax', 'rtx v53; // rax', 'rtx v53; // rax']
['rtx v55; // rax', 'rtx v55; // rax', 'rtx v55; // rax']
['rtx v50; // rsi', 'rtx v6; // rsi', 'rtx v36; // rsi', 'rtx v50; // rsi', 'rtx v54; // rsi', 'rtx v36; // rsi', 'rtx v54; // rsi', 'rtx v53; // rsi']
['rtx v62; // rax', 'rtx v62; // rax']
['rtvec v60; // rax']
['rtx v16; // rax', 'rtx v16; // rax', 'rtx v16; // rax', 'rtx v16; // rax']
['rtx v27; // r12', 'rtx v20; // r11', 'rtx v22; // r11', 'rtx v24; // r11']
['rtx v32; // rax', 'rtx v32; // rax']
['v16 = v18;']
['v23 = v3->fld[0].rtx;']
['v4 = *( _WORD *)v23;', 'v4 = *( _WORD *)v8;']
['if ( *( _WORD *)v12 != 61 )']
['if ( mode_size[*( ( unsigned __int8 *)v3 + 2)] <= mode_size[*( ( unsigned __int8 *)v23 + 2)]']
['&& reg_equiv_memory_loc[v23->fld[0].rtuint] )']
['rtint = v10->fld[0].rtint;']
['*( _OWORD *)( s + 1) = 0LL;']
['*( _OWORD *)rbit = 0LL;']
['v7 = ( tree_node *)( ( unsigned __int64)width | ( unsigned __int64)declarator);']
['tree v25; // r12']
['tree v32; // rax']
['tree v32; // rax', 'tree v33; // rax']
['tree v42; // rdi']
['v36 = *( ( _DWORD *)uid_cuid_0 + v35[1]);']
['mode = *( ( unsigned __int16 *)insn_data_0[1203].operand + 8);']
['if ( !insn_data_0[1159].operand->predicate( loc, ( ( BYTE3( target_flags) & 2) != 0) + 4) )']
['v1 = copy_to_mode_reg( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), loc);']
['v7 = ( tree_node *)( ( unsigned __int64)width | ( unsigned __int64)declarator);']
['rtx v13; // r12', 'rtx v33; // r12', 'rtx v35; // r12', 'rtx v31; // r12', 'rtx v13; // r12']
['rtx v7; // r13']
['v2 = rtx;', 'v7 = rtx;', 'v6 = rtx;', 'v6 = rtx;', 'v4 = rtx;', 'v7 = rtx;', 'v8 = rtx;', 'v7 = rtx;']
['v7 = ( tree_node *)( ( unsigned __int64)width | ( unsigned __int64)declarator);']
['v7 = ( tree_node *)( ( unsigned __int64)width | ( unsigned __int64)declarator);']
['*( _QWORD *)( v9 + 24) = v8;']
['for ( i = *( _QWORD *)( v1 + 40); i; *( _OWORD *)( v3 + 48) = 0LL )']
['*( _QWORD *)( v9 + 24) = v8;']
['*( _DWORD *)v19 = m;']
['v16 = &reg_state[( int)rtuint];']
['if ( *v7 )']
['reorder_insns( v2, v2, nonnote_insn);', 'reorder_insns( v2, v2, nonnote_insn);', 'reorder_insns( v2, v2, nonnote_insn);', 'nonnote_insn = next_nonnote_insn( nonnote_insn);', 'nonnote_insn = next_nonnote_insn( nonnote_insn);', 'nonnote_insn = next_nonnote_insn( ( rtx)v12);', 'v16 = &reg_state[( int)rtuint];', 'real_insn = next_real_insn( rtx);']
['if ( *( _WORD *)v4 == 37 && v4[2].fld[0].rtint > 0 )', 'if ( *( _WORD *)v4 == 37 && v4[2].fld[0].rtint > 0 )', 'if ( *( _WORD *)v8 == 37 && ( unsigned int)( v8[2].fld[0].rtint + 98) <= 5 )', 'if ( *( _WORD *)v8 == 37 && ( unsigned int)( v8[2].fld[0].rtint + 98) <= 5 )']
['if ( *( _WORD *)v4 == 37 && v4[2].fld[0].rtint > 0 )', 'if ( *( _WORD *)v4 == 37 && v4[2].fld[0].rtint > 0 )', 'if ( *( _WORD *)v8 == 37 && ( unsigned int)( v8[2].fld[0].rtint + 98) <= 5 )', 'if ( *( _WORD *)v8 == 37 && ( unsigned int)( v8[2].fld[0].rtint + 98) <= 5 )']
['v7 = ( tree_node *)( ( unsigned __int64)width | ( unsigned __int64)declarator);']
['v7 = ( tree_node *)( ( unsigned __int64)width | ( unsigned __int64)declarator);']
['v7 = ( tree_node *)( ( unsigned __int64)width | ( unsigned __int64)declarator);']
['v8 = gen_reg_rtx( ( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['v12 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)v8 + 2));']
['v8 = gen_reg_rtx( ( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v3 + 2), v3->fld[0].rtx)']
['&& !push_operand( v3, ( machine_mode)*( ( unsigned __int8 *)v3 + 2))']
['v7 = ( tree_node *)( ( unsigned __int64)width | ( unsigned __int64)declarator);']
['if ( ( unsigned int)( mode_class_0[*( ( unsigned __int8 *)reg + 2)] - 5) <= 1 )']
['induction_1 **p_giv; // rbx', 'induction_1 **p_giv; // rbx']
['induction_1 **p_giv; // rbx', 'induction_1 **p_giv; // rbx']
['v5 = simplify_gen_binary( PLUS, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v14, offset);']
['biv = bl_0->biv;', 'biv = biv->next_iv;', 'biv = biv->next_iv;', 'biv = bl_0->biv;', 'biv = bl_0->biv;', 'biv = bl_0->biv;']
['v9 = insn_addresses_->data.i[v10->fld[0].rtint];']
['split_ti( &op, 1, parts, parts + 1);']
['sprintf( label_58, "*.%s%u", "LCFI", v0);']
['v5 = ( __int64)v7[2];', 'v10 = ( __int64)v7[2];', 'v9 = ( __int64)v5[1];', 'v3 = ( __int64)v4[2];', 'v9 = ( __int64)v7[1];', 'v10 = ( __int64)v8[1];', 'v2 = ( __int64)v12[2];']
['v30 = ( tree_node *)*( ( _QWORD *)v9 + 5);']
['full_mode = *( ( unsigned __int8 *)v12 + 2);']
['v6 = v7;', 'v6 = v7;', 'v9 = f;', 'v22 += 59;', 'pwd_1 = v0;', 'v25 = y;', 'v9 = y;', 'v9 = v7;', 'v9 = v7;', 'froma = v7;']
['v30 = ( tree_node *)*( ( _QWORD *)v9 + 5);']
['v5 = *( ( _BYTE *)biv + 100);']
['v6 = v7;', 'v6 = v7;', 'v9 = f;', 'v22 += 59;', 'pwd_1 = v0;', 'v25 = y;', 'v9 = y;', 'v9 = v7;', 'v9 = v7;', 'froma = v7;']
['if ( memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v5 + 2), v5->fld[0].rtx) )']
['v10 = assign_stack_local( ( machine_mode)v6, mode_size[v6], 0);']
['v10 = gen_reg_rtx( ( machine_mode)v6);', 'v19 = gen_reg_rtx( ( machine_mode)v6);']
['if ( memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v5 + 2), v5->fld[0].rtx) )']
['if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)memref + 2), v5)']
['( machine_mode)*( ( unsigned __int8 *)dest_reg + 2),']
['v2 = rtx;']
['rtvec = jc;']
['datumc = v23;']
['*( _OWORD *)v32.r = *( _OWORD *)&args.operand;', '*( _OWORD *)v31.r = *( _OWORD *)&args.operand;', '*( _OWORD *)v33.r = *( _OWORD *)&args.operand;']
['end = ( rtx)end[1];']
['*( _QWORD *)( low + 144) = adjust_address_1( rtl, ( machine_mode)v11, 0LL, 0, 1);']
['fancy_abort( ( const char *)&va, 247, "find_control_dependence");']
['*( _QWORD *)( low + 144) = gen_lowpart_SUBREG( ( machine_mode)v11, rtl);']
['v18 = gen_rtx_fmt_e( USE, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v1->fld[0].rtx);']
['v12 = nonzero_bits( v1->fld[0].rtx, ( machine_mode)*( unsigned __int8 *)( v1->fld[0].rtwint + 2));']
['v1 = gen_rtx_fmt_e( ZERO_EXTEND, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v13.rtx);']
['v28 = nonzero_bits( *( rtx *)( v23.rtwint + 8), ( machine_mode)( unsigned __int8)v9);']
['v25 = simplify_shift_const( 0LL, ASHIFT, ( machine_mode)v11, v1->fld[0].rtx, v10 - ( v7 + v8));']
['v21 = simplify_shift_const( 0LL, ( rtx_code)( i + 89), ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v25, v24);']
['rtx v20; // rbx', 'rtx v20; // rbx']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax']
['rtx v32; // rax', 'rtx v32; // rax']
['rtx v37; // rax', 'rtx v37; // rax']
['v35 = decl->decl.rtl;', 'v35 = decl->decl.rtl;']
['if ( !v35 )']
['v35 = decl->decl.rtl;', 'v35 = decl->decl.rtl;']
['regno_decl[*( unsigned int *)( *( _QWORD *)&v35[1] + 8LL)] = decl;']
['emit_stack_restore( ( save_level)( x_block_stack->next == 0LL), next_label, 0LL);']
['if ( ( tree_node *)*( &global_trees + 7) == section_name )', 'if ( ( tree_node *)*( &global_trees + 2) == section_name )']
['v6 = ( tree_node *)global_trees;']
['v24 = gen_rtx_fmt_u00( LABEL_REF, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v18);']
['v23 = gen_rtx_fmt_u00( LABEL_REF, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v22);']
['rtx v27; // r12', 'rtx v47; // r12', 'rtx v55; // r12', 'rtx v59; // r12', 'rtx v59; // r12', 'rtx v51; // r12']
['rtx v8; // r12', 'rtx v18; // r12', 'rtx v55; // r12', 'rtx v59; // r12', 'rtx v59; // r12', 'rtx v51; // r12']
['rtx v5; // rbx', 'rtx v15; // rbx', 'rtx v6; // rbx', 'rtx v45; // rbx', 'rtx v67; // rbx']
['rtx v7; // rbx', 'rtx v51; // rbx', 'rtx v21; // rbx', 'rtx v41; // rbx', 'rtx v41; // rbx', 'rtx v71; // rax']
['fancy_abort( ( const char *)&va, 273, "find_pdom");']
['rtx v76; // rax', 'rtx v76; // rax']
['rtx v77; // r14', 'rtx v78; // r15']
['rtx v9; // r13', 'rtx v7; // r13', 'rtx v70; // r13']
['v8 = ( char *)allocno_0 + v5;']
['v36 = *( ( _DWORD *)uid_cuid_0 + v35[1]);']
['rtx = gen_rtx_fmt_e( USE, ( machine_mode)*( unsigned __int8 *)( v2.rtwint + 2), *( rtx *)( v2.rtwint + 8));']
['v29 = gen_lowpart_for_combine( ( machine_mode)v25, *( rtx *)&x[1]);']
['v10 = ( tree_node *)v9[5];']
['v22 = ( tree_node *)v15;']
['v25 = ( tree_node *)i5[5];']
['( machine_mode)*( ( unsigned __int8 *)target + 2),']
['if ( ( unsigned int)( mode_class_0[*( ( unsigned __int8 *)reg + 2)] - 5) <= 1 )']
['variant = basic_variant;', 'variant = basic_variant;', 'variant = basic_variant;', 'variant = basic_variant;']
['variant = basic_variant;', 'variant = basic_variant;', 'variant = basic_variant;', 'variant = basic_variant;']
['variant = negate_variant;']
['variant = negate_variant;']
['variant = basic_variant;', 'variant = basic_variant;', 'variant = basic_variant;', 'variant = basic_variant;']
['variant = basic_variant;', 'variant = basic_variant;', 'variant = basic_variant;', 'variant = basic_variant;']
['v18 = gen_rtx_fmt_ee( ( rtx_code)v8, mode, v14, v17);']
['v4 = build_nt( ( tree_code)v1, v3);']
['v4 = build_nt( ( tree_code)v1, v3);']
['v18 = gen_rtx_fmt_ee( ( rtx_code)v8, mode, v14, v17);']
['tree v14; // r13']
['tree v15; // rax', 'tree v15; // rax']
['tree v15; // rax', 'tree v17; // rax', 'tree v29; // rax', 'tree v15; // rax', 'tree v17; // rax', 'tree v18; // rax']
['v12 = type_for_mode( ( machine_mode)v11, unsignedp);']
['v14 = make_tree( v10, mult);']
['v15 = make_tree( v10, x);']
['v16 = build( MULT_EXPR, v10, v15, v14);', 'v16 = build( MULT_EXPR, v10, v15, v14);']
['v16 = build( MULT_EXPR, v10, v15, v14);', 'v16 = build( MULT_EXPR, v10, v15, v14);']
['v17 = fold( v16);']
['v18 = build( PLUS_EXPR, v10, v17, tree);', 'tree = build( PLUS_EXPR, v10->common.type, tree, v20);']
['fancy_abort( ( const char *)&a, 9459, "add_abstract_origin_attribute");', 'fancy_abort( ( const char *)&a, 9459, "add_abstract_origin_attribute");', 'fancy_abort( ( const char *)&a, 9459, "add_abstract_origin_attribute");', 'fancy_abort( ( const char *)&va, 737, "ssa_eliminate_dead_code");']
['v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);', 'v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);']
['v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);', 'v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);']
['*( _OWORD *)( object_base + 24) = 0LL;', '*( _OWORD *)( object_base + 24) = 0LL;', '*( _OWORD *)( object_base + 24) = 0LL;']
['v11 = gen_rtx( ( rtx_code)*( _WORD *)v5, ( machine_mode)*( ( unsigned __int8 *)v5 + 2), v10, v9);', 'v11 = gen_rtx( ( rtx_code)*( _WORD *)v5, ( machine_mode)*( ( unsigned __int8 *)v5 + 2), v10, v9);', 'v11 = gen_rtx( ( rtx_code)*( _WORD *)v5, ( machine_mode)*( ( unsigned __int8 *)v5 + 2), v10, v9);', 'v11 = gen_rtx( ( rtx_code)*( _WORD *)v5, ( machine_mode)*( ( unsigned __int8 *)v5 + 2), v10, v9);', 'v11 = gen_rtx( ( rtx_code)*( _WORD *)v6, ( machine_mode)*( ( unsigned __int8 *)v6 + 2), v10, v5);', 'v11 = gen_rtx( ( rtx_code)*( _WORD *)v6, ( machine_mode)*( ( unsigned __int8 *)v6 + 2), v10, v5);', 'v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);', 'v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);', 'if ( v6 >= 0 || ( *( _BYTE *)( *( _QWORD *)( v4.rtwint + 8) + 17LL) & 0x20) != 0 )', 'if ( statement_code_p( ( tree_code)*( ( unsigned __int8 *)*v6 + 16)) && ( *( ( _BYTE *)*v6 + 19) & 4) == 0 )']
['v11 = gen_rtx( ( rtx_code)*( _WORD *)v5, ( machine_mode)*( ( unsigned __int8 *)v5 + 2), v10, v9);', 'v11 = gen_rtx( ( rtx_code)*( _WORD *)v5, ( machine_mode)*( ( unsigned __int8 *)v5 + 2), v10, v9);', 'v11 = gen_rtx( ( rtx_code)*( _WORD *)v5, ( machine_mode)*( ( unsigned __int8 *)v5 + 2), v10, v9);', 'v11 = gen_rtx( ( rtx_code)*( _WORD *)v5, ( machine_mode)*( ( unsigned __int8 *)v5 + 2), v10, v9);', 'v11 = gen_rtx( ( rtx_code)*( _WORD *)v6, ( machine_mode)*( ( unsigned __int8 *)v6 + 2), v10, v5);', 'v11 = gen_rtx( ( rtx_code)*( _WORD *)v6, ( machine_mode)*( ( unsigned __int8 *)v6 + 2), v10, v5);', 'v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);', 'v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);', 'if ( v6 >= 0 || ( *( _BYTE *)( *( _QWORD *)( v4.rtwint + 8) + 17LL) & 0x20) != 0 )', 'if ( statement_code_p( ( tree_code)*( ( unsigned __int8 *)*v6 + 16)) && ( *( ( _BYTE *)*v6 + 19) & 4) == 0 )']
['if ( v26 != ( tree_node *)global_trees )', 'if ( v7 != ( tree_node *)global_trees )', 'if ( v5 && v5 != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['if ( !explained_1 )']
['explained_1 = 1;']
['rtx g1_add_val; // [rsp+8h] [rbp-30h]']
['g1_add_val = g1->add_val;']
['v14 = gen_rtx_fmt_ee( MULT, ( machine_mode)*( ( unsigned __int8 *)g1_add_val + 2), g1_add_val->fld[0].rtx, v22);', 'v14 = gen_rtx_fmt_ee( MULT, ( machine_mode)*( ( unsigned __int8 *)g1_add_val + 2), g1_add_val->fld[0].rtx, v22);', 'v14 = gen_rtx_fmt_ee( MULT, ( machine_mode)*( ( unsigned __int8 *)g1_add_val + 2), g1_add_val->fld[0].rtx, v22);']
['v14 = gen_rtx_fmt_ee( MULT, ( machine_mode)*( ( unsigned __int8 *)g1_add_val + 2), g1_add_val->fld[0].rtx, v22);', 'v14 = gen_rtx_fmt_ee( MULT, ( machine_mode)*( ( unsigned __int8 *)g1_add_val + 2), g1_add_val->fld[0].rtx, v22);', 'v14 = gen_rtx_fmt_ee( MULT, ( machine_mode)*( ( unsigned __int8 *)g1_add_val + 2), g1_add_val->fld[0].rtx, v22);']
['v14 = gen_rtx_fmt_ee( MULT, ( machine_mode)*( ( unsigned __int8 *)g1_add_val + 2), g1_add_val->fld[0].rtx, v22);', 'v14 = gen_rtx_fmt_ee( MULT, ( machine_mode)*( ( unsigned __int8 *)g1_add_val + 2), g1_add_val->fld[0].rtx, v22);', 'v14 = gen_rtx_fmt_ee( MULT, ( machine_mode)*( ( unsigned __int8 *)g1_add_val + 2), g1_add_val->fld[0].rtx, v22);']
['v14 = gen_rtx_fmt_ee( MULT, ( machine_mode)*( ( unsigned __int8 *)v12 + 2), v12, v6);']
['( rtx_code)*( _WORD *)ext_dependent,']
['( machine_mode)*( ( unsigned __int8 *)ext_dependent + 2),']
['if ( insn != recog_data_0.insn || insn[2].fld[0].rtint < 0 )']
['recog_data_0.insn = insn;', 'recog_data_0.insn = insn;']
['fatal_insn_not_found( insn, "recog.c", 2063, "extract_constrain_insn_cached");']
['v44 = ( tree_node ***)values;']
['v11 = expand_shift( RSHIFT_EXPR, ( machine_mode)v44, op0b, v37, v4, 1);']
['v19 = immed_double_const( v17, v18, ( machine_mode)*( ( unsigned __int8 *)v10 + 2));']
['( machine_mode)*( ( unsigned __int8 *)v15 + 2),', '( machine_mode)*( ( unsigned __int8 *)v10 + 2),']
['v29 = force_reg( ( machine_mode)v15, v10);']
['v8 = ( tree_node *)i[3];', 'v8 = ( tree_node *)v9;', 'v34 = ( tree_node *)v33[4];', 'v34 = ( tree_node *)v33[4];']
['v11 = expand_shift( RSHIFT_EXPR, ( machine_mode)v44, op0b, v37, v4, 1);']
['recog_data_0.n_alternatives = 0;']
['*( _WORD *)&recog_data_0.n_operands = 0;']
['recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;']
['recog_data_0.n_operands = v15;']
['fatal_insn_not_found( insn, "recog.c", 2139, "extract_insn");']
['recog_data_0.operand,']
['recog_data_0.operand_loc,']
['recog_data_0.constraints,']
['recog_data_0.operand_mode);']
['v17 = recog_data_0.constraints[0];']
['recog_data_0.n_alternatives = 1;']
['for ( i = *recog_data_0.constraints[0]; *v17; i = *v17 )']
['recog_data_0.n_alternatives = 1;']
['if ( recog_data_0.n_alternatives <= 30 )']
['if ( recog_data_0.insn != insn || insn[2].fld[0].rtint < 0 )']
['recog_data_0.insn = insn;', 'recog_data_0.insn = insn;']
['( machine_mode)*( ( unsigned __int8 *)rtx + 2),']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['fancy_abort( ( const char *)&a, 8430, "field_byte_offset");']
['imag = ( tree_node *)*( &global_trees + 11);']
['induction_1 *biv; // rax', 'induction_1 *biv; // rax']
['induction_1 *biv; // rax', 'induction_1 *biv; // rax']
['biv = bl_0->biv;', 'biv = bl_0->biv;', 'biv = bl_0->biv;', 'biv = bl_0->biv;']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['src_reg = biv->src_reg;', 'src_reg = biv->src_reg;']
['biv = bl_0->biv;', 'biv = bl_0->biv;', 'biv = bl_0->biv;', 'biv = bl_0->biv;']
['biv = bl_0->biv;', 'biv = bl_0->biv;', 'biv = bl_0->biv;', 'biv = bl_0->biv;']
['src_reg = biv->src_reg;', 'src_reg = biv->src_reg;']
['v9 = gen_reg_rtx( biv->mode);']
['( machine_mode)*( ( unsigned __int8 *)v8 + 2),']
['rtx v6; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v6; // rax']
['v6 = find_base_term( x);']
['if ( !v6 )']
['base_term = v6;']
['if ( ( unsigned __int16)( *( _WORD *)v6 - 67) > 1u && ( *( _WORD *)v6 != 25 || !*( ( _BYTE *)v6 + 2)) )', 'if ( ( unsigned __int16)( *( _WORD *)v6 - 67) > 1u && ( *( _WORD *)v6 != 25 || !*( ( _BYTE *)v6 + 2)) )', 'if ( ( unsigned __int16)( *( _WORD *)v6 - 67) > 1u && ( *( _WORD *)v6 != 25 || !*( ( _BYTE *)v6 + 2)) )']
['if ( ( unsigned __int16)( *( _WORD *)v6 - 67) > 1u && ( *( _WORD *)v6 != 25 || !*( ( _BYTE *)v6 + 2)) )', 'if ( ( unsigned __int16)( *( _WORD *)v6 - 67) > 1u && ( *( _WORD *)v6 != 25 || !*( ( _BYTE *)v6 + 2)) )', 'if ( ( unsigned __int16)( *( _WORD *)v6 - 67) > 1u && ( *( _WORD *)v6 != 25 || !*( ( _BYTE *)v6 + 2)) )']
['if ( ( unsigned __int16)( *( _WORD *)v6 - 67) > 1u && ( *( _WORD *)v6 != 25 || !*( ( _BYTE *)v6 + 2)) )', 'if ( ( unsigned __int16)( *( _WORD *)v6 - 67) > 1u && ( *( _WORD *)v6 != 25 || !*( ( _BYTE *)v6 + 2)) )', 'if ( ( unsigned __int16)( *( _WORD *)v6 - 67) > 1u && ( *( _WORD *)v6 != 25 || !*( ( _BYTE *)v6 + 2)) )']
['rtx base_value; // rax']
['rtx v11; // rax', 'rtx v11; // rax', 'rtx v11; // rax', 'rtx v11; // rax', 'rtx v11; // rax']
['base_value = find_base_value( rtx->fld[0].rtx);']
['if ( base_value )']
['v1 = base_value;']
['v11 = find_base_value( v3);']
['if ( v11 )']
['v3 = v11;']
['rtx v7; // r13']
['v7 = *parg2;']
['if ( ( _WORD)v9 == COMPARE && const_int_rtx[64] == v7 )']
['v7 = ( rtx)exp[1];']
['if ( const_tiny_rtx[0][v8] != v7 )']
['v13 = canon_hash( rtx, ( machine_mode)v8);']
['rtx v21; // rbx']
['rtx v22; // r8']
['rtx v27; // r8']
['rtx v39; // rax', 'rtx v39; // rax', 'rtx v39; // rax', 'rtx v39; // rax', 'rtx v39; // rax']
['rtx v56; // rax', 'rtx v56; // rax', 'rtx v56; // rax']
['rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax']
['rtx v22; // rdi', 'rtx v23; // rdx', 'rtx v24; // rdi']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax']
['rtx v56; // rax', 'rtx v56; // rax', 'rtx v56; // rax']
['rtx *v43; // rax', 'rtx *v66; // rax', 'rtx *v65; // rax']
['rtx v16; // rdx', 'rtx v16; // rdx', 'rtx v16; // rdx', 'rtx v96; // rdx', 'rtx v64; // rdx']
['rtx *v550; // rcx', 'rtx *v557; // rcx', 'rtx *v565; // rcx']
['rtx v18; // rax', 'rtx v9; // rax', 'rtx v8; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v28; // rax', 'rtx v48; // rax', 'rtx v58; // rax', 'rtx v28; // rax', 'rtx v48; // rax', 'rtx v96; // rax', 'rtx v95; // rax', 'rtx v8; // rax', 'rtx v48; // rax', 'rtx v48; // rax', 'rtx v48; // rax', 'rtx v18; // rax', 'rtx v38; // rax', 'rtx v9; // rax', 'rtx v9; // rax', 'rtx v9; // rax', 'rtx v78; // rax', 'rtx v28; // rax', 'rtx v48; // rax', 'rtx v48; // rax', 'rtx v78; // rax', 'rtx v38; // rax']
['rtx expa; // [rsp+20h] [rbp-68h]']
['if ( ( *( ( _BYTE *)cfun + 425) & 1) != 0 && qty_0[v26].n_calls_crossed > 0 )']
['if ( !qty_0[v26].n_calls_crossed )']
['if ( ( unsigned int)( mode_class_0[( int)v9] - 5) > 1 )']
['if ( &unk_952B74 == ( _UNKNOWN *)++v13 )']
['while ( &unk_952B74 != ( _UNKNOWN *)v13 );']
['n_calls_crossed = qty_0[v26].n_calls_crossed;']
['if ( !n_calls_crossed || 4 * n_calls_crossed >= qty_0[v26].n_refs )']
['induction_1 *v12; // rbp', 'induction_1 *v12; // rbp']
['induction_1 *v12; // rbp', 'induction_1 *v12; // rbp']
['( machine_mode)*( ( unsigned __int8 *)x + 2)) )']
['v12 = ( induction_1 *)xmalloc( 0xA8uLL);', 'v12 = ( induction_1 *)xmalloc( 0xA8uLL);']
['v12 = ( induction_1 *)xmalloc( 0xA8uLL);', 'v12 = ( induction_1 *)xmalloc( 0xA8uLL);']
['v12,']
['v12->mem = x;']
['v6 = *( int *)( ( char *)&allocno_0->reg + v5);']
['v8 = ( char *)allocno_0 + v5;']
['v6 = *( int *)( ( char *)&allocno_0->reg + v5);']
['if ( ix86_hard_regno_mode_ok( v15, ( machine_mode)v9) )']
['if ( ( unsigned int)( mode_class_0[( int)v9] - 5) > 1 )']
['v21 = allocno_0;']
['v22 = ( char *)allocno_0 + v89;']
['v24 = *( HARD_REG_ELT_TYPE *)( ( _BYTE *)&allocno_0->hard_reg_copy_preferences + v89) & ~v13;']
['*( HARD_REG_ELT_TYPE *)( ( char *)&allocno_0->hard_reg_copy_preferences + v89) = v24;']
['v11 = ( ( unsigned int)( mode_class_0[v5] - 5) < 2) + 1;']
['if ( ( ( unsigned int)( mode_class_0[v12] - 5) < 2) + 1 + ( unsigned int)v10 > regno )']
['v12 = ( ( unsigned int)( mode_class_0[v10] - 5) < 2) + 1;']
['rtx memloc; // rax']
['rtx v30; // rdi']
['rtx v310; // rax']
['rtx v33; // r12']
['rtx v46; // rax', 'rtx v46; // rax', 'rtx v46; // rax', 'rtx v46; // rax', 'rtx v46; // rax']
['rtx v47; // r12']
['rtx v48; // rax', 'rtx v48; // rax', 'rtx v48; // rax', 'rtx v48; // rax', 'rtx v48; // rax', 'rtx v48; // rax', 'rtx v48; // rax']
['rtx tem; // [rsp+8h] [rbp-40h] BYREF']
['tem = force_const_mem( mode, x);']
['rtx = tem->fld[0].rtx;', 'rtx = tem->fld[0].rtx;']
['v11 = tem;']
['fld = tem->fld;', 'fld = tem->fld;']
['find_reloads_address( mode, &tem, rtx, ( rtx *)fld, opnum, type, ind_levels, 0LL);']
['v20 = force_const_mem( ( machine_mode)*( ( unsigned __int8 *)v11 + 2), *( rtx *)&v11[1]);']
['tem = v20;']
['rtx = tem->fld[0].rtx;', 'rtx = tem->fld[0].rtx;']
['fld = tem->fld;', 'fld = tem->fld;']
['rtx v14; // r15']
['rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax']
['rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx tem; // [rsp+18h] [rbp-40h] BYREF']
['tem = make_memloc( rtx, v13);']
['v14 = tem;', 'v14 = tem;']
['v14 = tem;', 'v14 = tem;']
['tem = make_memloc( x->fld[0].rtx, v13);']
['v20 = rtx_equal_p( tem, reg_equiv_mem[v21]);']
['result = x;']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['if ( replace_reloads && recog_data_0.operand[opnum] != arg0 )']
['( machine_mode)*( ( unsigned __int8 *)v33 + 2),']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['result = gen_lowpart_common( ( machine_mode)*( ( unsigned __int8 *)arg0 + 2), v43);']
['( machine_mode)*( unsigned __int8 *)( arg0->fld[0].rtwint + 2));']
['v45 = legitimate_address_p( ( machine_mode)*( ( unsigned __int8 *)result + 2), v44->fld[0].rtx, 1);']
['result = gen_lowpart_common( ( machine_mode)*( ( unsigned __int8 *)arg0 + 2), v41);']
['return gen_rtx_fmt_ee( ( rtx_code)*( _WORD *)v3, ( machine_mode)*( ( unsigned __int8 *)v3 + 2), replacement, v10);', 'return gen_rtx_fmt_ee( ( rtx_code)*( _WORD *)v3, ( machine_mode)*( ( unsigned __int8 *)v3 + 2), replacement, v10);']
['return gen_rtx_fmt_ee( ( rtx_code)*( _WORD *)v3, ( machine_mode)*( ( unsigned __int8 *)v3 + 2), replacement, v10);', 'return gen_rtx_fmt_ee( ( rtx_code)*( _WORD *)v3, ( machine_mode)*( ( unsigned __int8 *)v3 + 2), replacement, v10);']
['( machine_mode)*( unsigned __int8 *)( v7->fld[0].rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)v7 + 2));']
['return gen_rtx_REG( ( machine_mode)*( ( unsigned __int8 *)*loc + 2), rtint + v12);']
['( machine_mode)( unsigned __int8)v8,']
['rtx *single_use; // rax']
['rtx v16; // rcx', 'rtx v35; // rcx', 'rtx v31; // rcx', 'rtx v37; // rcx', 'rtx v36; // rax', 'rtx v36; // rax', 'rtx v36; // rbx', 'rtx v33; // rcx']
['rtx v279; // rax']
['rtx v10; // r13', 'rtx v83; // r13', 'rtx v80; // r12', 'rtx v10; // r13', 'rtx v70; // r13', 'rtx v40; // r13']
['rtx v20; // rsi', 'rtx v10; // rsi', 'rtx v70; // rsi', 'rtx v50; // rsi', 'rtx v93; // rsi', 'rtx v20; // rsi', 'rtx v50; // rsi', 'rtx v10; // rsi']
['rtx v593; // rax']
['rtx desta; // [rsp+0h] [rbp-58h]']
['v10 = ix86_register_move_cost( m1, ( reg_class)v3, v5);']
['best_cost = ix86_register_move_cost( m1, ( reg_class)v3, v5);']
['if ( ( tree_node *)global_trees != v3 )']
['v14 = memory_address( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), fixed);']
['v11 = gen_rtx_MEM( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v10);', 'v15 = gen_rtx_MEM( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v14);', 'v4 = gen_rtx_MEM( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v3);', 'v18 = gen_rtx_MEM( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v17);']
['if ( **( _WORD **)( v7.rtwint + 16) != 54 || memory_address_p( ( machine_mode)*( ( unsigned __int8 *)x + 2), v7.rtx) )']
['rtx *v20; // r14', 'rtx v28; // r10', 'rtx *v24; // r12', 'rtx *v31; // r10', 'rtx *v62; // r10', 'rtx *v24; // r12', 'rtx *v23; // r13', 'rtx v36; // r10']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax']
['rtx *v31; // r10']
['rtx v2; // rbp', 'rtx v12; // rbp', 'rtx v30; // rbp', 'rtx v12; // rbp']
['rtx v38; // rax', 'rtx v38; // rax']
['rtx v49; // r15', 'rtx v48; // r15']
['rtx v50; // rbp']
['rtx v53; // r14']
['rtx v55; // rdx']
['*( _QWORD *)( v11.rtwint + 8) = walk_fixup_memory_subreg( *( rtx *)( v11.rtwint + 8), insn, ( machine_mode)v13, v14);']
['rtx seq; // [rsp+8h] [rbp-50h]']
['seq = ( rtx)*( ( _QWORD *)v11 + 4);']
['seq->fld[v16].rtwint = ( __int64)get_insns( );']
['add_dependence( insn, v7->fld[0].rtx, ( reg_note)v6);', 'add_dependence( insn, v9->fld[0].rtx, ( reg_note)v6);']
['add_dependence( insn, v7->fld[0].rtx, ( reg_note)v6);']
['add_dependence( insn, v9->fld[0].rtx, ( reg_note)v6);']
['rtx v57; // rax', 'rtx v57; // rax', 'rtx v57; // rax']
['rtx v58; // rax', 'rtx v50; // rdx', 'rtx v18; // rdx', 'rtx v53; // rdx', 'rtx v55; // rdx', 'rtx v8; // rdx', 'rtx v18; // rdx']
['rtx *v65; // rax']
['rtx *v17; // r12']
['rtx to_rtx; // r14']
['rtx v9; // r13']
['rtx v106; // rax']
['sprintf( label, "*.%s%u", ( const char *)&a.dw_attr_val, v16);']
['v22 = gen_rtx_fmt_s( SYMBOL_REF, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v21);']
['rtx v21; // rbp', 'rtx v30; // rbp', 'rtx v21; // rbp']
['rtx v32; // rdi', 'rtx v30; // rdi', 'rtx v34; // rdx', 'rtx v24; // rdi', 'rtx v34; // rdx', 'rtx v37; // rdi']
['rtx v37; // rax', 'rtx v37; // rax']
['edge succ; // rax']
['edge v39; // rdx', 'edge v44; // rdx']
['succ = entry_exit_blocks[0].succ;']
['if ( succ )']
['if ( e == succ )', 'if ( e == succ )']
['v39 = succ;', 'v39 = succ;']
['v39 = succ;', 'v39 = succ;']
['succ = succ->succ_next;', 'succ = succ->succ_next;']
['succ = succ->succ_next;', 'succ = succ->succ_next;']
['if ( !succ )']
['if ( e == succ )', 'if ( e == succ )']
['rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax']
['v4 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)value + 2));']
['return expand_binop( ( machine_mode)*( ( unsigned __int8 *)value + 2), v6, v19, v20, target, 0, OPTAB_LIB_WIDEN);']
['v27 = negate_rtx( ( machine_mode)*( ( unsigned __int8 *)value + 2), *( rtx *)&value[1]);', 'v27 = negate_rtx( ( machine_mode)*( ( unsigned __int8 *)value + 2), *( rtx *)&value[1]);']
['v27 = negate_rtx( ( machine_mode)*( ( unsigned __int8 *)value + 2), *( rtx *)&value[1]);', 'v27 = negate_rtx( ( machine_mode)*( ( unsigned __int8 *)value + 2), *( rtx *)&value[1]);']
['v7 = v27;']
['v11 = expand_binop( ( machine_mode)*( ( unsigned __int8 *)value + 2), v6, v10, v7, v4, 0, OPTAB_LIB_WIDEN);']
['return expand_binop( ( machine_mode)*( ( unsigned __int8 *)value + 2), v6, v11, v12, target, 0, OPTAB_LIB_WIDEN);']
['v18 = force_reg( ( machine_mode)*( unsigned __int8 *)( value->fld[0].rtwint + 2), v17);']
['return simplify_gen_subreg( ( machine_mode)*( ( unsigned __int8 *)value + 2), v18, ( machine_mode)v15, v16);', 'return simplify_gen_subreg( ( machine_mode)*( ( unsigned __int8 *)value + 2), v18, ( machine_mode)v15, v16);']
['return simplify_gen_subreg( ( machine_mode)*( ( unsigned __int8 *)value + 2), v18, ( machine_mode)v15, v16);', 'return simplify_gen_subreg( ( machine_mode)*( ( unsigned __int8 *)value + 2), v18, ( machine_mode)v15, v16);']
['return expand_mult( ( machine_mode)*( ( unsigned __int8 *)value + 2), v24, v25, target, 1);']
['rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax']
['rtx v33; // rax', 'rtx v33; // rax', 'rtx v33; // rax', 'rtx v33; // rax']
['rtx v36; // rax', 'rtx v36; // rax']
['rtx v57; // rax', 'rtx v57; // rax', 'rtx v57; // rax']
['rtx v75; // rax', 'rtx v75; // rax']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);', 'return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);', 'return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);', 'return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);', 'return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);', 'return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);', 'return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);', 'return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);', 'return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);', 'return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);', 'return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);', 'return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);', 'return gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);']
['v18 = gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);']
['else if ( in_section_0 != in_text )']
['in_section_0 = in_text;', 'in_section_0 = in_text;']
['immediate_operand( recog_data_0.operand[1], VOIDmode);']
['v16 = immediate_operand( recog_data_0.operand[1], VOIDmode);']
['v21 = general_operand( recog_data_0.operand[0], QImode);']
['v2 = &insn_data_0[optab_table[0]->handlers[*( ( unsigned __int8 *)x + 2)].insn_code];']
['if ( !operand->predicate( x, ( machine_mode)*( ( unsigned __int16 *)operand + 8))']
['|| !operand[1].predicate( x, ( machine_mode)*( ( unsigned __int16 *)&operand[1] + 8))']
['|| !operand[2].predicate( y, ( machine_mode)*( ( unsigned __int16 *)&operand[2] + 8)) )']
['v4 = &insn_data_0[insn_code];', 'v4 = &insn_data_0[insn_code];']
['if ( operand->predicate( r0, ( machine_mode)*( ( unsigned __int16 *)operand + 8))', 'if ( operand->predicate( r0, ( machine_mode)*( ( unsigned __int16 *)operand + 8))']
['&& operand[1].predicate( r1, ( machine_mode)*( ( unsigned __int16 *)&operand[1] + 8))', '&& operand[1].predicate( r1, ( machine_mode)*( ( unsigned __int16 *)&operand[1] + 8))']
['&& operand[2].predicate( c, ( machine_mode)*( ( unsigned __int16 *)&operand[2] + 8)) )', '&& operand[2].predicate( c, ( machine_mode)*( ( unsigned __int16 *)&operand[2] + 8)) )']
['fancy_abort( ( const char *)&a, 5026, "add_child_die");']
['v21 = ( tree_node *)rtl[7];']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['result = simplify_binary_operation( code, mode, v5, rtx);']
['if ( result )', 'if ( result )', 'if ( result )', 'if ( result )']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['result = simplify_binary_operation( code, mode, rtx, v5);']
['if ( result )', 'if ( result )', 'if ( result )', 'if ( result )']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['result = simplify_binary_operation( code, mode, op0, op1);']
['if ( result )', 'if ( result )', 'if ( result )', 'if ( result )']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['result = simplify_relational_operation( code, v8, rtx, v5);']
['if ( !result )', 'if ( !result )']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['rtx v11; // rax', 'rtx v11; // rax', 'rtx v11; // rax', 'rtx v11; // rax', 'rtx v11; // rax']
['if ( !call_insn_operand( rtx, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4)) )', 'if ( !call_insn_operand( rtx, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4)) )', 'if ( !call_insn_operand( rtx, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4)) )', 'if ( !call_insn_operand( rtx, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4)) )']
['( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),']
['v11 = emit_call_insn( v10);']
['use_reg( ( rtx *)&v11[4], v9);']
['rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax']
['if ( !call_insn_operand( rtx, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4)) )', 'if ( !call_insn_operand( rtx, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4)) )', 'if ( !call_insn_operand( rtx, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4)) )', 'if ( !call_insn_operand( rtx, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4)) )']
['( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),']
['v15 = emit_call_insn( v14);']
['use_reg( ( rtx *)&v15[4], v12);']
['if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )']
['if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )']
['fancy_abort( ( const char *)&a, 10568, "gen_label_die");']
['if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )']
['fancy_abort( ( const char *)&a, 10025, "gen_formal_parameter_die");']
['fancy_abort( ( const char *)&a, 9459, "add_abstract_origin_attribute");', 'fancy_abort( ( const char *)&a, 9459, "add_abstract_origin_attribute");', 'fancy_abort( ( const char *)&a, 9459, "add_abstract_origin_attribute");']
['x = force_reg( ( machine_mode)*( ( unsigned __int8 *)x + 2), x);']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx last_insn; // rbx', 'rtx last_insn; // rbx']
['rtx v48; // [rsp+0h] [rbp-40h] BYREF', 'rtx true0; // [rsp+30h] [rbp-58h] BYREF', 'rtx false0; // [rsp+40h] [rbp-48h] BYREF', 'rtx second; // [rsp+10h] [rbp-48h] BYREF', 'rtx tmp; // [rsp+0h] [rbp-58h] BYREF', 'rtx v27; // [rsp+0h] [rbp-38h] BYREF', 'rtx headp; // [rsp+A0h] [rbp-B8h] BYREF', 'rtx x; // [rsp+28h] [rbp-60h] BYREF']
['v4 = ( unsigned int)mode_class_0[mode];']
['result = rtx;']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['pinsn[0] = a2;']
['slot_with_hash = htab_find_slot_with_hash( ( __int64)hash_table_0, ( __int64)v9, v8, create != 0);']
['if ( !debug_no_type_hash )']
['v24 = gen_rtx_fmt_ee( SET, VOIDmode, *v22, nan);', 'v12 = gen_rtx_fmt_ee( SET, VOIDmode, v11, v10);']
['v24 = gen_rtx_fmt_ee( SET, VOIDmode, *v22, nan);', 'v12 = gen_rtx_fmt_ee( SET, VOIDmode, v11, v10);']
['return ++last_alias_set_5;']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['result = rtx->fld[0].rtx;']
['if ( *( _WORD *)result == 66 )']
['if ( *( ( unsigned __int8 *)result + 2) == mode )']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['result = gen_lowpart_common( mode, rtx);']
['if ( result )', 'if ( result )', 'if ( result )', 'if ( result )']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['return gen_rtx_fmt_ee( ( rtx_code)( unsigned __int16)v6, mode, rtx->fld[0].rtx, *( rtx *)&rtx[1]);']
['result = simplify_gen_subreg( mode, rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v8);', 'result = simplify_gen_subreg( mode, rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v8);']
['result = simplify_gen_subreg( mode, rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v8);', 'result = simplify_gen_subreg( mode, rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v8);']
['if ( !result )', 'if ( !result )']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['if ( mode_class_0[v3] == MODE_CC && optab_table[30]->handlers[v3].insn_code == CODE_FOR_nothing )']
['return insn_data_0[optab_table[30]->handlers[v6].insn_code].genfun( v8, v9);']
['operands[4] = gen_rtx_REG( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), 17);']
['if ( generating_concat_p && ( v9 = mode_class_0[mode], ( unsigned int)( v9 - 5) <= 1) )']
['rtx last_insn; // rbx', 'rtx last_insn; // rbx']
['rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax']
['rtx v20; // r15', 'rtx v20; // r15', 'rtx v20; // r15']
['rtx v23; // rax', 'rtx v23; // rax', 'rtx v23; // rax']
['rtx v29; // r9', 'rtx v29; // r9']
['rtx v31; // r12']
['rtx v37; // rax', 'rtx v37; // rax']
['rtx secondary_mem; // rax']
['rtx v40; // r14', 'rtx v40; // r14']
['v7 = ( rtx *)( v5->fld[0].rtwint + 8);', 'v7 = ( rtx *)( v5->fld[0].rtwint + 8);']
['v7 = ( rtx *)( v5->fld[0].rtwint + 8);', 'v7 = ( rtx *)( v5->fld[0].rtwint + 8);']
['v7 = ( rtx *)( v5->fld[0].rtwint + 8);', 'v7 = ( rtx *)( v5->fld[0].rtwint + 8);']
['result[1] = ( rtx_def)v3;']
['v7 = ( rtx *)( v5->fld[0].rtwint + 8);', 'v7 = ( rtx *)( v5->fld[0].rtwint + 8);']
['if ( MEMORY[0x1009868DF] )']
['v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);']
['v5 = trunc_int_for_mode( 1 << operands[2]->fld[0].rtwint, ( machine_mode)( !v2 + 4));']
['v8 = gen_rtx_fmt_ee( MULT, ( machine_mode)( !v2 + 4), v7, v6);']
['v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);']
['v3 = trunc_int_for_mode( 1 << operands[2]->fld[0].rtwint, ( machine_mode)( !v2 + 4));']
['ix86_split_fp_branch( ( rtx_code)*( _WORD *)*operands, operands[1], operands[2], operands[3], operands[4], 0LL);']
['ix86_split_fp_branch( ( rtx_code)*( _WORD *)*operands, operands[1], operands[2], operands[3], operands[4], operands[5]);']
['v1 = ix86_force_to_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2), operands[1]);', 'v1 = ix86_force_to_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2), operands[1]);']
['v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);', 'v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);', 'v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);']
['v4 = gen_rtx_fmt_ee( ( rtx_code)*( _WORD *)operands[3], ( machine_mode)*( ( unsigned __int8 *)operands[3] + 2), v2, v3);', 'v4 = gen_rtx_fmt_ee( ( rtx_code)*( _WORD *)operands[3], ( machine_mode)*( ( unsigned __int8 *)operands[3] + 2), v2, v3);']
['v4 = gen_rtx_fmt_ee( ( rtx_code)*( _WORD *)operands[3], ( machine_mode)*( ( unsigned __int8 *)operands[3] + 2), v2, v3);', 'v4 = gen_rtx_fmt_ee( ( rtx_code)*( _WORD *)operands[3], ( machine_mode)*( ( unsigned __int8 *)operands[3] + 2), v2, v3);']
['ix86_free_from_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2));', 'ix86_free_from_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2));']
['v1 = ix86_force_to_memory( ( machine_mode)*( ( unsigned __int8 *)operands[2] + 2), operands[2]);']
['v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);', 'v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);', 'v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);']
['v4 = gen_rtx_fmt_ee( ( rtx_code)*( _WORD *)operands[3], ( machine_mode)*( ( unsigned __int8 *)operands[3] + 2), v3, v2);', 'v4 = gen_rtx_fmt_ee( ( rtx_code)*( _WORD *)operands[3], ( machine_mode)*( ( unsigned __int8 *)operands[3] + 2), v3, v2);']
['v4 = gen_rtx_fmt_ee( ( rtx_code)*( _WORD *)operands[3], ( machine_mode)*( ( unsigned __int8 *)operands[3] + 2), v3, v2);', 'v4 = gen_rtx_fmt_ee( ( rtx_code)*( _WORD *)operands[3], ( machine_mode)*( ( unsigned __int8 *)operands[3] + 2), v3, v2);']
['ix86_free_from_memory( ( machine_mode)*( ( unsigned __int8 *)operands[2] + 2));']
['v7 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v2, const_int_rtx[64]);', 'v7 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v2, const_int_rtx[64]);']
['v7 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v2, const_int_rtx[64]);', 'v7 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v2, const_int_rtx[64]);']
['v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);', 'v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);']
['v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);', 'v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);']
['v8 = gen_rtx( ( rtx_code)*( _WORD *)operand1, ( machine_mode)*( ( unsigned __int8 *)operand1 + 2), v7, v6);', 'v8 = gen_rtx( ( rtx_code)*( _WORD *)operand1, ( machine_mode)*( ( unsigned __int8 *)operand1 + 2), v7, v6);']
['v8 = gen_rtx( ( rtx_code)*( _WORD *)operand1, ( machine_mode)*( ( unsigned __int8 *)operand1 + 2), v7, v6);', 'v8 = gen_rtx( ( rtx_code)*( _WORD *)operand1, ( machine_mode)*( ( unsigned __int8 *)operand1 + 2), v7, v6);']
['*( _WORD *)operands[1] = swap_condition( ( rtx_code)*( _WORD *)v21);']
['if ( const0_operand( operands[2], ( machine_mode)*( ( unsigned __int8 *)*operands + 2)) )']
['v10 = gen_rtx( ( rtx_code)*( _WORD *)v6, ( machine_mode)*( ( unsigned __int8 *)v6 + 2), v9, v7);', 'v10 = gen_rtx( ( rtx_code)*( _WORD *)v6, ( machine_mode)*( ( unsigned __int8 *)v6 + 2), v9, v7);']
['v10 = gen_rtx( ( rtx_code)*( _WORD *)v6, ( machine_mode)*( ( unsigned __int8 *)v6 + 2), v9, v7);', 'v10 = gen_rtx( ( rtx_code)*( _WORD *)v6, ( machine_mode)*( ( unsigned __int8 *)v6 + 2), v9, v7);']
['v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);', 'v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);']
['v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);', 'v12 = gen_rtx( ( rtx_code)*( _WORD *)v1, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v11, v10);']
['v1 = ix86_force_to_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2), operands[1]);', 'v1 = ix86_force_to_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2), operands[1]);']
['v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);', 'v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);', 'v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);']
['ix86_free_from_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2));', 'ix86_free_from_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2));']
['v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);']
['v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);']
['v8 = gen_lowpart( ( machine_mode)( !v2 + 4), v7);', 'v8 = gen_lowpart( ( machine_mode)( !v2 + 4), v7);']
['v12 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( !v2 + 4), v10, v9);']
['v13 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v12, v11);']
['v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);']
['v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);']
['v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);']
['v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);']
['v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);']
['v10 = gen_rtx_fmt_ee( MULT, ( machine_mode)( !v2 + 4), v8, v7);']
['v11 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v10, v9);']
['v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);']
['v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);']
['v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);']
['v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);']
['v8 = gen_lowpart( ( machine_mode)( !v2 + 4), v7);', 'v8 = gen_lowpart( ( machine_mode)( !v2 + 4), v7);']
['v13 = gen_rtx_fmt_ee( MULT, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v10, v9);']
['v14 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v13, v11);']
['v15 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v14, v12);']
['v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);']
['v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);']
['v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);', 'v6 = gen_lowpart( ( machine_mode)( !v2 + 4), v5);']
['v5 = gen_lowpart( ( machine_mode)v4, operands[1]);']
['v8 = gen_lowpart( ( machine_mode)( !v6 + 4), v7);']
['v12 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( !v6 + 4), v11, v10);']
['v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), operands[1]);']
['v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);', 'v4 = gen_lowpart( ( machine_mode)( !v2 + 4), v3);']
['v13 = gen_rtx( ( rtx_code)*( _WORD *)operand1, VOIDmode, operand4, operand5);', 'v13 = gen_rtx( ( rtx_code)*( _WORD *)operand1, VOIDmode, operand4, operand5);']
['v13 = gen_rtx( ( rtx_code)*( _WORD *)operand1, VOIDmode, operand4, operand5);', 'v13 = gen_rtx( ( rtx_code)*( _WORD *)operand1, VOIDmode, operand4, operand5);']
['v4 = &insn_data_0[insn_code];', 'v4 = &insn_data_0[insn_code];']
['if ( operand->predicate( r0, ( machine_mode)*( ( unsigned __int16 *)operand + 8))', 'if ( operand->predicate( r0, ( machine_mode)*( ( unsigned __int16 *)operand + 8))']
['&& operand[1].predicate( r1, ( machine_mode)*( ( unsigned __int16 *)&operand[1] + 8))', '&& operand[1].predicate( r1, ( machine_mode)*( ( unsigned __int16 *)&operand[1] + 8))']
['&& operand[2].predicate( c, ( machine_mode)*( ( unsigned __int16 *)&operand[2] + 8)) )', '&& operand[2].predicate( c, ( machine_mode)*( ( unsigned __int16 *)&operand[2] + 8)) )']
['if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )']
['fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");']
['if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE )']
['sprintf( label, "*.%s%u", ( const char *)&a.dw_attr_val, v16);']
['if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )', 'if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )']
['fancy_abort( ( const char *)&a, 9459, "add_abstract_origin_attribute");', 'fancy_abort( ( const char *)&a, 9459, "add_abstract_origin_attribute");', 'fancy_abort( ( const char *)&a, 9459, "add_abstract_origin_attribute");']
['v3 = ( tree_node *)ggc_alloc( v2);']
['fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");']
['( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),', '( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4),']
['fancy_abort( ( const char *)&a, 10121, "gen_type_die_for_member");']
['fancy_abort( ( const char *)&a, 9459, "add_abstract_origin_attribute");', 'fancy_abort( ( const char *)&a, 9459, "add_abstract_origin_attribute");', 'fancy_abort( ( const char *)&a, 9459, "add_abstract_origin_attribute");']
['fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");']
['fancy_abort( ( const char *)&a, 4387, "AT_flag");']
['if ( !( _BYTE)v5 && ( mode_class_0[mode] & 0xFFFFFFFD) != 1 )']
['if ( trunc_int_for_mode( op->fld[0].rtwint, ( machine_mode)v3) != op->fld[0].rtwint )']
['if ( mode_class_0[v5] == MODE_FLOAT && mode_size[v5] > mode_size[*( ( unsigned __int8 *)rtwint + 2)] )']
['if ( *( _WORD *)v10 != 70 && !legitimate_address_p( ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v10, 0) )']
['result = lang_hooks_0.get_alias_set( i);']
['v18 = ++last_alias_set_5;']
['result = lang_hooks_0.get_alias_set( section_name);']
['result = ++last_alias_set_5;', 'result = ++last_alias_set_5;', 'result = ++last_alias_set_5;']
['fatal_insn_not_found( insn, "insn-attrtab.c", 12189, "get_attr_athlon_decode");']
['LODWORD( v3) = memory_operand( recog_data_0.operand[1], VOIDmode) != 0;', 'LODWORD( v3) = memory_operand( recog_data_0.operand[1], VOIDmode) != 0;']
['fatal_insn_not_found( insn, "insn-attrtab.c", 11973, "get_attr_athlon_fpunits");']
['if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( register_operand( recog_data_0.operand[1], SImode) || immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( mult_operator( recog_data_0.operand[3], SFmode) )', 'if ( mult_operator( recog_data_0.operand[3], SFmode) )', 'if ( mult_operator( recog_data_0.operand[3], SFmode) )']
['if ( !mult_operator( recog_data_0.operand[3], SFmode) )']
['if ( mult_operator( recog_data_0.operand[3], SFmode) )', 'if ( mult_operator( recog_data_0.operand[3], SFmode) )', 'if ( mult_operator( recog_data_0.operand[3], SFmode) )']
['if ( !mult_operator( recog_data_0.operand[3], XFmode) )']
['if ( mult_operator( recog_data_0.operand[3], TFmode) )']
['fatal_insn_not_found( insn, "insn-attrtab.c", 13438, "get_attr_i387");']
['if ( mult_operator( recog_data_0.operand[3], SFmode) )', 'if ( mult_operator( recog_data_0.operand[3], SFmode) )', 'if ( mult_operator( recog_data_0.operand[3], SFmode) )']
['if ( mult_operator( recog_data_0.operand[3], DFmode) )']
['if ( get_attr_type( insn) != TYPE_FOP && !mult_operator( recog_data_0.operand[3], XFmode) )']
['if ( get_attr_type( insn) != TYPE_FOP && !mult_operator( recog_data_0.operand[3], TFmode) )']
['fatal_insn_not_found( insn, "insn-attrtab.c", 13072, "get_attr_imm_disp");']
['if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode) )']
['if ( !memory_displacement_operand( recog_data_0.operand[0], VOIDmode) )']
['return immediate_operand( recog_data_0.operand[1], VOIDmode) != 0;']
['if ( !q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( !q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( !q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( !q_regs_operand( recog_data_0.operand[0], QImode) )']
['if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )']
['v3 = incdec_operand( recog_data_0.operand[2], DImode);']
['if ( !incdec_operand( recog_data_0.operand[2], SImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], SImode) )']
['if ( !incdec_operand( recog_data_0.operand[2], HImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], HImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], HImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], HImode) )']
['if ( !incdec_operand( recog_data_0.operand[2], QImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], QImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], QImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], QImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], QImode) )']
['if ( const1_operand( recog_data_0.operand[2], VOIDmode)']
['|| !const1_operand( recog_data_0.operand[2], VOIDmode) )']
['if ( const0_operand( recog_data_0.operand[2], SImode)']
['&& memory_displacement_operand( recog_data_0.operand[0], VOIDmode)']
['&& immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( !const0_operand( recog_data_0.operand[2], DImode)']
['if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )']
['v5 = recog_data_0.operand[1];']
['fatal_insn_not_found( insn, "insn-attrtab.c", 15861, "get_attr_memory");']
['if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )']
['if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )']
['if ( memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )']
['&& symbolic_operand( recog_data_0.operand[1], SImode) )']
['if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) && memory_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )']
['fatal_insn_not_found( insn, "insn-attrtab.c", 17669, "get_attr_mode");']
['v18 = aligned_operand( recog_data_0.operand[1], HImode) == 0;']
['if ( !aligned_operand( recog_data_0.operand[1], HImode) )', 'if ( !aligned_operand( recog_data_0.operand[1], HImode) )']
['if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )']
['fatal_insn_not_found( insn, "insn-attrtab.c", 19258, "get_attr_pent_pair");']
['if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[0], VOIDmode) )']
['if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode) )']
['if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode) )']
['if ( memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( memory_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( aligned_operand( recog_data_0.operand[1], HImode) )', 'if ( aligned_operand( recog_data_0.operand[1], HImode) )', 'if ( aligned_operand( recog_data_0.operand[1], HImode) )']
['if ( !q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( !q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( !q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( !q_regs_operand( recog_data_0.operand[0], QImode) )']
['if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )']
['if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )']
['if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( !pic_symbolic_operand( recog_data_0.operand[2], DImode) )']
['if ( pic_symbolic_operand( recog_data_0.operand[2], SImode) )', 'if ( pic_symbolic_operand( recog_data_0.operand[2], SImode) )']
['v9 = incdec_operand( recog_data_0.operand[2], HImode) == 0;']
['if ( !incdec_operand( recog_data_0.operand[2], HImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], HImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], HImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], HImode) )']
['|| !incdec_operand( recog_data_0.operand[2], QImode)']
['if ( !incdec_operand( recog_data_0.operand[2], QImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], QImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], QImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], QImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], QImode) )']
['rtx v9; // rdx']
['fatal_insn_not_found( insn, "insn-attrtab.c", 21978, "get_attr_type");']
['if ( flag_pic && symbolic_operand( recog_data_0.operand[1], SImode) )', 'if ( flag_pic && symbolic_operand( recog_data_0.operand[1], SImode) )', 'if ( flag_pic && symbolic_operand( recog_data_0.operand[1], SImode) )']
['if ( aligned_operand( recog_data_0.operand[1], HImode) )', 'if ( aligned_operand( recog_data_0.operand[1], HImode) )', 'if ( aligned_operand( recog_data_0.operand[1], HImode) )']
['if ( register_operand( recog_data_0.operand[0], QImode) )']
['if ( !q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( !q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( !q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( !q_regs_operand( recog_data_0.operand[0], QImode) )']
['if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( !flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )']
['if ( ( _DWORD)which_alternative == 2 || pic_symbolic_operand( recog_data_0.operand[2], DImode) )']
['if ( !incdec_operand( recog_data_0.operand[2], DImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], DImode) )']
['if ( pic_symbolic_operand( recog_data_0.operand[2], SImode) )', 'if ( pic_symbolic_operand( recog_data_0.operand[2], SImode) )']
['if ( incdec_operand( recog_data_0.operand[2], SImode) )', 'if ( incdec_operand( recog_data_0.operand[2], SImode) )']
['if ( !incdec_operand( recog_data_0.operand[2], HImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], HImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], HImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], HImode) )']
['if ( !incdec_operand( recog_data_0.operand[2], QImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], QImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], QImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], QImode) )', 'if ( !incdec_operand( recog_data_0.operand[2], QImode) )']
['if ( !register_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( !register_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( !register_operand( recog_data_0.operand[0], VOIDmode) )']
['v7 = swap_condition( ( rtx_code)*v3);']
['v9 = ( tree_node *)*( &global_trees + 15);']
['v10 = ( tree_node *)*( &global_trees + 17);']
['imag = *( tree_node **)( high + 40);']
['rtx op; // [rsp+8h] [rbp-60h] BYREF', 'rtx note; // [rsp+8h] [rbp-90h] BYREF']
['v1 = base_value;']
['return gen_lowpart_for_combine( ( machine_mode)*( ( unsigned __int8 *)x + 2), last_value);']
['v20 = reg_class_names_9[v14];', 'v11 = find_base_value( v3);']
['if ( valuea[0] )']
['* floor_log2_wide( *( int *)( ( char *)&qty_0->n_refs + v5)))']
['addr[0] = copy_rtx( rtx);']
['addr[0] = copy_rtx( rtx);']
['while ( rtx_class[*( _WORD *)nonnote_insn] != 105 )']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return v5;', 'return result;']
['v25 = ( ( unsigned int)( mode_class_0[v27] - 5) < 2) + 1;']
['*v4 = gen_rtx_fmt_e( CLOBBER, ( machine_mode)*( ( unsigned __int8 *)v7 + 2), const_int_rtx[64]);']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['v36 = *( ( _DWORD *)uid_cuid_0 + v35[1]);']
['if ( ( mode_class_0[v6] & 0xFFFFFFF9) == 1 )']
['find_reloads_address( v7, 0LL, v10->fld[0].rtx, ( rtx *)v10->fld, opnum, ( reload_type)v13, 0, 0LL);']
['rtx v6; // r12', 'rtx v6; // r12']
['v6 = rtx;', 'v6 = rtx;']
['v6 = rtx;', 'v6 = rtx;']
['( machine_mode)*( unsigned __int8 *)( v5.rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)rtx + 2))]']
['v23 = ( page_entry_0 *)( &G + 2640);']
['v25 = ( page_group_0 *)entrya;']
['v25 = ( page_group_0 *)entrya;', 'v3 = ( page_group_0 *)( &G + 2648);', 'v3 = ( page_group_0 *)( &G + 2648);']
['if ( length == 1 && ( sch_istable[*( unsigned __int8 *)contents] & 4) != 0 )']
['v14 = ( ( unsigned int)( mode_class_0[v15] - 5) < 2) + 1;', 'v17 = ( ( unsigned int)( mode_class_0[v14] - 5) < 2) + 1;', 'v17 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;', 'v12 = ( ( unsigned int)( mode_class_0[v15] - 5) < 2) + 1;']
['v13 = ( ( unsigned int)( mode_class_0[v11] - 5) < 2) + 1;']
['v23 = ( ( unsigned int)( mode_class_0[v20] - 5) < 2) + 1;', 'v25 = ( ( unsigned int)( mode_class_0[v22] - 5) < 2) + 1;']
['v35 = ( ( unsigned int)( mode_class_0[v23] - 5) < 2) + 1;', 'v31 = ( ( unsigned int)( mode_class_0[v28] - 5) < 2) + 1;', 'v27 = ( ( unsigned int)( mode_class_0[v29] - 5) < 2) + 1;', 'v31 = ( ( unsigned int)( mode_class_0[v27] - 5) < 2) + 1;']
['v34 = ( ( unsigned int)( mode_class_0[v17] - 5) < 2) + 1;', 'v31 = ( ( unsigned int)( mode_class_0[v27] - 5) < 2) + 1;']
['v44 = ( ( unsigned int)( mode_class_0[v41] - 5) < 2) + 1;', 'v17 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;', 'v4 = ( ( unsigned int)( mode_class_0[v6] - 5) < 2) + 1;']
['rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax']
['v12 = rtx;']
['v11 = _mm_load_si128( ( const __m128i *)&zero_cum_47);']
['v17 = _mm_load_si128( ( const __m128i *)&zero_cum_47);', 'v11 = _mm_load_si128( ( const __m128i *)&zero_cum_47);']
['v9 = f;', 'v9 = y;']
['while ( *( _WORD *)v7 != 37 )', 'while ( *( _WORD *)v5 != 37 )']
['( machine_mode)*( unsigned __int8 *)( *( _QWORD *)&v12[2 * v15 + 2] + 2LL),']
['( machine_mode)*( unsigned __int8 *)( *( _QWORD *)&rtwint[2 * v18 + 2] + 2LL),']
['v13 = cselib_lookup( x, ( machine_mode)*( ( unsigned __int8 *)x + 2), create);']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)( 5 - ( ( ( unsigned int)target_flags & 0x2000000) == 0)), v8, result);']
['rtx last_value; // rax', 'rtx last_value; // rax']
['rtx v22; // r11']
['rtx v59; // rax', 'rtx v59; // rax']
['rtx v60; // rax', 'rtx v60; // rax', 'rtx v60; // rax', 'rtx v60; // rax']
['rtx v23; // rax', 'rtx v6; // rax', 'rtx v33; // rax', 'rtx v33; // rax', 'rtx v43; // rax', 'rtx v61; // rax', 'rtx v43; // rax', 'rtx v43; // rax', 'rtx v6; // rax', 'rtx v60; // rax', 'rtx v6; // rax', 'rtx v33; // rax', 'rtx v60; // rax', 'rtx v53; // rax', 'rtx v33; // rax', 'rtx v23; // rax', 'rtx v6; // rax', 'rtx v62; // rax', 'rtx v23; // rax', 'rtx v43; // rax', 'rtx v13; // rax', 'rtx v60; // rax', 'rtx v60; // rax', 'rtx v53; // rax', 'rtx v13; // rax', 'rtx v53; // rax', 'rtx v43; // rax', 'rtx v53; // rax', 'rtx v83; // rax', 'rtx v62; // rax', 'rtx v6; // rax', 'rtx v13; // rax']
['if ( ( mode_class_0[mode] & 0xFFFFFFFD) == 1 )']
['if ( !target_isnan( d) && *( _OWORD *)d.r == *( _OWORD *)dconst0.r && dconst0.r[2] == d.r[2] )']
['while ( *( _OWORD *)u.d.r != *( _OWORD *)&result[1] || result[2] != u.d.r[2] )']
['result[1] = ( rtx_def)v3;']
['if ( !*( ( _BYTE *)op + 2) && mode && ( mode_class_0[mode] & 0xFFFFFFFD) != 1 )']
['rtx v21; // rax', 'rtx v21; // rax', 'rtx v21; // rax', 'rtx v21; // rax', 'rtx v21; // rax']
['v19 = canon_rtx( rtx);', 'v12 = canon_rtx( rtx);']
['v23 = v21;']
['if ( ( *( ( _BYTE *)v19 + 3) & 4) == 0 )']
['v21.rtwint = ( __int64)v19->fld[0];']
['v2 = rtx_alloc( ( rtx_code)*( _WORD *)notes);']
['v18 = rtx_alloc( ( rtx_code)v2);']
['v18 = rtx_alloc( ( rtx_code)v2);']
['v18 = rtx_alloc( ( rtx_code)v2);']
['v18 = rtx_alloc( ( rtx_code)v2);']
['v18 = rtx_alloc( ( rtx_code)v2);']
['v18 = rtx_alloc( ( rtx_code)v2);']
['v18 = rtx_alloc( ( rtx_code)v2);']
['v18 = rtx_alloc( ( rtx_code)v2);']
['v3 = lang_hooks_0.expand_constant( value);']
['if ( ( mode_class_0[v28] & 0xFFFFFFF9) != 1']
['if ( ( mode_class_0[v31] & 0xFFFFFFF9) != 1']
['v7 = ( tree_node *)*( &global_trees + 14);', 'v7 = ( tree_node *)*( &global_trees + 14);']
['if ( ( tree_node *)*( &global_trees + 14) != v7 )']
['v3 = lang_hooks_0.expand_constant( v3->vector.elements);']
['v7 = ( tree_node *)*( &global_trees + 14);', 'v7 = ( tree_node *)*( &global_trees + 14);']
['rtx s2; // [rsp+8h] [rbp-40h]']
['v23 = ( ( unsigned int)( mode_class_0[v20] - 5) < 2) + 1;', 'v44 = ( ( unsigned int)( mode_class_0[v41] - 5) < 2) + 1;']
['&& ( v4 = *( ( unsigned __int8 *)x + 2), mode_class_0[v4] == MODE_INT)']
['&& ( v5 = *( unsigned __int8 *)( v2.rtwint + 2), mode_class_0[v5] == MODE_INT)']
['v6 = test_insn_13;', 'v6 = test_insn_13;']
['v44[v45->reg_qty].const_insn = this_insn_0;']
['v17 = adjust_address_1( to, v9, v8, 1, 1);']
['if ( !memory_address_p( v9, addr[0]) )']
['v32 = v15;', 'v5 = v8;']
['v36 = edge_info_0;', 'v6 = test_insn_13;', 'v6 = test_insn_13;']
['v15 = ( unsigned int)( mode_class_0[v11] - 5) <= 1;']
['v36 = *( ( _DWORD *)uid_cuid_0 + v35[1]);']
['if ( v36 > cse_basic_block_end || *( ( _DWORD *)uid_cuid_0 + *v35) < cse_basic_block_start )']
['if ( v36 > *( ( _DWORD *)uid_cuid_0 + *( int *)( reg_n_info->data.l[first_reg] + 4)) )']
['*( _OWORD *)&v7->src = 0LL;', '*( _OWORD *)&v7->insns = 0LL;']
['reg_eqv_table[v8] = ( reg_eqv_elem)-1LL;']
['fatal_insn_not_found( insn, "insn-attrtab.c", 356, "insn_default_length");']
['if ( !register_operand( recog_data_0.operand[0], DImode) )']
['if ( !register_operand( recog_data_0.operand[0], SImode) )']
['if ( !register_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( !register_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( !register_operand( recog_data_0.operand[0], VOIDmode) )']
['rtx v13; // r8']
['rtx v14; // r9']
['rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax']
['rtx s1a; // [rsp+0h] [rbp-48h]']
['rtx s1; // [rsp+0h] [rbp-48h]']
['rtx s2; // [rsp+8h] [rbp-40h]']
['v13 = 0LL;']
['v4 = *( tree_node **)( v2 + 32);']
['v8 = ( tree_node *)v9;']
['v11 = *( tree_node **)( low + 8);', 'v11 = *( tree_node **)( v10 + 8);']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v12; // rax']
['v7 = canon_hash( rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2)) & 0x1F;']
['v27 = ( ( unsigned int)( mode_class_0[v23] - 5) < 2) + 1;']
['v44 = ( ( unsigned int)( mode_class_0[v41] - 5) < 2) + 1;']
['v12 = canon_rtx( rtx);']
['v13 = v12;', 'v13 = v12;', 'v13 = v12;']
['full_mode = *( ( unsigned __int8 *)v12 + 2);']
['v15 = ( ( unsigned int)( mode_class_0[v12] - 5) < 2) + 1;']
['invalidate( *( rtx *)( v8.rtwint + 8), ( machine_mode)*( unsigned __int8 *)( v8.rtwint + 2));']
['invalidate( v6->fld[0].rtx, ( machine_mode)*( ( unsigned __int8 *)v6 + 2));']
['v36 = *( ( _DWORD *)uid_cuid_0 + v35[1]);']
['reverse_condition_0( ( rtx_code)v1);']
['v14 = CSWTCH_1605[v13];']
['v12 = gen_rtx_fmt_ee( PLUS, ( machine_mode)*( ( unsigned __int8 *)v3 + 2), v11, v10);']
['rtx v12; // rcx']
['rtx v24; // rcx']
['v12 = rtx;']
['rtx = v12;']
['v25 = y;']
['LODWORD( v1) = recog_data_0.n_operands - 1;']
['v2 = recog_data_0.operand[v1];']
['LODWORD( v3) = recog_data_0.n_operands - 1;']
['v6 = recog_data_0.operand[v3];']
['fatal_insn( "unknown insn mode", insn, "i386.c", 9956, "ix86_attr_length_immediate_default");']
['v4 = CSWTCH_1591[v5];']
['if ( ( unsigned int)( mode_class_0[*( ( unsigned __int8 *)reg + 2)] - 5) <= 1 )']
['rtx v12; // rdx', 'rtx v12; // rdx']
['rtx v21; // rdx', 'rtx v21; // rdx']
['v12 = rtx;', 'v12 = note;', 'v12 = note;', 'v12 = v10;', 'v12 = v10;', 'v12 = v10;', 'v12 = 0LL;']
['rtx = v12;']
['v21 = *v9;']
['rtx = v8;', 'rtx = v9;', 'rtx = v9;', 'rtx = v12;']
['v7 = gen_rtx_MEM( ( machine_mode)v6, pointer);', 'v6 = gen_rtx_MEM( ( machine_mode)v5, pointer);']
['v10 = adjust_address_1( v5, ( machine_mode)v4, v8, 1, 1);']
['v43 = gen_rtx_REG( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v41);']
['v7 = gen_rtx_REG( ( machine_mode)v4, v6);', 'v6 = gen_rtx_REG( ( machine_mode)v4, v5);']
['v7 = gen_rtx_MEM( ( machine_mode)v6, pointer);', 'v6 = gen_rtx_MEM( ( machine_mode)v5, pointer);']
['v8 = adjust_address_1( v7, ( machine_mode)v6, offset, 1, 1);', 'v7 = adjust_address_1( v6, ( machine_mode)v5, offset, 1, 1);']
['if ( *( _WORD *)v9 == 55 && mode_class_0[*( ( unsigned __int8 *)v8 + 2)] == MODE_FLOAT )']
['v7 = gen_rtx_REG( ( machine_mode)v4, v6);']
['v18 = gen_rtx_fmt_ee( PLUS, ( machine_mode)v4, y, x);']
['v26 = gen_rtx_REG( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), 2);']
['v28 = gen_rtx_fmt_ee( PLUS, ( machine_mode)v27, global_rtl[4], v26);']
['v31 = gen_rtx_MEM( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), global_rtl[4]);']
['v34 = gen_rtx_fmt_ee( PLUS, ( machine_mode)v27, global_rtl[2], v26);']
['*operands = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), *operands);', '*operands = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), *operands);']
['v15 = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v15);', 'v15 = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v15);']
['*operands = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), *operands);', '*operands = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), *operands);']
['v15 = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v15);', 'v15 = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v15);']
['v28 = reverse_condition_maybe_unordered( ( rtx_code)*( _WORD *)v24);']
['v34 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)*operands + 2));']
['tmp = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)*operands + 2));']
['v8 = gen_rtx_fmt_eee( IF_THEN_ELSE, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v5, v7, operands[3]);']
['( machine_mode)*( ( unsigned __int8 *)*operands + 2),', '( machine_mode)*( ( unsigned __int8 *)*operands + 2),']
['( machine_mode)*( ( unsigned __int8 *)*operands + 2),', '( machine_mode)*( ( unsigned __int8 *)*operands + 2),']
['rtx v17; // r8']
['rtx v25; // rax', 'rtx v25; // rax', 'rtx v25; // rax', 'rtx v25; // rax']
['if ( ( ( mode_class_0[mode] & 0xFFFFFFFB) == 2 || mode_class_0[mode] == MODE_VECTOR_FLOAT)', 'if ( ( ( mode_class_0[mode] & 0xFFFFFFFB) == 2 || mode_class_0[mode] == MODE_VECTOR_FLOAT)']
['if ( ( ( mode_class_0[mode] & 0xFFFFFFFB) == 2 || mode_class_0[mode] == MODE_VECTOR_FLOAT)', 'if ( ( ( mode_class_0[mode] & 0xFFFFFFFB) == 2 || mode_class_0[mode] == MODE_VECTOR_FLOAT)']
['v16 = head;', 'v12 = mode_class_0[5];', 'v12 = mode_class_0[4];', 'v8 = addr[0];', 'v8 = addr[0];', 'v8 = addr[0];', 'v8 = addr[0];', 'v7 = head;']
['v8 = *( _WORD *)v7;', 'v8 = *( _WORD *)v7;', 'v11 = *( _WORD *)v10;']
['if ( *( _WORD *)v12 != 61 )', 'if ( *( _WORD *)v10 != 36 )']
['v21.rtwint = ( __int64)v19->fld[0];']
['v24 = force_reg( ( machine_mode)v6, v15);']
['v24 = force_reg( ( machine_mode)v6, v15);']
['v28 = gen_reg_rtx( ( machine_mode)v26);']
['v28 = gen_reg_rtx( ( machine_mode)v26);']
['v16 = head;', 'v12 = mode_class_0[5];', 'v12 = mode_class_0[4];', 'v8 = addr[0];', 'v8 = addr[0];', 'v8 = addr[0];', 'v8 = addr[0];', 'v7 = head;']
['v17 = v15;', 'v19 = v16;', 'v19 = v16;', 'v10 = v5;', 'v10 = v5;', 'v11 = v27;']
['v8 = reverse_condition_maybe_unordered( ( rtx_code)( unsigned __int16)**( ( _WORD **)&test + 1));']
['v16 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), global_rtl[2], v15);']
['v1 = gen_rtx_fmt_e( PRE_DEC, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), global_rtl[2]);', 'v17 = gen_rtx_fmt_e( PRE_DEC, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), global_rtl[2]);', 'v12 = gen_rtx_fmt_e( PRE_DEC, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), global_rtl[2]);']
['v1 = gen_rtx_fmt_e( PRE_DEC, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), global_rtl[2]);', 'v17 = gen_rtx_fmt_e( PRE_DEC, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), global_rtl[2]);', 'v12 = gen_rtx_fmt_e( PRE_DEC, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), global_rtl[2]);']
['v3 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), global_rtl[2], v2);']
['v36 = *( ( _DWORD *)uid_cuid_0 + v35[1]);']
['v6 = CSWTCH_1605[v4];']
['|| ( v8 = *( ( _BYTE *)x + 2), ( mode_class_0[v8] & 0xFFFFFFFB) == 2)']
['v36 = *( ( _DWORD *)uid_cuid_0 + v35[1]);']
['if ( ( mode_class_0[v1] & 0xFFFFFFFB) != 2 && mode_class_0[v1] != MODE_VECTOR_FLOAT )', 'if ( ( mode_class_0[v1] & 0xFFFFFFFB) != 2 && mode_class_0[v1] != MODE_VECTOR_FLOAT )']
['if ( ( mode_class_0[v1] & 0xFFFFFFFB) != 2 && mode_class_0[v1] != MODE_VECTOR_FLOAT )', 'if ( ( mode_class_0[v1] & 0xFFFFFFFB) != 2 && mode_class_0[v1] != MODE_VECTOR_FLOAT )']
['if ( ( ( mode_class_0[mode] & 0xFFFFFFFB) == 2 || mode_class_0[mode] == MODE_VECTOR_FLOAT)', 'if ( ( ( mode_class_0[mode] & 0xFFFFFFFB) == 2 || mode_class_0[mode] == MODE_VECTOR_FLOAT)']
['if ( ( ( mode_class_0[mode] & 0xFFFFFFFB) == 2 || mode_class_0[mode] == MODE_VECTOR_FLOAT)', 'if ( ( ( mode_class_0[mode] & 0xFFFFFFFB) == 2 || mode_class_0[mode] == MODE_VECTOR_FLOAT)']
['|| ( v8 = *( ( _BYTE *)x + 2), ( mode_class_0[v8] & 0xFFFFFFFB) == 2)']
['v36 = *( ( _DWORD *)uid_cuid_0 + v35[1]);']
['v8 = ( ( unsigned int)( mode_class_0[( int)v4] - 5) < 2) + 1;']
['v14 = CSWTCH_1605[v13];']
['v14 = CSWTCH_1605[v20];']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['rtx v38; // r15']
['rtx v40; // r13']
['rtx i; // [rsp+8h] [rbp-50h]']
['rtx second; // [rsp+10h] [rbp-48h] BYREF']
['rtx bypass; // [rsp+18h] [rbp-40h] BYREF']
['v11 = ix86_expand_fp_compare( code, op1, op2, tmp, &second, &bypass);', 'v11 = ix86_expand_fp_compare( code, op1, op2, tmp, &second, &bypass);']
['v11 = ix86_expand_fp_compare( code, op1, op2, tmp, &second, &bypass);', 'v11 = ix86_expand_fp_compare( code, op1, op2, tmp, &second, &bypass);']
['v13 = bypass;']
['if ( !bypass )', 'if ( !bypass )']
['v40 = global_rtl[0];']
['v42 = v40;']
['v43 = gen_rtx_fmt_eee( IF_THEN_ELSE, VOIDmode, bypass, v41, v42);']
['if ( !bypass )', 'if ( !bypass )']
['rtx tmp; // [rsp+0h] [rbp-58h] BYREF']
['rtx xp; // [rsp+8h] [rbp-30h] BYREF']
['rtx parts; // [rsp+18h] [rbp-40h] BYREF']
['rtx y; // [rsp+20h] [rbp-38h]']
['rtx v41; // [rsp+28h] [rbp-30h]']
['v6 = ix86_split_to_parts( operands[1], &parts, ( machine_mode)*( ( unsigned __int8 *)*operands + 2));', 'v6 = ix86_split_to_parts( operands[1], &parts, ( machine_mode)*( ( unsigned __int8 *)*operands + 2));']
['v6 = ix86_split_to_parts( operands[1], &parts, ( machine_mode)*( ( unsigned __int8 *)*operands + 2));', 'v6 = ix86_split_to_parts( operands[1], &parts, ( machine_mode)*( ( unsigned __int8 *)*operands + 2));']
['ix86_split_to_parts( *operands, &tmp, ( machine_mode)*( ( unsigned __int8 *)*operands + 2));', 'ix86_split_to_parts( *operands, &tmp, ( machine_mode)*( ( unsigned __int8 *)*operands + 2));']
['ix86_split_to_parts( *operands, &tmp, ( machine_mode)*( ( unsigned __int8 *)*operands + 2));', 'ix86_split_to_parts( *operands, &tmp, ( machine_mode)*( ( unsigned __int8 *)*operands + 2));']
['v25 = y;']
['y = change_address( y, ( machine_mode)*( ( unsigned __int8 *)y + 2), v41->fld[0].rtx);', 'y = change_address( y, ( machine_mode)*( ( unsigned __int8 *)y + 2), v41->fld[0].rtx);']
['y = change_address( y, ( machine_mode)*( ( unsigned __int8 *)y + 2), v41->fld[0].rtx);', 'y = change_address( y, ( machine_mode)*( ( unsigned __int8 *)y + 2), v41->fld[0].rtx);']
['y = change_address( y, ( machine_mode)*( ( unsigned __int8 *)y + 2), v41->fld[0].rtx);', 'y = change_address( y, ( machine_mode)*( ( unsigned __int8 *)y + 2), v41->fld[0].rtx);']
['y = change_address( y, ( machine_mode)*( ( unsigned __int8 *)y + 2), v41->fld[0].rtx);', 'y = change_address( y, ( machine_mode)*( ( unsigned __int8 *)y + 2), v41->fld[0].rtx);']
['rtx v16; // rax', 'rtx v16; // rax', 'rtx v16; // rax', 'rtx v16; // rax']
['rtx pool_constant; // rax']
['rtx op; // [rsp+8h] [rbp-60h] BYREF']
['if ( !push_operand( op, VOIDmode) )']
['v16 = copy_rtx( op);', 'v16 = copy_rtx( op);']
['v16 = copy_rtx( op);', 'v16 = copy_rtx( op);']
['*( ( _BYTE *)v16 + 2) = ( ( BYTE3( target_flags) & 2) != 0) + 4;']
['parts[2] = v16;']
['v7 = ( tree_node *)( ( unsigned __int64)width | ( unsigned __int64)declarator);']
['&& ( mode_class_0[*( ( unsigned __int8 *)x + 2)] & 0xFFFFFFFB) != 2', '&& ( ( mode_class_0[*( ( unsigned __int8 *)v8 + 2)] & 0xFFFFFFFB) != 2']
['v37 = mode_class_0[*( ( unsigned __int8 *)x + 2)];']
['&& ( mode_class_0[*( ( unsigned __int8 *)val + 2)] & 0xFFFFFFFB) != 2', '&& ( ( mode_class_0[*( ( unsigned __int8 *)v8 + 2)] & 0xFFFFFFFB) != 2']
['if ( ( unsigned int)( mode_class_0[*( ( unsigned __int8 *)reg + 2)] - 5) <= 1 )']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['if ( comparison_dominates_p( v5, ( rtx_code)v8) )']
['&& ( v3.rtwint = ( __int64)exp->fld[0], mode_class_0[*( unsigned __int8 *)( v3.rtwint + 2)] == MODE_CC)']
['( rtx_code)*( _WORD *)x,', '( rtx_code)*( _WORD *)x,']
['rtx v33; // r12']
['rtx v39; // rax', 'rtx v39; // rax', 'rtx v39; // rax', 'rtx v39; // rax', 'rtx v39; // rax']
['rtx v47; // rax', 'rtx v47; // rax']
['v19 = gen_rtx_fmt_Ei( UNSPEC, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v18, 15);']
['v20 = gen_rtx_fmt_e( CONST, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v19);']
['v11 = gen_rtx_MEM( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v10);', 'v15 = gen_rtx_MEM( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v14);', 'v18 = gen_rtx_MEM( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v17);']
['v22 = set_31;', 'v22 = set_31;']
['set_31 = new_alias_set( );']
['v22 = set_31;', 'v22 = set_31;']
['v16 = gen_reg_rtx( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4));', 'v60 = gen_reg_rtx( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4));', 'v1 = gen_reg_rtx( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4));']
['v19 = gen_rtx_fmt_Ei( UNSPEC, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v18, 15);']
['v20 = gen_rtx_fmt_e( CONST, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v19);']
['v3 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), global_rtl[2], v2);']
['v36 = gen_rtx_MEM( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v35);']
['v36 = gen_rtx_MEM( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v35);']
['v22 = set_31;', 'v22 = set_31;']
['v3 = gen_rtx_fmt_s( SYMBOL_REF, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), pic_label_name);']
['fancy_abort( ( const char *)&a, 7976, "loc_descriptor");']
['return mem_loc_descriptor( rtl->fld[0].rtx, ( machine_mode)*( ( unsigned __int8 *)rtl + 2));']
['fancy_abort( ( const char *)&a, 8292, "loc_descriptor_from_tree");']
['sprintf( label, "*.%s%u", ( const char *)&a.dw_attr_val, v16);']
['last_insn = get_last_insn( );', 'last_insn = get_last_insn( );']
['rttree = rtl[6].fld[0].rttree;']
['if ( in_section_0 != in_named || strcmp( name, in_named_name) )']
['if ( in_section_0 != in_named || strcmp( name, in_named_name) )']
['if ( in_section_0 != in_named || strcmp( name, in_named_name) )']
['p_int_cst = &writer->int_cst.int_cst;']
['if ( spelling_0 <= v1 )']
['delete_related_insns( nonnote_insn);', 'edge_info_0[edge_index] = succ->succ_next;']
['if ( in_section_0 == in_text )', 'if ( in_section_0 == in_text )']
['delete_related_insns( nonnote_insn);', 'v0->alloc_node = alloc_node_0;']
['if_stack_0 = ( if_elt *)xrealloc( if_stack_0, 32LL * ( v3 + 10));', 'if_stack_0 = ( if_elt *)xrealloc( if_stack_0, 32LL * ( v3 + 10));']
['rttree = rtl[6].fld[0].rttree;']
['*( _OWORD *)&result->insns = 0LL;', '*( _WORD *)&recog_data_0.n_operands = 0;', '*( _OWORD *)total_hist_br_prob = 0LL;', '*( _OWORD *)&total_hist_br_prob[4] = 0LL;', '*( _OWORD *)&total_hist_br_prob[8] = 0LL;', '*( _OWORD *)&total_hist_br_prob[12] = 0LL;', '*( _OWORD *)&total_hist_br_prob[16] = 0LL;', '*( _QWORD *)object_base = *v7;']
['fprintf( asm_out_file, ".%s%u:\\n", ( const char *)&a.dw_attr_val, ( unsigned int)labelno);']
['induction_1 *biv; // rbx', 'induction_1 *biv; // rbx']
['induction_1 *biv; // rbx', 'induction_1 *biv; // rbx']
['induction_1 *v5; // rax', 'induction_1 *v5; // rax', 'induction_1 *biv; // rax', 'induction_1 *biv; // rax']
['induction_1 *v5; // rax', 'induction_1 *v5; // rax', 'induction_1 *biv; // rax', 'induction_1 *biv; // rax']
['biv = bl_0->biv;', 'biv = bl_0->biv;', 'biv = bl_0->biv;', 'biv = bl_0->biv;']
['if ( biv )']
['src_reg = biv->src_reg;', 'src_reg = biv->src_reg;']
['src_reg = biv->src_reg;', 'src_reg = biv->src_reg;']
['if ( succ )']
['if ( ( *( ( _BYTE *)v19 + 3) & 4) == 0 )']
['src_reg = biv->src_reg;', 'src_reg = biv->src_reg;']
['if ( !debug_no_type_hash )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )']
['if ( ( *( ( _BYTE *)v19 + 3) & 4) == 0 )']
['insn_scopes->data.l[v4->fld[0].rtint] = v3;']
['v9 = gen_reg_rtx( biv->mode);', 'v15 = gen_rtvec( 2, v14, v12);', 'v15 = gen_rtvec( 2, v14, v12);']
['end = emit_insn_after( v24, end);', 'end = emit_insn_after( v24, end);']
['add_dependence( insn, v7->fld[0].rtx, ( reg_note)v6);', 'add_dependence( insn, v9->fld[0].rtx, ( reg_note)v6);']
['add_dependence( insn, v7->fld[0].rtx, ( reg_note)v6);', 'add_dependence( insn, v9->fld[0].rtx, ( reg_note)v6);']
['rtx v5; // rax', 'rtx v5; // rax', 'rtx v5; // rax']
['v5 = insn;']
['rtint = v5->fld[0].rtint;']
['v8 = *( _WORD *)v5;']
['v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['if ( !v5 )']
['if ( v5 == reference || !rtx )']
['induction_1 *biv; // rbx', 'induction_1 *biv; // rbx', 'induction_1 *biv; // rax', 'induction_1 *biv; // rax']
['induction_1 *biv; // rbx', 'induction_1 *biv; // rbx', 'induction_1 *biv; // rax', 'induction_1 *biv; // rax']
['induction_1 *v5; // rax', 'induction_1 *v5; // rax', 'induction_1 *v34; // rbp', 'induction_1 *v34; // rbp', 'induction_1 *v51; // rbx', 'induction_1 *v51; // rbx']
['induction_1 *v5; // rax', 'induction_1 *v5; // rax', 'induction_1 *v34; // rbp', 'induction_1 *v34; // rbp', 'induction_1 *v51; // rbx', 'induction_1 *v51; // rbx']
['rtx v55; // rax', 'rtx v55; // rax', 'rtx v55; // rax']
['rtx v46; // r12', 'rtx v55; // r12', 'rtx v6; // r12', 'rtx v6; // r12', 'rtx v59; // r12', 'rtx v59; // r12', 'rtx v46; // r12', 'rtx v51; // r12']
['rtx v58; // rax']
['rtx v72; // rax']
['rtx increment; // [rsp+8h] [rbp-60h]']
['rtx desta; // [rsp+0h] [rbp-58h]']
['induction_1 *biv_inc; // [rsp+18h] [rbp-50h]', 'induction_1 *biv_inc; // [rsp+18h] [rbp-50h]']
['induction_1 *biv_inc; // [rsp+18h] [rbp-50h]', 'induction_1 *biv_inc; // [rsp+18h] [rbp-50h]']
['v12 = expand_mult_add( v11, reg, mult, add, ( machine_mode)*( ( unsigned __int8 *)reg + 2), 1);']
['v10 = expand_mult_add( v9, reg, v8, v7, ( machine_mode)*( ( unsigned __int8 *)reg + 2), 1);']
['v9 = expand_mult_add( v8, reg, mult, add, ( machine_mode)*( ( unsigned __int8 *)reg + 2), 1);']
['return gen_rtx_fmt_e( ( rtx_code)v16, mode, rtx);']
['( machine_mode)*( unsigned __int8 *)( *( _QWORD *)( v3->fld[0].rtwint + 8) + 2LL),']
['v70 = gen_rtx_fmt_ee( ( rtx_code)*( unsigned __int16 *)v3->fld[0].rtwint, v8, v69, v68);']
['if ( ix86_hard_regno_mode_ok( v11, ( machine_mode)( BYTE5( type->block.abstract_origin) >> 1)) )']
['v22 = gen_rtx_fmt_i0( REG, ( machine_mode)LOBYTE( decl->block.supercontext), v11);']
['if ( ( unsigned int)( mode_class_0[v23] - 5) > 1 )']
['v15 = gen_rtx_fmt_s( SYMBOL_REF, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), low);']
['v16 = gen_rtx_MEM( ( machine_mode)LOBYTE( decl->block.supercontext), v15);']
['*( _OWORD *)&result->insns = 0LL;']
['*( _OWORD *)&result->pred_next = 0LL;']
['*( _OWORD *)&result->src = 0LL;']
['*( _OWORD *)&result->flags = 0LL;']
['rtx v19; // r15', 'rtx v14; // r15', 'rtx v16; // r15', 'rtx v25; // r15']
['rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax']
['rtx *v24; // r12', 'rtx *v24; // r12']
['rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax']
['rtx v33; // rax', 'rtx v33; // rax', 'rtx v33; // rax', 'rtx v33; // rax']
['rtx v16; // rcx', 'rtx v35; // rcx', 'rtx v31; // rcx', 'rtx v37; // rcx', 'rtx v36; // rax', 'rtx v36; // rax', 'rtx v36; // rbx', 'rtx v33; // rcx']
['rtx v42; // rax', 'rtx v42; // rax', 'rtx v42; // rax']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['result = adjust_address_1( v3, ( machine_mode)*( ( unsigned __int8 *)ad + 2), 0LL, 0, 1);', 'result = adjust_address_1( v3, ( machine_mode)*( ( unsigned __int8 *)ad + 2), 0LL, 0, 1);']
['result = adjust_address_1( v3, ( machine_mode)*( ( unsigned __int8 *)ad + 2), 0LL, 0, 1);', 'result = adjust_address_1( v3, ( machine_mode)*( ( unsigned __int8 *)ad + 2), 0LL, 0, 1);']
['if ( reg_equiv_memory_loc[regno] == result )']
['return copy_rtx( result);']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['v3 = ( tree_node *)ggc_alloc( v2);']
['*( _OWORD *)&result->src = 0LL;', '*( _OWORD *)( s + 1) = 0LL;', '*( ( _OWORD *)v14 + 2) = -1LL;']
['*( _OWORD *)equot = 0LL;']
['*( _OWORD *)( s + 1) = 0LL;']
['*( _OWORD *)&result->src = 0LL;', '*( _OWORD *)( s + 1) = 0LL;', '*( ( _OWORD *)v14 + 3) = -1LL;']
['tree v14; // r12']
['tree v15; // rax', 'tree v15; // rax']
['tree v14; // r12', 'tree v16; // r12']
['tree v15; // rax', 'tree v17; // rax', 'tree v29; // rax', 'tree v15; // rax', 'tree v17; // rax', 'tree v18; // rax']
['tree v22; // rax']
['tree v21; // r12', 'tree v25; // r12', 'tree v16; // r12']
['v4 = ( ( unsigned int)( mode_class_0[v2] - 5) < 2) + 1;']
['if ( ( unsigned int)( mode_class_0[v11] - 5) > 1 )']
['v8 = ( ( unsigned int)( mode_class_0[( int)v4] - 5) < 2) + 1;']
['( machine_mode)( unsigned __int8)v8,', '( machine_mode)( unsigned __int8)v29,']
['( machine_mode)( unsigned __int8)v28);']
['v8 = ( ( unsigned int)( mode_class_0[( int)v4] - 5) < 2) + 1;']
['v14 = ( unsigned int)( mode_class_0[v11] - 5) <= 1;']
['rtx v18; // r12', 'rtx v19; // r15', 'rtx v78; // r15', 'rtx v14; // r15', 'rtx v48; // r15', 'rtx v38; // r15', 'rtx v16; // r15']
['rtx v19; // r15']
['rtx v247; // r15']
['rtx mem_set_list; // r13']
['rtx v28; // r10', 'rtx v20; // r11', 'rtx v22; // r11', 'rtx v24; // r11']
['rtx expa; // [rsp+20h] [rbp-68h]']
['rtx *listp; // [rsp+10h] [rbp-48h]']
['rtx prev; // [rsp+18h] [rbp-40h]']
['listp = &pbi->mem_set_list;']
['free_INSN_LIST_list( listp);', 'free_INSN_LIST_list( listp);']
['v9 = ( ( unsigned int)( mode_class_0[v8] - 5) < 2) + 1;', 'v9 = ( ( unsigned int)( mode_class_0[v8] - 5) < 2) + 1;']
['if ( *( _WORD *)v9 == 55 && mode_class_0[*( ( unsigned __int8 *)v8 + 2)] == MODE_FLOAT )']
['|| mode_class_0[*( unsigned __int8 *)( x->fld[0].rtwint + 2)] == MODE_FLOAT']
['|| mode_class_0[*( unsigned __int8 *)( *( _QWORD *)&x[1] + 2LL)] == MODE_FLOAT )']
['if ( mode_class_0[*( ( unsigned __int8 *)x + 2)] == MODE_FLOAT || v9 == 54 && !*( ( _QWORD *)v7 + 1) )']
['if ( ( unsigned int)( mode_class_0[*( ( unsigned __int8 *)reg + 2)] - 5) <= 1 )']
['v19 = ( const char *)&off_6F019E;']
['if ( ( sch_istable[*( unsigned __int8 *)*format] & 4) != 0 )']
['if ( ( sch_istable[v13] & 4) == 0 )']
['rtx v8; // rax', 'rtx v8; // rax']
['rtx pool_constant_mark; // rax']
['pool_constant_mark = get_pool_constant_mark( v3, marked);']
['if ( *( _WORD *)pool_constant_mark != 68 )']
['rtx = pool_constant_mark;']
['if ( ( *( ( _BYTE *)pool_constant_mark + 3) & 4) != 0 )']
['get_pool_constant_mark( pool_constant_mark, marked);']
['v10 = mem_loc_descriptor( v3->fld[0].rtx, ( machine_mode)*( ( unsigned __int8 *)v3 + 2));']
['v8 = gen_rtx_fmt_ee( PLUS, *(short *)0xmode, rtx->fld[0].rtx, v7);']
['v4 = *( _WORD *)v8;']
['rtx = v8;']
['rtx v10; // r13', 'rtx v13; // r14', 'rtx v16; // r14', 'rtx v12; // r14', 'rtx v10; // r13', 'rtx v40; // r14', 'rtx v14; // r14', 'rtx v40; // r14', 'rtx v10; // r12']
['rtx constant_term; // [rsp+8h] [rbp-30h] BYREF']
['v3 = force_reg_0( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), x);']
['constant_term = const_int_rtx[64];']
['v9 = eliminate_constant_term_0( v3, &constant_term);']
['v9 = eliminate_constant_term_0( v3, &constant_term);']
['if ( const_int_rtx[64] != constant_term )']
['if ( const_int_rtx[64] != constant_term )']
['v10 = constant_term;']
['v12 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)v8 + 2));', 'v17 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)v16 + 2));']
['v12 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)v8 + 2));', 'v17 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)v16 + 2));']
['if ( !push_operand( op, VOIDmode) )']
['v15 = make_tree( v10, x);', 'v19 = genfun( v17, v18);']
['v15 = make_tree( v10, x);', 'v19 = genfun( v17, v18);']
['if ( v12 != v27 )']
['remove_insn( v7);']
['rtx v9; // rbp', 'rtx v9; // rbp']
['rtx v15; // rbx']
['rtx addr_0; // rax', 'rtx addr_0; // rax']
['rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax']
['rtx x1a; // [rsp+8h] [rbp-50h]']
['rtx y1a; // [rsp+10h] [rbp-48h]']
['rtx x0; // [rsp+18h] [rbp-40h]']
['rtx x0a; // [rsp+18h] [rbp-40h]']
['v9 = y;']
['v32 = ( ( unsigned int)( mode_class_0[v4] - 5) < 2) + 1;', 'v23 = ( ( unsigned int)( mode_class_0[v20] - 5) < 2) + 1;', 'v21 = ( ( unsigned int)( mode_class_0[v4] - 5) < 2) + 1;', 'v27 = ( ( unsigned int)( mode_class_0[v23] - 5) < 2) + 1;', 'v25 = ( ( unsigned int)( mode_class_0[v27] - 5) < 2) + 1;', 'v25 = ( ( unsigned int)( mode_class_0[v21] - 5) < 2) + 1;', 'v27 = ( ( unsigned int)( mode_class_0[v29] - 5) < 2) + 1;', 'v21 = ( ( unsigned int)( mode_class_0[v26] - 5) < 2) + 1;', 'v25 = ( ( unsigned int)( mode_class_0[v22] - 5) < 2) + 1;']
['result = *( unsigned __int16 *)( *( ( _QWORD *)*( &CSWTCH_517 + ( unsigned int)pattern) + 3) + 24LL * opno + 16);']
['fancy_abort( ( const char *)&a, 7381, "base_type_die");']
['fancy_abort( ( const char *)&a, 7573, "modified_type_die");']
['fancy_abort( ( const char *)&a, 7461, "is_base_type");']
['rtx *v49; // r8']
['rtx v46; // r14']
['rtx v53; // rax', 'rtx v53; // rax', 'rtx v53; // rax', 'rtx v53; // rax']
['rtx v62; // rax', 'rtx *v66; // rax', 'rtx v62; // rax', 'rtx *v65; // rax']
['rtx *v68; // r14']
['rtx v18; // rax', 'rtx v6; // rax', 'rtx v8; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v61; // rax', 'rtx v28; // rax', 'rtx v48; // rax', 'rtx v58; // rax', 'rtx v28; // rax', 'rtx v6; // rax', 'rtx v60; // rax', 'rtx v6; // rax', 'rtx v48; // rax', 'rtx v60; // rax', 'rtx v6; // rax', 'rtx v62; // rax', 'rtx v8; // rax', 'rtx v48; // rax', 'rtx v60; // rax', 'rtx v48; // rax', 'rtx v60; // rax', 'rtx v48; // rax', 'rtx v18; // rax', 'rtx v38; // rax', 'rtx v78; // rax', 'rtx v28; // rax', 'rtx v62; // rax', 'rtx v48; // rax', 'rtx v6; // rax', 'rtx v48; // rax', 'rtx v78; // rax', 'rtx v38; // rax']
['rtx v170; // rax']
['rtx v38; // [rsp+10h] [rbp-48h]', 'rtx note; // [rsp+10h] [rbp-68h]', 'rtx x; // [rsp+10h] [rbp-68h]', 'rtx *v63; // [rsp+18h] [rbp-60h]']
['rtx v38; // [rsp+10h] [rbp-48h]', 'rtx *v90; // [rsp+8h] [rbp-70h]', 'rtx note; // [rsp+10h] [rbp-68h]', 'rtx v96; // [rsp+18h] [rbp-60h]', 'rtx x; // [rsp+10h] [rbp-68h]', 'rtx *v63; // [rsp+18h] [rbp-60h]']
['rtx note; // [rsp+8h] [rbp-40h]', 'rtx note; // [rsp+10h] [rbp-68h]']
['rtx v23; // [rsp+0h] [rbp-48h]']
['rtx note; // [rsp+8h] [rbp-40h]']
['if ( ( mode_class_0[v6] & 0xFFFFFFF9) == 1 )', 'if ( ( mode_class_0[v4] & 0xFFFFFFFB) != 2 )']
['if ( ( mode_class_0[v4] & 0xFFFFFFFB) != 2 )']
['if ( ( mode_class_0[v4] & 0xFFFFFFFB) != 2 )']
['if ( ( mode_class_0[v6] & 0xFFFFFFF9) == 1 )', 'if ( ( mode_class_0[v4] & 0xFFFFFFFB) != 2 )']
['v8 = ( const char *)&unk_7059CE;', 'v8 = ( const char *)&unk_7059E4;', 'v2 = ( const char *)&unk_6F22A4;']
['return ++last_alias_set_5;']
['if ( !( _BYTE)v5 && ( mode_class_0[mode] & 0xFFFFFFFD) != 1 )']
['if ( trunc_int_for_mode( op->fld[0].rtwint, ( machine_mode)v3) != op->fld[0].rtwint )']
['if ( mode_class_0[v5] == MODE_FLOAT && mode_size[v5] > mode_size[*( ( unsigned __int8 *)rtwint + 2)] )']
['if ( !legitimate_address_p( ( machine_mode)*( ( unsigned __int8 *)object + 2), rtx, 0) )']
['if ( ( mode_class_0[mode] & 0xFFFFFFFD) != 1 )']
['rtx v19; // rdx']
['rtx v22; // r8', 'rtx v27; // r8', 'rtx v50; // r8']
['rtx v26; // rax', 'rtx v26; // rax', 'rtx v26; // rax']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rax']
['rtx v39; // rax', 'rtx v39; // rax', 'rtx v39; // rax', 'rtx v39; // rax', 'rtx v39; // rax']
['rtx v43; // rax', 'rtx v43; // rax', 'rtx v43; // rax', 'rtx v43; // rax', 'rtx v43; // rax']
['rtx v49; // rax']
['rtx v53; // rax', 'rtx v53; // rax', 'rtx v53; // rax', 'rtx v53; // rax']
['v83 = mode_class_0[( unsigned __int8)v6];']
['if ( ( mode_class_0[( int)v4] & 0xFFFFFFFB) == 2']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['v36 = *( ( _DWORD *)uid_cuid_0 + v35[1]);']
['if ( ( _DWORD)v5 == 16 || ( _DWORD)v5 == 22 || ( mode_class_0[v5] & 0xFFFFFFFB) == 1 )']
['rtx last_value; // rax', 'rtx last_value; // rax']
['if ( ( mode_class_0[( int)v4] & 0xFFFFFFFB) == 2']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['|| ( v8 = *( ( _BYTE *)x + 2), ( mode_class_0[v8] & 0xFFFFFFFB) == 2)']
['if ( ( unsigned int)( mode_class_0[v11] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v12] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v14] - 5) <= 1 )']
['base_value = find_base_value( rtx->fld[0].rtx);']
['if ( base_value )']
['v8 = ( unsigned __int16 *)pinsn[0][1];']
['v33 = nonzero_bits( *( rtx *)&x[1], ( machine_mode)v6);', 'v13 = nonzero_bits( *( rtx *)&x[1], ( machine_mode)v6);']
['v33 = nonzero_bits( *( rtx *)&x[1], ( machine_mode)v6);', 'v13 = nonzero_bits( *( rtx *)&x[1], ( machine_mode)v6);']
['v7 = gen_rtx_fmt_ee( LO_SUM, ( machine_mode)*( ( unsigned __int8 *)y + 2), y->fld[0].rtx, v13);']
['mode_alignment = get_mode_alignment( ( machine_mode)*( ( unsigned __int8 *)v3 + 2));']
['v7 = gen_rtx_fmt_ee( LO_SUM, ( machine_mode)*( ( unsigned __int8 *)y + 2), y->fld[0].rtx, v13);']
['( machine_mode)*( unsigned __int8 *)( v23.rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)rtx + 2))', '( machine_mode)*( ( unsigned __int8 *)rtx + 2))', '( machine_mode)*( ( unsigned __int8 *)rtx + 2))']
['( machine_mode)*( unsigned __int8 *)( v8.rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)y + 2))']
['rtx v13; // rbx']
['v10 = &reg_avail_info_0[rtx->fld[0].rtuint];']
['v11 = *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint);']
['v8 = uid_cuid_1;']
['v11 = *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint);']
['v32 = bmap[*( int *)( v30->data.l[insn->fld[0].rtint] + 88)];']
['if ( !v12 )', 'if ( !v11 )', 'if ( !v12 )', 'if ( !v11 )']
['v11.rtwint = ( __int64)v10->fld[0];', 'v14.rtwint = ( __int64)v10->fld[0];']
['recog_data_0.operand[v6++] = rtx;', 'recog_data_0.operand[0] = v7.rtx;', 'recog_data_0.operand[1] = v7.rtx;', 'recog_data_0.operand[0] = v7.rtx;', 'recog_data_0.operand[1] = v7.rtx;', 'recog_data_0.operand[0] = v7.rtx;', 'recog_data_0.operand[1] = v7.rtx;', 'recog_data_0.operand[0] = v7.rtx;', 'recog_data_0.operand[0] = v3.rtx;', 'recog_data_0.operand[0] = v3.rtx;', 'recog_data_0.operand[0] = v3.rtx;']
['search_ofs_1 = 0;']
['if ( elements )', 'if ( !gave_help_9 )', 'if ( reg_dead_flag )', 'if ( xexit_cleanup )']
['v12 = ( rtx)v12[1];']
['if ( !v12 )', 'if ( !v11 )', 'if ( !v12 )', 'if ( !v11 )']
['v8 = uid_cuid_1;']
['v14.rtwint = ( __int64)v10->fld[0];']
['recog_data_0.operand[v6++] = rtx;', 'recog_data_0.operand[0] = v7.rtx;', 'recog_data_0.operand[1] = v7.rtx;', 'recog_data_0.operand[0] = v7.rtx;', 'recog_data_0.operand[1] = v7.rtx;', 'recog_data_0.operand[0] = v7.rtx;', 'recog_data_0.operand[1] = v7.rtx;', 'recog_data_0.operand[0] = v7.rtx;', 'recog_data_0.operand[0] = v3.rtx;', 'recog_data_0.operand[0] = v3.rtx;', 'recog_data_0.operand[0] = v3.rtx;']
['search_ofs_1 = 0;']
['if ( elements )', 'if ( !gave_help_9 )', 'if ( reg_dead_flag )', 'if ( xexit_cleanup )']
['if ( in_section_0 == in_const )', 'if ( in_section_0 == in_const )', 'if ( in_section_0 == in_const )', 'if ( in_section_0 == in_const )']
['if ( in_section_0 == in_data )', 'if ( in_section_0 == in_data )', 'if ( in_section_0 == in_data )', 'if ( in_section_0 == in_data )']
['in_section_0 = in_data;', 'in_section_0 = in_data;', 'in_section_0 = in_data;']
['if ( in_section_0 == in_data )', 'if ( in_section_0 == in_data )', 'if ( in_section_0 == in_data )', 'if ( in_section_0 == in_data )']
['mergeable_constant_section( ( machine_mode)LOBYTE( v4->block.supercontext), v5, 0);']
['if ( in_section_0 == in_const )', 'if ( in_section_0 == in_const )', 'if ( in_section_0 == in_const )', 'if ( in_section_0 == in_const )']
['in_section_0 = in_const;', 'in_section_0 = in_const;', 'in_section_0 = in_const;', 'in_section_0 = in_const;', 'in_section_0 = in_const;']
['fprintf( asm_out_file, ".%s%u:\\n", ( const char *)&a.dw_attr_val, ( unsigned int)labelno);']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['( machine_mode)*( ( unsigned __int8 *)mem + 2)) )']
['sprintf( digit_buffer, off_663A65, *v48);']
['sprintf( digit_buffer, &off_646752[1], *v11);']
['sprintf( digit_buffer, off_663A65, *v48);']
['sprintf( digit_buffer, off_663A65, *v48);']
['sprintf( digit_buffer, &off_646752[1], *v11);']
['sprintf( digit_buffer, &off_646752[1], *v11);']
['attributes = *( tree_node **)( v15->value + 48);']
['if ( ( sch_istable[( unsigned __int8)v15] & 0x88) == 0 )']
['v11 = ( cpp_token_0 *)xmalloc( 0x1770uLL);', 'v7 = ( cpp_token_0 *)xmalloc( 0x1770uLL);']
['v16 = ( tree_node *)v12[2];', 'v16 = ( tree_node *)v12[2];', 'v34 = ( tree_node *)v33[4];', 'v34 = ( tree_node *)v33[4];']
['if ( ( sch_istable[( unsigned __int8)v4] & 0x204) == 0 )', 'if ( ( sch_istable[( unsigned __int8)v4] & 0x204) == 0 )']
['if ( ( sch_istable[( unsigned __int8)v15] & 0x88) == 0 )']
['p_free_buffs = ( _cpp_buff_0 *)&pfile->free_buffs;']
['p_free_buffs = ( _cpp_buff_0 *)&pfile->free_buffs;']
['if ( ( sch_istable[( unsigned __int8)v9] & 0x400) == 0 )']
['v10 = &peep2_insn_data_0[v7];']
['v13 = &peep2_insn_data_0[v7];']
['v18 = v17 + search_ofs_1;']
['if ( v17 + search_ofs_1 > 52 )']
['v18 = v17 + search_ofs_1 - 53;']
['v25 = ( unsigned int)( mode_class_0[mode] - 5) <= 1;']
['search_ofs_1 = 0;']
['v28 = ( unsigned int)( mode_class_0[mode] - 5) <= 1;']
['search_ofs_1 = v38;']
['rtx v15; // r8']
['rtx compound_operation; // r14']
['rtx xp; // [rsp+8h] [rbp-30h] BYREF', 'rtx op; // [rsp+8h] [rbp-60h] BYREF']
['xp = rtx;']
['xp = rtx;']
['xp = rtx;']
['v8 = force_reg( ( machine_mode)*( ( unsigned __int8 *)v34 + 2), v34);']
['if ( memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v5 + 2), v5->fld[0].rtx) )']
['v20 = force_const_mem( ( machine_mode)*( ( unsigned __int8 *)v11 + 2), *( rtx *)&v11[1]);']
['if ( memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v5 + 2), v5->fld[0].rtx) )']
['xp = rtx;']
['v8 = ( rtx)rtx[1];', 'v10 = ( rtx)rtx[2];']
['if ( mode_class_0[*( unsigned __int8 *)( *( ( _QWORD *)aux + 6) + 2LL)] == MODE_FLOAT']
['|| ( v14 = *( ( _QWORD *)aux + 4), mode_class_0[*( unsigned __int8 *)( v14 + 2)] == MODE_FLOAT) )']
['hitrate = predictor_info_0[predictor].hitrate;']
['if ( taken != TAKEN_0 )']
['n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;']
['if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )']
['for ( i = ( char *)recog_data_0.constraints[v1];']
['n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;']
['if ( recog_data_0.n_operands <= ( int)v2 )']
['fprintf( outfile, off_670ADF, name->int_cst.int_cst.low);']
['fwrite( &stru_6F109F, 1uLL, 0xCuLL, outfile);']
['fprintf( file, off_672207, v9);']
['( const char *)&stru_6F109F._IO_read_end + 7,']
['result = fprintf( outfile, ( const char *)&stru_6F109F._IO_read_base + 6);']
['fwrite( ( char *)&stru_6F109F._IO_write_end + 1, 1uLL, 2uLL, outfile);']
['fwrite( ( char *)&stru_6F109F._IO_write_end + 4, 1uLL, 2uLL, outfile);']
['fwrite( ( char *)&stru_6F109F._IO_write_end + 7, 1uLL, 2uLL, outfile);']
['fwrite( ( char *)&stru_6F109F._IO_buf_base + 2, 1uLL, 2uLL, outfile);']
['fwrite( ( char *)&stru_6F109F._IO_buf_base + 5, 1uLL, 2uLL, outfile);']
['fwrite( &stru_6F109F._IO_buf_end, 1uLL, 2uLL, outfile);']
['fwrite( ( char *)&stru_6F109F._IO_buf_end + 3, 1uLL, 2uLL, outfile);']
['fwrite( ( char *)&stru_6F109F._IO_read_end + 3, 1uLL, 3uLL, outfile);']
['fwrite( ( char *)&stru_6F109F._IO_save_end + 6, 1uLL, 2uLL, outfile);']
['fprintf( outfile, off_646752, *( ( unsigned int *)a1 + 8));']
['fprintf( outfile, ( const char *)&stru_6F109F._markers + 1, *( unsigned int *)( v39 + 88));']
['v7 = ( char *)&stru_6F109F._IO_save_end + 7;']
['v7 = ( char *)&stru_6F109F._IO_save_end + 7;']
['v7 = ( char *)&stru_6F109F._IO_save_end + 7;']
['fprintf( outfile, ( const char *)&stru_6F109F._IO_backup_base);', 'fprintf( outfile, ( const char *)&stru_6F109F._IO_backup_base);']
['fwrite( ( char *)&stru_6F109F._chain + 2, 1uLL, 2uLL, file);']
['fatal_insn( "Attempt to delete prologue/epilogue insn:", insn, "flow.c", 1615, "propagate_one_insn");']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx v6; // r13']
['rtx v7; // rax', 'rtx v7; // rax', 'rtx v7; // rax']
['rtx v12; // r12']
['rtx v13; // rax', 'rtx v13; // rax', 'rtx v13; // rax']
['rtx v14; // rax', 'rtx v14; // rax', 'rtx v14; // rax', 'rtx v14; // rax']
['v8 = gen_reg_rtx( ( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['v6 = protect_from_queue( x->fld[0].rtx, 0);']
['if ( v6->fld[0].rtx == v2 )']
['v16 = copy_rtx( op);', 'v16 = copy_rtx( op);']
['rtx rtwint; // r13']
['rtx *v31; // r10']
['rtx v36; // rsi', 'rtx v36; // rsi']
['rtx v47; // rax', 'rtx v47; // rax']
['rtx *v52; // r15']
['rtx v59; // rdi']
['rtx *v62; // r10']
['if ( ( sch_istable[( unsigned __int8)ch_0] & 0xC00) == 0 )']
['if ( v6 == -1 || ( sch_istable[( unsigned __int8)v6] & 0xC00) != 0 )']
['rtx v170; // rax']
['rtx v172; // rax']
['rtx v189; // rdx']
['rtx v277; // rax']
['rtx v279; // rax']
['rtx v412; // rdx']
['rtx v481; // rdx']
['rtx v755; // rdx']
['recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;']
['frees = undobuf_0.frees;', 'frees = undobuf_0.frees;', 'frees = undobuf_0.frees;']
['if ( undobuf_0.frees )', 'if ( undobuf_0.frees )']
['undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;']
['undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;']
['undos = undobuf_0.undos;', 'undos = undobuf_0.undos;', 'undos = undobuf_0.undos;']
['undobuf_0.undos = frees;', 'undobuf_0.undos = frees;']
['reg_dead_regno = v20;']
['reg_dead_flag = 0;', 'reg_dead_flag = 0;']
['reg_dead_endregno = v20 + 1;']
['v25 = ( ( unsigned int)( mode_class_0[v21] - 5) < 2) + 1;']
['reg_dead_flag = 0;', 'reg_dead_flag = 0;']
['reg_dead_endregno = v20 + v25;']
['if ( ( unsigned int)v20 >= reg_dead_endregno )']
['v29 = reg_dead_flag;']
['if ( reg_dead_flag )']
['if ( reg_dead_flag != 1 )']
['if ( find_regno_note( nonnote_insn, REG_DEAD, reg_dead_regno) )']
['v27 = reg_dead_endregno;']
['LODWORD( v20) = reg_dead_regno;']
['v7 = &costs_0[rtx->fld[0].rtuint];']
['v8 = ix86_memory_move_cost( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), ( reg_class)v3, 1);', 'v8 = ix86_memory_move_cost( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), ( reg_class)v3, 1);']
['v8 = ix86_memory_move_cost( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), ( reg_class)v3, 1);', 'v8 = ix86_memory_move_cost( ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), ( reg_class)v3, 1);']
['record_address_regs( rtx->fld[v12].rtx, ( reg_class)v3, scale);']
['rtx v12; // rbp', 'rtx v12; // rbp']
['rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax']
['v8 = ( rtx)rtx[1];', 'v10 = ( rtx)rtx[2];']
['if ( ( *( _DWORD *)v20->fld[0].rtwint & 0x4000FFFF) != 1073741885 )']
['v4 = *( _WORD *)v23;', 'v4 = *( _WORD *)v8;']
['if ( *( _WORD *)v12 != 61 )']
['v11 = find_base_value( v3);']
['v11 = find_base_value( v3);']
['if ( v10 )', 'if ( v11 )', 'if ( v10 )']
['v32 = v15;', 'v12 = v10;', 'v17 = v15;', 'v12 = v10;', 'v12 = v10;']
['v32 = v15;', 'v12 = v10;', 'v17 = v15;', 'v12 = v10;', 'v12 = v10;']
['v11 = *( _WORD *)v10;']
['if ( ( unsigned __int16)( **( _WORD **)&v4[2] - 44) > 1u )']
['v4 = *( _WORD *)v23;', 'v4 = *( _WORD *)v8;']
['v13 = v12;', 'v13 = v12;', 'v13 = v12;']
['v14 = *( ( _BYTE *)v13 + 2);']
['v10 = lang_hooks_0.expand_constant( exp);']
['v34 = ( tree_node *)v33[4];', 'v34 = ( tree_node *)v33[4];']
['v34 = ( tree_node *)v33[4];', 'v34 = ( tree_node *)v33[4];']
['rtx v16; // rcx', 'rtx v18; // rax', 'rtx v12; // rcx', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v14; // rcx', 'rtx v18; // rdx', 'rtx v18; // rax', 'rtx v28; // rcx', 'rtx v18; // rdx']
['rtx v20; // rbx', 'rtx v20; // rbx']
['rtx rtwint; // rax']
['rtx v45; // rsi']
['rtx v59; // rax', 'rtx v59; // rax']
['rtx src_reg; // [rsp+18h] [rbp-60h] BYREF']
['rtx mult_val; // [rsp+28h] [rbp-50h] BYREF']
['rtx expa; // [rsp+20h] [rbp-68h]']
['v23 = gen_rtx_fmt_u00( LABEL_REF, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v22);']
['rtx v21; // rax', 'rtx v21; // rax', 'rtx v21; // rax', 'rtx v21; // rax', 'rtx v21; // rax']
['v31 = ( ( unsigned int)( mode_class_0[v28] - 5) < 2) + 1;']
['v15 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;']
['if ( v10 != 69 || ( v21 = *v9, LODWORD( v22) = *( _DWORD *)*v9 - 1, ( int)v22 < 0) )']
['if ( loc != ( rtx *)&v21->fld[v22] )']
['v23 = refers_to_regno_for_reload_p( regno, endregno, v21->fld[( int)v22].rtx, loc);']
['v21 = *v9;']
['v25 = ( ( unsigned int)( mode_class_0[v27] - 5) < 2) + 1;']
['v34 = ( ( unsigned int)( mode_class_0[v17] - 5) < 2) + 1;', 'v18 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;', 'v14 = ( ( unsigned int)( mode_class_0[v15] - 5) < 2) + 1;', 'v17 = ( ( unsigned int)( mode_class_0[v14] - 5) < 2) + 1;', 'v12 = ( ( unsigned int)( mode_class_0[v10] - 5) < 2) + 1;', 'v15 = ( ( unsigned int)( mode_class_0[v12] - 5) < 2) + 1;', 'v15 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;', 'v19 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[v11] - 5) < 2) + 1;', 'v17 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;', 'v12 = ( ( unsigned int)( mode_class_0[v15] - 5) < 2) + 1;', 'v12 = ( ( unsigned int)( mode_class_0[v19] - 5) < 2) + 1;', 'v14 = ( ( unsigned int)( mode_class_0[v11] - 5) < 2) + 1;']
['if ( reg_pref_0 )', 'if ( reg_pref_0 )', 'if ( reg_pref_0 )']
['return reg_pref_0[regno].altclass;']
['v27 = ( ( unsigned int)( mode_class_0[v23] - 5) < 2) + 1;', 'v27 = ( ( unsigned int)( mode_class_0[v29] - 5) < 2) + 1;', 'v21 = ( ( unsigned int)( mode_class_0[v26] - 5) < 2) + 1;']
['v31 = ( ( unsigned int)( mode_class_0[v28] - 5) < 2) + 1;', 'v31 = ( ( unsigned int)( mode_class_0[v27] - 5) < 2) + 1;']
['v21 = ( ( unsigned int)( mode_class_0[v4] - 5) < 2) + 1;', 'v44 = ( ( unsigned int)( mode_class_0[v41] - 5) < 2) + 1;', 'v51 = ( ( unsigned int)( mode_class_0[v47] - 5) < 2) + 1;']
['v44 = ( ( unsigned int)( mode_class_0[v41] - 5) < 2) + 1;']
['v17 = ( ( unsigned int)( mode_class_0[v14] - 5) < 2) + 1;', 'v15 = ( ( unsigned int)( mode_class_0[v12] - 5) < 2) + 1;', 'v15 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;']
['v19 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;']
['v11 = ( unsigned int)( mode_class_0[v4] - 5) <= 1;']
['( machine_mode)*( unsigned __int8 *)( v11.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v11.rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)rtx + 2))', '( machine_mode)*( ( unsigned __int8 *)rtx + 2))', '( machine_mode)*( ( unsigned __int8 *)rtx + 2))']
['v12 = ( ( unsigned int)( mode_class_0[v15] - 5) < 2) + 1;']
['v12 = ( ( unsigned int)( mode_class_0[v10] - 5) < 2) + 1;', 'v12 = ( ( unsigned int)( mode_class_0[v15] - 5) < 2) + 1;', 'v12 = ( ( unsigned int)( mode_class_0[v19] - 5) < 2) + 1;']
['v44 = ( ( unsigned int)( mode_class_0[v41] - 5) < 2) + 1;']
['v32 = ( ( unsigned int)( mode_class_0[v4] - 5) < 2) + 1;', 'v33 = ( ( unsigned int)( mode_class_0[v11] - 5) < 2) + 1;', 'v23 = ( ( unsigned int)( mode_class_0[v20] - 5) < 2) + 1;', 'v21 = ( ( unsigned int)( mode_class_0[v4] - 5) < 2) + 1;', 'v17 = ( ( unsigned int)( mode_class_0[v14] - 5) < 2) + 1;', 'v11 = ( ( unsigned int)( mode_class_0[v5] - 5) < 2) + 1;', 'v7 = ( ( unsigned int)( mode_class_0[v5] - 5) < 2) + 1;', 'v51 = ( ( unsigned int)( mode_class_0[v47] - 5) < 2) + 1;', 'v6 = ( ( unsigned int)( mode_class_0[v4] - 5) < 2) + 1;', 'v3 = ( ( unsigned int)( mode_class_0[v8] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[v11] - 5) < 2) + 1;']
['rtx insna; // [rsp+10h] [rbp-C0h]']
['rtx p; // [rsp+18h] [rbp-40h]']
['x = rtx;']
['x = rtx;']
['*v23 = ( rtx)v18.rtwint;']
['if ( !rtx_equal_p( *( rtx *)( v446 + 8), recog_data_0.operand[1]) )']
['if ( !rtx_equal_p( *( rtx *)( v446 + 8), recog_data_0.operand[1]) )']
['if ( !rtx_equal_p( *( rtx *)( v446 + 8), recog_data_0.operand[1]) )']
['if ( !rtx_equal_p( *( rtx *)( v446 + 8), recog_data_0.operand[1]) )']
['v8 = ( unsigned __int16 *)pinsn[0][1];']
['if ( !rtx_equal_p( *( rtx *)( v446 + 8), recog_data_0.operand[1]) )']
['|| !reg_overlap_mentioned_p( reg, valuea[0])']
['while ( rtx_class[*( _WORD *)v10] != 105 || !modified_in_p( v7, v10) )', 'while ( rtx_class[*( _WORD *)v10] != 105 || !modified_in_p( v7, v10) )']
['rtx *i; // [rsp+8h] [rbp-38h]', 'rtx s1; // [rsp+0h] [rbp-48h]', 'rtx y; // [rsp+20h] [rbp-38h]', 'rtx y; // [rsp+30h] [rbp-48h]', 'rtx x6; // [rsp+0h] [rbp-48h]', 'rtx x; // [rsp+10h] [rbp-68h]', 'rtx x; // [rsp+10h] [rbp-48h]']
['rtx prev; // [rsp+18h] [rbp-40h]', 'rtx x0a; // [rsp+18h] [rbp-40h]']
['result = rtx;']
['rtwint = ( int *)v18->fld[0].rtwint;']
['rtwint = ( int *)v18->fld[0].rtwint;']
['if ( !rtx_equal_p( *( rtx *)( v446 + 8), recog_data_0.operand[1]) )']
['if ( !rtx_equal_p( *( rtx *)( v446 + 8), recog_data_0.operand[1]) )']
['if ( !rtx_equal_p( rtx, memref->fld[0].rtx) || ( v4 = memref, v3 != *( ( unsigned __int8 *)memref + 2)) )']
['if ( !rtx_equal_p( rtx, memref->fld[0].rtx) || ( v4 = memref, v3 != *( ( unsigned __int8 *)memref + 2)) )']
['if ( !rtx_equal_p( *( rtx *)( v446 + 8), recog_data_0.operand[1]) )']
['|| !reg_overlap_mentioned_p( reg, valuea[0])']
['while ( rtx_class[*( _WORD *)v10] != 105 || !modified_in_p( v7, v10) )', 'while ( rtx_class[*( _WORD *)v10] != 105 || !modified_in_p( v7, v10) )', 'if ( !rtx_equal_p( *( rtx *)( v446 + 8), recog_data_0.operand[1]) )']
['v25 = ( ( unsigned int)( mode_class_0[v27] - 5) < 2) + 1;', 'v25 = ( ( unsigned int)( mode_class_0[v21] - 5) < 2) + 1;', 'v21 = ( ( unsigned int)( mode_class_0[v26] - 5) < 2) + 1;', 'v25 = ( ( unsigned int)( mode_class_0[v22] - 5) < 2) + 1;']
['if ( **( _WORD **)&this_insn_1[2] == 39 )']
['v8 = ( ( unsigned int)( mode_class_0[( int)v4] - 5) < 2) + 1;']
['v25 = ( unsigned int)( mode_class_0[v22] - 5) <= 1;']
['*( _OWORD *)&e->pred_next = 0LL;']
['*( _OWORD *)&e->src = 0LL;']
['*( _OWORD *)&e->insns = 0LL;']
['*( _OWORD *)&e->flags = 0LL;']
['rtx v4; // r8']
['rtx v5; // rax', 'rtx v5; // rax', 'rtx v5; // rax']
['if ( !rtx_equal_p( rtx, memref->fld[0].rtx) || ( v4 = memref, v3 != *( ( unsigned __int8 *)memref + 2)) )']
['v5 = gen_rtx_fmt_e0( MEM, v3, rtx);']
['*( _QWORD *)&v5[1] = 0LL;']
['v4 = v5;', 'v4 = v5;']
['v4 = v5;', 'v4 = v5;']
['LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v5 + 3) & 0xF7;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v5 + 3) & 0xF7;']
['LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v5 + 3) & 0xF7;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v5 + 3) & 0xF7;']
['*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;']
['*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;']
['LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;']
['LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;']
['*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;']
['*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;']
['LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x80 | ( unsigned __int8)v5 & 0x7F;']
['rtx v4; // r8']
['rtx v5; // rax', 'rtx v5; // rax', 'rtx v5; // rax']
['if ( !rtx_equal_p( rtx, memref->fld[0].rtx) || ( v4 = memref, v3 != *( ( unsigned __int8 *)memref + 2)) )']
['v5 = gen_rtx_fmt_e0( MEM, v3, rtx);']
['*( _QWORD *)&v5[1] = 0LL;']
['v4 = v5;', 'v4 = v5;']
['v4 = v5;', 'v4 = v5;']
['LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v5 + 3) & 0xF7;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v5 + 3) & 0xF7;']
['LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v5 + 3) & 0xF7;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 8 | *( ( _BYTE *)v5 + 3) & 0xF7;']
['*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;']
['*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;']
['LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;']
['LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;', 'LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x10 | ( unsigned __int8)v5 & 0xEF;']
['*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;']
['*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;', '*( ( _BYTE *)v4 + 3) = ( _BYTE)v5;']
['LOBYTE( v5) = *( ( _BYTE *)memref + 3) & 0x80 | ( unsigned __int8)v5 & 0x7F;']
['if ( ( mode_class_0[v4] & 0xFFFFFFFB) != 2 )']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['( machine_mode)*( unsigned __int8 *)( v9.rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['if ( warning_message_3 )']
['warning_message_3 = 1;']
['v25 = ( tree_node *)i5[5];']
['sprintf( p, &off_646752[1], v5);']
['fancy_abort( ( const char *)&a, 2789, "output_loc_operands");']
['timevar_push( TV_VARCONST_0);']
['timevar_pop( TV_VARCONST_0);']
['timevar_push( TV_SYMOUT_0);', 'timevar_push( TV_SYMOUT_0);', 'timevar_push( TV_SYMOUT_0);']
['timevar_pop( TV_SYMOUT_0);', 'timevar_pop( TV_SYMOUT_0);', 'timevar_pop( TV_SYMOUT_0);', 'timevar_pop( TV_SYMOUT_0);']
['reverse_condition_0( ( rtx_code)v1);']
['return CSWTCH_103[v1];']
['if ( *( _WORD *)v9.rtwint == 61 && mode_class_0[*( unsigned __int8 *)( v9.rtwint + 2)] == MODE_INT )']
['return reversed_comparison_code_parts( ( rtx_code)*( _WORD *)exp, last_value->fld[0].rtx, *( rtx *)&last_value[1], 0LL);']
['( machine_mode)*( unsigned __int8 *)( v2.rtwint + 2));']
['( machine_mode)*( unsigned __int8 *)( *( _QWORD *)&v19[2 * v22 + 2] + 2LL));']
['return CSWTCH_103[v1];']
['v36 = *( ( _DWORD *)uid_cuid_0 + v35[1]);']
['reverse_condition_0( ( rtx_code)v1);']
['return CSWTCH_103[v1];']
['return CSWTCH_103[v1];']
['fancy_abort( ( const char *)&a, 8957, "rtl_for_decl_location");']
['if ( ( unsigned int)( mode_class_0[v11] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v12] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v14] - 5) <= 1 )']
['if ( _bittest( &v27, ix86_cpu) || ( v28 = *( ( unsigned __int8 *)v2 + 2), ( mode_class_0[v28] & 0xFFFFFFF9) != 1) )']
['v18 = cselib_lookup( x, ( machine_mode)*( ( unsigned __int8 *)x + 2), 0);']
['v17 = cselib_lookup( y, ( machine_mode)*( ( unsigned __int8 *)y + 2), 0);']
['v6 = gen_lowpart_for_combine( ( machine_mode)*( unsigned __int8 *)( v5.rtwint + 2), x);']
['v4 = gen_lowpart_for_combine( ( machine_mode)*( unsigned __int8 *)( v3.rtwint + 2), y);']
['if ( *( _OWORD *)&x == 0LL )']
['rtx real_insn; // rbx']
['rtx *v24; // r12', 'rtx *v24; // r12']
['rtx *i; // rbp']
['rtx v27; // rdx']
['rtx v28; // rcx']
['real_insn = next_real_insn( rtx);']
['result = real_insn == next_real_insn( v4->fld[0].rtx);']
['v37 = subreg_regno_offset( v36, ( machine_mode)*( unsigned __int8 *)( v34.rtwint + 2), v35, v13);']
['v37 = subreg_regno_offset( v36, ( machine_mode)*( unsigned __int8 *)( v34.rtwint + 2), v35, v13);']
['( machine_mode)*( unsigned __int8 *)( v32.rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)v4 + 2));']
['rtx *v12; // r14']
['v12 = ( rtx *)( rtwint + 2);']
['while ( !rtx_varies_p( *v12, for_alias) )']
['if ( ++v12 == ( rtx *)v13 )']
['object_base = ( cpp_buffer_0 *)pfile->buffer_ob.object_base;']
['v11 = ( cpp_buffer_0 *)( next_free + 144);']
['cselib_lookup( rtwint->fld[0].rtx, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), 1);']
['add_dependence( insn, v7->fld[0].rtx, ( reg_note)v6);', 'add_dependence( insn, v9->fld[0].rtx, ( reg_note)v6);']
['add_dependence( insn, v7->fld[0].rtx, ( reg_note)v6);', 'add_dependence( insn, v9->fld[0].rtx, ( reg_note)v6);']
['add_dependence( insn, v7->fld[0].rtx, ( reg_note)v6);', 'add_dependence( insn, v9->fld[0].rtx, ( reg_note)v6);']
['rtx v22; // r14']
['rtx pending_read_insns; // rbx']
['rtx pending_read_mems; // r14']
['rtx v125; // rbx']
['rtx i; // r15']
['rtx v27; // rax', 'rtx v7; // rbx', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v23; // rbx', 'rtx v20; // rbx', 'rtx v21; // rbx', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v17; // rbx', 'rtx v27; // rax', 'rtx v20; // rbx', 'rtx v27; // rdx', 'rtx v67; // rbx']
['rtx v21; // rsi', 'rtx v33; // rsi', 'rtx v32; // rsi', 'rtx v33; // rsi', 'rtx v36; // rsi', 'rtx v37; // rsi', 'rtx v36; // rsi', 'rtx v37; // rsi']
['rtx v34; // rax', 'rtx v34; // rax', 'rtx v34; // rax']
['fancy_abort( ( const char *)&a, 9575, "scope_die_for");']
['if ( ( unsigned int)debug_info_level_0 > DINFO_LEVEL_TERSE && ( *( ( _BYTE *)&rtl[1] + 1) & 0x40) == 0 )']
['fancy_abort( ( const char *)&a, 9604, "scope_die_for");']
['v5 = *( tree_node **)( low + 104);']
['if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['v6 = *( tree_node **)( v5 + 8);']
['v6 = ( tree_node *)ref[1];']
['honor_readonly = lang_hooks_0.honor_readonly;']
['if ( !lang_hooks_0.honor_readonly || ( v14 & 0x10) == 0 && ( *( ( _BYTE *)&elements->block.common + 17) & 0x10) == 0 )']
['mem_attrs = get_mem_attrs( alias, v31, const_int_rtx[64], v7, align, ( machine_mode)*( ( unsigned __int8 *)ref + 2));']
['v2 = ( tree_node *)*( &global_trees + 15);', 'v24 = ( tree_node *)*( &global_trees + 12);']
['if ( !ix86_hard_regno_mode_ok( v7, *( ( machine_mode *)&rld + 26 * r + 7)) )']
['if ( *( _BYTE *)( v8 + 2) && !ix86_hard_regno_mode_ok( v7, ( machine_mode)*( unsigned __int8 *)( v8 + 2)) )']
['if ( !ix86_hard_regno_mode_ok( v7, ( machine_mode)*( unsigned __int8 *)( v9 + 2)) )']
['mark_reload_reg_in_use( v11, *( ( _DWORD *)v12 + 18), *( ( reload_type *)v12 + 23), *( ( machine_mode *)v12 + 7));', 'mark_reload_reg_in_use( v11, *( ( _DWORD *)v12 + 18), *( ( reload_type *)v12 + 23), *( ( machine_mode *)v12 + 7));']
['mark_reload_reg_in_use( v11, *( ( _DWORD *)v12 + 18), *( ( reload_type *)v12 + 23), *( ( machine_mode *)v12 + 7));', 'mark_reload_reg_in_use( v11, *( ( _DWORD *)v12 + 18), *( ( reload_type *)v12 + 23), *( ( machine_mode *)v12 + 7));']
['result = gen_rtx_fmt_ee( EXPR_LIST, ( machine_mode)kind, datum, insn[3].fld[0].rtx);']
['rtx v9; // rax', 'rtx v9; // rax', 'rtx v9; // rax', 'rtx v9; // rax']
['rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)*( ( unsigned __int8 *)x + 2), x, c);']
['v10 = gen_rtx_CONST_INT( VOIDmode, v2->fld[0].rtwint + c->fld[0].rtwint);']
['v6 = v10;']
['v9 = sge_plus_constant( *( rtx *)&x[1], c);']
['rtx = v9;', 'rtx = v9;']
['if ( ( tree_node *)*( &global_trees + 10) == section_name )']
['if ( ( tree_node *)*( &global_trees + 9) == section_name )']
['if ( ( tree_node *)*( &global_trees + 8) == section_name )']
['if ( ( tree_node *)*( &global_trees + 7) == section_name )']
['if ( ( tree_node *)*( &global_trees + 6) == section_name )']
['v13 = *( _OWORD *)&imag->block.vars != *( _OWORD *)&elements->block.vars', 'v13 = *( _OWORD *)&imag->block.vars != *( _OWORD *)&elements->block.vars']
['v13 = *( _OWORD *)&imag->block.vars != *( _OWORD *)&elements->block.vars', 'v13 = *( _OWORD *)&imag->block.vars != *( _OWORD *)&elements->block.vars']
['v2 = ( tree_node *)*( &global_trees + 25);']
['if ( section_name == ( tree_node *)*( &global_trees + 24) )']
['v17 = simplify_and_const_int( 0LL, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), *( rtx *)&rtx[1], v8);']
['v18 = simplify_and_const_int( 0LL, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), rtx->fld[0].rtx, v8);']
['v19 = gen_binary( ( rtx_code)*( _WORD *)rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v18, v17);', 'v19 = gen_binary( ( rtx_code)*( _WORD *)rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v18, v17);']
['v19 = gen_binary( ( rtx_code)*( _WORD *)rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v18, v17);', 'v19 = gen_binary( ( rtx_code)*( _WORD *)rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v18, v17);']
['rtx pool_constant; // rax']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx v25; // rax', 'rtx v25; // rax', 'rtx v25; // rax', 'rtx v25; // rax']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rax']
['rtx v47; // rax', 'rtx v47; // rax']
['rtx compound_operation; // r14']
['rtx v57; // rbp', 'rtx v5; // rbp', 'rtx v5; // rbp', 'rtx v9; // rbp', 'rtx v9; // rbp', 'rtx v50; // rbp', 'rtx v58; // rbp', 'rtx v54; // rbp']
['rtx v27; // rax', 'rtx v17; // rax', 'rtx v7; // rax', 'rtx v6; // rax', 'rtx v61; // rax', 'rtx v27; // rax', 'rtx v47; // rax', 'rtx v27; // rax', 'rtx v6; // rax', 'rtx v17; // rax', 'rtx v60; // rax', 'rtx v6; // rax', 'rtx v17; // rax', 'rtx v60; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v57; // rax', 'rtx v37; // rax', 'rtx v6; // rax', 'rtx v62; // rax', 'rtx v57; // rax', 'rtx v57; // rax', 'rtx v60; // rax', 'rtx v27; // rax', 'rtx v60; // rax', 'rtx v7; // rax', 'rtx v47; // rax', 'rtx v37; // rax', 'rtx v62; // rax', 'rtx v6; // rax', 'rtx v67; // rbx', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx v7; // rax']
['rtx v581; // rax']
['rtx v25; // rax', 'rtx v8; // rax', 'rtx v35; // rax', 'rtx v35; // rax', 'rtx v25; // rax', 'rtx v45; // rax', 'rtx v45; // rax', 'rtx v55; // rax', 'rtx v35; // rax', 'rtx v75; // rax', 'rtx v15; // rax', 'rtx v5; // rax', 'rtx v15; // rax', 'rtx v82; // rax', 'rtx v35; // rax', 'rtx v75; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v95; // rax', 'rtx v15; // rax', 'rtx v5; // rax', 'rtx v8; // rax', 'rtx v25; // rax', 'rtx v35; // rax', 'rtx v55; // rax', 'rtx v15; // rax', 'rtx v5; // rax', 'rtx v25; // rax', 'rtx v83; // rax', 'rtx v55; // rax', 'rtx v86; // rax']
['rtx v15; // r8']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx v21; // rax', 'rtx v21; // rax', 'rtx v21; // rax', 'rtx v21; // rax', 'rtx v21; // rax']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rax']
['rtx v29; // r9', 'rtx v29; // r9']
['rtx v57; // rax', 'rtx v57; // rax', 'rtx v57; // rax']
['rtx v23; // rax', 'rtx v6; // rax', 'rtx v33; // rax', 'rtx v33; // rax', 'rtx v43; // rax', 'rtx v61; // rax', 'rtx v43; // rax', 'rtx v43; // rax', 'rtx v6; // rax', 'rtx v60; // rax', 'rtx v6; // rax', 'rtx v33; // rax', 'rtx v60; // rax', 'rtx v53; // rax', 'rtx v33; // rax', 'rtx v23; // rax', 'rtx v6; // rax', 'rtx v62; // rax', 'rtx v23; // rax', 'rtx v43; // rax', 'rtx v13; // rax', 'rtx v60; // rax', 'rtx v60; // rax', 'rtx v53; // rax', 'rtx v13; // rax', 'rtx v53; // rax', 'rtx v43; // rax', 'rtx v53; // rax', 'rtx v83; // rax', 'rtx v62; // rax', 'rtx v6; // rax', 'rtx v13; // rax']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v12; // rax']
['rtx compound_operation; // rax']
['rtx v18; // rdx', 'rtx v18; // rdx']
['rtx v31; // rdx']
['rtx last_value; // rax', 'rtx last_value; // rax']
['rtx v64; // r10']
['rtx *v65; // rbp', 'rtx *v35; // rdx', 'rtx *v7; // rdi', 'rtx *v18; // rdi', 'rtx *v29; // rdi', 'rtx *v39; // rdi', 'rtx *v44; // rdi', 'rtx *v65; // rax']
['rtx v10; // r13', 'rtx v20; // r15', 'rtx v19; // r15', 'rtx v14; // r15', 'rtx v10; // r13', 'rtx v20; // r15', 'rtx v20; // r15', 'rtx v16; // r15', 'rtx v10; // r12']
['rtx v14; // rax', 'rtx v14; // rax', 'rtx v14; // rax', 'rtx v14; // rax']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['v10 = 0LL;', 'v10 = v9;', 'v10 = v5;', 'v10 = v5;']
['result = simplify_gen_subreg( ( machine_mode)*( ( unsigned __int8 *)x + 2), v28, v27, v25);']
['return simplify_relational_operation( ( rtx_code)*( _WORD *)x, v9, v7.rtx, ( rtx)v8);']
['( rtx_code)*( _WORD *)x,', '( rtx_code)*( _WORD *)x,']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['( rtx_code)*( _WORD *)x,', '( rtx_code)*( _WORD *)x,']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),']
['return simplify_binary_operation( ( rtx_code)v2, v1, v6, rtx);']
['if ( ( unsigned int)( mode_class_0[v11] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v12] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v14] - 5) <= 1 )']
['rtx = simplify_subreg( outermode, op->fld[0].rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v10);']
['rtx = simplify_subreg( outermode, v29.rtx, ( machine_mode)*( unsigned __int8 *)( v29.rtwint + 2), v30);']
['if ( ( unsigned int)( mode_class_0[v11] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v12] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v14] - 5) <= 1 )']
['if ( ( unsigned int)( mode_class_0[v11] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v12] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v14] - 5) <= 1 )']
['&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT', '&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT', '&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT', '&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT']
['&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT', '&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT', '&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT', '&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT']
['&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT', '&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT', '&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT', '&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT']
['&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT', '&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT', '&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT', '&& ( ( mode_class_0[mode] & 0xFFFFFFFB) != 2 && mode_class_0[mode] != MODE_VECTOR_FLOAT']
['v19 = simplify_relational_operation( ( rtx_code)*( _WORD *)op0, op0_mode, v16.rtx, ( rtx)v17);']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx v26; // rax', 'rtx v26; // rax', 'rtx v26; // rax']
['result = simplify_relational_operation( code, v8, rtx, v5);']
['*( _OWORD *)v32.r = *( _OWORD *)&args.operand;', '*( _OWORD *)v31.r = *( _OWORD *)&args.operand;', '*( _OWORD *)v33.r = *( _OWORD *)&args.operand;']
['v2 = size_htab_11;', 'v2 = size_htab_11;']
['if ( !size_htab_11 )']
['size_htab_11 = htab_create( 0x400uLL, size_htab_hash, size_htab_eq, 0LL);']
['ggc_add_deletable_htab( size_htab_11, 0LL, 0LL);']
['new_const_10 = make_node( INTEGER_CST);', 'new_const_10 = make_node( INTEGER_CST);']
['ggc_add_tree_root( &new_const_10, 1);']
['v2 = size_htab_11;', 'v2 = size_htab_11;']
['v3 = new_const_10;', 'v3 = new_const_10;', 'v9 = new_const_10;']
['new_const_10->int_cst.int_cst.low = number;']
['v3 = new_const_10;', 'v3 = new_const_10;', 'v9 = new_const_10;']
['v3 = new_const_10;', 'v3 = new_const_10;', 'v9 = new_const_10;']
['*slot = new_const_10;']
['new_const_10 = make_node( INTEGER_CST);', 'new_const_10 = make_node( INTEGER_CST);']
['v9 = sch_istable[*( v7 - 1)];']
['v13 = cpp_trigraph_map[*( ( unsigned __int8 *)buffer->cur + 1)];']
['v4 = cpp_trigraph_map[v17];']
['*( _OWORD *)&result->flags = 0LL;']
['fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");', 'fancy_abort( ( const char *)&a, 4588, "AT_ref");']
['fancy_abort( ( const char *)&a, 5055, "splice_child_die");']
['recog_data_0.operand[0] = v3.rtx;', 'recog_data_0.operand[0] = v3.rtx;', 'recog_data_0.operand[0] = v3.rtx;']
['recog_data_0.operand[1] = ( rtx)v147;', 'recog_data_0.operand[1] = ( rtx)v46;']
['return gen_split_1133( recog_data_0.operand);']
['recog_data_0.operand[1] = ( rtx)v40;', 'recog_data_0.operand[1] = ( rtx)v46;']
['return gen_split_1135( recog_data_0.operand);']
['recog_data_0.operand[0] = v3.rtx;', 'recog_data_0.operand[0] = v3.rtx;', 'recog_data_0.operand[0] = v3.rtx;']
['recog_data_0.operand[1] = v113;']
['return gen_split_943( recog_data_0.operand);']
['recog_data_0.operand[0] = v3.rtx;', 'recog_data_0.operand[0] = v3.rtx;', 'recog_data_0.operand[0] = v3.rtx;']
['recog_data_0.operand[1] = ( rtx)v40;', 'recog_data_0.operand[1] = ( rtx)v46;']
['recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;']
['recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;']
['return gen_split_1178( recog_data_0.operand);']
['recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;']
['return ( rtx)gen_split_1179( &recog_data_0);']
['recog_data_0.operand[0] = ( rtx)v40;']
['recog_data_0.operand[1] = v184;']
['recog_data_0.operand[2] = v186;']
['recog_data_0.operand[3] = v188;']
['recog_data_0.operand[4] = v190;']
['return gen_split_938( recog_data_0.operand);']
['recog_data_0.operand[1] = v170;']
['recog_data_0.operand[0] = *( rtx *)( v44 + 16);']
['if ( !rtx_equal_p( *( rtx *)( v446 + 8), recog_data_0.operand[1]) )']
['recog_data_0.operand[2] = v453;']
['&& recog_data_0.operand[1]->fld[0].rtint != 2 )']
['rtx v7; // rdi']
['rtx v8; // rdx']
['v7 = rtx;', 'v7 = rtx;', 'v7 = rtx;']
['v8 = rtx;']
['if ( *( _WORD *)v8 == 37 && ( unsigned int)( v8[2].fld[0].rtint + 98) <= 5 )', 'if ( *( _WORD *)v8 == 37 && ( unsigned int)( v8[2].fld[0].rtint + 98) <= 5 )']
['if ( *( _WORD *)v8 == 37 && ( unsigned int)( v8[2].fld[0].rtint + 98) <= 5 )', 'if ( *( _WORD *)v8 == 37 && ( unsigned int)( v8[2].fld[0].rtint + 98) <= 5 )']
['v5 = v8;']
['if ( v7 == v8 )', 'if ( v7 == v8 )']
['if ( v7 == v8 )', 'if ( v7 == v8 )']
['v7 = rtx;', 'v7 = rtx;', 'v7 = rtx;']
['v9 = ( __int64)v7[1];']
['v10 = ( __int64)v8[1];']
['v8[1].fld[0].rtwint = ( __int64)v7;', 'v8[1].fld[0].rtwint = ( __int64)v7;']
['v8[1].fld[0].rtwint = ( __int64)v7;', 'v8[1].fld[0].rtwint = ( __int64)v7;']
['*( _QWORD *)&v8[1] = v9;']
['*( _QWORD *)( v9 + 24) = v8;']
['if ( ( mode_class_0[v1] & 0xFFFFFFFB) != 2 && mode_class_0[v1] != MODE_VECTOR_FLOAT )', 'if ( ( mode_class_0[v1] & 0xFFFFFFFB) != 2 && mode_class_0[v1] != MODE_VECTOR_FLOAT )']
['if ( ( mode_class_0[v1] & 0xFFFFFFFB) != 2 && mode_class_0[v1] != MODE_VECTOR_FLOAT )', 'if ( ( mode_class_0[v1] & 0xFFFFFFFB) != 2 && mode_class_0[v1] != MODE_VECTOR_FLOAT )']
['*( _OWORD *)( v9 + 8) = 0LL;']
['rtx v12; // r14']
['rtx v13; // rax', 'rtx v13; // rax', 'rtx v13; // rax']
['rtx v14; // r14']
['rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax']
['v8 = gen_reg_rtx( ( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['v6 = protect_from_queue( x->fld[0].rtx, 0);']
['v23 = v3->fld[0].rtx;']
['v16 = copy_rtx( op);', 'v16 = copy_rtx( op);']
['v4->fld[v8].rtwint = ( __int64)v12;']
['v4->fld[v8].rtwint = ( __int64)v12;']
['rtx = v12;']
['v6 = protect_from_queue( x->fld[0].rtx, 0);']
['v11 = expand_shift( RSHIFT_EXPR, ( machine_mode)v44, op0b, v37, v4, 1);']
['v7 = gen_lowpart( ( machine_mode)*( ( unsigned __int8 *)v8 + 2), v7);']
['v7 = convert_to_mode( ( machine_mode)*( ( unsigned __int8 *)v8 + 2), v7, 1);']
['v20 = operand_sub*(short *)0xforce( op0, offset, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v20 = operand_sub*(short *)0xforce( op0, offset, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));']
['v20 = operand_sub*(short *)0xforce( op0, offset, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v20 = operand_sub*(short *)0xforce( op0, offset, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));']
['( machine_mode)*( unsigned __int8 *)( op0->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( op0->fld[0].rtwint + 2));']
['v19 = operand_sub*(short *)0xforce(']
['v9 = ( ( unsigned int)( mode_class_0[v6] - 5) < 2) + 1;', 'v7 = ( ( unsigned int)( mode_class_0[v5] - 5) < 2) + 1;', 'v9 = ( ( unsigned int)( mode_class_0[v8] - 5) < 2) + 1;', 'v9 = ( ( unsigned int)( mode_class_0[v8] - 5) < 2) + 1;']
['if ( ( unsigned int)( mode_class_0[v11] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[mode] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[mode] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v12] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v14] - 5) <= 1 )']
['if ( ( unsigned int)( mode_class_0[( int)v9] - 5) > 1 )']
['if ( ( unsigned int)( mode_class_0[v11] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[mode] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[mode] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v12] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[v14] - 5) <= 1 )']
['if ( ( unsigned int)( mode_class_0[v4] - 5) > 1 )', 'if ( ( unsigned int)( mode_class_0[v4] - 5) > 1 )', 'if ( ( unsigned int)( mode_class_0[v23] - 5) > 1 )', 'if ( ( unsigned int)( mode_class_0[v7] - 5) > 1 )', 'if ( ( unsigned int)( mode_class_0[v3] - 5) > 1 )']
['v8 = ( ( unsigned int)( mode_class_0[( int)v4] - 5) < 2) + 1;']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['if ( ( unsigned int)( mode_class_0[v13] - 5) > 1 )']
['if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )', 'if ( ( unsigned int)( mode_class_0[( int)v4] - 5) <= 1 )']
['if ( ( unsigned int)( mode_class_0[( int)v9] - 5) > 1 )']
['rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax']
['rtx v20; // r11', 'rtx v22; // r11', 'rtx v24; // r11']
['rtx v20; // rsi', 'rtx v21; // rsi', 'rtx v15; // rsi', 'rtx v29; // rsi', 'rtx v20; // rsi', 'rtx v28; // rsi', 'rtx v45; // rsi']
['rtx *v29; // rdi']
['rtx v35; // rax', 'rtx v35; // rax', 'rtx v35; // rax', 'rtx v35; // rax', 'rtx v35; // rax']
['rtx v36; // rax', 'rtx v36; // rax']
['rtx v37; // rax', 'rtx v37; // rax']
['rtx v38; // rax', 'rtx v38; // rax']
['rtx v44; // rax', 'rtx v44; // rax', 'rtx v44; // rax']
['rtx *v17; // r12']
['rtx *v28; // rdx', 'rtx v18; // rdx', 'rtx *v18; // rdi', 'rtx v18; // rdx']
['rtx *v19; // rax', 'rtx v19; // r15', 'rtx *v13; // r13', 'rtx *v12; // r14', 'rtx *v17; // r12', 'rtx **v45; // r12', 'rtx *v39; // r12', 'rtx *v49; // r12']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rax']
['rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax']
['rtx v35; // rax', 'rtx v35; // rax', 'rtx v35; // rax', 'rtx v35; // rax', 'rtx v35; // rax']
['rtx *v41; // rsi', 'rtx *v44; // rdi']
['rtx *v68; // r14', 'rtx **v45; // r12']
['rtx *v560; // rdx']
['rtx *v591; // rdx']
['rtx *v20; // rdx', 'rtx *v40; // rdx', 'rtx v60; // rax', 'rtx v60; // rax', 'rtx *v60; // rbp', 'rtx *v550; // rcx', 'rtx *v560; // rdx', 'rtx *v565; // rcx', 'rtx *v66; // rax', 'rtx v60; // rax', 'rtx v60; // rax', 'rtx *v70; // rdx', 'rtx *vec; // rcx', 'rtx *v80; // rax', 'rtx *v50; // rbx', 'rtx *v65; // rax', 'rtx v50; // rcx']
['rtx v61; // rax']
['rtx *v20; // r14', 'rtx *v50; // r14']
['rtx v21; // rsi', 'rtx v70; // rsi']
['rtx *v35; // r14']
['rtx v45; // rax', 'rtx v45; // rax']
['rtx desta; // [rsp+0h] [rbp-58h]']
['rtx desta; // [rsp+0h] [rbp-58h]']
['rtx op0c; // [rsp+8h] [rbp-70h]', 'rtx op0d; // [rsp+8h] [rbp-70h]']
['rtx src_reg; // [rsp+18h] [rbp-60h] BYREF', 'rtx second; // [rsp+10h] [rbp-48h] BYREF']
['rtx x; // [rsp+18h] [rbp-60h]']
['rtx inner; // [rsp+38h] [rbp-40h] BYREF']
['fld = loc;']
['if ( ( mode_class_0[v4] & 0xFFFFFFFB) != 2 )']
['if ( ( unsigned int)( mode_class_0[*( ( unsigned __int8 *)reg + 2)] - 5) <= 1 )']
['if ( ( mode_class_0[( unsigned __int8)v3] & 0xFFFFFFFB) != 2']
['if ( ( mode_class_0[v4] & 0xFFFFFFFB) != 2 )']
['if ( ( mode_class_0[v4] & 0xFFFFFFFB) != 2 )']
['v15 = ( unsigned int)( mode_class_0[v11] - 5) <= 1;', 'v14 = ( unsigned int)( mode_class_0[v11] - 5) <= 1;', 'v35 = ( unsigned int)( mode_class_0[v31] - 5) <= 1;']
['if ( ( mode_class_0[v6] & 0xFFFFFFF9) == 1 )', 'if ( ( mode_class_0[v4] & 0xFFFFFFFB) != 2 )']
['*( _WORD *)pat = swap_condition( ( rtx_code)*( _WORD *)pat);']
['*( _OWORD *)v32.r = *( _OWORD *)&args.operand;', '*( _OWORD *)v31.r = *( _OWORD *)&args.operand;', '*( _OWORD *)v33.r = *( _OWORD *)&args.operand;']
['for ( i = 0; ; i = XFlittlenan[v6] )']
['*( _OWORD *)&result->decl.common.type = 0LL;']
['if ( *( _OWORD *)&t1->block.vars == 0LL )']
['rtx base_term; // rax', 'rtx base_term; // rax']
['rtx addr_0; // rax', 'rtx addr_0; // rax']
['addr_0 = get_addr_0( x->fld[0].rtx);']
['rtx = addr_0;']
['base_term = find_base_term( rtx);', 'base_term = find_base_term( rtx);']
['if ( base_term )', 'if ( base_term )', 'if ( base_term )']
['base_term = find_base_term( rtx);', 'base_term = find_base_term( rtx);']
['if ( base_term )', 'if ( base_term )', 'if ( base_term )']
['if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )', 'if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )', 'if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )', 'if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )']
['if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )', 'if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )', 'if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )', 'if ( *( _WORD *)base_term == 67 || ( *( _DWORD *)base_term & 0x400FFFF) == 67108932 )']
['if ( !base_alias_check( rtx, mem_addr, ( machine_mode)*( ( unsigned __int8 *)x + 2), mem_mode) )']
['( machine_mode)*( unsigned __int8 *)( v1.rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)x + 2));', '( machine_mode)*( ( unsigned __int8 *)x + 2));']
['( machine_mode)*( unsigned __int8 *)( v1.rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)x + 2));', '( machine_mode)*( ( unsigned __int8 *)x + 2));']
['( machine_mode)*( unsigned __int8 *)( v7 + 2),']
['( machine_mode)*( unsigned __int8 *)( v1.rtwint + 2),']
['( machine_mode)*( unsigned __int8 *)( v7 + 2),']
['( machine_mode)*( unsigned __int8 *)( v7 + 2),']
['( machine_mode)*( unsigned __int8 *)( v7 + 2),']
['( machine_mode)*( unsigned __int8 *)( v7 + 2),']
['( machine_mode)*( unsigned __int8 *)( *( _QWORD *)&v12[2 * v15 + 2] + 2LL),']
['( machine_mode)*( unsigned __int8 *)( v7 + 2),']
['( machine_mode)( BYTE5( index_type->block.abstract_origin) >> 1),']
['( machine_mode)( BYTE5( range->common.type->block.abstract_origin) >> 1),']
['emit_cmp_and_jump_insns( v14, v17, GTU, 0LL, ( machine_mode)( unsigned __int8)v18, 1, default_label);']
['v19 = gen_rtx_fmt_u00( LABEL_REF, ( machine_mode)v18, table_label);']
['v29 = gen_rtx_fmt_ee( MULT, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v25, v28);']
['v11 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v10, v9);', 'v10 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v9, v8);', 'v24 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( ( ( BYTE3( target_flags) & 2) != 0) + 4), v22, v19);']
['v25 = memory_address_noforce( ( machine_mode)v23, v24);']
['v3 = gen_reg_rtx( ( machine_mode)v11);', 'v41 = gen_reg_rtx( ( machine_mode)v39);', 'v5 = gen_reg_rtx( ( machine_mode)v4);']
['v31 = gen_rtx_MEM( ( machine_mode)v29, v27);']
['rtx v16; // rdx', 'rtx v16; // rdx', 'rtx v19; // rdx', 'rtx v14; // rax', 'rtx v14; // rcx', 'rtx v14; // rax', 'rtx v10; // rdx', 'rtx v18; // rdx', 'rtx v34; // rdx', 'rtx v14; // rbx', 'rtx v15; // rdx', 'rtx v16; // rdx', 'rtx v14; // rax', 'rtx v34; // rdx', 'rtx v64; // rdx', 'rtx v12; // rdx', 'rtx v18; // rdx', 'rtx v12; // rdx', 'rtx v14; // rax']
['rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax']
['rtx v20; // rdx', 'rtx v20; // rdx']
['rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax']
['rtx v36; // rax', 'rtx v36; // rax']
['rtx i; // r14']
['rtx *v45; // rax']
['rtx *v19; // rax', 'rtx v59; // rax', 'rtx v59; // rax', 'rtx *v49; // rax']
['rtx *v560; // rdx', 'rtx *v591; // rdx']
['rtx *v46; // rdx', 'rtx v76; // rdi', 'rtx *v7; // rdi', 'rtx *v66; // rax', 'rtx *v18; // rdi', 'rtx *v29; // rdi', 'rtx *v39; // rdi', 'rtx *v44; // rdi']
['rtx *v60; // rbp']
['if ( ( tree_node *)*( &global_trees + 5) == section_name )']
['if ( ( tree_node *)*( &global_trees + 4) == section_name )']
['if ( ( tree_node *)*( &global_trees + 3) == section_name )']
['if ( ( tree_node *)*( &global_trees + 2) == section_name )']
['if ( ( tree_node *)*( &global_trees + 1) == section_name )']
['v4 = ( ( unsigned int)( mode_class_0[v6] - 5) < 2) + 1;']
['v12 = ( ( unsigned int)( mode_class_0[v19] - 5) < 2) + 1;']
['v13 = ( tree_node *)global_trees;']
['v14 = ( change_t_0 *)xrealloc( changes, v13);']
['rtx v35; // rcx', 'rtx v24; // rcx', 'rtx v34; // rax', 'rtx v31; // rcx', 'rtx v14; // rcx', 'rtx v37; // rcx', 'rtx v34; // rdx', 'rtx v34; // rax', 'rtx v34; // rax', 'rtx v4; // rcx', 'rtx v34; // rdx', 'rtx v33; // rcx']
['rtx *v39; // r12']
['rtx v38; // rax', 'rtx v38; // rax']
['rtx x; // [rsp+18h] [rbp-60h]']
['rtx froma; // [rsp+20h] [rbp-58h]']
['x = v4;']
['froma = v7;']
['v33 = *v12;', 'v33 = *v12;']
['if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)memref + 2), v5)']
['if ( statement_code_p( ( tree_code)*( ( unsigned __int8 *)*v6 + 16)) && ( *( ( _BYTE *)*v6 + 19) & 4) == 0 )']
['result = lang_hooks_0.tree_inlining.walk_subtrees( ( tree_node **)v6, walk_subtrees, func, data, htab_);', 'result = lang_hooks_0.tree_inlining.walk_subtrees( ( tree_node **)v6, walk_subtrees, func, data, htab_);']
['result = lang_hooks_0.tree_inlining.walk_subtrees( ( tree_node **)v6, walk_subtrees, func, data, htab_);', 'result = lang_hooks_0.tree_inlining.walk_subtrees( ( tree_node **)v6, walk_subtrees, func, data, htab_);']
['&& !lang_hooks_0.tree_inlining.tree_chain_matters_p( ( tree_node *)*v6) )', '&& !lang_hooks_0.tree_inlining.tree_chain_matters_p( ( tree_node *)*v6) )']
['&& !lang_hooks_0.tree_inlining.tree_chain_matters_p( ( tree_node *)*v6) )', '&& !lang_hooks_0.tree_inlining.tree_chain_matters_p( ( tree_node *)*v6) )']
['v4 = general_operand( x, ( machine_mode)*( ( unsigned __int8 *)x + 2));']
['v6 = test_insn_13;', 'v6 = test_insn_13;']
['if ( !test_insn_13 )']
['test_insn_13 = insn_raw;']
['ggc_add_rtx_root( &test_insn_13, 1);']
['v6 = test_insn_13;', 'v6 = test_insn_13;']
['if ( ( _DWORD)v5 == 16 || ( _DWORD)v5 == 22 || ( mode_class_0[v5] & 0xFFFFFFFB) == 1 )']
['if ( ( _DWORD)v3 != 16 && ( _DWORD)v3 != 22 && ( mode_class_0[v3] & 0xFFFFFFFB) != 1 )']
