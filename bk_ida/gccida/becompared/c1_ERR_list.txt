['return ( _cpp_buff_0 *)&v3[v2];']
['return ( _cpp_buff_0 *)&v3[v2];']
['return ( _cpp_buff_0 *)&v3[v2];']
['p_free_buffs = ( _cpp_buff_0 **)*p_free_buffs;']
['v1 = ( tokenrun_0 *)xmalloc( 0x20uLL);']
['v1 = ( tokenrun_0 *)xmalloc( 0x20uLL);']
['v1 = ( tokenrun_0 *)xmalloc( 0x20uLL);']
['v1 = ( tokenrun_0 *)xmalloc( 0x20uLL);']
['return ( _cpp_buff_0 *)&v3[v2];']
['result = mem_loc_descriptor( rtl->fld[0].rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtl));']
['v11 = gen_rtx_MEM( ( machine_mode)*( ( unsigned __int8 *)v11 + 2), fixed);']
['&& ( _DWORD)v2 == reverse_condition( ( rtx_code)v4)']
['*hv = ( __PAIR128__( h2, l2) + *( _OWORD *)&l1) >> 64;']
['return ( ~( v6 ^ h2) & ( v6 ^ ( ( __PAIR128__( h2, l2) + *( _OWORD *)&l1) >> 64))) >> 63;']
['v0 = dwarf2out_cfi_label_label_num++;']
['v3 = dwarf2out_cfi_label_label;']
['sprintf( dwarf2out_cfi_label_label, "*.%s%u", "LCFI", v0);']
['assemble_name( asm_out_file, dwarf2out_cfi_label_label);']
['if ( mode_class_0[( unsigned __int8)v5] != MODE_FLOAT )']
['*( _OWORD *)&v9->left = 0LL;', '*( _OWORD *)&v6->left = 0LL;']
['rtx v13; // rax', 'rtx v13; // rax']
['rtx v13; // rbp', 'rtx v16; // rbp', 'rtx v14; // rbx', 'rtx v19; // rbp', 'rtx v12; // rbp', 'rtx v34; // rbp', 'rtx v34; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v13; // rbp', 'rtx v44; // rbp', 'rtx v13; // rbp']
['rtx v15; // rbx']
['rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax']
['rtx *v21; // r14']
['rtx v25; // r12', 'rtx v22; // r12', 'rtx v25; // r12', 'rtx v29; // r12']
['rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax']
['rtx v41; // rax', 'rtx *v51; // rax', 'rtx *v11; // rax', 'rtx v41; // rax', 'rtx *v11; // rax', 'rtx *v21; // rax']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['v10 = ( ( unsigned int)( mode_class_0[v9] - 5) < 2) + 1;']
['if ( alloc_aux_for_blocks_initialized )']
['alloc_aux_for_blocks_initialized = 1;']
['if ( alloc_aux_for_edges_initialized )']
['alloc_aux_for_edges_initialized = 1;']
['*( _OWORD *)&result->count = 0LL;']
['*( _OWORD *)&result->aux = 0LL;']
['*( _OWORD *)&result->global_live_at_start = 0LL;']
['*( _OWORD *)&result->local_set = 0LL;']
['*( _OWORD *)&result->pred = 0LL;']
['*( _OWORD *)&result->head_tree = 0LL;']
['*( _OWORD *)&result->head = 0LL;']
['return gen_rtx_fmt_ee( EXPR_LIST, ( machine_mode)kind, val, next);']
['rtx *v21; // r14', 'rtx *v24; // r14', 'rtx *v92; // r14']
['rtx v14; // rbx', 'rtx *v19; // rbx', 'rtx *v17; // rbx']
['in_section_0 = v2;']
['v8 = rtx_alloc( ( rtx_code)( unsigned __int16)v2);']
['insn = i;']
['memref = v7;']
['v13 = v12;', 'v13 = v12;', 'v14 = v13;', 'v20 = v19;', 'v16 = v3;', 'v19 = v17;', 'v19 = v7;', 'v19 = v12;', 'v20 = v18;', 'v20 = v18;', 'v31 = v6;', 'v19 = v3;', '*v14 = v19;', 'v12 = v11;', 'v12 = v8;', 'v8 = v9;', 'v10 = v33;', 'v13 = v6;']
['v2 = ( tree_node *)ggc_alloc( v1);']
['add_to_mem_set_list( v10, v18);']
['memset( dc, 0, sizeof( diagnostic_context_0));']
['v5 = convert_to_mode( ( machine_mode)v7, v5, 1);']
['v4 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v4 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['v13 = *( ( unsigned __int16 *)&insn_data_0[1234].operand[1] + 8);']
['predicate = insn_data_0[1234].operand[1].predicate;']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['free( reg_pref_0);']
['if ( reg_pref_0 )', 'if ( reg_pref_0 )', 'if ( reg_pref_0 )']
['reg_pref_0 = reg_pref_buffer;']
['v13 = assign_stack_local( ( machine_mode)v9, v12, -( v10 < v11));']
['v13 = assign_stack_local( ( machine_mode)v9, v12, -( v12 != v10));']
['v18 = adjust_address_1( v13, ( machine_mode)*( ( unsigned __int8 *)cfun->emit->x_regno_reg_rtx[v3] + 2), 0LL, 0, 1);']
['v4 = simplify_subreg( v3, v2.rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v2.rtwint), *( _DWORD *)&v1[1]);']
['return off_629850[v1];']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['return apply_args_size_size;']
['if ( apply_args_size_size < 0 )']
['apply_args_size_size = v1;']
['apply_args_size_size = 2 * v1;']
['v6 = ( ( unsigned int)( mode_class_0[v5] - 5) < 2) + 1;']
['v13 = apply_args_size_size;']
['if ( apply_args_size_size % v12 )']
['apply_args_size_size = v12 + apply_args_size_size - 1 - ( v12 + apply_args_size_size - 1) % v12;', 'apply_args_size_size = v12 + apply_args_size_size - 1 - ( v12 + apply_args_size_size - 1) % v12;', 'apply_args_size_size = v12 + apply_args_size_size - 1 - ( v12 + apply_args_size_size - 1) % v12;']
['apply_args_size_size = v12 + apply_args_size_size - 1 - ( v12 + apply_args_size_size - 1) % v12;', 'apply_args_size_size = v12 + apply_args_size_size - 1 - ( v12 + apply_args_size_size - 1) % v12;', 'apply_args_size_size = v12 + apply_args_size_size - 1 - ( v12 + apply_args_size_size - 1) % v12;']
['apply_args_size_size = v1;']
['apply_args_size_size = v13 + mode_size[v3];']
['return apply_args_size_size;']
['rtx *v50; // rsi', 'rtx *v31; // rsi', 'rtx *v27; // rsi', 'rtx *v32; // rsi']
['rtx v10; // rax', 'rtx v12; // rdx', 'rtx v10; // rax', 'rtx v10; // rbx', 'rtx v10; // rax', 'rtx v19; // rdx']
['rtx *fld; // rcx']
['if ( !memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)object), object->fld[0].rtx) )']
['v8 = ( rtx)rtx[2];', 'loc = ( rtx *)&x[1];', 'v19 = ( rtx)insn[2];', 'v9 = ( rtx)v5[1];', 'v19 = ( rtx)v18[2];']
['v15 = ( rtx)*( ( _QWORD *)v14 + 4);']
['v5 = gen_rtx_fmt_u00( LABEL_REF, VOIDmode, v4);']
['rtwint = ( unsigned int *)v33->fld[0].rtwint;']
['rtwint = ( unsigned int *)v33->fld[0].rtwint;']
['v8 = ( rtx)rtx[2];', 'loc = ( rtx *)&x[1];', 'v19 = ( rtx)insn[2];', 'v9 = ( rtx)v5[1];', 'v19 = ( rtx)v18[2];']
['v18 = assign_temp( decl, 1, 1, 1);', 'edge = make_edge( e->src, v12, 1);']
['v18 = assign_temp( decl, 1, 1, 1);', 'edge = make_edge( e->src, v12, 1);']
['v4 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)reg + 2));']
['rtx v9; // r13']
['rtx v10; // r14']
['rtx v10; // r14', 'rtx *v21; // r14', 'rtx *v13; // r13', 'rtx *v24; // r14', 'rtx v13; // r14', 'rtx v18; // r15', 'rtx v15; // r14', 'rtx v15; // r14', 'rtx *v92; // r14']
['rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx *v19; // rbx', 'rtx *v13; // rbp']
['v3 = *( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)x >> 14) & 0x3FC));']
['v9 = expand_compound_operation( rtx);']
['v10 = expand_compound_operation( v8);']
['v11 = *( _WORD *)v9;']
['if ( ( _DWORD)v11 == *( _WORD *)v10 )']
['if ( ( ( *( _DWORD *)v9->fld[0].rtwint ^ *( _DWORD *)v10->fld[0].rtwint) & 0xFF0000) == 0', 'if ( ( ( *( _DWORD *)v9->fld[0].rtwint ^ *( _DWORD *)v10->fld[0].rtwint) & 0xFF0000) == 0']
['if ( ( ( *( _DWORD *)v9->fld[0].rtwint ^ *( _DWORD *)v10->fld[0].rtwint) & 0xFF0000) == 0', 'if ( ( ( *( _DWORD *)v9->fld[0].rtwint ^ *( _DWORD *)v10->fld[0].rtwint) & 0xFF0000) == 0']
['if ( v19 != x )']
['if ( v19 != x )']
['return apply_result_size_size;']
['if ( apply_result_size_size < 0 )']
['apply_result_size_size = 0;']
['return apply_result_size_size;']
['if ( apply_result_size_size % v6 )']
['apply_result_size_size = v6 + apply_result_size_size - 1 - ( v6 + apply_result_size_size - 1) % v6;', 'apply_result_size_size = v6 + apply_result_size_size - 1 - ( v6 + apply_result_size_size - 1) % v6;', 'apply_result_size_size = v6 + apply_result_size_size - 1 - ( v6 + apply_result_size_size - 1) % v6;']
['apply_result_size_size = v6 + apply_result_size_size - 1 - ( v6 + apply_result_size_size - 1) % v6;', 'apply_result_size_size = v6 + apply_result_size_size - 1 - ( v6 + apply_result_size_size - 1) % v6;', 'apply_result_size_size = v6 + apply_result_size_size - 1 - ( v6 + apply_result_size_size - 1) % v6;']
['apply_result_size_size = 0;']
['apply_result_size_size += mode_size[v1];']
['apply_result_size_size = 116;']
['if ( ( _DWORD)v10 == 46 || ( sch_istable[( unsigned __int8)v10] & 4) != 0 )']
['while ( ( sch_istable[v18] & 4) != 0 );']
['while ( ( sch_istable[v9] & 4) != 0 );']
['return offsettable_address_p( 0, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op), op->fld[0].rtx) != 0;']
['if ( mode_class_0[mode] != MODE_FLOAT )', 'if ( mode_class_0[mode] != MODE_FLOAT )']
['sprintf( v7, "*.%s%u", ( const char *)&off_629E39, current_funcdef_number);', 'sprintf( v22, "*.%s%u", ( const char *)&off_629E39, current_funcdef_number);']
['sprintf( v7, "*.%s%u", ( const char *)&off_629E39, current_funcdef_number);', 'sprintf( v22, "*.%s%u", ( const char *)&off_629E39, current_funcdef_number);']
['fprintf( asm_out_file, ".%s%u:\\n", ( const char *)&off_629E39, current_funcdef_number);']
['fprintf( asm_out_file, ".%s%u:\\n", ( const char *)&off_629E39, current_funcdef_number);']
['if ( in_section_0 != in_text )']
['in_section_0 = in_text;']
['fprintf( outfile, off_607A24, rtuint);']
['tree_node *v3; // rax', 'tree *p_tree_value; // r14', 'tree v12; // rax', 'tree v15; // rax', 'rtx base_value; // rax', 'rtx last_value; // rax', 'rtx last_value; // rax']
['tree *p_tree_value; // r14']
['if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['v8 = ( tree_node *)global_trees;']
['if ( *( tree_node **)( v9->fld[0].rtwint + 128) == section_name )', 'if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['v8 = ( tree_node *)global_trees;']
['v15 = ( tree_node *)v14;', 'v11 = ( tree_node *)v10;']
['if ( in_section_0 != in_text )']
['fprintf( outfile, off_607A24, rtuint);']
['v8 = ( tree_node *)global_trees;']
['v11 = ( tree_node *)v10;', 'if ( !first_rtl_op( ( tree_code)v8) )']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx regno_note; // rbp']
['tree v14; // rbp']
['v1 = off_63B09B;']
['*( _OWORD *)&head->first = 0LL;', '*( _OWORD *)&head->first = 0LL;']
['if ( *( _OWORD *)&outputs != 0LL )']
['*( _OWORD *)&to->first = 0LL;']
['*( _OWORD *)( object_base + 40) = 0LL;']
['*( _OWORD *)&v4.first = 0LL;']
['*( _OWORD *)&head->first = 0LL;', '*( _OWORD *)&head->first = 0LL;']
['*( _OWORD *)&to->first = 0LL;']
['*( _OWORD *)( object_base + 40) = 0LL;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( ( _OWORD *)object_base + 1) = 0LL;']
['*( _OWORD *)( object_base + 40) = 0LL;']
['*( ( _OWORD *)object_base + 1) = 0LL;']
['induction_1 *biv; // rbx', 'induction_1 *biv; // rbx']
['induction_1 *biv; // rbx', 'induction_1 *biv; // rbx']
['biv = bl_0->biv;']
['if ( !biv )']
['v3 = *( ( _WORD *)biv + 50);']
['mult_val = i->mult_val;']
['v1 = fold_rtx_mult_add( v1, const_int_rtx[65], biv->add_val, biv->mode);', 'v1 = fold_rtx_mult_add( v1, const_int_rtx[65], biv->add_val, biv->mode);']
['v1 = fold_rtx_mult_add( v1, const_int_rtx[65], biv->add_val, biv->mode);', 'v1 = fold_rtx_mult_add( v1, const_int_rtx[65], biv->add_val, biv->mode);']
['biv = biv->next_iv;', 'biv = biv->next_iv;']
['biv = biv->next_iv;', 'biv = biv->next_iv;']
['if ( biv )']
['rtx v22; // rax', 'rtx v20; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v20; // rax', 'rtx v20; // rax', 'rtx v22; // rax', 'rtx v20; // rax', 'rtx v22; // rax']
['count_error_warning_message = 1;']
['if ( get_frame_alias_set_set == -1 )', 'if ( get_varargs_alias_set_set == -1 )', 'if ( ix86_GOT_alias_set_set == -1 )']
['safe_from_p_save_expr_list = 0LL;']
['return force_reg( ( machine_mode)BYTE2( v2), x);']
['( rtx_code)*( _WORD *)x,']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['return force_reg( ( machine_mode)BYTE2( v2), x);']
['*( _OWORD *)&result->common.chain = 0LL;']
['if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['v11 = *( tree_node **)( *( _QWORD *)( low + 40) + 40LL);']
['v3 = ( tree_node *)v4;']
['v22 = ( tree_node *)low;', 'v8 = ( tree_node *)low;']
['v11 = *( tree_node **)( *( _QWORD *)( low + 40) + 40LL);']
['v6 = ( const char *)&unk_6DF04A;', 'v8 = ( const char *)&unk_6C3BD6;', 'v7 = ( const char *)&unk_63A188;', 'v7 = ( const char *)&unk_63A188;']
['v6 = ( const char *)&unk_6DF05E;', 'v6 = ( const char *)&unk_6DF074;', 'v7 = ( const char *)&unk_63A188;', 'v7 = ( const char *)&unk_63A188;']
['v6 = ( const char *)&unk_6DF074;', 'v7 = ( const char *)&unk_63A188;', 'v7 = ( const char *)&unk_63A188;']
['v6 = ( const char *)&unk_6DF086;', 'v8 = ( const char *)&unk_6C3BD6;', 'v7 = ( const char *)&unk_63A188;', 'v7 = ( const char *)&unk_63A188;']
['v6 = ( const char *)&unk_6DF0F7;', 'v7 = ( const char *)&unk_63A188;', 'v7 = ( const char *)&unk_63A188;']
['sprintf( xstrerror_buf, aUndocumentedEr, ( unsigned int)errnum);']
['v26 = replacement;']
['v26 = ( tree_node *)*( &global_trees + 27);', 'v26 = ( tree_node *)*( &global_trees + 27);', 'v11 = ( tree_node *)*( &global_trees + 27);', 'v1 = ( tree_node *)*( &global_trees + 27);', 'v2 = ( tree_node *)*( &global_trees + 24);']
['if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['v11 = *( tree_node **)( *( _QWORD *)( low + 40) + 40LL);']
['node->int_cst.int_cst = *( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)&v3->block.vars;']
['( machine_mode)( unsigned __int8)BYTE2( *v24),']
['( machine_mode)( unsigned __int8)BYTE2( *v24),']
['*( _OWORD *)( xi + 1) = 0LL;', '*( _OWORD *)( aux + 8) = 0LL;']
['*( _OWORD *)&result->block.vars = *( _OWORD *)d.r;', '*( _OWORD *)&result->block.vars = *( _OWORD *)d.r;']
['*( _OWORD *)&result->block.vars = *( _OWORD *)d.r;', '*( _OWORD *)&result->block.vars = *( _OWORD *)d.r;']
['*( _OWORD *)v6.r = v8;']
['*( _OWORD *)&node->block.vars = *( _OWORD *)v6.r;', '*( _OWORD *)&node->block.vars = *( _OWORD *)v6.r;']
['*( _OWORD *)&node->block.vars = *( _OWORD *)v6.r;', '*( _OWORD *)&node->block.vars = *( _OWORD *)v6.r;']
['*( _OWORD *)( xi + 1) = 0LL;']
['v15 = ( tree_node *)v14;', 'v11 = ( tree_node *)v10;']
['if ( reg_note )', 'if ( reg_note )', 'if ( reg_note && x )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )']
['v11 = *( tree_node **)( *( _QWORD *)( low + 40) + 40LL);']
['v15 = ( tree_node *)v14;', 'v11 = ( tree_node *)v10;']
['*( _OWORD *)( xi + 1) = 0LL;']
['v8 = ( tree_node *)global_trees;']
['v8 = ( tree_node *)global_trees;']
['if ( !v17 || !v18 || ( v19 = *( tree_node **)( v17[4] + 128LL), v19 == ( tree_node *)*( &global_trees + 27)) )']
['v39 = ( tree_node *)*( &global_trees + 12);', 'v14 = ( tree_node *)*( &global_trees + 16);']
['v39 = ( tree_node *)*( &global_trees + 12);', 'v11 = ( tree_node *)*( &global_trees + 15);']
['v14 = ( tree_node *)*( &global_trees + 16);', 'v11 = ( tree_node *)*( &global_trees + 15);']
['v11 = *( tree_node **)( *( _QWORD *)( low + 40) + 40LL);']
['v11 = *( tree_node **)( *( _QWORD *)( low + 40) + 40LL);']
['if ( ( tree_node *)*v11 == elements )']
['timevar_push( TV_INTEGRATION_0);', 'timevar_push( TV_INTEGRATION_0);']
['timevar_pop( TV_INTEGRATION_0);', 'timevar_pop( TV_INTEGRATION_0);']
['timevar_pop( TV_INTEGRATION_0);', 'timevar_pop( TV_INTEGRATION_0);']
['timevar_push( TV_EXPAND_0);']
['timevar_push( TV_EXPAND_0);']
['if ( in_section_0 != in_data )', 'if ( stack_0 )']
['if ( stack_0 )', 'stack_0 = v2;']
['if ( !peep2_insn_data_0[v5].insn )', 'if ( !peep2_insn_data_0[v5].insn )', 'insn = peep2_insn_data_0[v1].insn;', 'if ( !peep2_insn_data_0[v3].insn )', 'if ( !peep2_insn_data_0[v3].insn )']
['if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &low->int_cst.int_cst;', 'p_int_cst = &t->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;']
['low = ( tree)p_int_cst->low;']
['p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &low->int_cst.int_cst;', 'p_int_cst = &t->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;']
['changes = ( change_t_0 *)xrealloc( changes, 32LL * v9);']
['stack_0 = v2;']
['v1 = stack_0;']
['v12->count = e->count;']
['v1 = stack_0;']
['while ( ( sch_istable[( unsigned __int8)v7] & 0x204) != 0 || v7 == 36 && pfile->opts.dollars_in_ident )']
['while ( ( sch_istable[( unsigned __int8)v7] & 0x204) != 0 || v7 == 36 && pfile->opts.dollars_in_ident )']
['qty_0[v7].first_reg = v5;', 'qty_0[v4].death = -1;', 'qty_0[v3].changes_mode = 1;']
['stack_0 = stack_0->next;', 'stack_0 = stack_0->next;']
['stack_0 = stack_0->next;', 'stack_0 = stack_0->next;']
['timevar_push( TV_CPP_0);']
['timevar_pop( TV_CPP_0);']
['if ( ( sch_istable[v3->val.c] & 0xAC) == 0 )']
['v14 = ( tree_node *)*( &global_trees + 16);', 'v25 = ( tree_node *)*( &global_trees + 12);']
['v25 = ( tree_node *)*( &global_trees + 12);', 'v11 = ( tree_node *)*( &global_trees + 15);']
['*( _OWORD *)&result->flags = 0LL;']
['*( _OWORD *)&result->insns = 0LL;']
['*( _OWORD *)&result->src = 0LL;']
['*( _OWORD *)&result->pred_next = 0LL;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;', 'v15 = single_set_2( ( rtx)v14, *( ( rtx *)v14 + 4));']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['return general_operand( op, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['rtl_op = first_rtl_op( ( tree_code)*( ( unsigned __int8 *)&exp->block.common + 16));']
['v11 = ( tree_node *)i[13];']
['v19 = ( tree_node *)*( ( _QWORD *)&chain->vector.elements + v18);']
['rtx v36; // rax', 'rtx v36; // rax']
['rtx v37; // rcx']
['rtx v40; // rax', 'rtx v20; // rcx', 'rtx v40; // rax', 'rtx v43; // rcx', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v45; // rcx']
['rtx v62; // rcx', 'rtx v57; // rcx', 'rtx v52; // rax', 'rtx v22; // rcx']
['rtx datum; // [rsp+40h] [rbp-78h]', 'rtx *reg; // [rsp+8h] [rbp-60h]', 'rtx *rega; // [rsp+8h] [rbp-60h]']
['rtx datum; // [rsp+40h] [rbp-78h]', 'rtx arg0b; // [rsp+8h] [rbp-60h]', 'rtx *rega; // [rsp+8h] [rbp-60h]']
['rtx v28; // [rsp+10h] [rbp-58h]']
['v83 = insn;', 'val = insn;', 'v17 = insn;', 'v17 = insn;']
['v6 = *( ( unsigned int *)uid_cuid_1 + v5);']
['v7 = *( unsigned __int64 *)( ( char *)reaching_defs[v4]->elms + ( ( *( ( _DWORD *)uid_cuid_1 + v5) >> 3) & 0x1FFFFFF8));']
['v16 = *( ( _DWORD *)uid_cuid_0 + rtint);']
['if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )']
['v8 = *( _QWORD *)( reg_note->fld[0].rtwint + 8);']
['if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )']
['v8 = *( _QWORD *)( reg_note->fld[0].rtwint + 8);']
['( machine_mode)*( unsigned __int8 *)( *( _QWORD *)&v22[2 * v23 + 2] + 2LL));']
['&& !push_operand( v3, ( machine_mode)*( ( unsigned __int8 *)v3 + 2))']
['v28 = hash_rtx( ( rtx)v27, ( machine_mode)*( unsigned __int8 *)( v27 + 2), 0);']
['|| !fixed_regs[rtuint] && *( const mode_class *)( ( char *)mode_class_0 + ( ( v4 >> 14) & 0x3FC)) != MODE_CC) )']
['if ( rtint < 0 || insn_data_0[rtint].n_dups > 0 )']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)*( ( unsigned __int8 *)x + 2), v7, v8);']
['if ( base_alias_check( mem2_addr, mem_addr, ( machine_mode)*( ( unsigned __int8 *)x + 2), mem_mode) )']
['if ( mode_class_0[v9] != MODE_FLOAT || mode_size[v9] <= mode_size[BYTE2( v11)] )']
['|| ( mode_class_0[*( unsigned __int8 *)( v15->fld[0].rtwint + 2)] == MODE_CC) != ( mode_class_0[v34] != MODE_CC) )', '|| ( mode_class_0[*( unsigned __int8 *)( v15->fld[0].rtwint + 2)] == MODE_CC) != ( mode_class_0[v34] != MODE_CC) )', '|| ( mode_class_0[*( unsigned __int8 *)( v15->fld[0].rtwint + 2)] == MODE_CC) != ( mode_class_0[v36] != MODE_CC) )', '|| ( mode_class_0[*( unsigned __int8 *)( v15->fld[0].rtwint + 2)] == MODE_CC) != ( mode_class_0[v36] != MODE_CC) )']
['|| ( mode_class_0[*( unsigned __int8 *)( v15->fld[0].rtwint + 2)] == MODE_CC) != ( mode_class_0[v34] != MODE_CC) )', '|| ( mode_class_0[*( unsigned __int8 *)( v15->fld[0].rtwint + 2)] == MODE_CC) != ( mode_class_0[v34] != MODE_CC) )', '|| ( mode_class_0[*( unsigned __int8 *)( v15->fld[0].rtwint + 2)] == MODE_CC) != ( mode_class_0[v36] != MODE_CC) )', '|| ( mode_class_0[*( unsigned __int8 *)( v15->fld[0].rtwint + 2)] == MODE_CC) != ( mode_class_0[v36] != MODE_CC) )']
['if ( v21 > 0x40 || mode_class_0[*( unsigned __int8 *)( v15->fld[0].rtwint + 2)] != MODE_INT || ( _DWORD)v21 != 1 )']
['&& mode_class_0[( int)v8] == MODE_INT']
['if ( mode_class_0[v27] == MODE_CC )']
['if ( mode_class_0[BYTE2( v3)] == MODE_FLOAT']
['rtx v64; // rcx', 'rtx v14; // rbx', 'rtx v18; // rcx', 'rtx v14; // rax', 'rtx v17; // rcx', 'rtx v14; // rax', 'rtx v14; // rax']
['v8 = function_tail_eff_head;']
['if ( v4 )', 'if ( v10 )', 'if ( v11 )', 'if ( v34 )', 'if ( v19 )']
['*( _QWORD *)&v8[1] = rtx;']
['if ( *( __int64 *)( reg_note->fld[0].rtwint + 8) <= 4999 )']
['if ( *( __int64 *)( reg_note->fld[0].rtwint + 8) <= 4999 )']
['__m256 v18; // [rsp+40h] [rbp-58h] BYREF']
['args_size_0 = v6;']
['slot_with_hash = htab_find_slot_with_hash( v13, v14, v12, ( insert_option)( create != 0));']
['v28 = gen_rtx_fmt_ee( SET, VOIDmode, *v27, nan);']
['mode_alignment = get_mode_alignment( ( machine_mode)v4);']
['args_size_0 = v6;']
['*( _OWORD *)&v18.m256_f32[2] = 0LL;', '*( _OWORD *)&v18.m256_f32[2] = 0LL;']
['*( _OWORD *)&v18.m256_f32[2] = 0LL;', '*( _OWORD *)&v18.m256_f32[2] = 0LL;']
['v6[1].fld[0].rtwint = ( __int64)v2;']
['slot = htab_find_slot( size_int_type_wide_size_htab, size_int_type_wide_new_const, INSERT);', 'slot = htab_find_slot( size_int_type_wide_size_htab, size_int_type_wide_new_const, INSERT);']
['v24 = *( _OWORD *)&args->gp_offset;']
['*( _OWORD *)v4->bits = *( _OWORD *)first->bits;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['*( _OWORD *)v4->bits = *( _OWORD *)first->bits;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['rtx v7; // rax', 'rtx v7; // rax']
['v7 = gen_rtx_MEM( v6, rtx);']
['*( _QWORD *)&v8[1] = rtx;', '*( _QWORD *)&v6[1] = v8;']
['v8 = *( _DWORD *)memref & 0x8000000 | *( _DWORD *)v7 & 0xF7FFFFFF;']
['*( _DWORD *)v7 = v8;']
['*( _DWORD *)v7 = v9;']
['*( _DWORD *)v7 = v10;']
['*( _DWORD *)v7 = v11;']
['*( _DWORD *)v7 = *( _DWORD *)memref & 0x1000000 | v11 & 0xFEFFFFFF;']
['*( _QWORD *)&v7[1] = memref[1];']
['return v7;']
['emit_pop_insn( rtx, old, *( rtx *)&may_move_out_cost[57][15][118 * v11 + 4], EMIT_BEFORE);']
['emit_pop_insn( rtx, old, *( rtx *)&may_move_out_cost[57][15][118 * v11 + 4], EMIT_BEFORE);']
['emit_pop_insn( rtx, old, *( rtx *)&may_move_out_cost[57][15][118 * v11 + 4], EMIT_BEFORE);']
['if ( ( sch_istable[v11] & 4) != 0 && !*( ( _BYTE *)v9 + 1) )']
['rtx v23; // rax', 'rtx v23; // rax']
['rtx v21; // rsi', 'rtx v38; // rsi']
['rtx *clobber_reg; // [rsp+88h] [rbp-48h]']
['n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;']
['v36 = recog_data_0.n_operands;']
['if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )']
['v8 = recog_data_0.operand[v5];', 'v8 = recog_data_0.operand[v5];']
['recog_data_0.operand[v6] = rtx;']
['clobber_reg = 0LL;']
['clobber_reg = ( rtx *)&reg_used_as_output[-( ( 8 * v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];']
['clobber_reg[v15++] = v17;']
['v20 = recog_data_0.operand[v19];', 'v20 = recog_data_0.operand[v19];', 'v20 = recog_data_0.operand[v18];', 'v20 = recog_data_0.operand[v18];', 'v21 = recog_data_0.operand[v6];']
['v20 = recog_data_0.operand[v19];', 'v20 = recog_data_0.operand[v19];', 'v20 = recog_data_0.operand[v18];', 'v20 = recog_data_0.operand[v18];', 'v21 = recog_data_0.operand[v6];']
['if ( *( _WORD *)v20 != 61 )']
['rtuint = v16->fld[0].rtuint;']
['v22 = ( tree_node *)low;']
['if ( ( sch_istable[( unsigned __int8)v32] & 4) == 0 )', 'if ( ( sch_istable[( unsigned __int8)v32] & 4) == 0 )', 'if ( ( sch_istable[( unsigned __int8)v32] & 4) == 0 )']
['while ( ( sch_istable[v10] & 4) != 0 );', 'while ( ( sch_istable[v7] & 4) != 0 );', 'while ( ( sch_istable[v36] & 4) != 0 );', 'while ( ( sch_istable[v47] & 4) != 0 );', 'while ( ( sch_istable[v20] & 4) != 0 );', 'while ( ( sch_istable[v18] & 4) != 0 );', 'while ( ( sch_istable[v9] & 4) != 0 );']
['if ( ( sch_istable[( unsigned __int8)v44[1]] & 4) == 0 )']
['if ( ( sch_istable[( unsigned __int8)*format] & 4) != 0 )']
['while ( ( sch_istable[v7] & 4) != 0 );', 'while ( ( sch_istable[v9] & 4) != 0 );']
['if ( ( sch_istable[( unsigned __int8)v32] & 4) == 0 )', 'if ( ( sch_istable[( unsigned __int8)v32] & 4) == 0 )', 'if ( ( sch_istable[( unsigned __int8)v32] & 4) == 0 )']
['if ( ( sch_istable[( unsigned __int8)v32] & 4) == 0 )', 'if ( ( sch_istable[( unsigned __int8)v32] & 4) == 0 )', 'if ( ( sch_istable[( unsigned __int8)v32] & 4) == 0 )']
['while ( ( sch_istable[v7] & 4) != 0 );', 'while ( ( sch_istable[v47] & 4) != 0 );']
['rtx v51; // rbx', 'rtx v14; // rbx', 'rtx v21; // rbx', 'rtx v18; // rbx', 'rtx v19; // rbx', 'rtx v15; // rbx', 'rtx v61; // rbx', 'rtx v11; // rax', 'rtx v10; // rbx']
['induction_1 *v16; // rbx', 'induction_1 *v16; // rbx', 'induction_1 *v27; // rax', 'induction_1 *v27; // rax', 'induction_1 *v37; // rbx', 'induction_1 *v37; // rbx', 'induction_1 *v26; // rcx', 'induction_1 *v26; // rcx']
['induction_1 *v16; // rbx', 'induction_1 *v16; // rbx', 'induction_1 *v27; // rax', 'induction_1 *v27; // rax', 'induction_1 *v37; // rbx', 'induction_1 *v37; // rbx', 'induction_1 *v26; // rcx', 'induction_1 *v26; // rcx']
['induction_1 *v37; // rbx', 'induction_1 *v37; // rbx', 'induction_1 *v39; // r13', 'induction_1 *v39; // r13', 'induction_1 *v24; // r14', 'induction_1 *v24; // r14', 'induction_1 *v35; // rax', 'induction_1 *v35; // rax', 'induction_1 *v37; // rax']
['induction_1 *v37; // rbx', 'induction_1 *v37; // rbx', 'induction_1 *v39; // r13', 'induction_1 *v39; // r13', 'induction_1 *v24; // r14', 'induction_1 *v24; // r14', 'induction_1 *v35; // rax', 'induction_1 *v35; // rax', 'induction_1 *v37; // rax']
['rtx data; // [rsp+10h] [rbp-48h] BYREF']
['rtx op; // [rsp+18h] [rbp-60h] BYREF']
['rtx v19; // [rsp+0h] [rbp-38h] BYREF', 'rtx v19; // [rsp+0h] [rbp-38h] BYREF', 'rtx v79; // [rsp+60h] [rbp-C8h] BYREF', 'rtx v9; // [rsp+0h] [rbp-28h] BYREF']
['rtx v26; // [rsp+28h] [rbp-50h] BYREF']
['rtx v28; // [rsp+38h] [rbp-40h]', 'rtx v43; // [rsp+18h] [rbp-40h]']
['v5 = ( ( unsigned int)( mode_class_0[v3] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[v3] - 5) < 2) + 1;', 'v4 = ( ( unsigned int)( mode_class_0[v3] - 5) < 2) + 1;', 'v7 = ( ( unsigned int)( mode_class_0[v6] - 5) < 2) + 1;']
['v10 = ( ( unsigned int)( mode_class_0[v8] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[v8] - 5) < 2) + 1;']
['v15 = ( ( unsigned int)( mode_class_0[v13] - 5) < 2) + 1;', 'v15 = ( ( unsigned int)( mode_class_0[v13] - 5) < 2) + 1;']
['v19 = ( ( unsigned int)( mode_class_0[v17] - 5) < 2) + 1;', 'v18 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;', 'v19 = ( ( unsigned int)( mode_class_0[v18] - 5) < 2) + 1;']
['v5 = ( ( unsigned int)( mode_class_0[v4] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[v4] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[v4] - 5) < 2) + 1;']
['if ( ix86_hard_regno_mode_ok( regno, ( machine_mode)v20) )']
['( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( type->common.type->block.abstract_origin)) >> 1),']
['( machine_mode)( ( unsigned __int8)HIBYTE( *( _WORD *)( v48 + 60)) >> 1),']
['v27 = classify_argument( ( machine_mode)v24, v23.rttree, s, v25 - ( v26 & 0xFFFFFF00));']
['( machine_mode)( ( unsigned __int8)HIBYTE( *( _WORD *)( v48 + 60)) >> 1),']
['( machine_mode)( ( unsigned __int8)HIBYTE( *( _WORD *)( rtl->fld[0].rtwint + 60)) >> 1),']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['rtx v23; // rbx', 'rtx v20; // rbx', 'rtx v21; // rbx', 'rtx v32; // rbx', 'rtx v32; // rbx', 'rtx v22; // rbx']
['v6 = rtx;', 'v4 = rtx;']
['if ( *( _WORD *)v25 == 33 )', 'if ( *( _WORD *)v21 == 33 )', 'if ( *( _WORD *)v32 == 75 )']
['nonnote_insn = emit_insns_after( insns, end);']
['if ( *( _WORD *)v20 != 61 )', 'if ( *( _WORD *)v25 == 33 )', 'if ( *( _WORD *)v20 != 66 )', 'if ( *( _WORD *)v21 == 33 )', 'if ( *( _WORD *)v32 == 75 )']
['delete_insn( v4);']
['v19 = (  struct rtx_def *)v15[1];']
['real_insn = next_real_insn( insn);']
['real_insn = next_real_insn( insn);']
['timevar_push( TV_CLEANUP_CFG_0);']
['timevar_pop( TV_CLEANUP_CFG_0);']
['if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )']
['v4 = recog_data_0.operand_loc[v1];']
['if ( ( unsigned __int16)( *( _WORD *)recog_data_0.operand[v1] - 66) > 0xCu']
['|| !_bittest( &v2, *( _DWORD *)recog_data_0.operand[v1] - 66) )']
['recog_data_0.operand[v1] = v3;']
['while ( v1 < recog_data_0.n_operands );']
['if ( recog_data_0.n_dups > 0 )']
['v7 = recog_data_0.dup_loc[v5];']
['*recog_data_0.dup_loc[v5] = v6;']
['while ( v5 < recog_data_0.n_dups );']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['v13 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v12] - 5) < 2) + 1;', 'v16 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v17] - 5) < 2) + 1;', 'v12 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v11] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v12] - 5) < 2) + 1;', 'v16 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v14] - 5) < 2) + 1;', 'v14 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v13] - 5) < 2) + 1;', 'v11 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v10] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v11] - 5) < 2) + 1;', 'v14 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v13] - 5) < 2) + 1;']
['v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);', 'v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);']
['*( _OWORD *)v78 = 0LL;', '*( _OWORD *)v27 = 0LL;']
['*( _OWORD *)( xi + 1) = 0LL;']
['*( _OWORD *)( xi + 1) = 0LL;']
['*( _OWORD *)( xi + 1) = 0LL;', '*( _OWORD *)( aux + 8) = 0LL;']
['*( _OWORD *)( xi + 1) = 0LL;']
['*( _OWORD *)&e->pred_next = 0LL;']
['*( _OWORD *)&e->src = 0LL;']
['*( _OWORD *)&e->insns = 0LL;']
['*( _OWORD *)&e->flags = 0LL;']
['*( _OWORD *)&sequence_result[2] = 0LL;']
['*( _OWORD *)sequence_result = 0LL;']
['v7 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v7 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v18 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;']
['fancy_abort( &off_6CC868[4], 4328, "clear_reload_reg_in_use");']
['v13 = immed_double_const( cnst1, v12, ( machine_mode)v10);']
['v7 = insn_queue[( ( _BYTE)v6 + ( _BYTE)q_ptr) & 0x7F];']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['tree v37; // rbx']
['tree v42; // rax', 'tree v43; // rax']
['tree v42; // rax', 'tree v43; // rax']
['mode_alignment = get_mode_alignment( ( machine_mode)v4);']
['if ( rtuint <= 0x34 && !ix86_hard_regno_mode_ok( rtuint, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)i)) )']
['induction_1 *giv; // rcx', 'induction_1 *giv; // rcx', 'induction_1 *giv; // rbx', 'induction_1 *giv; // rbx', 'induction_1 *biv; // rax', 'induction_1 *biv; // rax', 'induction_1 *giv; // rcx', 'induction_1 *giv; // rcx']
['induction_1 *giv; // rcx', 'induction_1 *giv; // rcx', 'induction_1 *giv; // rbx', 'induction_1 *giv; // rbx', 'induction_1 *biv; // rax', 'induction_1 *biv; // rax', 'induction_1 *giv; // rcx', 'induction_1 *giv; // rcx']
['induction_1 *v26; // rcx', 'induction_1 *v26; // rcx', 'induction_1 *v41; // rax', 'induction_1 *v41; // rax']
['induction_1 *v26; // rcx', 'induction_1 *v26; // rcx', 'induction_1 *v41; // rax', 'induction_1 *v41; // rax']
['giv = bl_0->giv;']
['if ( giv )']
['giv = bl_0->giv;']
['if ( ( *( ( _BYTE *)i + 100) & 4) == 0 && !i->same )', 'if ( ( *( ( _BYTE *)i + 100) & 4) == 0 && !i->same )']
['v3 = v3->next;', 'v3 = v3->next;']
['v3 = v3->next;', 'v3 = v3->next;']
['while ( v4 );']
['if ( ( *( ( _BYTE *)i + 100) & 4) != 0 )']
['clobber_reg = ( rtx *)&reg_used_as_output[-( ( 8 * v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];']
['giv = giv->next_iv;', 'giv = giv->next_iv;']
['giv = giv->next_iv;', 'giv = giv->next_iv;']
['while ( giv );']
['v9 = gen_reg_rtx( ( machine_mode)*( unsigned __int8 *)( v8 + 2));', 'v40 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)v38 + 2));']
['rtx v58; // rbx', 'rtx v80; // rbx', 'rtx v80; // rbx', 'rtx v18; // rbx']
['rtx v13; // rbp', 'rtx v13; // rax', 'rtx v14; // rbx', 'rtx v23; // rbx', 'rtx v18; // rbx', 'rtx v19; // rbx', 'rtx v15; // rbx', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v10; // rbx', 'rtx v13; // rbp', 'rtx v13; // rax', 'rtx v13; // rbp']
['rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax']
['rtx v21; // rax', 'rtx v21; // rax']
['rtx v24; // rax', 'rtx v24; // rax', 'rtx v24; // rax', 'rtx v24; // rax', 'rtx v24; // rax']
['inout_mode = ( machine_mode *)inout_opnum;']
['v8 = op;', 'v8 = v9;']
['*( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint),', '*( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint),']
['insn = i;']
['v11 = *( _WORD *)v9;', 'v6 = *( _DWORD *)v4;']
['v9 += subreg_regno_offset( rtuint, ( machine_mode)BYTE2( v12), v14, ( machine_mode)BYTE2( v11));', 'v9 += subreg_regno_offset( rtuint, ( machine_mode)BYTE2( v12), v14, ( machine_mode)BYTE2( v11));']
['v9 += subreg_regno_offset( rtuint, ( machine_mode)BYTE2( v12), v14, ( machine_mode)BYTE2( v11));', 'v9 += subreg_regno_offset( rtuint, ( machine_mode)BYTE2( v12), v14, ( machine_mode)BYTE2( v11));']
['v18 = ( unsigned int)( ( unsigned int)( mode_class_0[( unsigned __int8)v17] - 5) < 2) + 1;']
['v29 = subreg_regno_offset( v23, ( machine_mode)BYTE2( v22), v24, ( machine_mode)BYTE2( v21));', 'v29 = subreg_regno_offset( v23, ( machine_mode)BYTE2( v22), v24, ( machine_mode)BYTE2( v21));']
['v33 = ( ( unsigned int)( mode_class_0[BYTE2( v11)] - 5) < 2) + 1;']
['&& ( ( int)rtint < 53 || v32 <= ( int)v18 || ( int)v18 >= qty_0[*( ( int *)reg_qty + rtint)].size)']
['if ( reg_class_subset_p( v2, qty_0[v3].min_class) )']
['v59 = qty_0;']
['*( ( _DWORD *)reg_next_in_qty + v57) = qty_0[v60].first_reg;']
['if ( reg_class_subset_p( v2, qty_0[v3].min_class) )']
['qty_0[v3].min_class = v2;']
['if ( reg_class_subset_p( v4, qty_0[v3].alternate_class) )']
['if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v18 + 2), v18->fld[0].rtx) )', 'if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v18 + 2), v18->fld[0].rtx) )', 'if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v18 + 2), v18->fld[0].rtx) )']
['rtx end; // rsi']
['end = dest->end;', 'end = dest->end;']
['end = dest->end;', 'end = dest->end;']
['if ( *( _WORD *)end != 33 )']
['rtx = end;']
['end = ( rtx)end[1];']
['while ( *( _WORD *)end == 37 && end[2].fld[0].rtint == -96 );', 'while ( *( _WORD *)end == 37 && end[2].fld[0].rtint == -96 );']
['while ( *( _WORD *)end == 37 && end[2].fld[0].rtint == -96 );', 'while ( *( _WORD *)end == 37 && end[2].fld[0].rtint == -96 );']
['end = ( rtx)rtx[1];']
['end = 0LL;']
['nonnote_insn = emit_insns_after( insns, end);']
['p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;']
['p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;']
['high = ( unsigned __int8 *)p_int_cst;']
['if ( v21 != *( tree_node **)( p + 5) )']
['v26 = ( tree_node *)v25[4];']
['v16 = lang_hooks_0.expand_constant( exp);']
['rtx v10; // r15']
['rtx v10; // r14', 'rtx v13; // r14', 'rtx v15; // r14', 'rtx v16; // r15', 'rtx v16; // r12', 'rtx v15; // r14']
['rtx regno_note; // rbp']
['rtx v31; // rax', 'rtx v51; // rbx', 'rtx v35; // rbx', 'rtx v31; // rax', 'rtx v21; // rbx', 'rtx v31; // rbp', 'rtx v32; // rbx', 'rtx v31; // rax', 'rtx v30; // rbx', 'rtx v32; // rbx', 'rtx v61; // rbx', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v37; // rbx']
['rtx *v17; // rcx', 'rtx v37; // rcx']
['rtx v6; // r12', 'rtx v4; // r14', 'rtx v64; // rcx', 'rtx v34; // r14', 'rtx v24; // r15', 'rtx v64; // rax', 'rtx v62; // r12', 'rtx v63; // r15', 'rtx v69; // r14', 'rtx v64; // rax', 'rtx v34; // r15', 'rtx v64; // rdx']
['( machine_mode)( unsigned __int8)BYTE2( *v24),']
['( machine_mode)BYTE2( v3))]']
['v15 = arg1;']
['for ( i = ( __int64)v3[3]; i; i = *( _QWORD *)( i + 16) )']
['( machine_mode)( unsigned __int8)BYTE2( *v24),']
['( machine_mode)BYTE2( v3))]']
['v9 = *( _OWORD *)&arg->block.vars;', 'if ( *( _OWORD *)&t1 != 0LL', 'if ( *( _OWORD *)&out.base != 0LL )']
['change_stack( src->end, &old, v5, ( emit_where)( *( _WORD *)src->end == 33));']
['v6 = ( tree_node *)high[4];', 'v7 = ( tree_node *)high[4];']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['rtx v4; // r14']
['rtx v8; // rax', 'rtx v8; // rax', 'rtx v8; // rax']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['if ( rtx_class[*( _WORD *)i->insn] == 105 )']
['v5 = next_nonnote_insn( v2);']
['v5 = next_nonnote_insn( v2);']
['real_insn = next_real_insn( insn);']
['real_insn = next_real_insn( insn);']
['if ( *( _OWORD *)&outputs != 0LL )', '*( ( _OWORD *)object_base + 1) = 0LL;', 'if ( *( _OWORD *)&out.base != 0LL )', 'if ( **( _WORD **)&this_insn_0[2] == 39 )']
['v5 = next_nonnote_insn( v2);']
['if ( ( unsigned __int16)( *( _DWORD *)dst - 65) >= 2u )']
['for ( i = ( __int64)v3[3]; i; i = *( _QWORD *)( i + 16) )']
['v10 = gen_rtx_CONST_INT( VOIDmode, v6->fld[0].rtwint + c->fld[0].rtwint);']
['v10 = gen_rtx_CONST_INT( VOIDmode, v6->fld[0].rtwint + c->fld[0].rtwint);']
['*( ( _BYTE *)v14 + 2) = 5 - ( ( target_flags & 0x2000000) == 0);']
['reg_avail_info_0 = 0LL;']
['v2 = reg_avail_info_0;', 'v2 = reg_avail_info_0;']
['v5 = uid_cuid_1;']
['v2 = reg_avail_info_0;', 'v2 = reg_avail_info_0;']
['reg_avail_info_0 = 0LL;']
['v8 = ( tree_node *)rtl[7];', '( machine_mode)v5);']
['reg_set_0 *v32; // rax', 'reg_set_0 *v32; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v3; // rax', 'reg_set_0 *v3; // rax']
['reg_set_0 *v32; // rax', 'reg_set_0 *v32; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v3; // rax', 'reg_set_0 *v3; // rax']
['reg_set_0 *v32; // rax', 'reg_set_0 *v32; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v3; // rax', 'reg_set_0 *v3; // rax']
['reg_set_0 *v32; // rax', 'reg_set_0 *v32; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v3; // rax', 'reg_set_0 *v3; // rax']
['v32 = reg_set_table[rtuint];', 'v36 = reg_set_table[rtuint];']
['if ( v32 )', 'if ( v36 )', 'if ( v3 )', 'if ( v11 )', 'if ( v3 )', 'if ( v33 )', 'if ( v34 )']
['v35 = bmap[*( int *)( v34->data.l[v32->insn->fld[0].rtint] + 88)];', 'v39 = bmap[*( int *)( v38->data.l[v36->insn->fld[0].rtint] + 88)];']
['v32 = v32->next;', 'v32 = v32->next;', 'v36 = v36->next;', 'v36 = v36->next;', 'v3 = v3->next;', 'v3 = v3->next;']
['v32 = v32->next;', 'v32 = v32->next;', 'v36 = v36->next;', 'v36 = v36->next;', 'v3 = v3->next;', 'v3 = v3->next;']
['while ( v32 );', 'while ( v36 );', 'while ( v3 );']
['v32 = reg_set_table[rtuint];', 'v36 = reg_set_table[rtuint];']
['if ( v34 )']
['v35 = bmap[*( int *)( v34->data.l[v32->insn->fld[0].rtint] + 88)];', 'v39 = bmap[*( int *)( v38->data.l[v36->insn->fld[0].rtint] + 88)];']
['v32 = v32->next;', 'v32 = v32->next;', 'v36 = v36->next;', 'v36 = v36->next;', 'v3 = v3->next;', 'v3 = v3->next;']
['v32 = v32->next;', 'v32 = v32->next;', 'v36 = v36->next;', 'v36 = v36->next;', 'v3 = v3->next;', 'v3 = v3->next;']
['while ( v32 );', 'while ( v36 );', 'while ( v3 );', 'while ( v4 );']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx),']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['fancy_abort( &off_6CC868[4], 573, "compute_use_by_pseudos");']
['v18 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;']
['v7 = ( v6 - 1 < 0) ^ __OFADD__( -1LL, v6) | ( v6 == 1);']
['rtx v8; // rcx', 'rtx v9; // rax']
['result = mem_loc_descriptor( rtl->fld[0].rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtl));']
['v19 = v17;', 'v19 = v12;', 'v79 = op1;']
['v8 = v7->fld[0].rtx;']
['rtuint = v16->fld[0].rtuint;']
['result = mem_loc_descriptor( rtl->fld[0].rtx, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtl));']
['rtx v24; // rax', 'rtx v24; // rax', 'rtx v24; // rax', 'rtx v24; // rax', 'rtx v24; // rax']
['rtx v26; // rax', 'rtx v26; // rax', 'rtx v26; // rax']
['induction_1 *v37; // rbx', 'induction_1 *v37; // rbx', 'induction_1 *v26; // rcx', 'induction_1 *v26; // rcx', 'induction_1 *v35; // rax', 'induction_1 *v35; // rax', 'induction_1 *v37; // rax']
['induction_1 *v37; // rbx', 'induction_1 *v37; // rbx', 'induction_1 *v26; // rcx', 'induction_1 *v26; // rcx', 'induction_1 *v35; // rax', 'induction_1 *v35; // rax', 'induction_1 *v37; // rax']
['rtx src_rega; // [rsp+10h] [rbp-40h] BYREF']
['induction_1 *v; // [rsp+30h] [rbp-48h]', 'induction_1 *v; // [rsp+30h] [rbp-48h]']
['induction_1 *v; // [rsp+30h] [rbp-48h]', 'induction_1 *v; // [rsp+30h] [rbp-48h]']
['src_rega = src_reg;']
['src_rega = src_reg;']
['*( &v - 14) = ( induction_1 *)*mult_val;', '*( &v - 14) = ( induction_1 *)*mult_val;']
['src_rega = src_reg;']
['*( _OWORD *)&head->first = 0LL;', '*( _OWORD *)&head->first = 0LL;']
['*( ( _OWORD *)object_base + 1) = 0LL;']
['*( ( _OWORD *)object_base + 1) = 0LL;']
['*( ( _OWORD *)object_base + 1) = 0LL;']
['v16 = ( tree_node *)j[4];']
['v6 = mode_class_0[mode];', 'v6 = mode_class_0[mode];']
['rtx v16; // rdi']
['rtx v12; // rsi', 'rtx v16; // rsi', 'rtx v38; // rsi']
['rtx *v43; // rdi']
['n_operands = ( unsigned int)recog_data_0.n_operands;', 'n_operands = ( unsigned int)recog_data_0.n_operands;']
['if ( recog_data_0.n_operands && recog_data_0.n_alternatives )', 'if ( recog_data_0.n_operands && recog_data_0.n_alternatives )']
['if ( recog_data_0.n_operands && recog_data_0.n_alternatives )', 'if ( recog_data_0.n_operands && recog_data_0.n_alternatives )']
['if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )']
['n_operands = ( unsigned int)recog_data_0.n_operands;', 'n_operands = ( unsigned int)recog_data_0.n_operands;']
['memcpy( dest, recog_data_0.constraints, 8 * n_operands);']
['rtx = recog_data_0.operand[v6];', 'rtx = recog_data_0.operand[v5];']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v2),']
['( machine_mode)BYTE2( v3));', '( machine_mode)BYTE2( v5));']
['v17 = recog_data_0.operand[1];', 'v17 = recog_data_0.operand[1];']
['v17 = recog_data_0.operand[1];', 'v17 = recog_data_0.operand[1];']
['v11 = recog_data_0.operand[3];', 'v18 = recog_data_0.operand[0];', 'v18 = recog_data_0.operand[0];', 'v8 = recog_data_0.operand[v5];', 'v8 = recog_data_0.operand[v5];']
['fprintf( file, "; pref %s", dump_flow_info_reg_class_names[v10]);']
['rtx v30; // rbx']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx v36; // rdi', 'rtx v20; // rdi', 'rtx in; // rdi', 'rtx v30; // rdi', 'rtx v54; // rdi', 'rtx v16; // rdi', 'rtx *v12; // rdi', 'rtx *v43; // rdi']
['rtx inline_target; // rcx']
['rtx insn; // [rsp+8h] [rbp-B0h] BYREF']
['insn = i;']
['insns = get_insns( );']
['set_block_for_insn( v9, a);']
['if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )']
['rtx v9; // r13', 'rtx v29; // r13', 'rtx v33; // r13', 'rtx v19; // r13', 'rtx v39; // r12']
['rtx v41; // rax', 'rtx v41; // rax']
['rtx v48; // rbp', 'rtx v12; // rbp', 'rtx v52; // rbp', 'rtx v32; // rbp', 'rtx v44; // rbp', 'rtx v48; // rbp']
['rtx v7; // rax', 'rtx v7; // rax', 'rtx v31; // rax', 'rtx v41; // rax', 'rtx v70; // rax', 'rtx v31; // rax', 'rtx v70; // rax', 'rtx v21; // rax', 'rtx v31; // rax', 'rtx v78; // rax', 'rtx v74; // rax', 'rtx v75; // rax', 'rtx v41; // rax', 'rtx v51; // rax', 'rtx v11; // rax', 'rtx v70; // rax', 'rtx v51; // rax', 'rtx v73; // rax', 'rtx v21; // rax', 'rtx v51; // rax']
['rtx x; // [rsp+8h] [rbp-40h] BYREF', 'rtx p; // [rsp+18h] [rbp-30h] BYREF', 'rtx x; // [rsp+8h] [rbp-40h] BYREF']
['arg1 = *( rtx *)( v1 + 16);']
['v22 = *( _WORD *)v21;']
['for_each_rtx( &x, insns_for_mem_walk, data);']
['*parts = gen_rtx_REG( DImode, op->fld[0].rtint);']
['v19 = v17;', 'v19 = v12;', 'v34 = v33;', 'v34 = v33;', 'v19 = v3;', 'v33 = v10;']
['if ( mode_class_0[mode] != MODE_FLOAT )', 'if ( mode_class_0[mode] != MODE_FLOAT )']
['if ( mode_class_0[v8] != MODE_INT || mode_class_0[oldmode] != MODE_INT )', 'if ( mode_class_0[v8] != MODE_INT || mode_class_0[oldmode] != MODE_INT )']
['if ( mode_class_0[v8] != MODE_INT || mode_class_0[oldmode] != MODE_INT )', 'if ( mode_class_0[v8] != MODE_INT || mode_class_0[oldmode] != MODE_INT )']
['v6 = mode_class_0[mode];', 'v5 = mode_class_0[mode];', 'v6 = mode_class_0[mode];', 'v8 = mode_class_0[mode];', 'v7 = mode_class_0[mode];', 'v1 = mode_class_0[mode];', 'v2 = mode_class_0[mode];', 'v1 = mode_class_0[mode];']
['v6 = mode_class_0[v4] != MODE_FLOAT;']
['v8 = gen_lowpart( ( machine_mode)mode, v8);']
['v13 = simplify_gen_subreg( ( machine_mode)v11, v8, ( machine_mode)*( ( unsigned __int8 *)v8 + 2), 0);', 'v13 = simplify_gen_subreg( ( machine_mode)v11, v8, ( machine_mode)*( ( unsigned __int8 *)v8 + 2), 0);']
['v13 = simplify_gen_subreg( ( machine_mode)v11, v8, ( machine_mode)*( ( unsigned __int8 *)v8 + 2), 0);', 'v13 = simplify_gen_subreg( ( machine_mode)v11, v8, ( machine_mode)*( ( unsigned __int8 *)v8 + 2), 0);']
['v19 = ( ( unsigned int)( mode_class_0[( unsigned int)v11] - 5) < 2) + 1;']
['v10 = simplify_gen_subreg( ( machine_mode)v4, x, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 0);', 'v10 = simplify_gen_subreg( ( machine_mode)v4, x, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 0);']
['v10 = simplify_gen_subreg( ( machine_mode)v4, x, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 0);', 'v10 = simplify_gen_subreg( ( machine_mode)v4, x, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), 0);']
['fprintf( file, off_63A1D6, scale);', 'fprintf( file, off_63A1DA, scale);']
['fprintf( file, off_63A1D6, scale);', 'fprintf( file, off_63A1DA, scale);']
['fprintf( file, off_63A1D6, scale);', 'fprintf( file, off_63A1DA, scale);']
['fprintf( file, off_63A1D6, scale);', 'fprintf( file, off_63A1DA, scale);']
['fprintf( file, off_63A1D6, scale);', 'fprintf( file, off_63A1DA, scale);']
['fprintf( file, off_63A1D6, scale);', 'fprintf( file, off_63A1DA, scale);']
['fprintf( file, off_63A1D6, scale);', 'fprintf( file, off_63A1DA, scale);']
['fprintf( file, off_63A1D6, scale);', 'fprintf( file, off_63A1DA, scale);']
['v26 = convert_to_mode( ( machine_mode)v19, value, 1);']
['v15 = build( ( tree_code)v6, type, v32, v35, v29);']
['return build1( ( tree_code)v4, type, expr);', 'return build1( ( tree_code)v4, type, expr);']
['return build1( ( tree_code)v4, type, expr);', 'return build1( ( tree_code)v4, type, expr);']
['v6 = operand_sub*(short *)0xforce( op0, 0, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v6 = operand_sub*(short *)0xforce( op0, 0, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));']
['v6 = operand_sub*(short *)0xforce( op0, 0, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v6 = operand_sub*(short *)0xforce( op0, 0, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));']
['rtvec v17; // rax']
['v5 = rtx_alloc( ( rtx_code)( unsigned __int16)v2);']
['v17 = rtvec_alloc( rtvec->num_elem);']
['v5->fld[v14].rtwint = ( __int64)v17;']
['if ( v17->num_elem > 0 )']
['rtx v17; // r13']
['rtx v9; // r13']
['rtx inline_target; // rcx']
['rtx v27; // rbp', 'rtx v48; // rbp', 'rtx v26; // rbp', 'rtx v26; // rbp', 'rtx v26; // rbp', 'rtx v27; // rbp', 'rtx v18; // rbp', 'rtx v23; // rbp', 'rtx v18; // rbp', 'rtx v48; // rbp']
['rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax']
['rtx v20; // rax', 'rtx v60; // rax', 'rtx v5; // rax', 'rtx v54; // rax', 'rtx v58; // rax', 'rtx v30; // rax', 'rtx v59; // rax', 'rtx v50; // rbx', 'rtx v30; // rax', 'rtx v70; // rax', 'rtx v20; // rax', 'rtx v20; // rax', 'rtx v57; // rax', 'rtx v10; // rax', 'rtx v30; // rax', 'rtx v40; // rax', 'rtx v55; // rax', 'rtx v53; // rax', 'rtx v55; // rax', 'rtx v70; // rax', 'rtx v40; // rax', 'rtx v50; // rbx', 'rtx v52; // rax', 'rtx v55; // rax', 'rtx v20; // rax', 'rtx v51; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v70; // rax', 'rtx v40; // rax', 'rtx v51; // rax', 'rtx v55; // rax', 'rtx v5; // rax', 'rtx v40; // rax', 'rtx v55; // rax', 'rtx v30; // rax', 'rtx v40; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v51; // rax', 'rtx v40; // rax']
['v8 = ( rtx)rtx[2];']
['v8 = single_set_2( rtx, *( rtx *)&rtx[2]);']
['v24 = 0LL;', 'v12 = 0LL;', 'v15 = 0LL;', 'v40 = 0LL;', 'v16 = 0LL;']
['pointer = p_int_cst;', 'in_section_0 = in_text;']
['if ( active_insn_p( v4) && ( **( _DWORD **)&v4[2] & 0xFFFE) != 44 )', 'if ( active_insn_p( v4) && ( **( _DWORD **)&v4[2] & 0xFFFE) != 44 )']
['rtx v96; // rbx', 'rtx v19; // rbx', 'rtx v97; // rbx']
['rtx v11; // r15']
['rtx v12; // rsi', 'rtx v16; // rsi']
['rtx v12; // rax', 'rtx v15; // rax', 'rtx v17; // rax', 'rtx v26; // rax', 'rtx v17; // rax', 'rtx v46; // rax', 'rtx v15; // rax', 'rtx v13; // rax', 'rtx v19; // rax', 'rtx v36; // rax', 'rtx v15; // rax', 'rtx v18; // rax', 'rtx v46; // rax', 'rtx v12; // rax', 'rtx v26; // rax', 'rtx v17; // rax', 'rtx v19; // rax', 'rtx v10; // rax', 'rtx v36; // rax', 'rtx v86; // rax', 'rtx v12; // rax', 'rtx v19; // rax', 'rtx v15; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v15; // rax', 'rtx v14; // rax', 'rtx v66; // rax', 'rtx v17; // rax', 'rtx v19; // rax', 'rtx v11; // rax', 'rtx v14; // rax', 'rtx v18; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v13; // rax', 'rtx v18; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v26; // rax', 'rtx v14; // rax']
['rtx v16; // [rsp+0h] [rbp-38h] BYREF', 'rtx v19; // [rsp+0h] [rbp-38h] BYREF', 'rtx v19; // [rsp+0h] [rbp-38h] BYREF']
['v16 = v3;', 'v19 = v3;']
['v8 = map->insn_map[rtx->fld[0].rtint];']
['if ( v19 )']
['*( _QWORD *)( *( _QWORD *)&rtx[2] + 32LL) = v5->fld[0].rtwint;']
['|| ( v16 = copy_rtx_and_substitute( rtx[3].fld[0].rtx, map, 0),']
['v3 = ( tree_node *)ggc_alloc( v2);', 'v3 = ( tree_node *)ggc_alloc( v2);']
['v2 = ( tree_node *)ggc_alloc( v1);']
['rtx v13; // rbp', 'rtx v16; // rbp', 'rtx v27; // rbp', 'rtx v19; // rbp', 'rtx v12; // rbp', 'rtx v67; // rbp', 'rtx v37; // rbp', 'rtx v19; // rbp', 'rtx v27; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v37; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v7; // rbp', 'rtx v13; // rbp', 'rtx v13; // rbp']
['rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax']
['induction_1 *v21; // r12', 'induction_1 *v21; // r12', 'induction_1 *v27; // rax', 'induction_1 *v27; // rax', 'induction_1 *v26; // rcx', 'induction_1 *v26; // rcx', 'induction_1 *v24; // r14', 'induction_1 *v24; // r14']
['induction_1 *v21; // r12', 'induction_1 *v21; // r12', 'induction_1 *v27; // rax', 'induction_1 *v27; // rax', 'induction_1 *v26; // rcx', 'induction_1 *v26; // rcx', 'induction_1 *v24; // r14', 'induction_1 *v24; // r14']
['rtx v24; // rax', 'rtx v24; // rax', 'rtx v24; // rax', 'rtx v24; // rax', 'rtx v24; // rax']
['rtx v27; // rcx']
['rtx v31; // rax', 'rtx v31; // rax', 'rtx v31; // rax']
['rtx label_from_map; // rax']
['rtx v12; // rax', 'rtx v22; // rax', 'rtx v46; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v41; // rax', 'rtx v42; // rdx', 'rtx v46; // rax', 'rtx v12; // rax', 'rtx v32; // rax', 'rtx v47; // rax', 'rtx v22; // rax', 'rtx v4; // rax', 'rtx v22; // rax', 'rtx v40; // rax', 'rtx v44; // rax', 'rtx v82; // rax', 'rtx v12; // rax', 'rtx v49; // rax', 'rtx v32; // rax', 'rtx v41; // rax', 'rtx v45; // rax', 'rtx v40; // rax', 'rtx v42; // rdx', 'rtx v52; // rax', 'rtx v44; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v40; // rax', 'rtx v22; // rax', 'rtx v40; // rax', 'rtx v44; // rax', 'rtx v40; // rax', 'rtx v44; // rax', 'rtx v48; // rax', 'rtx v49; // rax', 'rtx v40; // rax']
['rtx v43; // rcx']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['rtx v54; // rdi']
['rtx v6; // rax', 'rtx v6; // rax']
['rtx *v19; // rbx', 'rtx *v17; // rbx']
['rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax']
['rtx v10; // r14', 'rtx *v21; // r14', 'rtx *v13; // r13', 'rtx *v24; // r14', 'rtx v13; // r14', 'rtx v18; // r15', 'rtx v15; // r14', 'rtx v15; // r14', 'rtx *v92; // r14']
['rtx v26; // r13', 'rtx v24; // r15', 'rtx v22; // r15', 'rtx v20; // r15', 'rtx v16; // r15']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rax']
['rtx v35; // rax']
['rtx v48; // rax']
['v5 = rtx_alloc( ( rtx_code)( unsigned __int16)*( _DWORD *)orig);']
['v3 = ( tree_node *)ggc_alloc( v2);', 'v3 = ( tree_node *)ggc_alloc( v2);']
['rtx v53; // rax']
['rtx v57; // rax']
['rtx v62; // rcx', 'rtx v64; // rcx', 'rtx v65; // rcx', 'rtx v21; // rcx', 'rtx v61; // rbx']
['rtx v62; // rcx', 'rtx v64; // rcx', 'rtx v65; // rcx', 'rtx v63; // rax', 'rtx v43; // rcx']
['rtx v64; // rcx']
['rtx v65; // rcx']
['rtx v67; // rbp']
['v5 = rtx_alloc( ( rtx_code)( unsigned __int16)v2);', 'v8 = rtx_alloc( ( rtx_code)( unsigned __int16)v2);', 'v9 = rtx_alloc( ( rtx_code)( unsigned __int16)v2);']
['v16 = *( _OWORD *)( aux + 24);', 'v25 = ( rtx *)&v23[2 * v24];']
['*( _OWORD *)&rld[v2 / 0x68].in = 0LL;']
['v16 = *( _OWORD *)( aux + 24);']
['*( _OWORD *)&rld[v2 / 0x68].in = 0LL;']
['v16 = *( _OWORD *)( aux + 24);']
['*( _OWORD *)&rld[v2 / 0x68].in = 0LL;']
['v2 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)x + 2));']
['n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;']
['recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[6] = v80;', 'recog_data_0.operand[4] = v84;', 'recog_data_0.operand[5] = v86;', 'recog_data_0.operand[3] = v89;', 'recog_data_0.operand[0] = v96;', 'recog_data_0.operand[1] = v98;', 'recog_data_0.operand[2] = v100;', 'recog_data_0.operand[7] = v103;', 'recog_data_0.operand[8] = v109;', 'recog_data_0.operand[4] = v13;', 'recog_data_0.operand[0] = v21;', 'recog_data_0.operand[0] = rtx;', 'recog_data_0.operand[1] = v8;', 'recog_data_0.operand[1] = v7;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[2] = v18;', 'recog_data_0.operand[2] = v83;', 'recog_data_0.operand[1] = v22;', 'recog_data_0.operand[2] = v27;', 'recog_data_0.operand[1] = v30;', 'recog_data_0.operand[1] = v33;', 'recog_data_0.operand[2] = v34;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[1] = v22;', 'recog_data_0.operand[0] = v6;', 'recog_data_0.operand[1] = v70;', 'recog_data_0.operand[2] = v74;', 'recog_data_0.operand[1] = v12;', 'recog_data_0.operand[2] = v16;', 'recog_data_0.operand[1] = v79;', 'recog_data_0.operand[2] = v84;', 'recog_data_0.operand[2] = v84;', 'recog_data_0.operand[2] = v98;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[1] = v33;', 'recog_data_0.operand[0] = v5;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[2] = v83;', 'recog_data_0.operand[1] = rtx;', 'recog_data_0.operand[2] = v83;', 'recog_data_0.operand[1] = v87;', 'recog_data_0.operand[2] = v83;', 'recog_data_0.operand[1] = v19;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[2] = v18;', 'recog_data_0.operand[2] = v92;', 'recog_data_0.operand[2] = v92;', 'recog_data_0.operand[1] = v22;', 'recog_data_0.operand[2] = v27;', 'recog_data_0.operand[1] = v30;', 'recog_data_0.operand[1] = v30;', 'recog_data_0.operand[1] = ( rtx)v4;', 'recog_data_0.operand[1] = rtx;', 'recog_data_0.operand[2] = v65;', 'recog_data_0.operand[1] = v79;', 'recog_data_0.operand[2] = v65;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[2] = v65;', 'recog_data_0.operand[2] = v17;', 'recog_data_0.operand[1] = ( rtx)v4;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[0] = v13;', 'recog_data_0.operand[1] = v16;', 'recog_data_0.operand[2] = v17;', 'recog_data_0.operand[0] = v85;', 'recog_data_0.operand[0] = v20;', 'recog_data_0.operand[1] = ( rtx)v4;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[1] = v16;', 'recog_data_0.operand[2] = v17;', 'recog_data_0.operand[0] = v185;', 'recog_data_0.operand[1] = ( rtx)v4;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[0] = v12;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[2] = v16;', 'recog_data_0.operand[0] = v85;', 'recog_data_0.operand[0] = v19;', 'recog_data_0.operand[1] = v21;', 'recog_data_0.operand[1] = ( rtx)v4;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[0] = v12;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[2] = v16;', 'recog_data_0.operand[0] = v92;', 'recog_data_0.operand[0] = v19;', 'recog_data_0.operand[1] = v21;', 'recog_data_0.operand[1] = v8.rtx;', 'recog_data_0.operand[2] = v31;', 'recog_data_0.operand[0] = v33;', 'recog_data_0.operand[1] = v8.rtx;', 'recog_data_0.operand[2] = v10;', 'recog_data_0.operand[0] = v7;', 'recog_data_0.operand[0] = v7;', 'recog_data_0.operand[1] = v49;', 'recog_data_0.operand[2] = v52;', 'recog_data_0.operand[3] = v54;', 'recog_data_0.operand[5] = v8;', 'recog_data_0.operand[2] = v9;', 'recog_data_0.operand[3] = v10;', 'recog_data_0.operand[4] = v11;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[2] = v18;', 'recog_data_0.operand[3] = v24;', 'recog_data_0.operand[2] = v88;', 'recog_data_0.operand[3] = v90;', 'recog_data_0.operand[4] = v93;', 'recog_data_0.operand[1] = v4;', 'recog_data_0.operand[1] = v7;', 'recog_data_0.operand[2] = v8;', 'recog_data_0.operand[1] = v10;', 'recog_data_0.operand[2] = v11;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v33;', 'recog_data_0.operand[2] = v39;', 'recog_data_0.operand[1] = v88;', 'recog_data_0.operand[0] = v4.rtx;', 'recog_data_0.operand[1] = ( rtx)v7;', 'recog_data_0.operand[0] = v4.rtx;', 'recog_data_0.operand[1] = v13;', 'recog_data_0.operand[0] = v4.rtx;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[0] = ( rtx)v4;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[0] = ( rtx)v4;', 'recog_data_0.operand[0] = ( rtx)v4;', 'recog_data_0.operand[1] = v39;', 'recog_data_0.operand[2] = v40;', 'recog_data_0.operand[3] = v42;', 'recog_data_0.operand[1] = v7;', 'recog_data_0.operand[2] = v8;', 'recog_data_0.operand[3] = v11;', 'recog_data_0.operand[0] = ( rtx)v4;', 'recog_data_0.operand[1] = v19;', 'recog_data_0.operand[2] = v24;', 'recog_data_0.operand[0] = ( rtx)v7;', 'recog_data_0.operand[1] = v51;', 'recog_data_0.operand[2] = v54;', 'recog_data_0.operand[3] = v56;', 'recog_data_0.operand[4] = v58;', 'recog_data_0.operand[0] = ( rtx)v7;', 'recog_data_0.operand[1] = v10;', 'recog_data_0.operand[2] = v13;', 'recog_data_0.operand[3] = v15;', 'recog_data_0.operand[4] = v17;', 'recog_data_0.operand[0] = ( rtx)v7;', 'recog_data_0.operand[1] = v32;', 'recog_data_0.operand[2] = v35;', 'recog_data_0.operand[3] = v37;', 'recog_data_0.operand[4] = v39;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;']
['if ( replace_reloads && recog_data_0.operand[opnum] != x )', 'if ( replace_reloads && recog_data_0.operand[opnum] != arg0 )', 'if ( *( _WORD *)recog_data_0.operand[0] == 67 )', 'if ( *( _WORD *)recog_data_0.operand[0] == 67 )']
['v7 = recog_data_0.operand[v6];', 'v20 = recog_data_0.operand[v19];', 'v20 = recog_data_0.operand[v19];', 'v20 = recog_data_0.operand[v18];', 'v20 = recog_data_0.operand[v18];', 'v21 = recog_data_0.operand[v6];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'recog_data_0.operand[2] = v98;', 'recog_data_0.operand[2] = v92;', 'recog_data_0.operand[2] = v92;', 'recog_data_0.operand[2] = v9;', 'recog_data_0.operand[4] = v93;', 'v8 = recog_data_0.operand[v5];', 'v8 = recog_data_0.operand[v5];', 'v76 = recog_data_0.operand[v75];']
['v7 = recog_data_0.operand[v6];', 'v21 = recog_data_0.operand[v6];']
['v13 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v12] - 5) < 2) + 1;', 'v32 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v31] - 5) < 2) + 1;', 'v32 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v31] - 5) < 2) + 1;', 'v29 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v28] - 5) < 2) + 1;', 'v8 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v9] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v12] - 5) < 2) + 1;', 'v4 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v2] - 5) < 2) + 1;', 'v25 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v22] - 5) < 2) + 1;', 'v34 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v33] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v11] - 5) < 2) + 1;', 'v3 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v4] - 5) < 2) + 1;']
['v14 = ( ( unsigned int)( mode_class_0[v11] - 5) < 2) + 1;', 'v33 = ( ( unsigned int)( mode_class_0[v34] - 5) < 2) + 1;', 'v4 = ( ( unsigned int)( mode_class_0[v3] - 5) < 2) + 1;', 'v44 = ( ( unsigned int)( mode_class_0[v38] - 5) < 2) + 1;', 'v36 = ( ( unsigned int)( mode_class_0[v37] - 5) < 2) + 1;']
['if ( ( int)rtint <= max_uid && *( ( _DWORD *)uid_cuid_0 + rtint) >= v16 )']
['v12 = gen_rtx_fmt_i0( REG, ( machine_mode)v5, v14);']
['if ( *recog_data_0.constraints[0] )']
['v7 = recog_data_0.operand[v6];', 'v8 = recog_data_0.operand[v5];', 'v8 = recog_data_0.operand[v5];', 'v76 = recog_data_0.operand[v75];']
['if ( recog_data_0.operand_mode[v4] )']
['v4 = recog_data_0.operand_loc[v1];']
['v8 = recog_data_0.operand[v5];', 'v8 = recog_data_0.operand[v5];']
['rtx *v20; // [rsp+10h] [rbp-38h]', 'rtx v24; // [rsp+10h] [rbp-38h]']
['v20 = &last_set[rtint];']
['v13 = ( ( unsigned int)( mode_class_0[v14] - 5) < 2) + 1;']
['v20[v11++] = insn;']
['v16 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v17] - 5) < 2) + 1;']
['fancy_abort( &off_6CC868[4], 1599, "count_pseudo");']
['v5 = ( ( unsigned int)( mode_class_0[v3] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[v3] - 5) < 2) + 1;']
['v8 = ( _DWORD *)( ( char *)&unk_9CF38C + 4 * v6 + 4 * v2);', 'v13 = ( _DWORD *)( ( char *)&unk_9CF38C + 4 * v8 + 4 * v5);']
['v8 = ( ( unsigned int)( mode_class_0[v6] - 5) < 2) + 1;', 'v8 = ( ( unsigned int)( mode_class_0[v6] - 5) < 2) + 1;']
['v13 = ( _DWORD *)( ( char *)&unk_9CF38C + 4 * v8 + 4 * v5);']
['v6 = ( cpp_hashnode_0 *)ht_lookup( pfile->hash_table, cur - 1, ( int)v2 - ( ( int)cur - 1), HT_ALLOC);']
['if ( ( sch_istable[v23] & 0x100) != 0 )']
['v15 = hex_value[v14];']
['if ( ( sch_istable[v23] & 0x100) != 0 )']
['v15 = hex_value[v14];']
['if ( ( sch_istable[v23] & 0x100) == 0 )']
['v15 = hex_value[v14];']
['if ( ( sch_istable[v23] & 0x100) == 0 )']
['if ( ( sch_istable[v15] & 0x88) != 0 )']
['result = ( cpp_buffer_0 *)pfile->buffer_ob.object_base;']
['*( _OWORD *)&result->aux = 0LL;', '*( _OWORD *)&result->cur = 0LL;']
['*( _OWORD *)&result->insns = 0LL;', '*( _OWORD *)&result->dir.name = 0LL;']
['*( _OWORD *)&result->count = 0LL;']
['*( _OWORD *)&result->head_tree = 0LL;', '*( _OWORD *)&result->flags = 0LL;']
['*( _OWORD *)&result->dir.ino = 0LL;']
['*( _OWORD *)&result->dir.ino = 0LL;']
['*( _OWORD *)&result->dir.name = 0LL;']
['rtx v32; // rax', 'rtx v32; // rax']
['rtx v53; // rax']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['if ( data->path[v13].status != NOT_TAKEN_0 )', 'if ( data->path[v46].status != NOT_TAKEN_0 )']
['v4 = unlink_line_notes( v3, rtx);', 'v4 = unlink_line_notes( v3, rtx);', 'v4 = unlink_other_notes( v3, rtx);', 'v4 = unlink_other_notes( v3, rtx);']
['v6[1].fld[0].rtwint = ( __int64)v2;']
['if ( v32 )']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax']
['v8 = *( ( _DWORD *)uid_cuid_0 + insn->fld[0].rtint);']
['if ( data->path[v13].status != NOT_TAKEN_0 )']
['data->path[v13].status = NOT_TAKEN_0;']
['v22 = *( ( _DWORD *)uid_cuid_0 + rtint);']
['if ( data->path[v13].status != NOT_TAKEN_0 )', 'if ( data->path[v46].status != NOT_TAKEN_0 )']
['v6 = rtx;', 'v4 = rtx;']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;']
['while ( *( _WORD *)v21 != 34 )']
['while ( *( _WORD *)v21 != 34 )']
['rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax']
['rtx v41; // r15', 'rtx v24; // r15', 'rtx v34; // r15']
['rtx v64; // rax', 'rtx v64; // rax']
['rtx v93; // rax']
['rtx v69; // r14']
['rtx v10; // rax', 'rtx v11; // rax', 'rtx v10; // rax', 'rtx v10; // rax']
['rtx set_dest; // rbx']
['rtx set_dest; // rbx']
['rtx v16; // r12']
['rtx v14; // rax', 'rtx v14; // rax', 'rtx v14; // rax']
['in_section_0 = v2;']
['v12 = create_basic_block( src->index + 1, rtx, 0LL);']
['v6 = v5;', 'v6 = v5;', 'v4 = v10;', 'v3 = v4;', 'v3 = v4;', 'v3 = v4;', 'v3 = v4;', 'v5 = v4;', 'v6 = v5;', 'v6 = v5;']
['free( reg_pref_0);', 'v5 = uid_cuid_1;']
['rtx *loc; // [rsp+0h] [rbp-58h]']
['rtx pattern; // [rsp+18h] [rbp-40h]']
['rtx object; // [rsp+20h] [rbp-38h]']
['v7 = canon_hash( *( rtx *)&x[1], ( machine_mode)BYTE2( v3));']
['loc = ( rtx *)&x[1];']
['v13 = loc;']
['v11 = *( _DWORD *)dst;']
['if ( mode_class_0[v16] != MODE_INT )', 'if ( mode_class_0[v16] != MODE_INT )', 'if ( mode_class_0[v3] != MODE_INT )']
['if ( mode_class_0[v16] != MODE_INT )', 'if ( mode_class_0[v16] != MODE_INT )', 'if ( mode_class_0[v4] != MODE_INT )']
['result = gen_lowpart_common( mode, rtx);']
['htab_empty( hash_table_0);']
['htab_delete( hash_table_0);']
['base_term = v4;', 'stack_0 = v2;']
['v22 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v20 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v24 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v18 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;']
['htab_traverse( hash_table_0, cselib_invalidate_mem_1, mem_rtx);']
['cselib_invalidate_regno( dest->fld[0].rtuint, ( machine_mode)BYTE2( v4));']
['if ( push_operand( dest, ( machine_mode)*( ( unsigned __int8 *)dest + 2)) )']
['v13 = hash_table_0;', 'v10 = hash_table_0;']
['slot_with_hash = htab_find_slot_with_hash( v13, v14, v12, ( insert_option)( create != 0));']
['v11 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v35 = nonzero_bits( ( rtx)rtwint, ( machine_mode)v4);']
['v13 = hash_table_0;', 'v10 = hash_table_0;']
['v32 = mode_class_0[v9];']
['v5 = cselib_lookup( x, ( machine_mode)BYTE2( v4), 0);']
['v14 = safe_hash( v5, ( machine_mode)v9);', 'v35 = nonzero_bits( ( rtx)rtwint, ( machine_mode)v4);']
['v10 = hash_table_0;']
['v7 = gen_rtx_fmt_e( CONST, ( machine_mode)( 5 - v6), v5);']
['rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax']
['rtx v24; // r15']
['rtx arg0[9]; // [rsp+10h] [rbp-48h]', 'rtx arg1; // [rsp+10h] [rbp-D78h]', 'rtx memref; // [rsp+8h] [rbp-40h]']
['htab_empty( hash_table_0);']
['htab_traverse( hash_table_0, cselib_invalidate_mem_1, mem_rtx);']
['x = force_reg( ( machine_mode)*( ( unsigned __int8 *)v9 + 2), v9);', 'rtl_op = first_rtl_op( ( tree_code)*( unsigned __int8 *)( v3 + 16));']
['v16 = *( rtx *)( v15 + 8);']
['v15 = gen_rtx_fmt_eee( IF_THEN_ELSE, ( machine_mode)*( ( unsigned __int8 *)x + 2), v14, vtrue, vfalse);']
['v15 = gen_rtx_fmt_eee( IF_THEN_ELSE, ( machine_mode)*( ( unsigned __int8 *)x + 2), v14, vtrue, vfalse);']
['v15 = gen_rtx_fmt_eee( IF_THEN_ELSE, ( machine_mode)*( ( unsigned __int8 *)x + 2), v14, vtrue, vfalse);']
['v5 = cselib_lookup( x, ( machine_mode)BYTE2( v4), 0);', 'v7 = cselib_lookup( y, ( machine_mode)BYTE2( v6), 0);']
['v5 = cselib_lookup( x, ( machine_mode)BYTE2( v4), 0);', 'v7 = cselib_lookup( y, ( machine_mode)BYTE2( v6), 0);']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['v5 = mode_class_0[( unsigned __int8)v3];']
['v26 = ( tree_node *)*( &global_trees + 27);', 'v26 = ( tree_node *)*( &global_trees + 27);']
['fprintf( asmfile, &off_607A24[1], ( unsigned int)current_sym_value);']
['fprintf( asmfile, &off_607A24[1], ( unsigned int)current_sym_value);']
['fprintf( asmfile, &off_607A24[1], ( unsigned int)current_sym_value);']
['if ( !initial || !strcmp( lang_hooks_0.name, "GNU C++") && initial == ( tree)global_trees )']
['fprintf( asmfile, &off_607A24[1], ( unsigned int)current_sym_value);']
['v8 = ( tree_node *)rtl[7];']
['fwrite( &unk_61E84B, 2uLL, 1uLL, asmfile);']
['v45 = ( unsigned int)dbxout_type_anonymous_type_number++;']
['if ( ( *( _BYTE *)( v41 + 18) & 4) != 0 && !strcmp( lang_hooks_0.name, "GNU C++") )']
['v5 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v6] - 5) < 2) + rtuint;']
['v32 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v31] - 5) < 2) + 1;', 'v32 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v31] - 5) < 2) + 1;', 'v29 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v28] - 5) < 2) + 1;', 'v8 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v9] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v8] - 5) < 2) + 1;', 'v4 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v2] - 5) < 2) + 1;', 'v25 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v22] - 5) < 2) + 1;', 'v34 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v33] - 5) < 2) + 1;', 'v3 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v4] - 5) < 2) + 1;']
['v32 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v31] - 5) < 2) + 1;', 'v32 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v31] - 5) < 2) + 1;']
['*( reload_type *)( v2 + 10314284),']
['*( machine_mode *)( v2 + 10314220));']
['fprintf( file, off_63A0C3, ( unsigned int)( rtint - 29));']
['fprintf( file, off_63A0C3, ( unsigned int)( rtint - 29));']
['fprintf( v1, "%s, ", reg_class_names_0[*( ( int *)v2 - 20)]);']
['fprintf( v1, "%ssecondary_in_icode = %s", "\\n\\t", insn_data_0[v8].name);']
['fprintf( v1, "%ssecondary_out_icode = %s", v9, insn_data_0[v10].name);']
['v3 = assign_stack_local( ( machine_mode)v2, mode_size[v2], 0);']
['error_with_decl( decl, &off_6E2FF0[4]);']
['p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;']
['low = p_int_cst->low;']
['p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);']
['p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);']
['v3 += int_byte_position( ( tree)p_int_cst->high);']
['v9 = *( tree_node **)( low + 40);']
['p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);']
['p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);']
['if ( ( sch_istable[v6] & 4) == 0 )']
['*( _OWORD *)value = 0LL;']
['*( _OWORD *)&value->un.vechi[13] = 0LL;']
['*( _OWORD *)&value->un.vechi[11] = 0LL;']
['*( _OWORD *)&value->un.vechi[9] = 0LL;']
['*( _OWORD *)&value->un.vechi[7] = 0LL;']
['*( _OWORD *)&value->un.vechi[5] = 0LL;']
['*( _OWORD *)&value->un.vechi[3] = 0LL;']
['*( _OWORD *)&value->un.vechi[1] = 0LL;']
['v13 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v12] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v12] - 5) < 2) + 1;', 'v14 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v13] - 5) < 2) + 1;', 'v14 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v13] - 5) < 2) + 1;']
['result = gen_rtx_fmt_ee( PLUS, ( machine_mode)*( ( unsigned __int8 *)x + 2), v6, result);']
['v6 = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target));', 'v6 = force_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx), rtx);', 'v26 = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target));']
['v2 = *( _OWORD *)&loc_p->base_offset;']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;']
['*( _OWORD *)v6.r = v8;']
['*( ( _OWORD *)v4 + 1) = 0LL;']
['v14 = ( tree_node *)*( &global_trees + 25);']
['if ( *v23 != v16 || !byte_9CE5FF[v24] )']
['if ( *v20 != v16 || !byte_9CE5FF[v19] )']
['if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )']
['v2.rtwint = ( __int64)reg_note->fld[0];']
['rtx v7; // r14']
['rtx real_insn; // rax', 'rtx real_insn; // rbx']
['rtx v59; // r12', 'rtx v98; // r12', 'rtx v29; // r12', 'rtx v39; // r12']
['if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )']
['v4 = reg_note;', 'v4 = reg_note;']
['v4 = reg_note;', 'v4 = reg_note;']
['if ( v11 != x->fld[0].rtx )']
['real_insn = next_real_insn( rtx);']
['v11 = protect_from_queue( x->fld[0].rtx, 0);']
['v11 = protect_from_queue( x->fld[0].rtx, 0);']
['v32->fld[0].rtx);']
['rtx = last_insn[1].fld[0].rtx;']
['rtx in; // rdi']
['rtx out_reg; // rdi']
['rtx v13; // rbp', 'rtx v16; // rbp', 'rtx v19; // rbp', 'rtx v12; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v15; // rbx', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v13; // rbp', 'rtx v13; // rbp']
['rtx v20; // rbx']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rax']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax']
['rtx dead_insn; // [rsp+18h] [rbp-60h]']
['dead_insn = spill_reg_store[last_reload_reg];']
['in = rld[v5 - 1].in;']
['if ( in )']
['v11 = *( _WORD *)v9;', 'v6 = *( _DWORD *)v4;']
['in = rld[v5 - 1].in_reg;']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['real_insn = next_real_insn( rtx);', 'v5 = next_nonnote_insn( v2);']
['if ( active_insn_p( v4) && ( **( _DWORD **)&v4[2] & 0xFFFE) != 44 )', 'if ( active_insn_p( v4) && ( **( _DWORD **)&v4[2] & 0xFFFE) != 44 )']
['if ( active_insn_p( v4) && ( **( _DWORD **)&v4[2] & 0xFFFE) != 44 )', 'if ( active_insn_p( v4) && ( **( _DWORD **)&v4[2] & 0xFFFE) != 44 )']
['if ( active_insn_p( v4) && ( **( _DWORD **)&v4[2] & 0xFFFE) != 44 )', 'if ( active_insn_p( v4) && ( **( _DWORD **)&v4[2] & 0xFFFE) != 44 )']
['delete_insn( v4);']
['rtx v26; // rax', 'rtx v24; // rax', 'rtx v64; // rax', 'rtx v24; // rax', 'rtx v26; // rax', 'rtx v24; // rax', 'rtx v64; // rax', 'rtx v24; // rax', 'rtx v26; // rax', 'rtx v24; // rax']
['rtx v26; // rax', 'rtx v26; // rax', 'rtx v66; // rax', 'rtx v26; // rax']
['rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v21; // rax', 'rtx v29; // rax', 'rtx v21; // rax', 'rtx v29; // rax']
['rtx v29; // rax', 'rtx v25; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax']
['*( _OWORD *)&df_0->insns[v4].defs = 0LL;']
['return gen_rtx_fmt_e( USE, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v1);']
['return gen_rtx_fmt_e( USE, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v1);']
['return gen_rtx_fmt_e( CLOBBER, ( machine_mode)*( ( unsigned __int8 *)v1 + 2), v1);', 'v48 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)v29 + 2), v31);']
['rtx *v13; // r13', 'rtx v15; // r12', 'rtx v10; // r15', 'rtx v18; // r15', 'rtx v15; // r14', 'rtx v12; // r15', 'rtx v13; // r15', 'rtx v15; // r12', 'rtx *v59; // r15', 'rtx v16; // r15', 'rtx *v15; // rcx', 'rtx *v5; // r12', 'rtx v15; // r14', 'rtx v11; // r15']
['v14 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v13] - 5) < 2) + 1;', 'v14 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v13] - 5) < 2) + 1;']
['v13 = loc;']
['v13 = loc;']
['v13 = loc;']
['v13 = loc;']
['df_ref_record_1( df_0, v18, v13, insn, ref_type, ref_flags);']
['rtx v13; // rbp', 'rtx v16; // rbp', 'rtx v14; // rbx', 'rtx v19; // rbp', 'rtx v12; // rbp', 'rtx v34; // rbp', 'rtx v34; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v13; // rbp', 'rtx v44; // rbp', 'rtx v13; // rbp']
['rtx *v27; // rbx', 'rtx v27; // rbp', 'rtx *v57; // rbp', 'rtx v27; // rbp', 'rtx *v37; // rbp']
['v4 = rtx;']
['v19 = ( rtx)v18[2];']
['*( _OWORD *)&buffer->state.cursor = v5;']
['if ( ( count_error_warning_message & 1) == 0 )']
['count_error_warning_message = 1;']
['v5 = *( _OWORD *)&diagnostic_buffer->state.prefix;', 'v13 = *( _OWORD *)&diagnostic_buffer->state.prefix;']
['v3 = *( _OWORD *)&diagnostic_buffer->state.indent_skip;']
['v7 = *( _OWORD *)&diagnostic_buffer->state.cursor;', 'v4 = *( _OWORD *)&diagnostic_buffer->state.cursor;']
['v8 = *( _OWORD *)diagnostic_buffer->state.diagnostic_count;', 'v5 = *( _OWORD *)diagnostic_buffer->state.diagnostic_count;']
['v9 = *( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4];', 'v17 = *( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4];']
['if ( ( sch_istable[v15] & 0x88) != 0 )']
['p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &low->int_cst.int_cst;', 'p_int_cst = &t->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;']
['p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);']
['p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);']
['low = ( tree)p_int_cst->low;']
['low = p_int_cst->low;']
['p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);']
['p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);']
['if ( rtx_equal_p( v9, recog_data_0.operand[0]) )', 'if ( rtx_equal_p( v9, recog_data_0.operand[0]) )']
['rtx v10; // rax', 'rtx v18; // rcx', 'rtx v20; // rcx', 'rtx v17; // rcx', 'rtx v10; // rax', 'rtx v10; // rbx', 'rtx v10; // rax']
['v47 = real_insn;', 'v10 = insns;', 'v37 = active_insn;']
['if ( ( _DWORD)v11 == *( _WORD *)v10 )']
['if ( ( _DWORD)v11 == *( _WORD *)v10 )']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['rtint = v20->fld[0].rtint;']
['rtx v13; // rax', 'rtx v18; // rcx', 'rtx v43; // rcx', 'rtx v17; // rcx', 'rtx v13; // rax']
['rtx v10; // r14', 'rtx v4; // r14', 'rtx v34; // r14', 'rtx v13; // r14', 'rtx v15; // r14', 'rtx v15; // r14']
['rtx v15; // rbx']
['rtx real_insn; // rax']
['rtx v26; // rax', 'rtx v56; // rbx', 'rtx v26; // rbp', 'rtx v6; // rbx', 'rtx v23; // rbx', 'rtx v26; // rbp', 'rtx v20; // rbx', 'rtx v26; // rbp', 'rtx v26; // rax', 'rtx v21; // rbx', 'rtx v96; // rbx', 'rtx v22; // rbx', 'rtx v26; // rax', 'rtx v26; // rcx']
['rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax']
['rtx v31; // rax', 'rtx v41; // rdx', 'rtx v31; // rax', 'rtx v31; // rax', 'rtx v34; // rdx']
['rtx v34; // rax']
['v19 = gen_jump( v18);', 'v11 = ( rtx *)( fld->rtwint + 8);']
['v7 = gen_rtx_MEM( v6, rtx);', 'arg1 = *( rtx *)( v1 + 16);', 'v15 = make_tree( v10, add);', 'v16 = *( rtx *)( v15 + 8);']
['v19 = gen_jump( v18);', 'v11 = ( rtx *)( fld->rtwint + 8);']
['if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['if ( mode_class_0[mode] == MODE_INT && !can_compare_p( op, mode, ccp_jump) )']
['do_compare_rtx_and_jump( v19, v16, unsigned_code, v17, ( machine_mode)v15, v18, if_false_label, v20);']
['v13 = mode_class_0[mode];']
['v11 = operand_sub*(short *)0xforce( op, v9, ( machine_mode)v6);', 'v11 = operand_sub*(short *)0xforce( op, v9, ( machine_mode)v6);']
['v11 = operand_sub*(short *)0xforce( op, v9, ( machine_mode)v6);', 'v11 = operand_sub*(short *)0xforce( op, v9, ( machine_mode)v6);']
['v12 = operand_sub*(short *)0xforce( v8, v9, ( machine_mode)v6);', 'v12 = operand_sub*(short *)0xforce( v8, v9, ( machine_mode)v6);']
['v12 = operand_sub*(short *)0xforce( v8, v9, ( machine_mode)v6);', 'v12 = operand_sub*(short *)0xforce( v8, v9, ( machine_mode)v6);']
['v6 = operand_sub*(short *)0xforce( op0, 0, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v6 = operand_sub*(short *)0xforce( op0, 0, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));']
['v6 = operand_sub*(short *)0xforce( op0, 0, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v6 = operand_sub*(short *)0xforce( op0, 0, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));']
['v11 = operand_sub*(short *)0xforce( op0, i, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v11 = operand_sub*(short *)0xforce( op0, i, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));']
['v11 = operand_sub*(short *)0xforce( op0, i, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v11 = operand_sub*(short *)0xforce( op0, i, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));']
['v15 = operand_sub*(short *)0xforce( op0, j, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v15 = operand_sub*(short *)0xforce( op0, j, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));']
['v15 = operand_sub*(short *)0xforce( op0, j, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v15 = operand_sub*(short *)0xforce( op0, j, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));']
['v17 = operand_sub*(short *)0xforce( op, v15, v13);']
['v18 = operand_sub*(short *)0xforce( v27, v15, v13);']
['v15 = ( tree_node *)v14;', 'v11 = ( tree_node *)v10;']
['v14 = swap_condition( ( rtx_code)v14);']
['v15 = ( tree_node *)v14;', 'v11 = ( tree_node *)v10;']
['if ( !can_compare_p( ( rtx_code)v14, ( machine_mode)v10, ccp_store_flag) )']
['if ( ( v25 == 1317 || only_cheap && *( ( unsigned __int16 *)insn_data_0[v25].operand + 8) != mode)']
['v38 = emit_store_flag( target, ( rtx_code)v14, v35, v37, ( machine_mode)v10, v52, 1);']
['target = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)target + 2));']
['v40 = compare_from_rtx( v33, v34, ( rtx_code)v14, v52, ( machine_mode)v10, 0LL);']
['value = expand_shift( LSHIFT_EXPR, ( machine_mode)v19, value, v29, 0LL, 1);']
['if ( mode_class_0[v4] == MODE_INT && *( _WORD *)newval == 54 )']
['if ( rtwint != trunc_int_for_mode( rtwint, ( machine_mode)v4) )']
['frees = undobuf_0.frees;', 'frees = undobuf_0.frees;']
['if ( undobuf_0.frees )', 'if ( undobuf_0.frees )']
['undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;']
['undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;']
['frees->next = undobuf_0.undos;', 'frees->next = undobuf_0.undos;']
['undobuf_0.undos = frees;', 'undobuf_0.undos = frees;']
['if ( ( doing_eh_warned & 1) == 0 )']
['doing_eh_warned = 1;']
['( machine_mode)*( ( unsigned __int8 *)v7 + 2),', '( machine_mode)*( ( unsigned __int8 *)v7 + 2),', '( machine_mode)*( ( unsigned __int8 *)v7 + 2),']
['( machine_mode)*( ( unsigned __int8 *)v7 + 2),', '( machine_mode)*( ( unsigned __int8 *)v66 + 2),', '( machine_mode)*( ( unsigned __int8 *)v7 + 2),', '( machine_mode)*( ( unsigned __int8 *)v7 + 2),']
['fwrite( &unk_607BEF, 0x11uLL, 1uLL, outf);']
['fprintf( file, off_607A24, ( unsigned int)v5->index);']
['fprintf( file, &off_607A24[1], ( unsigned int)v10);']
['fputs( dump_edge_info_bitnames[v10], file);']
['fprintf( file, "; pref %s", dump_flow_info_reg_class_names[v10]);']
['v12 = dump_flow_info_reg_class_names[v10];']
['fprintf( file, "; pref %s, else %s", v12, dump_flow_info_reg_class_names[v11]);']
['fprintf( v21, off_607A24, ( unsigned int)i);']
['sprintf( &v6[v7], " %-33s", &unk_6D3EF7);']
['v10 = *( tree_node **)( key + 32);', 'v13 = *( tree_node **)( key + 40);', 'v13 = *( tree_node **)( key + 32);', 'v13 = *( tree_node **)( key + 32);', 'v13 = *( tree_node **)( key + 32);']
['fprintf( outfile, off_607A24, rtuint);']
['fprintf( v1, "%s, ", reg_class_names_0[*( ( int *)v2 - 20)]);']
['v13 = *( tree_node **)( key + 32);', 'v13 = *( tree_node **)( key + 32);', 'v13 = *( tree_node **)( key + 32);']
['v13 = *( tree_node **)( key + 40);']
['if ( !lang_hooks_0.tree_dump.dump_tree( di_0, ( tree)key) )']
['v13 = *( tree_node **)( key + 40);', 'v13 = *( tree_node **)( key + 32);', 'v13 = *( tree_node **)( key + 32);', 'v13 = *( tree_node **)( key + 32);']
['predictor_info_0[predictor].name,']
['fprintf( outf, off_607A24, ( unsigned int)v7);']
['fprintf( outf, off_607A24, ( unsigned int)v7);']
['fprintf( file, &off_607A24[1], _bittest64( ( const __int64 *)&v8, v7));']
['v4 = gen_rtx_fmt_s( SYMBOL_REF, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), label);']
['v17 = gen_rtx_fmt_s( SYMBOL_REF, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), lab2);']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['if ( ( sch_istable[( unsigned __int8)v3] & 0x400) != 0 )']
['v16 = reg_map[v15];']
['else if ( *( _WORD *)v4 == 37 )']
['v15 = mode_class_0[v14];']
['if ( v22 != mode_class_0[v23] )']
['v4 = gen_rtx_fmt_s( SYMBOL_REF, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), label);']
['if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )']
['*( _OWORD *)&v2[v5].dw_fde_current_label = 0LL;']
['args_size_0 = 0LL;']
['if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL || ( BYTE1( decl->block.supercontext) & v5) != 0 )']
['if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )']
['*( _OWORD *)&cfa->offset = 0LL;']
['cfa_temp_0 = -1LL;']
['v0 = dwarf2out_cfi_label_label_num++;']
['sprintf( dwarf2out_cfi_label_label, "*.%s%u", "LCFI", v0);']
['assemble_name( asm_out_file, dwarf2out_cfi_label_label);']
['dwarf2out_frame_debug_expr( *fld, dwarf2out_cfi_label_label);']
['v5 = -args_size_0;']
['v7 = args_size_0 + v5;']
['args_size_0 = v6;']
['v0 = dwarf2out_cfi_label_label_num++;']
['sprintf( dwarf2out_cfi_label_label, "*.%s%u", "LCFI", v0);']
['assemble_name( asm_out_file, dwarf2out_cfi_label_label);']
['def_cfa_1( dwarf2out_cfi_label_label, &cfa);']
['v3 = args_size_0;']
['if ( apply_args_size_size < 0 )']
['rtx v11; // r15']
['v21 = ( rtx)v21[1];', 'v15 = ( rtx)y[1];']
['if ( *( _WORD *)v20 != 61 )']
['if ( cfa_temp_0 != v34 )']
['if ( cfa_temp_0 != v34 )']
['|| rtx->fld[0].rtint != p_hard_return->fld[0].rtint']
['|| rtx->fld[0].rtint != p_hard_return->fld[0].rtint']
['v8 = ( rtx)rtx[2];']
['v4->end = v6;']
['if ( cfa_temp_0 == *( _DWORD *)( v19 + 8) && *( rtx *)( v9 + 16) == global_rtl[2] )']
['( rtx_code)( unsigned __int16)*( _DWORD *)v2,']
['( rtx_code)( unsigned __int16)*( _DWORD *)v2,']
['cfa_temp_0 = rtx->fld[0].rtuint;', 'cfa_temp_0 = rtx->fld[0].rtuint;']
['if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )']
['return off_629850[v1];']
['if ( ( unsigned int)format > 0xFF || ( result = eh_data_format_name_format_names[format]) == 0LL )']
['*( _OWORD *)value = 0LL;', '*( _OWORD *)v85 = 0LL;', '*( _OWORD *)words = 0LL;', '*( _OWORD *)v78 = 0LL;', '*( _OWORD *)xi = 0LL;', '*( _OWORD *)v27 = 0LL;', '*( _OWORD *)v25 = 0LL;', '*( _OWORD *)v24 = 0LL;', '*( _OWORD *)v22 = 0LL;']
['*( _OWORD *)v85 = 0LL;', '*( _OWORD *)v78 = 0LL;', '*( _OWORD *)v27 = 0LL;', '*( _OWORD *)v25 = 0LL;', '*( _OWORD *)v24 = 0LL;', '*( _OWORD *)v22 = 0LL;']
['v5 = simplify_binary_operation( PLUS, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x), *constptr, v4);']
['v9 = simplify_binary_operation( PLUS, ( machine_mode)*( ( unsigned __int8 *)x + 2), *constptr, op1[0]);']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)*( ( unsigned __int8 *)x + 2), v7, v8);']
['v40 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)v38 + 2));']
['rtx v9; // rbp']
['rtx v16; // rdi']
['rtx v19; // rbx']
['rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax']
['rtx v23; // rax', 'rtx v23; // rax']
['rtx *v25; // rbx']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax']
['rtx v41; // r15', 'rtx v24; // r15', 'rtx v22; // r15', 'rtx v20; // r15', 'rtx v11; // r15']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rcx', 'rtx v28; // rax', 'rtx *v20; // r8']
['rtx v6; // r12', 'rtx v62; // r12']
['rtx const_rtx; // rbp']
['rtx v66; // rax']
['rtx *fld; // r14', 'rtx *fld; // r13']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['rtx v31; // rbp', 'rtx v61; // rbp', 'rtx v7; // rbp', 'rtx v51; // rbp']
['rtx *v59; // r15', 'rtx *v5; // r12']
['rtx v56; // rbx', 'rtx *v27; // rbx', 'rtx v6; // rbx', 'rtx *v96; // rdx', 'rtx *v25; // rbx', 'rtx v96; // rbx', 'rtx *v26; // rcx', 'rtx *v59; // rbx', 'rtx *v19; // rbx', 'rtx *v17; // rbx', 'rtx *v56; // rcx', 'rtx *v43; // rbx', 'rtx *v55; // rbx', 'rtx v74; // rbx']
['rtx *v39; // [rsp+10h] [rbp-48h]']
['rtx v27; // rcx']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rdi', 'rtx v30; // rbx', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v34; // rdx']
['rtx v34; // rdx']
['v8 = ( rtx)rtx[2];', 'v47 = real_insn;', 'v2 = base_value;', 'v22 = real_in;', 'v22 = real_in;', 'v22 = note_list;']
['v6 = low[2].low;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;']
['if ( *( _WORD *)v19 != 47 )', 'if ( *( _WORD *)v15 != 47 )', 'if ( *( _WORD *)v19 != 47 )', 'if ( *( _WORD *)v16 != 47 )', 'if ( *( _WORD *)v3 == 37 )', 'if ( *( _WORD *)v3 == 37 )', 'if ( v38 == ( rtx)v42 )']
['if ( *( _WORD *)v19 != 47 )', 'if ( *( _WORD *)v15 != 47 )', 'if ( *( _WORD *)v19 != 47 )', 'if ( *( _WORD *)v16 != 47 )', 'if ( *( _WORD *)v3 == 37 )', 'if ( *( _WORD *)v3 == 37 )', 'if ( v38 == ( rtx)v42 )']
['if ( *( _WORD *)v26 != 61 || cfa_temp_0 != *( _DWORD *)( v26 + 8) || **( _WORD **)( v9 + 16) != 54 )']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;']
['if ( *( _WORD *)v15 != 47 )']
['if ( *( _WORD *)v15 != 47 )']
['*( _OWORD *)xi = 0LL;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)&spill_cost[24] = 0LL;']
['*( _OWORD *)&spill_cost[16] = 0LL;']
['*( _OWORD *)&v2->loads = 0LL;', '*( _OWORD *)( aux + 8) = 0LL;', '*( _OWORD *)v24 = 0LL;']
['*( _OWORD *)v24 = 0LL;']
['*( _OWORD *)( xi + 1) = 0LL;', '*( ( _OWORD *)v4 + 1) = 0LL;']
['tree v42; // rax', 'tree v48; // rbx']
['tree v42; // rax', 'tree v43; // rax', 'tree v27; // rax']
['tree v42; // rax', 'tree v43; // rax', 'tree v48; // rbx', 'tree v8; // rax']
['v75 = convert_modes( v7, ( machine_mode)v11, v74, v10);']
['v10 = force_reg( ( machine_mode)v9, v10);', 'v10 = force_reg( ( machine_mode)v9, v10);']
['v11 = force_reg( ( machine_mode)v9, v11);']
['v31 = mode_class_0[v8];', 'v32 = mode_class_0[v9];', 'v22 = mode_class_0[mode];']
['v5 = convert_to_mode( ( machine_mode)v7, v5, 1);', 'v6 = convert_to_mode( ( machine_mode)v7, v6, 1);', 'v24 = convert_to_mode( ( machine_mode)v13, v24, 0);']
['v6 = convert_to_mode( ( machine_mode)v7, v6, 1);', 'v24 = convert_to_mode( ( machine_mode)v13, v24, 0);']
['operand = insn_data_0[v34].operand;', 'operand = insn_data_0[v16].operand;', 'operand = insn_data_0[v16].operand;']
['if ( !operand->predicate( v24, ( machine_mode)*( ( unsigned __int16 *)operand + 8)) )']
['x = gen_reg_rtx( ( machine_mode)*( ( unsigned __int16 *)operand + 8));']
['if ( !operand[2].predicate( v25, ( machine_mode)*( ( unsigned __int16 *)&operand[2] + 8)) )']
['copy_to_mode_reg( ( machine_mode)*( ( unsigned __int16 *)&operand[2] + 8), v25);']
['if ( !operand[3].predicate( v26, ( machine_mode)*( ( unsigned __int16 *)&operand[3] + 8)) )']
['copy_to_mode_reg( ( machine_mode)*( ( unsigned __int16 *)&operand[3] + 8), v26);']
['v29 = insn_data_0[( int)v34].genfun( x, v28);']
['rtx pending_read_insns; // rbx']
['rtx data; // [rsp+10h] [rbp-48h] BYREF']
['rtx *tmps; // [rsp+20h] [rbp-50h]']
['rtx src; // [rsp+48h] [rbp-38h]']
['clobber_reg = ( rtx *)&reg_used_as_output[-( ( 8 * v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];']
['src = orig_src;']
['v36 = dst;', 'v10 = dst;', 'v12 = dst;']
['clobber_reg = ( rtx *)&reg_used_as_output[-( ( 8 * v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];']
['clobber_reg = ( rtx *)&reg_used_as_output[-( ( 8 * v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];']
['mode_alignment = get_mode_alignment( ( machine_mode)v4);']
['rtx i; // rbx', 'rtx i; // rbx', 'rtx i; // rbx']
['rtx *tmps; // [rsp+38h] [rbp-48h]', 'rtx *tmps; // [rsp+20h] [rbp-50h]']
['rtx dst; // [rsp+30h] [rbp-40h]']
['rtx src; // [rsp+48h] [rbp-38h]']
['dst = orig_dst;']
['v21 = ( rtx *)*( ( _QWORD *)v10 + 2);']
['v24 = 0LL;', 'v12 = 0LL;', 'v15 = 0LL;', 'v40 = 0LL;', 'v16 = 0LL;']
['v24 = 0LL;', 'v12 = 0LL;', 'v15 = 0LL;', 'v40 = 0LL;', 'v16 = 0LL;']
['v9 = gen_reg_rtx( ( machine_mode)*( unsigned __int8 *)( v8 + 2));']
['tmps = v6;', 'tmps = v5;']
['v11 = *( _DWORD *)dst;']
['if ( !insn_data_0[1159].operand->predicate( loc, ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32) )']
['v1 = copy_to_mode_reg( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), loc);']
['rtx v6; // rbx']
['rtx *fld; // r13']
['v6 = first;']
['fld = ( rtx *)first[1].fld;']
['v6 = *fld;', 'v6 = *fld;']
['v6 = *fld;', 'v6 = *fld;']
['fld = ( rtx *)v6[1].fld;']
['v8.rtwint = ( __int64)v6[1].fld[0];']
['set_block_for_insn( v6, v4);']
['v4->end = v6;']
['v6 = rtx;']
['v6[1].fld[0] = v9;']
['*( _QWORD *)( v9.rtwint + 16) = v6;']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v14; // rbx', 'rtx v12; // rbp', 'rtx v32; // rbx', 'rtx v18; // rbx', 'rtx v12; // rax', 'rtx v32; // rbx', 'rtx v19; // rbx', 'rtx v15; // rbx', 'rtx v22; // rbx', 'rtx v12; // rdx', 'rtx v10; // rbx']
['rtx v13; // rbp', 'rtx v13; // rbp', 'rtx v13; // rbp']
['rtx v15; // r12', 'rtx v15; // r12', 'rtx v16; // r12']
['rtx last_insn; // rbp']
['rtx v22; // rbx']
['rtx v27; // rbp', 'rtx v26; // rbp', 'rtx v26; // rbp', 'rtx v26; // rbp', 'rtx v27; // rbp', 'rtx v23; // rbp']
['v6 = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target));']
['if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )']
['rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax']
['rtx v25; // rax']
['rtx *overflow_arg_area; // rax']
['rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax']
['if ( !memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v3), v3->fld[0].rtx)']
['&& !push_operand( v3, ( machine_mode)*( ( unsigned __int8 *)v3 + 2))']
['if ( !memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v5), v5->fld[0].rtx)']
['v24 = insn_data_0[insn_code].genfun( x, y);']
['v7 = mode_class_0[v6];', 'v9 = mode_class_0[v5];', 'v7 = mode_class_0[v6];']
['if ( push_operand( x, ( machine_mode)*( ( unsigned __int8 *)x + 2)) )']
['v46 = insn_data_0[v43].genfun( v44, v45);']
['v21 = insn_data_0[v17].genfun( v19, v20);', 'v46 = insn_data_0[v43].genfun( v44, v45);']
['v60 = expand_binop( ( machine_mode)( v56 ^ 5), v57, v58, v59, global_rtl[2], 0, OPTAB_LIB_WIDEN);']
['rtx v10; // r15']
['rtx rtwint; // r14']
['rtx last_insn; // r15']
['rtx v24; // rax', 'rtx v14; // rbx', 'rtx v23; // rbx', 'rtx v20; // rbx', 'rtx v24; // rax', 'rtx v24; // rax', 'rtx v21; // rbx', 'rtx v24; // rax', 'rtx v22; // rbx', 'rtx v4; // rbx', 'rtx v24; // rax', 'rtx v74; // rbx']
['rtx v27; // rbp', 'rtx v27; // rbp']
['v10 = insns;']
['rtwint = v10;', 'rtwint = v10;', 'rtwint = v10;']
['rtwint = v10;', 'rtwint = v10;', 'rtwint = v10;']
['rtwint = ( rtx)v12.rtwint;']
['rtwint = v10;', 'rtwint = v10;', 'rtwint = v10;']
['if ( ( unsigned int)( *( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)reg >> 14) & 0x3FC)) - 5) > 1 )']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['if ( *( insn_code *)( ( char *)&optab_table[30]->handlers[0].insn_code + ( ( *( _DWORD *)v22 >> 12) & 0xFF0)) != CODE_FOR_nothing )']
['v32 = operand_sub*(short *)0xforce( op, v30, mode);']
['operand = insn_data_0[v34].operand;', 'operand = insn_data_0[v60].operand;', 'operand = insn_data_0[v16].operand;', 'operand = insn_data_0[v2].operand;', 'operand = insn_data_0[v16].operand;']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['predicate = insn_data_0[( _QWORD)insn_code].operand->predicate;']
['v14 = insn_data_0[v12].genfun( x, insn_code);']
['if ( memory_address_p( ( machine_mode)v5, v9) )']
['if ( !memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v5), v5->fld[0].rtx)']
['v8 = assign_stack_local( ( machine_mode)v6, mode_size[v6], 0);']
['v8 = gen_reg_rtx( ( machine_mode)v6);']
['if ( !memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v5), v5->fld[0].rtx)']
['if ( mode_class_0[v8] != MODE_INT )']
['v11 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)target + 2));']
['rtx v27; // rbp', 'rtx v26; // rbp', 'rtx v26; // rbp', 'rtx v26; // rbp', 'rtx v27; // rbp', 'rtx v23; // rbp']
['v29 = subreg_regno_offset( v23, ( machine_mode)BYTE2( v22), v24, ( machine_mode)BYTE2( v21));', 'v29 = subreg_regno_offset( v23, ( machine_mode)BYTE2( v22), v24, ( machine_mode)BYTE2( v21));']
['v29 = subreg_regno_offset( v23, ( machine_mode)BYTE2( v22), v24, ( machine_mode)BYTE2( v21));', 'v29 = subreg_regno_offset( v23, ( machine_mode)BYTE2( v22), v24, ( machine_mode)BYTE2( v21));']
['v6 = rtx;', 'v4 = rtx;']
['( machine_mode)( unsigned __int8)BYTE2( *rtwint),', '( machine_mode)( unsigned __int8)BYTE2( *rtwint),', '( machine_mode)( unsigned __int8)BYTE2( *rtwint),']
['( machine_mode)BYTE2( v16));', '( machine_mode)BYTE2( v3))]', '( machine_mode)BYTE2( v21));']
['v5->fld[v14].rtwint = ( __int64)v17;']
['operand = insn_data_0[icode].operand;', 'operand = insn_data_0[icode].operand;']
['if ( !operand->predicate( v8, ( machine_mode)*( ( unsigned __int8 *)v8 + 2))']
['v3 = gen_reg_rtx( ( machine_mode)BYTE2( v2));']
['v12 = insn_data_0[icode].genfun( v11, v10);']
['v11 = safe_hash( exp, ( machine_mode)BYTE2( v9));']
['if ( mode_class_0[mode] != MODE_FLOAT )', 'if ( mode_class_0[mode] != MODE_FLOAT )']
['*( _OWORD *)xi = 0LL;']
['*( _OWORD *)xi = 0LL;']
['*( _OWORD *)xi = 0LL;']
['*( _OWORD *)xi = 0LL;']
['if ( mode_class_0[mode] != MODE_FLOAT )', 'if ( mode_class_0[mode] != MODE_FLOAT )']
['*( _OWORD *)xi = 0LL;']
['*( _OWORD *)xi = 0LL;']
['*( _OWORD *)xi = 0LL;']
['*( _OWORD *)xi = 0LL;']
['*( _OWORD *)a1 = *( _OWORD *)v8;']
['v6 = tmps;', 'v6 = rtx;']
['rtwint = 0LL;', 'rtwint = v10;', 'rtwint = v10;', 'rtwint = v10;', 'parts[2] = op;', 'insn = i;', 'stack_0 = v2;']
['src = orig_src;']
['end = v9;']
['memcpy( dest, recog_data_0.constraints, v4);']
['memcpy( dest, recog_data_0.constraints, v4);']
['src = orig_src;']
['v48 = pdest;', 'v48 = pdest;']
['( va_list_0 *)va,']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['set_diagnostic_context( &v27, msgid, ( va_list_0 *)&v14, file, line, 1);']
['v2 = spelling_0;']
['if ( spelling_base < spelling_0 )', 'if ( spelling_base < spelling_0 )']
['v2 = spelling_0;']
['diagnostic_for_decl( decl, msgid, ( va_list_0 *)va, 0);']
['( va_list_0 *)va,']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['rtx v67; // rax']
['rtx v88; // rax', 'rtx v88; // rax']
['rtx v31; // rbp', 'rtx v61; // rbp', 'rtx *v57; // rbp', 'rtx v9; // rbp', 'rtx *v54; // rbp', 'rtx *v8; // rbp', 'rtx v51; // rbp', 'rtx *v13; // rbp', 'rtx *v54; // rbp', 'rtx *v63; // rbp', 'rtx *v37; // rbp']
['rtx v12; // rbp', 'rtx v52; // rbp', 'rtx v32; // rbp', 'rtx v9; // rbp']
['rtx *loc; // [rsp+0h] [rbp-58h]', 'rtx insn; // [rsp+0h] [rbp-68h]']
['rtx earliest; // [rsp+10h] [rbp-38h] BYREF']
['rtx y; // [rsp+18h] [rbp-50h]', 'rtx v80; // [rsp+18h] [rbp-50h]', 'rtx v81; // [rsp+18h] [rbp-50h]']
['v16 = *( rtx *)( v15 + 8);']
['v23 = mult;', 'v23 = mult;']
['v28 = v26;', 'v28 = v26;', 'v20 = v19;', 'tmps = v6;', 'tmps = v5;', 'rtx = v27;', 'arg1 = v2;', 'end = v9;', '*v14 = v19;', 'loc = v39;', 'loc = v39;', 'v90 = v28;', 'v8 = v9;']
['*( _OWORD *)v85 = 0LL;', '*( _OWORD *)v78 = 0LL;', '*( _OWORD *)v27 = 0LL;', '*( _OWORD *)v25 = 0LL;', '*( _OWORD *)v24 = 0LL;', '*( _OWORD *)v22 = 0LL;']
['*( _OWORD *)v85 = 0LL;', '*( _OWORD *)v78 = 0LL;', '*( _OWORD *)v27 = 0LL;', '*( _OWORD *)v25 = 0LL;', '*( _OWORD *)v24 = 0LL;', '*( _OWORD *)v22 = 0LL;']
['v15 = build( ( tree_code)v6, type, v32, v35, v29);', 'v15 = build( ( tree_code)v6, tt, v19, v10);']
['v15 = build( ( tree_code)v6, tt, v19, v10);']
['v15 = build( ( tree_code)v6, type, v32, v35, v29);']
['v15 = build1( ( tree_code)v6, type, v24);']
['*( _DWORD *)v7 = v10;', '*( _DWORD *)v7 = v11;', '*( _OWORD *)v22 = 0LL;']
['v33 = ( ( unsigned int)( mode_class_0[BYTE2( v11)] - 5) < 2) + 1;']
['v25 = mode_class_0[v10];']
['*( _OWORD *)&result->aux = 0LL;', '*( _OWORD *)&result->cur = 0LL;']
['v50 = store_field( targeta, v41, v42, v48, exp, ( machine_mode)v44, v45, type, alias_set);']
['( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( v58->common.type->block.abstract_origin)) >> 1),', '( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( v49->common.type->block.abstract_origin)) >> 1),']
['( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( v58->common.type->block.abstract_origin)) >> 1),']
['v20 = expand_expr( from, 0LL, ( machine_mode)*( ( unsigned __int8 *)v18 + 2), EXPAND_NORMAL);']
['( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( sizetype_tab[0]->block.abstract_origin)) >> 1),', '( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( sizetype_tab[0]->block.abstract_origin)) >> 1),', '( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( sizetype_tab[0]->block.abstract_origin)) >> 1),']
['v4 = *( tree_node **)( *high + 32LL);']
['v6 = ( tree_node *)high[4];']
['predict_insn_def( v13, PRED_BUILTIN_EXPECT, ( prediction)v12);']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['v9 = adjust_address_1( v4, ( machine_mode)v1, v7, 1, 1);']
['v3 = force_reg( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), buf_addr);']
['v7 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v6);']
['v10 = gen_rtx_MEM( ( machine_mode)v2, v9);', 'v11 = gen_rtx_MEM( ( machine_mode)v9, v10);']
['rtx v10; // r14', 'rtx v13; // r14', 'rtx v18; // r15', 'rtx v15; // r14', 'rtx v15; // r14']
['memory_rtx = get_memory_rtx( elements);']
['set_mem_align( memory_rtx, v11);']
['v6 = clear_storage( memory_rtx, v18);']
['rtx = v19->fld[0].rtx;', 'rtx = v15->fld[0].rtx;', 'rtx = v11->fld[0].rtx;']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['v6 = memory_address( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), tem);']
['v5 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v3);', 'v7 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v6);', 'v8 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v7);']
['return gen_rtx_MEM( ( machine_mode)v10, v12);']
['v5 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v3);', 'v7 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v6);', 'v8 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v7);']
['v11 = gen_rtx_MEM( ( machine_mode)v9, v10);']
['if ( !expand_builtin_va_arg_gave_help )']
['expand_builtin_va_arg_gave_help = 1;']
['v15 = gen_rtx_MEM( ( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( type->block.abstract_origin)) >> 1), v14);']
['rtx v34; // rax']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['tree v42; // rax', 'tree v43; // rax', 'tree v15; // rax', 'tree v25; // rax']
['tree v42; // rax', 'tree v43; // rax', 'tree v48; // rbx']
['tree chain; // rax']
['tree v26; // r12', 'tree v76; // r12']
['v7 = mode_class_0[mode];']
['operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;']
['v50 = insn_data_0[v47].genfun( v48, v49);']
['v37 = convert_modes( ( machine_mode)v35, mode, x, unsignedp);']
['v22 = expand_complex_abs( ( machine_mode)v20, v21, 0LL, unsignedp);']
['v37 = convert_modes( ( machine_mode)v35, mode, x, unsignedp);']
['v22 = expand_complex_abs( ( machine_mode)v20, v21, 0LL, unsignedp);']
['rtx v26; // rax', 'rtx v26; // rax', 'rtx v26; // rax']
['rtx = gen_rtx_fmt_e( USE, ( machine_mode)BYTE2( v5), rtx);']
['v10 = nonzero_bits( v1->fld[0].rtx, ( machine_mode)*( unsigned __int8 *)( v1->fld[0].rtwint + 2));']
['rtx = gen_rtx_fmt_e( USE, ( machine_mode)BYTE2( v5), rtx);']
['v35 = nonzero_bits( ( rtx)rtwint, ( machine_mode)v4);']
['v30 = nonzero_bits( *( rtx *)( v1->fld[0].rtwint + 8), ( machine_mode)v29);']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['v23 = simplify_shift_const( 0LL, ( rtx_code)( v3 + 89), ( machine_mode)v20, v27, ( int)v21 - ( int)v7);']
['v23 = simplify_shift_const( 0LL, ( rtx_code)( v3 + 89), ( machine_mode)v20, v27, ( int)v21 - ( int)v7);']
['rtx v9; // r15', 'rtx v10; // r15', 'rtx v18; // r15', 'rtx v19; // r13', 'rtx v12; // r15', 'rtx v13; // r15', 'rtx v16; // r15', 'rtx v11; // r15']
['rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax']
['rtx *p_rtl; // r15']
['rtx v26; // rax', 'rtx *v25; // rax', 'rtx v26; // rax', 'rtx *v22; // rax', 'rtx *v26; // rcx', 'rtx *v20; // rax', 'rtx *v21; // rax', 'rtx v26; // rax']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rax']
['v11 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v15 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v14 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v19 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v1 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['v18 = assign_temp( decl, 1, 1, 1);']
['set_mem_attributes( v18, decl, 1);']
['decl->decl.rtl = v18;']
['if ( !v18 )', 'if ( v19 )', 'if ( !v16 )']
['v18 = decl->decl.rtl;']
['v13 = sge_plus_constant( x->fld[0].rtx, c);']
['( save_level)( x_block_stack->next == 0LL),']
['v14 = gen_rtx_fmt_i0( REG, ( machine_mode)LOBYTE( decl->block.supercontext), reg_number);']
['v10 = type_for_mode( ( machine_mode)*( ( unsigned __int8 *)add + 2), unsignedp);']
['v11 = ( tree_node *)*( &global_trees + 27);']
['v4 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v5 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v4 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v1 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['addr = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'result = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'x = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['v10 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), 2);']
['rtx v13; // rbp', 'rtx v16; // rbp', 'rtx v27; // rbp', 'rtx v19; // rbp', 'rtx v12; // rbp', 'rtx v67; // rbp', 'rtx v37; // rbp', 'rtx v19; // rbp', 'rtx v27; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v37; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v7; // rbp', 'rtx v13; // rbp', 'rtx v13; // rbp']
['rtx *v27; // rbx', 'rtx v21; // rbx', 'rtx *v25; // rbx', 'rtx *v21; // rax']
['rtx v23; // rbx']
['rtx v26; // r13']
['v4 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v5 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v4 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v1 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['v27 = gen_reg_rtx( biv->mode);']
['*( ( _BYTE *)giv + 100) |= 4u;', '*( ( _BYTE *)i + 100) |= 4u;']
['v3 = gen_rtx_fmt_u00( LABEL_REF, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v2);']
['v3 = gen_rtx_fmt_u00( LABEL_REF, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v2);']
['while ( v3 );', 'while ( v7 );', 'while ( v4 );']
['v28 = gen_rtx_fmt_ee( SET, VOIDmode, *v27, nan);']
['v8 = function_tail_eff_head;', 'v19 = *constant_term_loc;']
['v27 = *v25;', 'v27 = *v25;']
['rtx v9; // r15']
['rtx v22; // r12']
['v12 = *( rtx *)( v4.rtwint + 24);']
['if ( *( _WORD *)v12 == 54']
['&& v12->fld[0].rtwint + ( int)v10 > *( const unsigned __int16 *)( ( char *)mode_bitsize']
['rtx = gen_rtx_fmt_e( USE, ( machine_mode)BYTE2( v5), rtx);']
['v15 = mode_class_0[v14];']
['v22 = copy_rtx( rtx);']
['v23 = gen_binary( ASHIFT, ( machine_mode)v14, v21, op1);']
['v23 = gen_binary( ASHIFT, ( machine_mode)v14, v21, op1);']
['v24 = simplify_gen_unary( NOT, ( machine_mode)v14, v23, ( machine_mode)v14);', 'v24 = simplify_gen_unary( NOT, ( machine_mode)v14, v23, ( machine_mode)v14);']
['v24 = simplify_gen_unary( NOT, ( machine_mode)v14, v23, ( machine_mode)v14);', 'v24 = simplify_gen_unary( NOT, ( machine_mode)v14, v23, ( machine_mode)v14);']
['v23 = gen_binary( ASHIFT, ( machine_mode)v14, v21, op1);']
['v12 = dump_flow_info_reg_class_names[v10];']
['result = *( insn_code *)( ( char *)&fixtrunctab[0][0][v5] + v6);']
['if ( mode_class_0[mode] != MODE_FLOAT )', 'if ( mode_class_0[mode] != MODE_FLOAT )']
['return *( insn_code *)( ( char *)&fixtab[0][0][v5] + v6);']
['v5 = convert_to_mode( ( machine_mode)v7, v5, 1);', 'v24 = convert_to_mode( ( machine_mode)v13, v24, 0);']
['v40 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)v38 + 2));']
['return expand_unop( ( machine_mode)*( ( unsigned __int8 *)x + 2), optab_table[17], x, v1, 0);']
['v19 = gen_reg_rtx( ( machine_mode)v17);', 'v17 = gen_reg_rtx( ( machine_mode)v10);', 'v18 = gen_reg_rtx( ( machine_mode)v10);', 'v39 = gen_reg_rtx( ( machine_mode)v34);', 'v6 = gen_reg_rtx( ( machine_mode)v4);']
['emit_unop_insn( v7, x, v12, ( rtx_code)( 2 * ( v10 != 0) + 125));']
['if ( mode_class_0[mode] != MODE_FLOAT )', 'if ( mode_class_0[mode] != MODE_FLOAT )']
['( machine_mode)*( ( unsigned __int8 *)v4 + 2),', '( machine_mode)*( ( unsigned __int8 *)v1 + 2),', '( machine_mode)*( ( unsigned __int8 *)v11 + 2),']
['v42 = gen_rtx_fmt_e( ( rtx_code)( 2 * v39 + 126), ( machine_mode)*( ( unsigned __int8 *)v11 + 2), v38);', 'v42 = gen_rtx_fmt_e( ( rtx_code)( 2 * v39 + 126), ( machine_mode)*( ( unsigned __int8 *)v11 + 2), v38);']
['emit_cmp_and_jump_insns( v15, const_int_rtx[64], GE, 0LL, ( machine_mode)*( ( unsigned __int8 *)v15 + 2), 0, fixmodea);']
['v12 = ( ( unsigned int)( *( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)v7->exp >> 14) & 0x3FC))']
['v33 = &off_6C2B50 + ( char)v32;']
['v33 = &off_6C2B68 + ( char)v44;', 'v33 = &off_6C2B98 + ( char)v43;']
['v33 = &off_6C2B80 + ( char)v42;']
['v33 = &off_6C2B68 + ( char)v44;', 'v33 = &off_6C2B98 + ( char)v43;']
['( machine_mode)*( ( unsigned __int8 *)v1 + 2),', '( machine_mode)*( ( unsigned __int8 *)v11 + 2),']
['v48 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)v29 + 2), v31);']
['v15 = convert_to_mode( ( machine_mode)v10, op0, unsignedp);']
['emit_unop_insn( v7, x, v12, ( rtx_code)( 2 * ( v10 != 0) + 125));']
['rtx v25; // rax']
['rtx v26; // r13', 'rtx v20; // r14']
['rtx v31; // rax', 'rtx v31; // rax', 'rtx v31; // rax']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx cond_earliest; // rbx', 'rtx nonnote_insn; // rax', 'rtx compound_operation; // rbx']
['rtx v17; // rax', 'rtx v7; // rax', 'rtx v17; // rax', 'rtx v38; // rax', 'rtx v7; // rax', 'rtx v36; // rax', 'rtx v31; // rax', 'rtx v30; // rax', 'rtx v32; // rax', 'rtx v3; // rax', 'rtx v27; // rax', 'rtx v34; // rax', 'rtx v47; // rax', 'rtx v30; // rax', 'rtx v31; // rax', 'rtx v38; // rax', 'rtx v57; // rax', 'rtx v17; // rax', 'rtx v27; // rax', 'rtx v30; // rax', 'rtx v36; // rax', 'rtx v31; // rax', 'rtx v37; // rcx', 'rtx v27; // rax', 'rtx v35; // rax', 'rtx v27; // rax', 'rtx v32; // rax', 'rtx v33; // rax', 'rtx v17; // rax', 'rtx v27; // rax', 'rtx v67; // rax', 'rtx v37; // rbx', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v38; // rax']
['rtx v41; // rax', 'rtx v41; // rax']
['rtx return_rtx; // rbx']
['rtx v50; // rbx', 'rtx v57; // rcx', 'rtx v20; // rcx', 'rtx v50; // rbx']
['v13 = assign_stack_local( ( machine_mode)v12, mode_size[v12], 0);']
['v14 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['v18 = gen_rtx_MEM( ( machine_mode)LOBYTE( subr->decl.result->block.supercontext), v15);']
['subr->decl.result->decl.rtl = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v17));']
['rtx last_insn; // rax', 'rtx last_insn; // rax']
['rtx v21; // rbx']
['v12 = gen_rtx_fmt_i0( REG, ( machine_mode)v5, v14);', 'v5 = gen_rtx_fmt_u00( LABEL_REF, VOIDmode, v4);']
['last_insn = get_last_insn( );', 'last_insn = get_last_insn( );', 'last_insn = get_last_insn( );']
['if ( last_insn )', 'if ( last_insn )']
['v21 = last_insn;', 'v21 = last_insn;']
['v21 = last_insn;', 'v21 = last_insn;']
['while ( *( _WORD *)v21 != 34 )']
['if ( *( _WORD *)v21 == 33 )']
['v21[3].fld[0].rtwint = ( __int64)alloc_EXPR_LIST( 27, const_int_rtx[64], v21[3].fld[0].rtx);', 'v21[3].fld[0].rtwint = ( __int64)alloc_EXPR_LIST( 27, const_int_rtx[64], v21[3].fld[0].rtx);']
['v21[3].fld[0].rtwint = ( __int64)alloc_EXPR_LIST( 27, const_int_rtx[64], v21[3].fld[0].rtx);', 'v21[3].fld[0].rtwint = ( __int64)alloc_EXPR_LIST( 27, const_int_rtx[64], v21[3].fld[0].rtx);']
['v21 = ( rtx)v21[1];']
['if ( !v21 )']
['if ( *( _OWORD *)&out.base != 0LL )']
['( machine_mode)*( ( unsigned __int8 *)target + 2),', '( machine_mode)*( ( unsigned __int8 *)target + 2),']
['( tree_code)( ( ( *( ( _DWORD *)&exp->common + 4) & 0xFD) == 129) + 59),']
['operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;']
['if ( operand->predicate( operand1, ( machine_mode)v19) && operand[1].predicate( operand1, ( machine_mode)v19) )', 'if ( operand->predicate( operand1, ( machine_mode)v19) && operand[1].predicate( operand1, ( machine_mode)v19) )']
['if ( operand->predicate( operand1, ( machine_mode)v19) && operand[1].predicate( operand1, ( machine_mode)v19) )', 'if ( operand->predicate( operand1, ( machine_mode)v19) && operand[1].predicate( operand1, ( machine_mode)v19) )']
['v21 = operand[2].predicate( v16, ( machine_mode)v19) != 0;']
['v28 = insn_data_0[v26].operand;']
['if ( v28->predicate( operand1, ( machine_mode)v19) && v28[1].predicate( operand1, ( machine_mode)v19) )', 'if ( v28->predicate( operand1, ( machine_mode)v19) && v28[1].predicate( operand1, ( machine_mode)v19) )']
['if ( v28->predicate( operand1, ( machine_mode)v19) && v28[1].predicate( operand1, ( machine_mode)v19) )', 'if ( v28->predicate( operand1, ( machine_mode)v19) && v28[1].predicate( operand1, ( machine_mode)v19) )']
['if ( !v28[2].predicate( x, ( machine_mode)v19) )', 'if ( !v28[2].predicate( x, ( machine_mode)v19) )']
['force_reg( ( machine_mode)v19, x);', 'force_reg( ( machine_mode)v19, x);']
['v46 = insn_data_0[v43].genfun( v44, v45);']
['( machine_mode)*( ( unsigned __int8 *)v4 + 2),', '( machine_mode)*( ( unsigned __int8 *)v1 + 2),', '( machine_mode)*( ( unsigned __int8 *)v7 + 2),', '( machine_mode)*( ( unsigned __int8 *)v7 + 2),', '( machine_mode)*( ( unsigned __int8 *)v7 + 2),']
['if ( general_operand( operand1->fld[0].rtx, ( machine_mode)v19) )']
['v34 = force_reg( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operand1->fld[0].rtx);']
['v37 = force_reg( ( machine_mode)*( ( unsigned __int8 *)v36 + 2), v36);']
['rtx v35; // rbx', 'rtx v34; // rbp', 'rtx v31; // rbp', 'rtx v34; // rbp', 'rtx v37; // rbp', 'rtx v32; // rbp', 'rtx v37; // rbp', 'rtx v30; // rbp']
['rtx last_insn; // rax', 'rtx last_insn; // rax']
['rtx v58; // rax']
['rtx v61; // rbx']
['rtx v63; // rbp']
['rtx v9; // r13', 'rtx v29; // r13', 'rtx v48; // r13', 'rtx v33; // r13', 'rtx v6; // r12', 'rtx v25; // r12', 'rtx v8; // r13', 'rtx v10; // r13', 'rtx v26; // r13', 'rtx v65; // rcx', 'rtx v15; // r12', 'rtx v62; // r12', 'rtx v63; // r15', 'rtx v69; // r14', 'rtx v65; // rbx', 'rtx v65; // rax', 'rtx v15; // r14', 'rtx v19; // r13', 'rtx v20; // r13', 'rtx v65; // rax', 'rtx v25; // r12', 'rtx v5; // r14', 'rtx v15; // r12', 'rtx v17; // r13', 'rtx v5; // r12', 'rtx v8; // r13', 'rtx v48; // r13', 'rtx v15; // r14']
['rtx v12; // rax', 'rtx v22; // rax', 'rtx v7; // rax', 'rtx v7; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v12; // rax', 'rtx v32; // rax', 'rtx v22; // rax', 'rtx v70; // rax', 'rtx v22; // rax', 'rtx v70; // rax', 'rtx v78; // rax', 'rtx v82; // rax', 'rtx v12; // rax', 'rtx v74; // rax', 'rtx v75; // rax', 'rtx v32; // rax', 'rtx v52; // rax', 'rtx v70; // rax', 'rtx v73; // rax', 'rtx v22; // rax']
['rtx v85; // rax']
['v5 = force_reg( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), const_int_rtx[64]);']
['if ( *( const mode_class *)( ( char *)mode_class_0 + ( ( v16 >> 14) & 0x3FC)) != MODE_INT )']
['v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);', 'v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);']
['v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);', 'v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);']
['v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);', 'v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);']
['v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);', 'v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);']
['v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);', 'v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);']
['tree v12; // rax']
['tree v14; // rbp']
['tree v15; // rax']
['v10 = type_for_mode( ( machine_mode)*( ( unsigned __int8 *)add + 2), unsignedp);']
['v12 = make_tree( v9, mult);']
['v13 = build( MULT_EXPR, v9, tree, v12);']
['v14 = fold( v13);']
['v15 = make_tree( v10, add);']
['v16 = build( PLUS_EXPR, v9, v14, v15);', 'v16 = build( PLUS_EXPR, v9, v14, v15);']
['v16 = build( PLUS_EXPR, v9, v14, v15);', 'v16 = build( PLUS_EXPR, v9, v14, v15);']
['v13 = immed_double_const( cnst1, v12, ( machine_mode)v10);']
['v15 = convert_to_mode( ( machine_mode)v10, op0, unsignedp);']
['v16 = expand_mult( ( machine_mode)v10, v15, v13, 0LL, 0);']
['v20 = expand_shift( RSHIFT_EXPR, ( machine_mode)v10, v16, v17, 0LL, 1);']
['v45 = convert_modes( mode, ( machine_mode)v10, v44, unsignedp);']
['v44 = expand_shift( RSHIFT_EXPR, ( machine_mode)v10, v41, v43, 0LL, 1);']
['v24 = convert_modes( mode, ( machine_mode)v26, v24, 1);']
['v36 = expand_binop( ( machine_mode)v10, v33, op0, v52, 0LL, v29, OPTAB_WIDEN);']
['v44 = expand_shift( RSHIFT_EXPR, ( machine_mode)v10, v41, v43, 0LL, 1);']
['v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);', 'v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);']
['v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);', 'v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);']
['src = operand_sub*(short *)0xforce( result_val, v20 >> ( 6 - ( ( target_flags & 0x2000000) == 0)), BLKmode);']
['v17 = expand_expr( ( tree)high, v16, ( machine_mode)*( ( unsigned __int8 *)v16 + 2), EXPAND_NORMAL);']
['tree v23; // rax', 'tree v29; // rbx', 'tree v22; // rax', 'tree v23; // rax', 'tree v24; // rax', 'tree v25; // rax', 'tree v27; // rax']
['tree v28; // [rsp+10h] [rbp-38h]']
['v23 = mult;', 'v23 = mult;']
['rtint = v20->fld[0].rtint;']
['v14 = copy_rtx( *operands);']
['v16 = build( PLUS_EXPR, v9, v14, v15);', 'v16 = build( PLUS_EXPR, v9, v14, v15);']
['if ( *( _OWORD *)&out.base != 0LL )']
['*( _OWORD *)( object_base + 40) = 0LL;']
['if ( ( tree_node *)*v11 == elements )']
['if ( !genrtl_case_label_explained )']
['genrtl_case_label_explained = 1;']
['v11 = force_reg( ( machine_mode)v10, v11);']
['v12 = force_reg( ( machine_mode)v10, v12);']
['v17 = gen_reg_rtx( ( machine_mode)v10);']
['v18 = gen_reg_rtx( ( machine_mode)v10);']
['operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;']
['if ( !operand->predicate( operand0, ( machine_mode)v10) || !operand[3].predicate( to, ( machine_mode)v10) )', 'if ( !operand->predicate( operand0, ( machine_mode)v10) || !operand[3].predicate( to, ( machine_mode)v10) )']
['if ( !operand->predicate( operand0, ( machine_mode)v10) || !operand[3].predicate( to, ( machine_mode)v10) )', 'if ( !operand->predicate( operand0, ( machine_mode)v10) || !operand[3].predicate( to, ( machine_mode)v10) )']
['v29 = insn_data_0[v47].genfun( operand0, operand1);']
['v31 = mode_class_0[v10];']
['v35 = gen_reg_rtx( ( machine_mode)i);']
['v39 = gen_reg_rtx( ( machine_mode)v34);']
['v2 = mode_class_0[mode];', 'v10 = mode_class_0[mode];', 'v22 = mode_class_0[mode];', 'v24 = mode_class_0[mode];']
['operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;']
['v21 = insn_data_0[v17].genfun( v19, v20);']
['v2 = mode_class_0[mode];', 'v10 = mode_class_0[mode];', 'v22 = mode_class_0[mode];', 'v24 = mode_class_0[mode];']
['( machine_mode)i,']
['v23 = expand_unop( ( machine_mode)v21, unoptab, v22, 0LL, unsignedp);']
['( machine_mode)v5);', '( machine_mode)v12,', '( machine_mode)v9,', '( machine_mode)v16,', '( machine_mode)v14,']
['rtx v5; // rax', 'rtx v5; // rax']
['rtx v6; // rax', 'rtx v6; // rax']
['v12 = copy_rtx( rtx);', 'v22 = copy_rtx( rtx);']
['v17 = canonicalize_condition( jump, ( rtx)v5, reverse, earliest, v15);']
['v17 = canonicalize_condition( jump, ( rtx)v5, reverse, earliest, v15);']
['if ( v36 )']
['in = in->fld[0].rtx;', 'in = in->fld[0].rtx;', 'v8 = v7->fld[0].rtx;', 'if ( v6 == v2 )']
['v19 = (  struct rtx_def *)v15[1];']
['v18 = gen_rtx_fmt_ee( ( rtx_code)v6, mode, v14, v17);']
['v18 = gen_rtx_fmt_ee( ( rtx_code)v6, mode, v14, v17);']
['rtx v6; // rbx']
['v6 = transp_0[src->index];']
['if ( v36 )']
['v8.rtwint = ( __int64)v6[1].fld[0];', 'v21.rtwint = ( __int64)v20->fld[0];', 'v19.rtwint = ( __int64)v18->fld[0];']
['v7 = *( ( _DWORD *)uid_cuid_1 + *( int *)( v5->fld[0].rtwint + 8));']
['v9 = ( rtx)v5[1];', 'v7 = ( rtx)v7[1];', 'v4 = ( rtx)v4[1];']
['while ( v36 );']
['( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( sizetype_tab[0]->block.abstract_origin)) >> 1),', '( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( sizetype_tab[0]->block.abstract_origin)) >> 1),', '( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( sizetype_tab[0]->block.abstract_origin)) >> 1),']
['rtx v23; // rax', 'rtx v23; // rax']
['v17 = gen_rtx_CONST_INT( VOIDmode, *( _QWORD *)( v14 + 8) * v11);']
['v28 = v26;', 'v28 = v26;', 'v28 = v63;', 'v28 = v63;', 'v28 = v63;', 'v28 = v63;']
['rtx v13; // rbp', 'rtx v16; // rbp', 'rtx v60; // rbp', 'rtx v19; // rbp', 'rtx v12; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v30; // rbp', 'rtx v10; // rbx', 'rtx v13; // rbp', 'rtx v13; // rbp']
['v19 = y;']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)*( ( unsigned __int8 *)x + 2), v7, v8);']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)*( ( unsigned __int8 *)x + 2), v7, v8);']
['*( _OWORD *)&b->aux = 0LL;']
['*( _OWORD *)&b->count = 0LL;']
['*( _OWORD *)&b->global_live_at_start = 0LL;']
['*( _OWORD *)&b->local_set = 0LL;']
['*( _OWORD *)&b->pred = 0LL;', '*( _OWORD *)&b->pred = 0LL;']
['*( _OWORD *)&b->head_tree = 0LL;']
['*( _OWORD *)&b->head = 0LL;']
['*( _OWORD *)&b->aux = 0LL;']
['*( _OWORD *)&b->count = 0LL;']
['*( _OWORD *)&b->global_live_at_start = 0LL;']
['*( _OWORD *)&b->local_set = 0LL;']
['*( _OWORD *)&b->pred = 0LL;', '*( _OWORD *)&b->pred = 0LL;']
['*( _OWORD *)&b->head_tree = 0LL;']
['*( _OWORD *)&b->head = 0LL;']
['( rtx_code)( unsigned __int16)*( _DWORD *)ext_dependent,', '( rtx_code)( unsigned __int16)*( _DWORD *)ext_dependent,']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ext_dependent),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ext_dependent),']
['( rtx_code)( unsigned __int16)*( _DWORD *)ext_dependent,', '( rtx_code)( unsigned __int16)*( _DWORD *)ext_dependent,']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ext_dependent),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ext_dependent),']
['rtx v21; // rax', 'rtx v21; // rax']
['rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax']
['rtx v34; // r15']
['rtx v37; // rbp', 'rtx v37; // rbp']
['if ( recog_data_0.insn != insn || insn[2].fld[0].rtint < 0 )']
['recog_data_0.insn = insn;']
['fatal_insn_not_found( insn, "recog.c", 2063, "extract_constrain_insn_cached");']
['v37 = force_reg( ( machine_mode)*( ( unsigned __int8 *)v36 + 2), v36);']
['v36 = expand_binop( ( machine_mode)v10, v33, op0, v52, 0LL, v29, OPTAB_WIDEN);']
['v17 = lookup_for_remove( x, i, ( machine_mode)*( ( unsigned __int8 *)x + 2));']
['recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;']
['*( _WORD *)&recog_data_0.n_operands = 0;']
['recog_data_0.n_alternatives = 0;']
['recog_data_0.n_operands = n_operands;']
['fatal_insn_not_found( insn, "recog.c", 2139, "extract_insn");']
['recog_data_0.operand,']
['recog_data_0.operand_loc,']
['recog_data_0.constraints,']
['recog_data_0.operand_mode);']
['recog_data_0.n_alternatives = 1;']
['v11 = *recog_data_0.constraints[0];']
['if ( *recog_data_0.constraints[0] )']
['v12 = recog_data_0.constraints[0] + 1;']
['recog_data_0.n_alternatives = v13;']
['v17 = recog_data_0.constraints[v12];']
['if ( recog_data_0.insn != insn || insn[2].fld[0].rtint < 0 )']
['recog_data_0.insn = insn;']
['v18 = operand_sub*(short *)0xforce( op0, v12, v17);']
['v36 = expand_binop( ( machine_mode)v10, v33, op0, v52, 0LL, v29, OPTAB_WIDEN);']
['v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);', 'v40 = expand_binop( ( machine_mode)v10, ( optab_0)v27, op0, v39, 0LL, unsignedp == 0, OPTAB_WIDEN);']
['v3 = *( _OWORD *)&diagnostic_buffer->state.indent_skip;']
['v4 = *( _OWORD *)&diagnostic_buffer->state.cursor;']
['v5 = *( _OWORD *)diagnostic_buffer->state.diagnostic_count;']
['v5 = *( _OWORD *)&diagnostic_buffer->state.prefix;', 'v13 = *( _OWORD *)&diagnostic_buffer->state.prefix;']
['v9 = *( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4];', 'v17 = *( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4];']
['diagnostic_buffer->state.format_args = ( va_list_0 *)va;']
['*( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4] = v9;', '*( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4] = v17;']
['*( _OWORD *)v4->state.diagnostic_count = v8;', '*( _OWORD *)v8->state.diagnostic_count = v16;']
['imag = ( tree_node *)*( &global_trees + 17);']
['rtx v8; // rcx', 'rtx v9; // rax']
['rtx i; // rbx', 'rtx i; // rbx', 'rtx i; // rbx']
['v6 = first;']
['if ( *( _WORD *)v3 == 37 )', 'if ( *( _WORD *)v3 == 37 )']
['rtint = v4[2].fld[0].rtint;']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['while ( v3 );', 'while ( v7 );', 'while ( v4 );']
['if ( v15 == ( _DWORD)v5 || mode_change_ok( v15, ( machine_mode)v5, ( unsigned int)vd) )']
['if ( v15 == ( _DWORD)v5 || mode_change_ok( v15, ( machine_mode)v5, ( unsigned int)vd) )']
['if ( v15 == ( _DWORD)v5 || mode_change_ok( v15, ( machine_mode)v5, ( unsigned int)vd) )']
['if ( v15 == ( _DWORD)v5 || mode_change_ok( v15, ( machine_mode)v5, ( unsigned int)vd) )']
['v15 = y->fld[0].rtx;']
['induction_1 *i; // rbx', 'induction_1 *i; // rbx', 'induction_1 *i; // rbx', 'induction_1 *i; // rbx']
['induction_1 *i; // rbx', 'induction_1 *i; // rbx', 'induction_1 *i; // rbx', 'induction_1 *i; // rbx']
['if ( mode_class_0[bl_0->biv->mode] != MODE_INT )']
['for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )']
['for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )']
['for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )']
['for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )', 'for ( i = bl_0->giv; i; i = i->next_iv )']
['v3 = *( ( _WORD *)biv + 50);']
['mult_val = i->mult_val;']
['v1 = fold_rtx_mult_add( v1, const_int_rtx[65], biv->add_val, biv->mode);', 'v1 = fold_rtx_mult_add( v1, const_int_rtx[65], biv->add_val, biv->mode);']
['v1 = fold_rtx_mult_add( v1, const_int_rtx[65], biv->add_val, biv->mode);', 'v1 = fold_rtx_mult_add( v1, const_int_rtx[65], biv->add_val, biv->mode);']
['v8 = gen_rtx_fmt_ee( PLUS, ( machine_mode)*( _DWORD *)( k + 48), v9, v7);']
['( machine_mode)*( ( unsigned __int8 *)v66 + 2),']
['rtx insn; // [rsp+0h] [rbp-68h]']
['if ( ( debug_info_level_0 & 0xFFFFFFFE) == 2', 'if ( ( debug_info_level_0 & 0xFFFFFFFE) == 2']
['if ( ( debug_info_level_0 & 0xFFFFFFFE) == 2', 'if ( ( debug_info_level_0 & 0xFFFFFFFE) == 2']
['fprintf( file, &off_607A24[1], _bittest64( ( const __int64 *)&v8, v7));']
['type->type.align = get_mode_alignment( ( machine_mode)v2);']
['rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax']
['v4 = find_base_term( v3);']
['if ( !v18 )', 'if ( !v20 )', 'if ( v10 )', 'if ( !v16 )']
['v11 = *( _WORD *)v9;', 'v11 = *( _DWORD *)dst;', 'v6 = *( _DWORD *)v4;', 'v22 = *( _WORD *)v21;']
['if ( ( unsigned __int16)( *( _DWORD *)v4 - 67) < 2u )']
['return v18;']
['base_term = v4;']
['v4 = find_base_term( ( rtx)v9[1]);']
['if ( v10 )']
['return v18;']
['rtx v24; // r15']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['timevar_push( TV_CPP_0);']
['v24 = 0LL;']
['if ( constructor_range_stack_0 )', 'if ( constructor_stack_0 )', 'if ( constructor_range_stack_0 )']
['v3 = ( __int64)v4[2];']
['v6 = *( _QWORD *)( *( _QWORD *)( *( _QWORD *)&this_insn_0[2] + 8LL) + 8 * v5 - 8);']
['v21 = ( rtx *)*( ( _QWORD *)v10 + 2);']
['v11 = *( tree_node **)( *( _QWORD *)( low + 40) + 40LL);']
['rtint = v4[2].fld[0].rtint;']
['rtx *v39; // [rsp+18h] [rbp-40h]']
['v14 = safe_hash( v5, ( machine_mode)v9);']
['v31 = v6;', 'v13 = v6;']
['v34 = v33;', 'v34 = v33;', 'v10 = v33;']
['if ( mode_class_0[v16] != MODE_INT )', 'if ( mode_class_0[v16] != MODE_INT )', 'if ( mode_class_0[v2] == MODE_INT )', 'if ( mode_class_0[v3] != MODE_INT )', 'if ( mode_class_0[v4] != MODE_INT )', 'if ( mode_class_0[v8] != MODE_INT )']
['if ( mode_class_0[( unsigned int)v16] != MODE_INT )']
['v34 = v33;', 'v34 = v33;', 'v10 = v33;']
['v34 = v33;', 'v34 = v33;', 'v10 = v33;']
['rtx v19; // rbx']
['rtx *v43; // rdi']
['rtx v48; // rax']
['rtx v24; // [rsp+10h] [rbp-38h]', 'rtx v34; // [rsp+10h] [rbp-38h]']
['v22 = real_in;', 'v22 = real_in;']
['rtx = v19->fld[0].rtx;']
['v9 += subreg_regno_offset( rtuint, ( machine_mode)BYTE2( v12), v14, ( machine_mode)BYTE2( v11));', 'v9 += subreg_regno_offset( rtuint, ( machine_mode)BYTE2( v12), v14, ( machine_mode)BYTE2( v11));']
['v9 += subreg_regno_offset( rtuint, ( machine_mode)BYTE2( v12), v14, ( machine_mode)BYTE2( v11));', 'v9 += subreg_regno_offset( rtuint, ( machine_mode)BYTE2( v12), v14, ( machine_mode)BYTE2( v11));']
['rtx v3; // r14', 'rtx v34; // r14', 'rtx v7; // r14']
['rtx v12; // rax', 'rtx v22; // rax', 'rtx v46; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v41; // rax', 'rtx v42; // rdx', 'rtx v46; // rax', 'rtx v12; // rax', 'rtx v32; // rax', 'rtx v47; // rax', 'rtx v22; // rax', 'rtx v4; // rax', 'rtx v22; // rax', 'rtx v40; // rax', 'rtx v44; // rax', 'rtx v82; // rax', 'rtx v12; // rax', 'rtx v49; // rax', 'rtx v32; // rax', 'rtx v41; // rax', 'rtx v45; // rax', 'rtx v40; // rax', 'rtx v42; // rdx', 'rtx v52; // rax', 'rtx v44; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v40; // rax', 'rtx v22; // rax', 'rtx v40; // rax', 'rtx v44; // rax', 'rtx v40; // rax', 'rtx v44; // rax', 'rtx v48; // rax', 'rtx v49; // rax', 'rtx v40; // rax']
['rtx y; // [rsp+18h] [rbp-50h]']
['if ( *( const mode_class *)( ( char *)mode_class_0 + ( ( v3 >> 14) & 0x3FC)) == MODE_FLOAT )']
['rtx = v15->fld[0].rtx;']
['v3 = group_leader( v3);', 'v3 = group_leader( v3);']
['v9 = ( rtx)v5[1];']
['v3 = group_leader( v3);', 'v3 = group_leader( v3);']
['if ( ( *( ( _BYTE *)cfun + 425) & 1) == 0 || ( result = -1, qty_0[qtyno].n_calls_crossed <= 0) )']
['if ( !qty_0[qtyno].n_calls_crossed )']
['n_calls_crossed = qty_0[qtyno].n_calls_crossed;']
['if ( 4 * n_calls_crossed < qty_0[qtyno].n_refs )']
['v7 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v3 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v3 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v3 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v8 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v7 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v3 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v3 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v3 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v24 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v13 = immed_double_const( cnst1, v12, ( machine_mode)v10);']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['rtx v35; // rax']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['rtx v78; // rax']
['rtx last_insn; // r15']
['rtx v85; // rax']
['rtx v6; // r12', 'rtx v8; // r12', 'rtx v16; // r12']
['rtx v93; // rax']
['rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax']
['n_operands = ( unsigned int)recog_data_0.n_operands;', 'n_operands = ( unsigned int)recog_data_0.n_operands;']
['if ( recog_data_0.n_operands <= 0 )']
['v10 = *( unsigned __int16 *)recog_data_0.operand[0];']
['if ( recog_data_0.n_operands <= 0 )']
['v2 = recog_data_0.n_operands + 1LL;']
['n_operands = ( unsigned int)recog_data_0.n_operands;', 'n_operands = ( unsigned int)recog_data_0.n_operands;']
['n_operands = ( unsigned int)recog_data_0.n_operands;', 'n_operands = ( unsigned int)recog_data_0.n_operands;']
['*( _QWORD *)&v8[1] = rtx;']
['*( _QWORD *)&v8[1] = rtx;']
['*( _QWORD *)&v8[1] = rtx;']
['*( _QWORD *)&v8[1] = rtx;']
['induction_1 *v11; // rbp', 'induction_1 *v11; // rbp']
['induction_1 *v11; // rbp', 'induction_1 *v11; // rbp']
['( machine_mode)BYTE2( v8)) )']
['v11 = ( induction_1 *)xmalloc( 0xA8uLL);', 'v11 = ( induction_1 *)xmalloc( 0xA8uLL);']
['v11 = ( induction_1 *)xmalloc( 0xA8uLL);', 'v11 = ( induction_1 *)xmalloc( 0xA8uLL);']
['v11,']
['v11->mem = x;']
['v19 = ( ( unsigned int)( mode_class_0[( unsigned int)v11] - 5) < 2) + 1;']
['v11 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v12 = gen_rtx_fmt_i0( REG, ( machine_mode)v5, v14);']
['low = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)p_int_cst->low;', 'low = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)p_int_cst->low;']
['low = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)p_int_cst->low;', 'low = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)p_int_cst->low;']
['low = ( tree)p_int_cst->low;']
['p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &t->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;']
['if ( ( *( _BYTE *)( v14.rtwint + 16) | 2) == 15 && *( tree_node **)( *( _QWORD *)( v14.rtwint + 8) + 128LL) == section_name )']
['v9 = *( int *)( ( char *)&allocno_0->reg + v8);']
['v108 = ( unsigned __int64)*( _DWORD *)cfun->emit->x_regno_reg_rtx[*( int *)( ( char *)&allocno_0->reg + v8)] >> 16;']
['v107 = ( unsigned __int8)BYTE2( *( _DWORD *)cfun->emit->x_regno_reg_rtx[*( int *)( ( char *)&allocno_0->reg + v8)]);']
['if ( !*( int *)( ( char *)&allocno_0->calls_crossed + v8) )']
['v13 = v109 | *( HARD_REG_ELT_TYPE *)( ( char *)&allocno_0->hard_reg_conflicts + v8);']
['v14 = *( HARD_REG_ELT_TYPE *)( ( char *)&allocno_0->regs_someone_prefers + v8) | v13 | ~regs_used_so_far;']
['if ( !_bittest64( ( const __int64 *)&v14, v17) && ix86_hard_regno_mode_ok( v17, ( machine_mode)v11) )']
['v22 = ( ( unsigned int)( mode_class_0[v20] - 5) < 2) + 1;', 'v24 = ( ( unsigned int)( mode_class_0[v17] - 5) < 2) + 1;', 'v20 = ( ( unsigned int)( mode_class_0[v19] - 5) < 2) + 1;', 'v20 = ( ( unsigned int)( mode_class_0[v19] - 5) < 2) + 1;']
['v2 = allocno_0;']
['v26 = ~v14 & *( HARD_REG_ELT_TYPE *)( ( _BYTE *)&allocno_0->hard_reg_copy_preferences + v104);']
['v8 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v7] - 5) < 2) + 1;']
['v9 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v14] - 5) < 2) + 1;']
['v13 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v12] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v12] - 5) < 2) + 1;']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v21; // rax', 'rtx v123; // rax', 'rtx v12; // rax', 'rtx v11; // rax', 'rtx v21; // rax']
['rtx v123; // rax']
['rtx *v93; // rcx', 'rtx *v17; // rcx', 'rtx *v15; // rcx', 'rtx *v19; // rbx']
['rtx *v25; // rbx', 'rtx v65; // rbx', 'rtx v15; // rbx', 'rtx *v15; // rcx', 'rtx *v19; // rbx', 'rtx *v17; // rbx', 'rtx *v55; // rbx']
['rtx v7; // rax', 'rtx v5; // rax', 'rtx v7; // rax', 'rtx v3; // rax', 'rtx v4; // rax', 'rtx v8; // rax', 'rtx v8; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v9; // rax', 'rtx v5; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v8; // rax']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax']
['rtx memloc; // rbp']
['rtx *fld; // r14']
['rtx v17; // rax', 'rtx v7; // rax', 'rtx v17; // rax', 'rtx v38; // rax', 'rtx v7; // rax', 'rtx v36; // rax', 'rtx v31; // rax', 'rtx v30; // rax', 'rtx v32; // rax', 'rtx v3; // rax', 'rtx v27; // rax', 'rtx v34; // rax', 'rtx v47; // rax', 'rtx v30; // rax', 'rtx v31; // rax', 'rtx v38; // rax', 'rtx v57; // rax', 'rtx v17; // rax', 'rtx v27; // rax', 'rtx v30; // rax', 'rtx v36; // rax', 'rtx v31; // rax', 'rtx v37; // rcx', 'rtx v27; // rax', 'rtx v35; // rax', 'rtx v27; // rax', 'rtx v32; // rax', 'rtx v33; // rax', 'rtx v17; // rax', 'rtx v27; // rax', 'rtx v67; // rax', 'rtx v37; // rbx', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v38; // rax']
['rtx v45; // rax']
['rtx v16; // rbp']
['rtx *v17; // rcx', 'rtx *v17; // rbx']
['rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax']
['rtx *v19; // rbx']
['rtx v20; // rdi']
['rtx *fld; // rcx']
['rtx v30; // rax', 'rtx v36; // rcx', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx *v60; // rax', 'rtx *v93; // rcx', 'rtx *v17; // rcx', 'rtx v37; // rcx', 'rtx *v26; // rcx', 'rtx v30; // rbx', 'rtx v20; // rcx', 'rtx *v20; // rax', 'rtx *v15; // rcx', 'rtx *v56; // rcx', 'rtx *v58; // rcx', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v35; // rcx']
['rtx *v96; // rdx']
['rtx v58; // rax']
['rtx *fld; // rcx']
['rtx memref; // [rsp+20h] [rbp-48h] BYREF']
['v19 = force_const_mem( ( machine_mode)*( ( unsigned __int8 *)x + 2), *( rtx *)&x[1]);', 'v19 = force_const_mem( ( machine_mode)*( ( unsigned __int8 *)x + 2), *( rtx *)&x[1]);']
['operand0 = ( rtx)v9;']
['memref = v7;']
['v12 = gen_rtx_fmt_ee( PLUS, ( machine_mode)*( ( unsigned __int8 *)x + 2), x->fld[0].rtx, v19);', 'v12 = gen_rtx_fmt_ee( PLUS, ( machine_mode)*( ( unsigned __int8 *)x + 2), x->fld[0].rtx, v19);']
['fld = ( rtx *)v6[1].fld;']
['find_reloads_address( mode, &v19, rtx, ( rtx *)fld, opnum, type, ind_levels, 0LL);']
['find_reloads_address( mode, &v19, rtx, ( rtx *)fld, opnum, type, ind_levels, 0LL);']
['( machine_mode)*( ( unsigned __int8 *)v1 + 2),', '( machine_mode)*( ( unsigned __int8 *)v11 + 2),']
['if ( replace_reloads && recog_data_0.operand[opnum] != x )']
['( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v7),']
['v10 = gen_lowpart( ( machine_mode)*( ( unsigned __int8 *)op + 2), v8);']
['( machine_mode)*( unsigned __int8 *)( arg0->fld[0].rtwint + 2));']
['result = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)reg + 2));', 'v10 = gen_lowpart( ( machine_mode)*( ( unsigned __int8 *)op + 2), v8);']
['( machine_mode)*( ( unsigned __int8 *)dest_reg + 2),', '( machine_mode)*( ( unsigned __int8 *)*operands + 2),']
['if ( replace_reloads && recog_data_0.operand[opnum] != x )']
['( machine_mode)*( ( unsigned __int8 *)memloc + 2),']
['( rtx_code)( unsigned __int16)*( _DWORD *)x,', '( rtx_code)( unsigned __int16)*( _DWORD *)x,']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx),']
['( machine_mode)*( unsigned __int8 *)( v3->fld[0].rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)memloc + 2),']
['rtx *v21; // rax']
['rtx *v27; // rbx', 'rtx *v25; // rbx']
['rtx v26; // rcx']
['rtx *single_use_1; // rax']
['v25 = ( rtx *)&v23[2 * v24];']
['v27 = *v25;', 'v27 = *v25;']
['v27 = *v25;', 'v27 = *v25;']
['single_use_1 = loc;']
['if ( *v25 != dest )']
['|| *( _WORD *)v27 != 61']
['|| ( single_use_1 = loc, v27->fld[0].rtint != dest->fld[0].rtint) )', '|| ( single_use_1 = loc, v27->fld[0].rtint != dest->fld[0].rtint) )']
['|| ( single_use_1 = loc, v27->fld[0].rtint != dest->fld[0].rtint) )', '|| ( single_use_1 = loc, v27->fld[0].rtint != dest->fld[0].rtint) )']
['rtx v27; // rbp', 'rtx v26; // rbp', 'rtx v26; // rbp', 'rtx v26; // rbp', 'rtx v27; // rbp', 'rtx v23; // rbp']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax']
['rtx v33; // rax']
['rtx v64; // rcx', 'rtx v36; // rcx', 'rtx v34; // rax', 'rtx v37; // rcx', 'rtx v34; // rdx', 'rtx v35; // rcx']
['rtx *single_use; // rax', 'rtx *single_use; // rax']
['rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax']
['rtx v45; // rax']
['rtx v16; // rbp', 'rtx v48; // rbp', 'rtx v26; // rbp', 'rtx v26; // rbp', 'rtx v26; // rbp', 'rtx v44; // rbp', 'rtx v48; // rbp']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx v66; // rax']
['v7 = ix86_register_move_cost( m1, ( reg_class)v3, class2);']
['v7 = ix86_register_move_cost( m1, ( reg_class)v3, class2);']
['result = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);']
['v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v10 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), 2);', 'v20 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);']
['v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);']
['imag = ( tree_node *)*( &global_trees + 11);']
['imag = ( tree_node *)*( &global_trees + 11);']
['v2 = constructor_stack_0;']
['v2 = constructor_stack_0;']
['if ( constructor_stack_0 )']
['constructor_stack_0 = v2->next;']
['constructor_stack_0 = v2->next;']
['if ( constructor_range_stack_0 )', 'if ( constructor_range_stack_0 )']
['constructor_stack_0 = v2->next;']
['constructor_range_stack_0 = v2->range_stack;']
['spelling_0 = &spelling_base[depth];']
['constructor_stack_0 = v2->next;']
['fancy_abort( &off_6CC868[4], 2698, "elimination_effects");']
['fancy_abort( &off_6CC868[4], 2839, "elimination_effects");', 'fancy_abort( &off_6CC868[4], 2698, "elimination_effects");']
['if ( rtx_equal_p( v20->fld[0].rtx, *( rtx *)( v25.rtwint + 8)) )']
['imag = *( tree_node **)v3;']
['v12 = memory_address( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), fixed);']
['v13 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v12);']
['fancy_abort( &off_6CC868[4], 9527, "fixup_abnormal_edges");']
['if ( memory_address_p( ( machine_mode)v5, v9) )']
['return adjust_address_1( v4.rtx, ( machine_mode)v5, v6, 1, 1);']
['v7 = adjust_address_1( v4.rtx, ( machine_mode)v5, v6, 1, 1);']
['if ( **( _WORD **)( v5.rtwint + 16) == 54 && !memory_address_p( ( machine_mode)BYTE2( v4), x->fld[0].rtx) )']
['rtx v66; // rax']
['rtx v60; // rax', 'rtx v38; // rax', 'rtx v28; // rax', 'rtx v18; // rax', 'rtx v28; // rax', 'rtx v58; // rax', 'rtx v64; // rax', 'rtx v28; // rax', 'rtx v38; // rax', 'rtx v65; // rax', 'rtx v63; // rax', 'rtx v78; // rax', 'rtx v64; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v65; // rax', 'rtx v66; // rax', 'rtx v69; // rax', 'rtx v88; // rax', 'rtx v8; // rax', 'rtx v18; // rax', 'rtx v8; // rax', 'rtx v88; // rax', 'rtx v67; // rax', 'rtx v18; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v48; // rax', 'rtx v8; // rax', 'rtx v38; // rax']
['rtx v7; // rax', 'rtx v7; // rax', 'rtx v31; // rax', 'rtx v41; // rax', 'rtx v70; // rax', 'rtx v31; // rax', 'rtx v70; // rax', 'rtx v21; // rax', 'rtx v31; // rax', 'rtx v78; // rax', 'rtx v74; // rax', 'rtx v75; // rax', 'rtx v41; // rax', 'rtx v51; // rax', 'rtx v11; // rax', 'rtx v70; // rax', 'rtx v51; // rax', 'rtx v73; // rax', 'rtx v21; // rax', 'rtx v51; // rax']
['rtx v71; // r14', 'rtx v15; // r14', 'rtx v5; // r14', 'rtx v7; // r14', 'rtx v15; // r14']
['rtx v47; // r12']
['rtx v31; // rax', 'rtx v41; // rax', 'rtx v31; // rax', 'rtx v21; // rax', 'rtx v31; // rax', 'rtx v82; // rax', 'rtx v86; // rax', 'rtx v88; // rax', 'rtx v41; // rax', 'rtx v51; // rax', 'rtx v8; // rax', 'rtx v11; // rax', 'rtx v8; // rax', 'rtx v88; // rax', 'rtx v51; // rax', 'rtx v21; // rax', 'rtx v51; // rax', 'rtx v8; // rax', 'rtx v85; // rax']
['rtx v13; // rax', 'rtx v3; // rax', 'rtx v23; // rax', 'rtx v23; // rax', 'rtx v53; // rax', 'rtx v63; // rax', 'rtx v82; // rax', 'rtx v86; // rax', 'rtx v88; // rax', 'rtx v33; // rax', 'rtx v8; // rax', 'rtx v8; // rax', 'rtx v13; // rax', 'rtx v88; // rax', 'rtx v73; // rax', 'rtx v93; // rax', 'rtx v8; // rax', 'rtx v85; // rax']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['rtx v36; // rdi', 'rtx v30; // rdi']
['rtx v32; // rax', 'rtx v32; // rax']
['rtx v35; // [rsp+10h] [rbp-38h]']
['v34 = no_share;']
['tmps = v5;', 'src = v12;', 'loc = v39;', 'loc = v39;', 'psave = 0LL;']
['*( _OWORD *)p_pred = 0LL;']
['fprintf( file, off_607A24, ( unsigned int)v5->index);']
['*( _OWORD *)&loc->offset = 0LL;']
['*( _OWORD *)&e->pred_next = 0LL;']
['*( _OWORD *)&b->aux = 0LL;']
['*( _OWORD *)&cfa->offset = 0LL;', '*( _OWORD *)&loc->offset = 0LL;']
['v11 = ( tree_node *)*( &global_trees + 27);', 'v1 = ( tree_node *)*( &global_trees + 27);']
['rtx v31; // rax', 'rtx v31; // rax', 'rtx v31; // rax']
['rtx const_rtx; // rbp']
['rtx v42; // r14']
['rtx v50; // rbx', 'rtx v50; // rbx']
['rtx v69; // rax']
['rtx v60; // rbp', 'rtx *v57; // rbp', 'rtx v7; // rbp', 'rtx v30; // rbp', 'rtx *v54; // rbp', 'rtx *v8; // rbp', 'rtx *v13; // rbp', 'rtx *v54; // rbp', 'rtx *v63; // rbp', 'rtx *v37; // rbp']
['rtx v3; // r14', 'rtx v13; // r14', 'rtx v71; // r14', 'rtx v7; // r14']
['rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax']
['rtx v13; // rbp', 'rtx v16; // rbp', 'rtx v27; // rbp', 'rtx v60; // rbp', 'rtx v19; // rbp', 'rtx v12; // rbp', 'rtx v67; // rbp', 'rtx v37; // rbp', 'rtx v121; // rbp', 'rtx v19; // rbp', 'rtx v27; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v37; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v7; // rbp', 'rtx v30; // rbp', 'rtx v10; // rbx', 'rtx v13; // rbp', 'rtx v13; // rbp', 'rtx v106; // rbx']
['rtx v9; // rax']
['rtx v56; // rbx', 'rtx v58; // rbx', 'rtx v51; // rbx', 'rtx v50; // rbx', 'rtx v35; // rbx', 'rtx v6; // rbx', 'rtx v14; // rbx', 'rtx v23; // rbx', 'rtx v20; // rbx', 'rtx v21; // rbx', 'rtx v60; // rbx', 'rtx v32; // rbx', 'rtx v80; // rbx', 'rtx v65; // rbx', 'rtx v80; // rbx', 'rtx v96; // rbx', 'rtx v18; // rbx', 'rtx v30; // rbx', 'rtx v55; // rbx', 'rtx v32; // rbx', 'rtx v19; // rbx', 'rtx v15; // rbx', 'rtx v50; // rbx', 'rtx v61; // rbx', 'rtx i; // rbx', 'rtx i; // rbx', 'rtx v22; // rbx', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v10; // rbx', 'rtx i; // rbx', 'rtx v4; // rbx', 'rtx v45; // rbx', 'rtx v37; // rbx', 'rtx v74; // rbx', 'rtx v97; // rbx']
['rtx v12; // rax', 'rtx v12; // rsi', 'rtx v12; // rax', 'rtx v12; // rbp', 'rtx v12; // rax', 'rtx v12; // r15', 'rtx v12; // rdx']
['rtx end; // rsi']
['rtx bit_field; // rax']
['rtx *v20; // r8', 'rtx v43; // r8', 'rtx v46; // r8']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rdi', 'rtx v30; // rbx', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v34; // rdx']
['v16 = build( PLUS_EXPR, v9, v14, v15);', 'v16 = build( PLUS_EXPR, v9, v14, v15);']
['v6 = ( unsigned __int16 *)insns;', 'v6 = ( unsigned __int16 *)insns;', 'v6 = ( unsigned __int16 *)insns;']
['if ( *( _WORD *)v20 != 66 )', 'if ( *( _WORD *)v19 != 47 )', 'if ( *( _WORD *)v19 != 47 )']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['rtx v58; // rbx', 'rtx v48; // rbp', 'rtx v18; // rbx', 'rtx v4; // rbx', 'rtx v45; // rbx', 'rtx v48; // rax', 'rtx v48; // rbp']
['v9 = a->end;', 'v4 = head;', 'v4 = head;', 'v38 = v20->end;']
['v18 = block_label( target);']
['args_size_0 = v6;', 'v4->end = v6;', 'base_term = v4;']
['v21 = v20->fld[0].rtx;']
['v9 = a->end;', 'v4 = head;', 'v4 = head;', 'v38 = v20->end;']
['v19 = gen_jump( v18);']
['*( _QWORD *)&v6[1] = v8;']
['v34 = **( _DWORD **)&v32[1];']
['v3 = gen_reg_rtx( ( machine_mode)BYTE2( v2));']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx v10; // r13', 'rtx v15; // r12', 'rtx v15; // r14', 'rtx v19; // r13', 'rtx v15; // r12', 'rtx v17; // r13', 'rtx v15; // r14']
['v3 = gen_reg_rtx( ( machine_mode)BYTE2( v2));']
['( machine_mode)*( unsigned __int8 *)( v3->fld[0].rtwint + 2),']
['v25 = ( rtx)v25[1];', 'v15 = ( rtx)y[1];']
['( rtx_code)( unsigned __int16)*( _DWORD *)v2,']
['if ( v6 == v2 )']
['if ( ( unsigned __int16)( *( _DWORD *)v4 - 67) < 2u )']
['v12 = negate_rtx( ( machine_mode)BYTE2( v5), *( rtx *)&value[1]);']
['v12 = negate_rtx( ( machine_mode)BYTE2( v5), *( rtx *)&value[1]);']
['if ( *( _WORD *)v12 == 54']
['rtx v13; // rax', 'rtx v10; // rax', 'rtx v123; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v13; // rax']
['rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax', 'rtx v11; // rax']
['rtx v63; // [rsp+0h] [rbp-78h]']
['rtx v31; // [rsp+8h] [rbp-70h]']
['rtx v12; // rax', 'rtx v12; // rsi', 'rtx v12; // rax', 'rtx v12; // rbp', 'rtx v12; // rax', 'rtx v12; // r15', 'rtx v12; // rdx']
['v19 = y;']
['v12 = v8;']
['v19 = (  struct rtx_def *)v15[1];']
['rtx = v19->fld[0].rtx;', 'rtx = v15->fld[0].rtx;', 'rtx = v11->fld[0].rtx;']
['v18 = v15->fld[0].rtx;']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)v6, v9, v3);']
['return gen_rtx_fmt_ee( PLUS, ( machine_mode)v6, v9, v3);']
['v18 = v15->fld[0].rtx;']
['v18 = v15->fld[0].rtx;']
['v12 = gen_rtx_fmt_ee( PLUS, ( machine_mode)v8, v10, v11);']
['*( _OWORD *)&b->count = 0LL;', '*( _OWORD *)&e->pred_next = 0LL;']
['*( _OWORD *)&b->local_set = 0LL;']
['*( _OWORD *)&b->global_live_at_start = 0LL;']
['*( _OWORD *)&b->local_set = 0LL;', '*( _OWORD *)&b->head_tree = 0LL;']
['*( _OWORD *)&b->head_tree = 0LL;']
['*( _OWORD *)&v4->common.chain = 0LL;']
['*( _OWORD *)&b->local_set = 0LL;']
['*( _OWORD *)&v4->next = 0LL;', '*( _OWORD *)&b->count = 0LL;', '*( _OWORD *)&b->local_set = 0LL;', '*( _OWORD *)&e->pred_next = 0LL;']
['*( _OWORD *)&emit->x_first_insn = 0LL;']
['*( _OWORD *)&result->global_live_at_start = 0LL;']
['v13 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v22 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v11 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v22 = ( ( unsigned int)( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg_rtx)] - 5) < 2) + 1;']
['v5 = uid_cuid_1;']
['if ( section_name == ( tree_node *)*( &global_trees + 7) )', 'if ( !v17 || !v18 || ( v19 = *( tree_node **)( v17[4] + 128LL), v19 == ( tree_node *)*( &global_trees + 27)) )', 'if ( section_name == ( tree_node *)*( &global_trees + 2) )']
['v8 = ( const char *)&unk_6C3BD6;', 'v7 = ( const char *)&unk_63A188;', 'v7 = ( const char *)&unk_63A188;']
['v6 = ( const char *)&unk_6DF04A;', 'v6 = ( const char *)&unk_6DF086;', 'v7 = ( const char *)&unk_63A188;', 'v7 = ( const char *)&unk_63A188;']
['if ( in_section_0 != in_text )']
['in_section_0 = in_text;']
['immediate_operand( recog_data_0.operand[1], VOIDmode);']
['v11 = immediate_operand( recog_data_0.operand[1], VOIDmode);']
['v28 = general_operand( recog_data_0.operand[0], QImode);']
['reg_set_0 **v4; // rcx', 'reg_set_0 **v4; // rcx']
['reg_set_0 **v4; // rcx', 'reg_set_0 **v4; // rcx']
['rtx v127; // r14']
['reg_set_0 *v32; // rax', 'reg_set_0 *v32; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v3; // rax', 'reg_set_0 *v3; // rax']
['reg_set_0 *v32; // rax', 'reg_set_0 *v32; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v3; // rax', 'reg_set_0 *v3; // rax']
['reg_set_0 *v3; // rax', 'reg_set_0 *v3; // rax']
['reg_set_0 *v3; // rax', 'reg_set_0 *v3; // rax']
['reg_set_0 *v32; // rax', 'reg_set_0 *v32; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v3; // rax', 'reg_set_0 *v3; // rax', 'reg_set_0 **v4; // rcx', 'reg_set_0 **v4; // rcx']
['reg_set_0 *v32; // rax', 'reg_set_0 *v32; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v3; // rax', 'reg_set_0 *v3; // rax', 'reg_set_0 **v4; // rcx', 'reg_set_0 **v4; // rcx']
['rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v65; // rcx', 'rtx v21; // rcx', 'rtx v18; // rcx', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rbx', 'rtx v17; // rcx', 'rtx v11; // rax', 'rtx *v15; // rcx', 'rtx v35; // rcx', 'rtx v45; // rcx']
['rtx v13; // rbp', 'rtx v16; // rbp', 'rtx v27; // rbp', 'rtx v19; // rbp', 'rtx v12; // rbp', 'rtx v31; // rbp', 'rtx v61; // rbp', 'rtx v67; // rbp', 'rtx v37; // rbp', 'rtx v121; // rbp', 'rtx v19; // rbp', 'rtx v27; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v37; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v7; // rbp', 'rtx v13; // rbp', 'rtx v51; // rbp', 'rtx v13; // rbp']
['rtx *fld; // rbp']
['rtx v127; // r14']
['return insn_data_0[optab_table[30]->handlers[v3].insn_code].genfun( v6, v9);', 'return insn_data_0[optab_table[30]->handlers[v3].insn_code].genfun( v6, v9);']
['if ( !operand->predicate( x, ( machine_mode)*( ( unsigned __int16 *)operand + 8))']
['|| !operand[1].predicate( x, ( machine_mode)*( ( unsigned __int16 *)&operand[1] + 8))']
['|| !operand[2].predicate( y, ( machine_mode)*( ( unsigned __int16 *)&operand[2] + 8)) )']
['return insn_data_0[v3].genfun( x, x);']
['operand = insn_data_0[v3].operand,', 'operand = insn_data_0[v3].operand,']
['operand->predicate( r0, ( machine_mode)*( ( unsigned __int16 *)operand + 8)))', 'operand->predicate( r0, ( machine_mode)*( ( unsigned __int16 *)operand + 8)))']
['&& operand[1].predicate( r1, ( machine_mode)*( ( unsigned __int16 *)&operand[1] + 8))', '&& operand[1].predicate( r1, ( machine_mode)*( ( unsigned __int16 *)&operand[1] + 8))']
['&& operand[2].predicate( c, ( machine_mode)*( ( unsigned __int16 *)&operand[2] + 8)) )', '&& operand[2].predicate( c, ( machine_mode)*( ( unsigned __int16 *)&operand[2] + 8)) )']
['return insn_data_0[v5].genfun( r0, r1);', 'return insn_data_0[v5].genfun( r0, r1);']
['v8 = ( tree_node *)rtl[7];']
['if ( !gen_aux_info_record_compiled_from_record++ )']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['result = simplify_relational_operation( code, v11, rtx, v4);']
['result = simplify_binary_operation( code, mode, rtx, v4);']
['if ( result )', 'if ( result )', 'if ( result )']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['result = simplify_binary_operation( code, mode, rtx, v4);']
['if ( !result )']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['if ( ( unsigned int)debug_info_level_0 <= DINFO_LEVEL_TERSE )']
['sprintf( v6, "*.%s%u", ( const char *)&off_624A4C, stmt->identifier.id.len >> 2);', 'sprintf( v8, "*.%s%u", ( const char *)&off_624A4C, stmt->identifier.id.len >> 2);']
['if ( call_insn_operand( operand0->fld[0].rtx, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32)) )']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32)) )', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32)) )']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['if ( call_insn_operand( operand1->fld[0].rtx, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32)) )']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32)) )', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32)) )']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['v8 = copy_to_mode_reg( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operand2->fld[0].rtx);']
['v8 = copy_to_mode_reg( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operand2->fld[0].rtx);']
['v9 = insn_data_0[insn_code].genfun( op1, op2);']
['v2 = ix86_expand_compare( ( rtx_code)*( _WORD *)operand0, 0LL, 0LL);']
['if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )']
['if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )']
['if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['v5 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v3);']
['v11 = ( tree_node *)i[13];']
['return simplify_gen_subreg( mode, rtx, ( machine_mode)v4, 0);']
['sprintf( v8, "*.%s%u", ( const char *)&off_624A4C, stmt->identifier.id.len >> 2);']
['v5 = force_reg( ( machine_mode)BYTE2( v3), x);']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['__m256 v18; // [rsp+40h] [rbp-58h] BYREF']
['v8 = mode_class_0[mode];']
['return gen_rtx_fmt_e( ( rtx_code)( unsigned __int16)v3, mode, rtx);']
['return simplify_gen_subreg( mode, rtx, ( machine_mode)v4, 0);']
['*( _OWORD *)&element->next = 0LL;', '*( _OWORD *)&v18.m256_f32[2] = 0LL;', '*( _OWORD *)&v18.m256_f32[2] = 0LL;']
['*( _OWORD *)&element->next = 0LL;', '*( _OWORD *)&v18.m256_f32[2] = 0LL;', '*( _OWORD *)&v18.m256_f32[2] = 0LL;']
['slot_with_hash = htab_find_slot_with_hash( v13, v14, v12, ( insert_option)( create != 0));']
['v17 = gen_rtx_CONST_INT( VOIDmode, *( _QWORD *)( v14 + 8) * v11);']
['*( _QWORD *)&v18.m256_f32[4] = d.r[2];']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['return gen_rtx_fmt_e( CLOBBER, ( machine_mode)v4, v8);', 'return gen_rtx_fmt_e( CLOBBER, ( machine_mode)v4, v8);', 'return gen_rtx_fmt_e( CLOBBER, ( machine_mode)v4, v8);']
['rtx = v19->fld[0].rtx;', 'rtx = v15->fld[0].rtx;', 'rtx = v11->fld[0].rtx;']
['if ( ( unsigned __int16)( *( _DWORD *)dst - 65) >= 2u )']
['|| ( rtx = rtx->fld[0].rtx, ( unsigned __int8)BYTE2( *( _DWORD *)result) != mode) )']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['result = gen_lowpart_common( mode, rtx);']
['if ( result )', 'if ( result )', 'if ( result )']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['return gen_rtx_fmt_ee( ( rtx_code)( unsigned __int16)*( _DWORD *)rtx, mode, rtx->fld[0].rtx, *( rtx *)&rtx[1]);']
['result = simplify_gen_subreg( mode, rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v10);', 'result = simplify_gen_subreg( mode, rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v10);']
['result = simplify_gen_subreg( mode, rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v10);', 'result = simplify_gen_subreg( mode, rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v10);']
['if ( !result )']
['return gen_rtx_fmt_e( CLOBBER, ( machine_mode)v4, v8);', 'return gen_rtx_fmt_e( CLOBBER, ( machine_mode)v4, v8);', 'return gen_rtx_fmt_e( CLOBBER, ( machine_mode)v4, v8);']
['v4 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)reg + 2));']
['if ( optab_table[30]->handlers[v2].insn_code == CODE_FOR_nothing && mode_class_0[v2] == MODE_CC )']
['return insn_data_0[optab_table[30]->handlers[v3].insn_code].genfun( v6, v9);', 'return insn_data_0[optab_table[30]->handlers[v3].insn_code].genfun( v6, v9);']
['return insn_data_0[optab_table[30]->handlers[v3].insn_code].genfun( v6, v9);', 'return insn_data_0[optab_table[30]->handlers[v3].insn_code].genfun( v6, v9);']
['operands[4] = gen_rtx_REG( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), 17);', 'operands[4] = gen_rtx_REG( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), 17);']
['operands[4] = gen_rtx_REG( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), 17);', 'operands[4] = gen_rtx_REG( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), 17);']
['v12 = gen_rtx( v10, ( machine_mode)v7, v11, v5);']
['v12 = gen_rtx( v10, ( machine_mode)v7, v5, v11);']
['v4 = gen_rtx_REG( ( machine_mode)v2, v3);', 'v4 = gen_rtx_REG( ( machine_mode)v2, v3);']
['v4 = gen_rtx_REG( ( machine_mode)v2, v3);', 'v4 = gen_rtx_REG( ( machine_mode)v2, v3);']
['if ( generating_concat_p && ( v2 = mode_class_0[mode], ( unsigned int)( v2 - 5) <= 1) )']
['rtx last_insn; // rbp']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v12; // rax']
['rtx v16; // r12']
['rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax']
['rtx v25; // rax']
['rtx secondary_mem; // r14']
['rtx v3; // r14', 'rtx v34; // r14', 'rtx v71; // r14', 'rtx v41; // r14']
['last_insn = get_last_insn( );', 'last_insn = get_last_insn( );', 'last_insn = get_last_insn( );']
['&& ( v10 = gen_lowpart_common( ( machine_mode)v9, out)) != 0LL )']
['v16 = *( _OWORD *)( aux + 24);']
['*( _OWORD *)&result->head_tree = 0LL;']
['v16 = *( _OWORD *)( aux + 24);', 'v22 = *( _WORD *)v21;']
['*( _OWORD *)&result->head_tree = 0LL;']
['v16 = *( _OWORD *)( aux + 24);']
['*( _OWORD *)&result->head_tree = 0LL;']
['v16 = *( _OWORD *)( aux + 24);']
['*( _OWORD *)&result->head_tree = 0LL;']
['v16 = *( _OWORD *)( aux + 24);']
['v16 = *( _OWORD *)( aux + 24);']
['*( _OWORD *)&result->head_tree = 0LL;']
['v16 = *( _OWORD *)( aux + 24);']
['*( _OWORD *)&result->head_tree = 0LL;']
['v16 = *( _OWORD *)( aux + 24);']
['*( _OWORD *)&result->head_tree = 0LL;']
['v16 = *( _OWORD *)( aux + 24);']
['*( _OWORD *)&result->head_tree = 0LL;']
['v16 = *( _OWORD *)( aux + 24);']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx v65; // rcx', 'rtx v57; // rcx', 'rtx v35; // rcx', 'rtx v45; // rcx']
['v5 = gen_rtx_fmt_u00( LABEL_REF, VOIDmode, v4);']
['*( _OWORD *)&emit->x_first_insn = 0LL;']
['if ( !v5 )']
['*( _QWORD *)( v6[1].fld[0].rtwint + 16) = v6;']
['*( _QWORD *)( v6[1].fld[0].rtwint + 16) = v6;']
['v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['while ( v3 );', 'while ( v7 );', 'while ( v4 );']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['v6 = adjust_address_1( *operands, ( machine_mode)v5, 0LL, 1, 1);']
['( machine_mode)v5);']
['v13 = gen_rtx_fmt_ee( AND, ( machine_mode)v5, v10, v12);']
['operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['v3 = gen_rtx_fmt_ee( MULT, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1], v2);']
['operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['ix86_split_fp_branch( ( rtx_code)*( _WORD *)*operands, operands[1], operands[2], operands[3], operands[4], 0LL);']
['ix86_split_fp_branch( ( rtx_code)*( _WORD *)*operands, operands[1], operands[2], operands[3], operands[4], operands[5]);']
['v1 = ix86_force_to_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2), operands[1]);', 'v1 = ix86_force_to_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2), operands[1]);']
['v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);', 'v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);', 'v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);']
['( rtx_code)( unsigned __int16)*( _DWORD *)operands[3],', '( rtx_code)( unsigned __int16)*( _DWORD *)operands[3],', '( rtx_code)( unsigned __int16)*( _DWORD *)operands[3],']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[3]),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[3]),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[3]),']
['ix86_free_from_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2));', 'ix86_free_from_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2));']
['v1 = ix86_force_to_memory( ( machine_mode)*( ( unsigned __int8 *)operands[2] + 2), operands[2]);']
['v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);', 'v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);', 'v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);']
['( rtx_code)( unsigned __int16)*( _DWORD *)operands[3],', '( rtx_code)( unsigned __int16)*( _DWORD *)operands[3],', '( rtx_code)( unsigned __int16)*( _DWORD *)operands[3],']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[3]),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[3]),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[3]),']
['ix86_free_from_memory( ( machine_mode)*( ( unsigned __int8 *)operands[2] + 2));']
['( rtx_code)( unsigned __int16)*( _DWORD *)v2,']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)v2),']
['v11 = gen_rtx( ( rtx_code)v1, ( machine_mode)v2, v10, const_int_rtx[64]);']
['v1 = swap_condition( ( rtx_code)*( _WORD *)operands[1]);']
['*( _WORD *)operands[1] = swap_condition( ( rtx_code)*( _WORD *)v2);']
['if ( const0_operand( operands[2], ( machine_mode)*( ( unsigned __int8 *)*operands + 2)) )']
['( rtx_code)( unsigned __int16)*( _DWORD *)operands[3],', '( rtx_code)( unsigned __int16)*( _DWORD *)operands[3],', '( rtx_code)( unsigned __int16)*( _DWORD *)operands[3],']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[3]),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[3]),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)operands[3]),']
['v1 = ix86_force_to_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2), operands[1]);', 'v1 = ix86_force_to_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2), operands[1]);']
['v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);', 'v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);', 'v2 = gen_rtx_fmt_e( FLOAT, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v1);']
['ix86_free_from_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2));', 'ix86_free_from_memory( ( machine_mode)*( ( unsigned __int8 *)operands[1] + 2));']
['operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);']
['operands[2] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[2]);', 'operands[2] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[2]);', 'operands[2] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[2]);']
['operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);']
['operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);']
['operands[2] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[2]);', 'operands[2] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[2]);', 'operands[2] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[2]);']
['v1 = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);']
['operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);']
['operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);']
['operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);']
['v1 = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'v1 = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);']
['operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);']
['operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);']
['operands[4] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[4]);']
['operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);']
['operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);', 'operands[3] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[3]);']
['v1 = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[4]);']
['operands[1] = gen_lowpart( ( machine_mode)v3, operands[1]);']
['operands[2] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[2]);', 'operands[2] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[2]);', 'operands[2] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[2]);']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);', 'operands[1] = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[1]);']
['v1 = gen_lowpart( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), operands[2]);']
['v8 = gen_rtx( ( rtx_code)*( _WORD *)operand1, VOIDmode, operand4, operand5);', 'v8 = gen_rtx( ( rtx_code)*( _WORD *)operand1, VOIDmode, operand4, operand5);']
['v8 = gen_rtx( ( rtx_code)*( _WORD *)operand1, VOIDmode, operand4, operand5);', 'v8 = gen_rtx( ( rtx_code)*( _WORD *)operand1, VOIDmode, operand4, operand5);']
['operand = insn_data_0[v3].operand,', 'operand = insn_data_0[v3].operand,']
['operand->predicate( r0, ( machine_mode)*( ( unsigned __int16 *)operand + 8)))', 'operand->predicate( r0, ( machine_mode)*( ( unsigned __int16 *)operand + 8)))']
['&& operand[1].predicate( r1, ( machine_mode)*( ( unsigned __int16 *)&operand[1] + 8))', '&& operand[1].predicate( r1, ( machine_mode)*( ( unsigned __int16 *)&operand[1] + 8))']
['&& operand[2].predicate( c, ( machine_mode)*( ( unsigned __int16 *)&operand[2] + 8)) )', '&& operand[2].predicate( c, ( machine_mode)*( ( unsigned __int16 *)&operand[2] + 8)) )']
['return insn_data_0[v5].genfun( r0, r1);', 'return insn_data_0[v5].genfun( r0, r1);']
['if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )']
['if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )']
['if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )', 'if ( ( unsigned int)debug_info_level_0 < DINFO_LEVEL_NORMAL )']
['v2 = expand_simple_binop( ( machine_mode)v3, PLUS, operand0, v4, 0LL, 0, OPTAB_DIRECT);']
['v2 = expand_simple_binop( ( machine_mode)v3, MINUS, pic_offset_table_rtx, operand0, 0LL, 1, OPTAB_DIRECT);']
['v26 = ( tree_node *)v25[4];']
['v26 = ( tree_node *)*( &global_trees + 27);', 'v26 = ( tree_node *)*( &global_trees + 27);']
['v26 = ( tree_node *)v25[4];']
['v4 = ( tree_node *)ggc_alloc( 0x28uLL);']
['v4 = ( tree_node *)ggc_alloc( 0x28uLL);']
['rtx *v17; // rcx']
['v17 = ( rtx *)( v13->fld[0].rtwint + 16);']
['v17 = const_int_rtx + 520;']
['*mult_val = *v17;']
['if ( ( v3 & 0xFF0000) == 0 && v4 && ( mode_class_0[v4] | 2) != 3 )']
['if ( mode_class_0[v9] != MODE_FLOAT || mode_size[v9] <= mode_size[BYTE2( v11)] )']
['if ( **( _WORD **)( v5.rtwint + 16) == 54 && !memory_address_p( ( machine_mode)BYTE2( v4), x->fld[0].rtx) )']
['v8 = ( tree_node *)global_trees;']
['v10 = lang_hooks_0.get_alias_set( v9);']
['return ++new_alias_set_last_alias_set;']
['v10 = lang_hooks_0.get_alias_set( v9);']
['return ++new_alias_set_last_alias_set;']
['x_arg_pointer_save_area = assign_stack_local_1( ( machine_mode)v3, mode_size[v3], 0, f);']
['fatal_insn_not_found( insn, "insn-attrtab.c", 12189, "get_attr_athlon_decode");']
['return memory_operand( recog_data_0.operand[1], VOIDmode) != 0;', 'return memory_operand( recog_data_0.operand[1], VOIDmode) != 0;', 'return memory_operand( recog_data_0.operand[1], VOIDmode) != 0;']
['return memory_operand( recog_data_0.operand[1], VOIDmode) != 0;', 'return memory_operand( recog_data_0.operand[1], VOIDmode) != 0;', 'return memory_operand( recog_data_0.operand[1], VOIDmode) != 0;']
['return memory_operand( recog_data_0.operand[1], VOIDmode) != 0;', 'return memory_operand( recog_data_0.operand[1], VOIDmode) != 0;', 'return memory_operand( recog_data_0.operand[1], VOIDmode) != 0;']
['fatal_insn_not_found( insn, "insn-attrtab.c", 11973, "get_attr_athlon_fpunits");']
['if ( !register_operand( recog_data_0.operand[1], SImode) )']
['&& !immediate_operand( recog_data_0.operand[1], VOIDmode) )', '&& !immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( !register_operand( recog_data_0.operand[1], SImode) )']
['&& !immediate_operand( recog_data_0.operand[1], VOIDmode) )', '&& !immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( !register_operand( recog_data_0.operand[1], SImode) )']
['return 3 * ( immediate_operand( recog_data_0.operand[1], VOIDmode) == 0) + 1;']
['if ( !register_operand( recog_data_0.operand[1], SImode) )']
['&& !immediate_operand( recog_data_0.operand[1], VOIDmode) )', '&& !immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( !register_operand( recog_data_0.operand[1], SImode) )']
['&& !immediate_operand( recog_data_0.operand[1], VOIDmode) )', '&& !immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['v11 = recog_data_0.operand[3];']
['if ( symbolic_operand( recog_data_0.operand[1], SImode) )']
['fatal_insn_not_found( insn, "insn-attrtab.c", 13438, "get_attr_i387");']
['v5 = recog_data_0.operand[3];', 'v5 = recog_data_0.operand[3];', 'v5 = recog_data_0.operand[3];']
['v5 = recog_data_0.operand[3];', 'v5 = recog_data_0.operand[3];', 'v5 = recog_data_0.operand[3];']
['v5 = recog_data_0.operand[3];', 'v5 = recog_data_0.operand[3];', 'v5 = recog_data_0.operand[3];']
['if ( get_attr_type( insn) == TYPE_FOP || mult_operator( recog_data_0.operand[3], TFmode) )']
['fatal_insn_not_found( insn, "insn-attrtab.c", 13072, "get_attr_imm_disp");']
['v17 = recog_data_0.operand[1];', 'v17 = recog_data_0.operand[1];', 'v8 = recog_data_0.operand[1];', 'v18 = recog_data_0.operand[0];', 'v18 = recog_data_0.operand[0];', 'v68 = recog_data_0.operand[1];', 'v68 = recog_data_0.operand[1];', 'v68 = recog_data_0.operand[1];']
['if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )']
['v17 = recog_data_0.operand[1];', 'v17 = recog_data_0.operand[1];', 'v8 = recog_data_0.operand[1];', 'v18 = recog_data_0.operand[0];', 'v18 = recog_data_0.operand[0];', 'v68 = recog_data_0.operand[1];', 'v68 = recog_data_0.operand[1];', 'v68 = recog_data_0.operand[1];']
['if ( memory_displacement_operand( recog_data_0.operand[0], VOIDmode) )']
['v4 = recog_data_0.operand[1];', 'v4 = recog_data_0.operand[1];']
['v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];']
['v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];']
['v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];']
['v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];']
['if ( _bittest( &v19, ix86_cpu) && const1_operand( recog_data_0.operand[2], VOIDmode)']
['fatal_insn_not_found( insn, "insn-attrtab.c", 13642, "get_attr_length_address");']
['if ( !constant_call_address_operand( recog_data_0.operand[1], VOIDmode) )']
['fatal_insn_not_found( insn, "insn-attrtab.c", 14632, "get_attr_length_immediate");']
['if ( symbolic_operand( recog_data_0.operand[1], SImode) )']
['if ( ( _DWORD)flag_pic && symbolic_operand( recog_data_0.operand[1], DImode) )']
['if ( ( unsigned int)( which_alternative - 2) <= 2 && aligned_operand( recog_data_0.operand[1], HImode) )', 'if ( ( unsigned int)( which_alternative - 2) <= 2 && aligned_operand( recog_data_0.operand[1], HImode) )']
['if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )']
['if ( symbolic_operand( recog_data_0.operand[1], DImode) )', 'if ( symbolic_operand( recog_data_0.operand[1], DImode) )']
['if ( ( _DWORD)flag_pic && symbolic_operand( recog_data_0.operand[1], DImode) )']
['if ( !symbolic_operand( recog_data_0.operand[1], DImode) )']
['|| pic_symbolic_operand( recog_data_0.operand[2], DImode) )']
['v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];']
['|| pic_symbolic_operand( recog_data_0.operand[2], SImode) )', '|| pic_symbolic_operand( recog_data_0.operand[2], SImode) )']
['|| pic_symbolic_operand( recog_data_0.operand[2], SImode) )', '|| pic_symbolic_operand( recog_data_0.operand[2], SImode) )']
['v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];']
['if ( incdec_operand( recog_data_0.operand[2], HImode) || which_alternative == 2 )']
['v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];']
['fatal_insn_not_found( insn, "insn-attrtab.c", 15861, "get_attr_memory");']
['if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )']
['LODWORD( v3) = 2 * ( memory_operand( recog_data_0.operand[0], VOIDmode) != 0) + 1;']
['if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )']
['LODWORD( v3) = 2 * ( memory_operand( recog_data_0.operand[0], VOIDmode) != 0);']
['|| ( LODWORD( v3) = 0, !symbolic_operand( recog_data_0.operand[1], SImode)) )']
['if ( !memory_operand( recog_data_0.operand[0], VOIDmode)', 'if ( !memory_operand( recog_data_0.operand[0], VOIDmode)']
['|| ( LODWORD( v3) = 3, !memory_operand( recog_data_0.operand[1], VOIDmode)) )', '|| ( LODWORD( v3) = 3, !memory_operand( recog_data_0.operand[1], VOIDmode)) )']
['if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )']
['if ( !memory_operand( recog_data_0.operand[1], VOIDmode)']
['if ( !symbolic_operand( recog_data_0.operand[1], SImode) )']
['|| !memory_operand( recog_data_0.operand[2], VOIDmode)) )']
['if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )']
['if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[0], VOIDmode) )']
['fatal_insn_not_found( insn, "insn-attrtab.c", 17669, "get_attr_mode");']
['if ( ( unsigned int)( which_alternative - 2) <= 2 && aligned_operand( recog_data_0.operand[1], HImode) )', 'if ( ( unsigned int)( which_alternative - 2) <= 2 && aligned_operand( recog_data_0.operand[1], HImode) )']
['if ( aligned_operand( recog_data_0.operand[1], HImode) )']
['if ( !q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( !q_regs_operand( recog_data_0.operand[0], QImode) )']
['fatal_insn_not_found( insn, "insn-attrtab.c", 16766, "get_attr_modrm");']
['v4 = recog_data_0.operand[1];', 'v4 = recog_data_0.operand[1];']
['v4 = recog_data_0.operand[0];']
['v7 = recog_data_0.operand[1];', 'v7 = recog_data_0.operand[1];']
['if ( !register_operand( recog_data_0.operand[0], QImode) )']
['&& !immediate_operand( recog_data_0.operand[1], VOIDmode) )', '&& !immediate_operand( recog_data_0.operand[1], VOIDmode) )']
['if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )']
['v7 = recog_data_0.operand[1];', 'v7 = recog_data_0.operand[1];']
['if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )', 'if ( !memory_operand( recog_data_0.operand[1], VOIDmode) )']
['return !register_operand( recog_data_0.operand[1], SImode) && !register_operand( recog_data_0.operand[1], HImode);', 'return !register_operand( recog_data_0.operand[1], SImode) && !register_operand( recog_data_0.operand[1], HImode);', 'return !register_operand( recog_data_0.operand[1], SImode) && !register_operand( recog_data_0.operand[1], HImode);']
['return !register_operand( recog_data_0.operand[1], SImode) && !register_operand( recog_data_0.operand[1], HImode);', 'return !register_operand( recog_data_0.operand[1], SImode) && !register_operand( recog_data_0.operand[1], HImode);', 'return !register_operand( recog_data_0.operand[1], SImode) && !register_operand( recog_data_0.operand[1], HImode);']
['v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];']
['v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];']
['v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];', 'v5 = recog_data_0.operand[2];']
['fatal_insn_not_found( insn, "insn-attrtab.c", 19258, "get_attr_pent_pair");']
['v8 = recog_data_0.operand[1];']
['v8 = recog_data_0.operand[0];']
['if ( !( _DWORD)flag_pic || !symbolic_operand( recog_data_0.operand[1], SImode) )']
['v20 = recog_data_0.operand[1];', 'v20 = recog_data_0.operand[1];', 'v27 = recog_data_0.operand[1];', 'v31 = recog_data_0.operand[1];', 'v31 = recog_data_0.operand[1];']
['v5 = memory_operand( recog_data_0.operand[1], VOIDmode) != 0;']
['if ( ( unsigned int)( which_alternative - 2) <= 2 && aligned_operand( recog_data_0.operand[1], HImode) )', 'if ( ( unsigned int)( which_alternative - 2) <= 2 && aligned_operand( recog_data_0.operand[1], HImode) )']
['if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )']
['if ( !( _DWORD)flag_pic || !symbolic_operand( recog_data_0.operand[1], DImode) )']
['v20 = recog_data_0.operand[1];', 'v20 = recog_data_0.operand[1];', 'v27 = recog_data_0.operand[1];', 'v31 = recog_data_0.operand[1];', 'v31 = recog_data_0.operand[1];']
['rtx v36; // rcx', 'rtx v18; // rcx', 'rtx v17; // rcx', 'rtx v26; // rcx']
['fatal_insn_not_found( insn, "insn-attrtab.c", 20323, "get_attr_prefix_0f");']
['if ( ( unsigned int)( which_alternative - 2) <= 2 && aligned_operand( recog_data_0.operand[1], HImode) )', 'if ( ( unsigned int)( which_alternative - 2) <= 2 && aligned_operand( recog_data_0.operand[1], HImode) )']
['if ( !q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( !q_regs_operand( recog_data_0.operand[0], QImode) )']
['rtx = recog_data_0.operand[0];']
['if ( *( _WORD *)recog_data_0.operand[0] == 67 )', 'if ( *( _WORD *)recog_data_0.operand[0] == 67 )']
['rtx = recog_data_0.operand[0]->fld[0].rtx;']
['v18 = recog_data_0.operand[0];', 'v18 = recog_data_0.operand[0];']
['v18 = recog_data_0.operand[0];', 'v18 = recog_data_0.operand[0];']
['if ( *( _WORD *)recog_data_0.operand[0] == 67 )', 'if ( *( _WORD *)recog_data_0.operand[0] == 67 )']
['v18 = recog_data_0.operand[0]->fld[0].rtx;', 'v18 = recog_data_0.operand[0]->fld[0].rtx;']
['v18 = recog_data_0.operand[0]->fld[0].rtx;', 'v18 = recog_data_0.operand[0]->fld[0].rtx;']
['v19 = insn_addresses_->data.i[v18->fld[0].rtint];']
['fatal_insn_not_found( insn, "insn-attrtab.c", 20460, "get_attr_prefix_data16");']
['fatal_insn_not_found( insn, "insn-attrtab.c", 20358, "get_attr_prefix_rep");']
['rtx v37; // rcx']
['fatal_insn_not_found( insn, "insn-attrtab.c", 21978, "get_attr_type");']
['v20 = recog_data_0.operand[1];', 'v20 = recog_data_0.operand[1];', 'v27 = recog_data_0.operand[1];']
['if ( aligned_operand( recog_data_0.operand[1], HImode) )']
['if ( !register_operand( recog_data_0.operand[0], QImode) )']
['if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )', 'if ( q_regs_operand( recog_data_0.operand[0], QImode) )']
['v14 = swap_condition( ( rtx_code)v14);', 'v17 = swap_condition( ( rtx_code)v47);']
['result = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['v13 = apply_args_size_size;', 'v5 = mode_class_0[v2];', 'v2 = base_value;', 'v45 = last_value;', 'v35 = print_rtx_hi_name[v23];', 'v35 = print_rtx_qi_name[v23];']
['if ( !expand_builtin_va_arg_gave_help )']
['apply_args_size_size = v1;']
['v35 = print_rtx_hi_name[v23];']
['v10 = expand_compound_operation( v8);', 'v12 = dump_flow_info_reg_class_names[v10];']
['v10 = expand_compound_operation( v8);', 'v12 = dump_flow_info_reg_class_names[v10];']
['v35 = print_rtx_hi_name[v23];']
['v10 = expand_compound_operation( v8);', 'v11 = operand_sub*(short *)0xforce(', 'v14 = eliminate_constant_term( v5, &arg1);']
['v4 = find_base_term( ( rtx)v9[1]);']
['while ( v4 == 46 || ( sch_istable[v4] & 0x204) != 0 );']
['return get_frame_alias_set_set;']
['if ( get_frame_alias_set_set == -1 )']
['return ++new_alias_set_last_alias_set;']
['return ++new_alias_set_last_alias_set;']
['get_frame_alias_set_set = new_alias_set( );']
['if ( get_frame_alias_set_set == -1 )']
['hard_reg_initial_vals->entries = ( initial_value_pair_0 *)xmalloc( 0x50uLL);']
['hard_reg_initial_vals->entries = ( initial_value_pair_0 *)xrealloc( hard_reg_initial_vals->entries, 16 * v6);']
['result = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)reg + 2));']
['v8 = ( tree_node *)*( &global_trees + 5);', 'v8 = ( tree_node *)*( &global_trees + 1);']
['arg0 = ( tree_node *)*( &global_trees + 15);', 'arg1 = ( tree_node *)*( &global_trees + 17);']
['return insn_data_0[code].name;']
['rtx v21; // [rsp+8h] [rbp-40h] BYREF']
['v45 = last_value;']
['return gen_lowpart_for_combine( ( machine_mode)*( ( unsigned __int8 *)x + 2), last_value);']
['v15 = &reg_last_set_value[rtuint];']
['if ( !v20 )', 'if ( v10 )', 'if ( v20 )']
['last_value = get_last_value( rtx);', 'if ( ( int)rtint <= max_uid && *( ( _DWORD *)uid_cuid_0 + rtint) >= v16 )']
['result = 0LL;']
['v12 = copy_rtx( rtx);', 'v22 = copy_rtx( rtx);']
['v12 = copy_rtx( rtx);', 'v22 = copy_rtx( rtx);']
['if ( ( int)rtint <= max_uid && *( ( _DWORD *)uid_cuid_0 + rtint) >= v16 )']
['return v7;', 'return v4;', 'return v4;', 'return result;', 'return result;', 'return result;', 'return result;', 'return result;', 'return v8;', 'return v18;']
['v9 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v14] - 5) < 2) + 1;']
['v8 = mode_class_0[mode];']
['*( reload_type *)( v2 + 10314284),']
['rtx v3; // rax']
['*( _QWORD *)( v9.rtwint + 16) = v6;']
['v12 = *( rtx *)( v4.rtwint + 24);']
['v12 = *( rtx *)( v4.rtwint + 24);']
['if ( ( *( _BYTE *)( v14.rtwint + 16) | 2) == 15 && *( tree_node **)( *( _QWORD *)( v14.rtwint + 8) + 128LL) == section_name )']
['v12 = *( rtx *)( v4.rtwint + 24);']
['*( _OWORD *)( aux + 8) = 0LL;']
['v15 = ( tree_node *)v14;', 'v11 = ( tree_node *)v10;']
['return get_varargs_alias_set_set;']
['if ( get_varargs_alias_set_set == -1 )']
['return ++new_alias_set_last_alias_set;']
['return ++new_alias_set_last_alias_set;']
['get_varargs_alias_set_set = new_alias_set( );']
['if ( get_varargs_alias_set_set == -1 )']
['v10 = ( tree_node **)&v18[2 * v6];']
['v21 = ( rtx *)*( ( _QWORD *)v10 + 2);']
['v8 = *( tree_node **)( high + 32);']
['G.lookup[v2] = ( page_entry_0 **)xcalloc( 1LL << v4, 8uLL);']
['if ( ( sch_istable[v36] & 4) != 0 )']
['reg_set_0 *v36; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v3; // rax', 'reg_set_0 *v3; // rax']
['reg_set_0 *v36; // rax', 'reg_set_0 *v36; // rax', 'reg_set_0 *v3; // rax', 'reg_set_0 *v3; // rax']
['v19 = force_const_mem( ( machine_mode)*( ( unsigned __int8 *)x + 2), *( rtx *)&x[1]);', 'v19 = force_const_mem( ( machine_mode)*( ( unsigned __int8 *)x + 2), *( rtx *)&x[1]);']
['return ( *( page_entry_0 ***)( ( char *)G.lookup + ( ( ( unsigned __int64)p >> 21) & 0x7F8)))[( ( unsigned __int64)p >> SLOBYTE( G.lg_pagesize)) & ~( -1 << ( 24 - LOBYTE( G.lg_pagesize)))];']
['v3 = ( tree_node *)*( ( _QWORD *)&ggc_pending_trees->name + elements_used);']
['rtl_op = first_rtl_op( ( tree_code)v27);']
['return ( *( page_entry_0 ***)( ( char *)G.lookup + ( ( ( unsigned __int64)p >> 21) & 0x7F8)))[( ( unsigned __int64)p >> SLOBYTE( G.lg_pagesize)) & ~( -1 << ( 24 - LOBYTE( G.lg_pagesize)))];']
['rtx v10; // rax', 'rtx *v60; // rax', 'rtx *v11; // rax', 'rtx *v20; // rax', 'rtx *v11; // rax', 'rtx v10; // rax', 'rtx v10; // rax']
['rtx v10; // rax', 'rtx *v60; // rax', 'rtx *v11; // rax', 'rtx *v20; // rax', 'rtx *v11; // rax', 'rtx v10; // rax', 'rtx v10; // rax']
['rtx regno_note; // rbp']
['rtx in_reg; // rax']
['rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax']
['if ( *v23 != v16 || !byte_9CE5FF[v24] )', 'if ( *v20 != v16 || !byte_9CE5FF[v19] )']
['v14 = fold( v13);', 'v15 = canon_rtx( v16);', 'v2 = allocno_0;']
['reg_avail_info_0 = 0LL;']
['v12 = 0LL;', 'v15 = 0LL;', 'v40 = 0LL;', '*v14 = v19;', 'v16 = 0LL;']
['v12 = 0LL;', 'v15 = 0LL;', 'v40 = 0LL;', 'v16 = 0LL;']
['v12 = 0LL;']
['v13 = v12;', 'v13 = v12;', 'v12 = 0LL;', 'v15 = 0LL;', 'v40 = 0LL;', 'v16 = 0LL;']
['v14 = v13;', 'v24 = 0LL;', 'v12 = 0LL;', 'v15 = 0LL;', 'v40 = 0LL;', 'v16 = 0LL;']
['v15 = 0LL;']
['v16 = 0LL;']
['v12 = create_basic_block( src->index + 1, rtx, 0LL);']
['v10 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v8] - 5) < 2) + 1;']
['( machine_mode)*( unsigned __int8 *)( *( _QWORD *)&v23[2 * v24 + 2] + 2LL),']
['v32 = hash_expr_1( ( rtx)v31, ( machine_mode)*( unsigned __int8 *)( v31 + 2), do_not_record_p);']
['v32 = hash_expr_1( ( rtx)v31, ( machine_mode)*( unsigned __int8 *)( v31 + 2), do_not_record_p);']
['v28 = hash_rtx( ( rtx)v27, ( machine_mode)*( unsigned __int8 *)( v27 + 2), 0);']
['v28 = hash_rtx( ( rtx)v27, ( machine_mode)*( unsigned __int8 *)( v27 + 2), 0);']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rax']
['*( ( _OWORD *)object_base + 1) = 0LL;']
['if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )']
['v32 = *( _DWORD *)reg_note->fld[0].rtwint - 58;']
['v19 = ( rtx)insn[2];', 'v16 = ( rtx)insn[2];']
['if ( *( _WORD *)v19 != 47 )', 'if ( *( _WORD *)v15 != 47 )', 'if ( *( _WORD *)v19 != 47 )', 'if ( *( _WORD *)v16 != 47 )']
['v16 = single_set_2( insn, *( rtx *)&insn[2]);']
['&& ( operand = insn_data_0[insn_code].operand, operand->predicate(']
['( machine_mode)*( ( unsigned __int16 *)operand + 8)))']
['&& operand[1].predicate( x, ( machine_mode)*( ( unsigned __int16 *)&operand[1] + 8)) )']
['*( _OWORD *)&v2->stack.chunk_size = 0LL;']
['*( _OWORD *)&v2->stack.object_base = 0LL;']
['*( _OWORD *)&v2->stack.chunk_limit = 0LL;']
['*( _OWORD *)&v2->stack.alignment_mask = 0LL;']
['*( _OWORD *)&v2->stack.freefun = 0LL;']
['*( ( _OWORD *)&v2->stack + 5) = 0LL;']
['rtx v55; // rax', 'rtx v55; // rax', 'rtx v55; // rax', 'rtx v55; // rax', 'rtx v55; // rax']
['rtx *v56; // rcx']
['rtx v12; // rax', 'rtx v22; // rax', 'rtx v60; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v62; // rcx', 'rtx v12; // rax', 'rtx v32; // rax', 'rtx v22; // rax', 'rtx v64; // rax', 'rtx v22; // rax', 'rtx v65; // rax', 'rtx v63; // rax', 'rtx v82; // rax', 'rtx v64; // rax', 'rtx v12; // rax', 'rtx v65; // rax', 'rtx v66; // rax', 'rtx v69; // rax', 'rtx v32; // rax', 'rtx v52; // rax', 'rtx v67; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v22; // rax']
['rtx v62; // rcx', 'rtx v64; // rcx', 'rtx v65; // rcx', 'rtx v63; // rax', 'rtx v43; // rcx']
['rtx *v25; // rbx', 'rtx v65; // rbx', 'rtx *v55; // rbx']
['rtx v66; // rax']
['rtx *v67; // rax', 'rtx *v17; // rcx']
['rtx *v96; // rdx', 'rtx *v60; // rax', 'rtx *v67; // rax', 'rtx *v23; // rdx', 'rtx *v58; // rcx', 'rtx v64; // rdx']
['rtx op; // [rsp+18h] [rbp-60h] BYREF']
['rtx v79; // [rsp+60h] [rbp-C8h] BYREF']
['if ( ( mode_class_0[mode] | 2) == 3 )']
['*( _OWORD *)d.r = *( _OWORD *)&exp->block.vars;']
['( machine_mode)( ( unsigned __int8)HIBYTE( WORD2( exp->common.type->block.abstract_origin)) >> 1),']
['result[1] = ( rtx_def)_mm_load_si128( &v9);']
['if ( mode && ( v2 & 0xFF0000) == 0 && ( mode_class_0[mode] | 2) != 3 )']
['rtx v33; // rax']
['rtx v38; // rsi']
['v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['v9 = ( const char *)&off_63AA3B;']
['error_with_decl( decl, &off_6E2FF0[4]);', 'fprintf( file, off_63A1D6, scale);', 'fprintf( file, off_63A1DA, scale);']
['*( _OWORD *)&cum->sse_words = 0LL;']
['*( _OWORD *)&cum->words = 0LL;']
['*( _OWORD *)&deps->pending_read_insns = 0LL;']
['*( _OWORD *)&deps->pending_write_insns = 0LL;']
['*( _OWORD *)&deps->pending_lists_length = 0LL;']
['*( _OWORD *)&deps->last_function_call = 0LL;']
['if ( alloc_aux_for_blocks_initialized )']
['alloc_aux_for_blocks_initialized = 1;']
['rtx v20; // r13']
['v18 = canon_rtx( rtx);', 'v18 = canon_rtx( rtx);']
['if ( *( _WORD *)v20 != 61 )', 'if ( ( sch_istable[v23] & 0x100) != 0 )', 'if ( *( _WORD *)v20 != 66 )']
['v21.rtwint = ( __int64)v20->fld[0];']
['if ( *( _WORD *)v25 == 33 )', 'if ( *( _WORD *)v21 == 33 )']
['add_dependence( insn, *( rtx *)( i + 8), ( reg_note)*( unsigned __int8 *)( i + 2));']
['v6[1].fld[0].rtwint = ( __int64)v2;']
['if ( rtx_equal_p( v20->fld[0].rtx, *( rtx *)( v25.rtwint + 8)) )']
['v7 = gen_rtx_MEM( v6, rtx);', 'v27 = gen_rtx_REG( v24, rtint);']
['v1 = ( char *)recog_data_0.constraints[v0];']
['result = simplify_binary_operation( code, mode, rtx, v4);']
['*( _OWORD *)&cum->sse_words = 0LL;']
['v2 = rtx_alloc( ( rtx_code)*( _WORD *)notes);']
['v3 = lang_hooks_0.expand_constant( value);']
['v10 = ( tree_node *)*( &global_trees + 11);', 'v14 = ( tree_node *)*( &global_trees + 16);', 'v14 = ( tree_node *)*( &global_trees + 17);', 'v8 = ( tree_node *)*( &global_trees + 4);', 'v8 = ( tree_node *)*( &global_trees + 1);', 'v11 = ( tree_node *)*( &global_trees + 15);']
['if ( !v17 || !v18 || ( v19 = *( tree_node **)( v17[4] + 128LL), v19 == ( tree_node *)*( &global_trees + 27)) )']
['if ( !v17 || !v18 || ( v19 = *( tree_node **)( v17[4] + 128LL), v19 == ( tree_node *)*( &global_trees + 27)) )']
['v27 = mode_class_0[v26];']
['v35 = mode_class_0[v34];', 'v3 = mode_class_0[v2];', 'v3 = mode_class_0[v2];']
['rtx v9; // r15', 'rtx v90; // r15']
['rtx v13; // rbp', 'rtx v16; // rbp', 'rtx v60; // rbp', 'rtx v14; // rbx', 'rtx v19; // rbp', 'rtx v12; // rbp', 'rtx v34; // rbp', 'rtx v34; // rbp', 'rtx v121; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v30; // rbp', 'rtx v10; // rbx', 'rtx v13; // rbp', 'rtx v44; // rbp', 'rtx v13; // rbp', 'rtx v106; // rbx']
['rtx v51; // r12', 'rtx v8; // r12', 'rtx v15; // r12', 'rtx v18; // r15', 'rtx v98; // r12', 'rtx v15; // r12', 'rtx v16; // r12', 'rtx v11; // r15']
['v14 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v13] - 5) < 2) + 1;', 'v14 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v13] - 5) < 2) + 1;']
['v30 = nonzero_bits( *( rtx *)( v1->fld[0].rtwint + 8), ( machine_mode)v29);']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['v16 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v14] - 5) < 2) + 1;']
['*( _OWORD *)&v4[v5].const_rtx = 0LL;']
['reg_eqv_table[reg] = ( reg_eqv_elem)-1LL;']
['v16 = *( ( _DWORD *)uid_cuid_0 + rtint);', 'v22 = *( ( _DWORD *)uid_cuid_0 + rtint);']
['|| *( ( _DWORD *)uid_cuid_0 + *v10) < cse_basic_block_start)']
['&& v11 > *( ( _DWORD *)uid_cuid_0 + *( int *)( reg_n_info->data.l[first_reg] + 4)))) )']
['if ( v10 == ( ( unsigned int)( mode_class_0[v15] - 5) < 2) + 1 )']
['v14 = adjust_address_1( v14, ( machine_mode)v15, 0LL, 1, 1);', 'v16 = adjust_address_1( v16, ( machine_mode)v17, 0LL, 1, 1);']
['v16 = gen_rtx_REG( ( machine_mode)*( ( unsigned __int8 *)v14 + 2), v7);', 'v19 = gen_rtx_REG( ( machine_mode)*( ( unsigned __int8 *)v16 + 2), v7);']
['fatal_insn_not_found( insn, "insn-attrtab.c", 356, "insn_default_length");']
['rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax']
['rtx mem_set_list; // rbp']
['rtx v10; // r14', 'rtx v13; // r14', 'rtx v69; // r14', 'rtx v15; // r14', 'rtx v19; // r13', 'rtx v15; // r14']
['v18 = canon_rtx( rtx);', 'v18 = canon_rtx( rtx);']
['mem_set_list = pbi->mem_set_list;']
['if ( mem_set_list )']
['v19 = v17;']
['v19 = v17;']
['if ( anti_dependence( rtx, mem_set_list->fld[0].rtx) )']
['v25.rtwint = ( __int64)mem_set_list->fld[0];']
['if ( rtx_equal_p( v20->fld[0].rtx, *( rtx *)( v25.rtwint + 8)) )']
['add_dependence( insn, *( rtx *)( i + 8), ( reg_note)*( unsigned __int8 *)( i + 2));']
['fatal_insn_not_found( insn, "insn-attrtab.c", 356, "insn_default_length");']
['v5 = recog_data_0.operand[0];', 'v5 = recog_data_0.operand[0];', 'v5 = recog_data_0.operand[0];']
['v5 = recog_data_0.operand[0];', 'v5 = recog_data_0.operand[0];', 'v5 = recog_data_0.operand[0];']
['v5 = recog_data_0.operand[0];', 'v5 = recog_data_0.operand[0];', 'v5 = recog_data_0.operand[0];']
['rtx v45; // rax']
['rtx v46; // rax', 'rtx v46; // rax']
['rtx v47; // rax']
['rtx v48; // rax']
['rtx v51; // rax', 'rtx v51; // rax', 'rtx v51; // rax']
['rtx v52; // rax']
['rtx v53; // rax']
['rtx *v52; // rax', 'rtx *v25; // rax', 'rtx v55; // rax', 'rtx *v51; // rax', 'rtx v55; // rax', 'rtx v55; // rax', 'rtx v55; // rax', 'rtx v55; // rax', 'rtx *v55; // rbx']
['rtx v57; // rax']
['rtx v58; // rax']
['fatal_insn_not_found( insn, "insn-attrtab.c", 356, "insn_default_length");']
['rtx v21; // rsi']
['rtx v25; // rax']
['rtx v24; // [rsp+10h] [rbp-38h]']
['v21 = ( rtx)v21[1];', 'v19 = ( rtx)v18[2];']
['if ( *( _WORD *)v19 != 47 )', 'if ( *( _WORD *)v15 != 47 )', 'if ( *( _WORD *)v19 != 47 )', 'if ( *( _WORD *)v16 != 47 )']
['v11 = single_set_2( v37, *( rtx *)&v37[2]);', 'v11 = single_set_2( v37, *( rtx *)&v37[2]);']
['v11 = single_set_2( v37, *( rtx *)&v37[2]);', 'v11 = single_set_2( v37, *( rtx *)&v37[2]);']
['v24 = 0LL;']
['v25 = ( rtx)v25[1];']
['if ( *( _WORD *)v15 != 47 )']
['rtx x; // [rsp+8h] [rbp-40h] BYREF', 'rtx op; // [rsp+18h] [rbp-60h] BYREF', 'rtx insn; // [rsp+8h] [rbp-B0h] BYREF', 'rtx v21; // [rsp+8h] [rbp-40h] BYREF', 'rtx x; // [rsp+8h] [rbp-40h] BYREF', 'rtx psave; // [rsp+8h] [rbp-40h] BYREF']
['arg2[v9] = rtx;']
['v12 = copy_rtx( rtx);', 'v22 = copy_rtx( rtx);']
['subst_stack_regs( v25, &v37);']
['if ( memory_address_p( ( machine_mode)v5, v9) )']
['if ( memory_address_p( ( machine_mode)v5, v9) )']
['subst_stack_regs( v25, &v37);']
['v32->fld[0].rtx);']
['rtx v16; // r12']
['rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx *v19; // rbx', 'rtx *v13; // rbp']
['rtx v48; // rax']
['rtx v51; // rbx', 'rtx *v51; // rax', 'rtx *v59; // rbx', 'rtx *v55; // rbx']
['rtx *v31; // rsi']
['rtx arg1; // [rsp+10h] [rbp-D78h]']
['rtx value; // [rsp+20h] [rbp-48h] BYREF']
['rtx *v75; // [rsp+30h] [rbp-38h]']
['loc = ( rtx *)&x[1];']
['v9 = ( rtx)v5[1];', 'v7 = ( rtx)v7[1];', 'v4 = ( rtx)v4[1];']
['subst_stack_regs( v25, &v37);']
['if ( ( _DWORD)v11 == *( _WORD *)v10 )']
['if ( ( _DWORD)v11 == *( _WORD *)v10 )']
['v3 = ( tree_node *)ggc_alloc( v2);', 'v3 = ( tree_node *)ggc_alloc( v2);', 'v2 = ( tree_node *)ggc_alloc( v1);']
['&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )', '&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )', '&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )', '&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )']
['&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )', '&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )', '&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )', '&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )']
['&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )', '&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )', '&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )', '&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )']
['&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )', '&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )', '&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )', '&& *( _OWORD *)&c->block.vars >= *( _OWORD *)&type->decl.initial->block.vars )']
['v1 = mode_class_0[mode];', 'v1 = mode_class_0[mode];']
['internal_error_function( msgid, ( va_list_0 *)va);']
['( va_list_0 *)va,']
['*( _OWORD *)d.r = *( _OWORD *)&exp->block.vars;']
['*( _OWORD *)d.r = *( _OWORD *)&exp->block.vars;']
['LOBYTE( v14) = canon_hash( x, ( machine_mode)BYTE2( v3));']
['v57 = ( ( unsigned int)( mode_class_0[v56] - 5) < 2) + 1;']
['v29 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v28] - 5) < 2) + 1;']
['*( _OWORD *)&v2->loads = 0LL;']
['v18 = ( unsigned int)( ( unsigned int)( mode_class_0[( unsigned __int8)v17] - 5) < 2) + 1;']
['+ ( unsigned __int16)reverse_condition_maybe_unordered( ( rtx_code)*( unsigned __int16 *)arg1[0])']
['b = gen_rtx_fmt_ee( PLUS, ( machine_mode)*( ( unsigned __int8 *)v3 + 2), v10, v15);']
['n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;']
['v2 = ( __int64)*( &changes + n_operands--);']
['if ( recog_data_0.n_operands <= 0 )']
['v10 = *( unsigned __int16 *)recog_data_0.operand[0];']
['v5 = **( ( _DWORD **)&changes_allocated + v2);']
['fatal_insn( "unknown insn mode", insn, "i386.c", 9956, "ix86_attr_length_immediate_default");']
['if ( *( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)op0 >> 14) & 0x3FC)) == MODE_FLOAT )']
['v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);']
['v7 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), pointer);']
['v8 = adjust_address_1( v7, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), offset, 1, 1);']
['v7 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), pointer);', 'v4 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), pointer);']
['v8 = adjust_address_1( v7, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), offset, 1, 1);', 'v5 = adjust_address_1( v4, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), offset, 1, 1);']
['v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);', 'v6 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);']
['if ( *( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)v5 >> 14) & 0x3FC)) == MODE_FLOAT )']
['v35 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000) == 0) ^ 5), i);']
['v10 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), 2);']
['v12 = gen_rtx_fmt_ee( PLUS, ( machine_mode)v11, global_rtl[4], v10);']
['v15 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), global_rtl[4]);']
['v21 = gen_rtx_fmt_ee( PLUS, ( machine_mode)v11, global_rtl[2], v10);']
['*operands = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), *operands);', '*operands = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), *operands);']
['v22 = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v22);', 'v22 = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v22);']
['*operands = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), *operands);', '*operands = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), *operands);']
['v22 = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v22);', 'v22 = force_reg( ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v22);']
['v29 = reverse_condition_maybe_unordered( ( rtx_code)*( _WORD *)v27);']
['v26 = swap_condition( ( rtx_code)*( _WORD *)operands[1]);']
['if ( *( _OWORD *)arg0 != 0LL )']
['v5 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)*operands + 2));', 'v6 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)*operands + 2));']
['v5 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)*operands + 2));', 'v6 = gen_reg_rtx( ( machine_mode)*( ( unsigned __int8 *)*operands + 2));']
['v8 = gen_rtx_fmt_eee( IF_THEN_ELSE, ( machine_mode)*( ( unsigned __int8 *)*operands + 2), v3, operands[2], operands[3]);']
['( machine_mode)*( ( unsigned __int8 *)*operands + 2),']
['( machine_mode)*( ( unsigned __int8 *)*operands + 2),']
['if ( symbolic_operand( v5, ( machine_mode)operands) )']
['v12 = mode_class_0[mode];', 'v17 = mode_class_0[mode];', 'v1 = mode_class_0[mode];', 'v13 = mode_class_0[mode];', 'v1 = mode_class_0[mode];', 'v10 = mode_class_0[mode];', 'v17 = mode_class_0[mode];', 'v24 = mode_class_0[mode];', 'v18 = mode_class_0[mode];']
['v13 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v12);', 'v2 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v0);', 'v10 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), 2);']
['v27 = gen_rtx_fmt_s( SYMBOL_REF, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), low);']
['if ( *( _OWORD *)arg1 != 0LL )']
['+ ( unsigned __int16)reverse_condition_maybe_unordered( ( rtx_code)*( unsigned __int16 *)arg1[0])']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['result = construct_container( ( machine_mode)v2, valtype, 1, 6, 8, x86_64_int_return_registers, 0);']
['v3 = mode_class_0[v2];', 'v3 = mode_class_0[v2];']
['return gen_rtx_REG( ( machine_mode)v2, v4);']
['v2 = mode_class_0[mode];']
['v1 = mode_class_0[mode];', 'v1 = mode_class_0[mode];']
['if ( ( unsigned __int16)( *( _DWORD *)v4 - 67) < 2u )']
['v15 = mode_class_0[v14];']
['v11 = force_reg( ( machine_mode)BYTE2( v6), op);']
['v12 = mode_class_0[mode];', 'v15 = mode_class_0[v14];', 'v7 = mode_class_0[v6];', 'v32 = mode_class_0[v9];', 'v7 = mode_class_0[v6];', 'v27 = mode_class_0[v26];']
['v3 = mode_class_0[v2];', 'v32 = mode_class_0[v9];', 'v3 = mode_class_0[v2];']
['v5 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v5 = convert_to_mode( ( machine_mode)v7, v5, 1);']
['if ( v10 == ( ( unsigned int)( mode_class_0[v15] - 5) < 2) + 1 )']
['if ( ( ( _DWORD)v4 == 16 || ( _DWORD)v4 == 22 || ( mode_class_0[v4] | 4) == 5) && computed >= 33 )']
['v24 = *( _OWORD *)&args->gp_offset;']
['*( _OWORD *)&v37.top = *( _OWORD *)&aux->top;', '*( _OWORD *)&v37.top = *( _OWORD *)&aux->top;']
['*( _OWORD *)&v37.top = *( _OWORD *)&aux->top;', '*( _OWORD *)&v37.top = *( _OWORD *)&aux->top;']
['*( _OWORD *)&cum->words = 0LL;']
['v24 = *( _OWORD *)&args->gp_offset;']
['*( _OWORD *)&v37.top = *( _OWORD *)&aux->top;', '*( _OWORD *)&v37.top = *( _OWORD *)&aux->top;']
['*( _OWORD *)&v37.top = *( _OWORD *)&aux->top;', '*( _OWORD *)&v37.top = *( _OWORD *)&aux->top;']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v12; // rax']
['rtx x; // [rsp+0h] [rbp-68h] BYREF']
['rtx v21; // [rsp+8h] [rbp-40h] BYREF']
['rtx parts; // [rsp+18h] [rbp-50h] BYREF']
['v14 = copy_rtx( *operands);']
['*operands = v14;']
['*( ( _BYTE *)v14 + 2) = 5 - ( ( target_flags & 0x2000000) == 0);']
['v6 = ix86_split_to_parts( operands[1], &parts, ( machine_mode)*( ( unsigned __int8 *)*operands + 2));']
['v6 = ix86_split_to_parts( operands[1], &parts, ( machine_mode)*( ( unsigned __int8 *)*operands + 2));']
['v6 = ix86_split_to_parts( operands[1], &parts, ( machine_mode)*( ( unsigned __int8 *)*operands + 2));']
['v6 = ix86_split_to_parts( operands[1], &parts, ( machine_mode)*( ( unsigned __int8 *)*operands + 2));']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v12; // rax']
['rtx parts; // [rsp+18h] [rbp-50h] BYREF']
['*operands = v14;']
['n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;']
['split_ti( &op, 1, parts, parts + 1);']
['*operands = v14;']
['rtx v17; // r13']
['rtx v22; // r15', 'rtx v32; // r15', 'rtx v12; // r15', 'rtx v52; // r12']
['rtx memref; // [rsp+8h] [rbp-40h]']
['tree v22; // rax']
['tree v23; // rax', 'tree v23; // rax']
['tree v24; // rax']
['tree v25; // rax']
['tree v26; // [rsp+0h] [rbp-48h]']
['tree v27; // [rsp+8h] [rbp-40h]']
['tree v28; // [rsp+10h] [rbp-38h]']
['return force_reg( ( machine_mode)v3, exp);']
['v4 = gen_reg_rtx( ( machine_mode)v3);']
['( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v7),']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),']
['v7 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v5] - 5) < 2) + 1;']
['v20 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['rtx **v33; // rbx']
['rtx last_value; // rax', 'rtx last_value; // rax']
['v10 = *( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)x >> 14) & 0x3FC));']
['v12 = *( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)val >> 14) & 0x3FC));']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['( machine_mode)*( ( unsigned __int8 *)v7 + 2),', '( machine_mode)*( ( unsigned __int8 *)v7 + 2),', '( machine_mode)*( ( unsigned __int8 *)v7 + 2),']
['( machine_mode)BYTE2( v21));']
['( machine_mode)*( ( unsigned __int8 *)v7 + 2),', '( machine_mode)*( ( unsigned __int8 *)v7 + 2),', '( machine_mode)*( ( unsigned __int8 *)v7 + 2),']
['( machine_mode)BYTE2( v16),']
['&& *( const mode_class *)( ( char *)mode_class_0 + ( ( *( ( _DWORD *)&type->type + 15) >> 7) & 0x1FC)) == MODE_INT )']
['rtx v31; // rax', 'rtx v31; // rax', 'rtx v31; // rax']
['rtx v10; // r14', 'rtx v4; // r14', 'rtx v20; // r14', 'rtx v42; // r14', 'rtx v41; // r14', 'rtx v40; // r12']
['rtx v47; // r12', 'rtx v40; // r12']
['rtx v44; // rax', 'rtx v44; // rax', 'rtx v44; // rax', 'rtx v44; // rax']
['rtx v58; // rbx', 'rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rcx', 'rtx v23; // rbx', 'rtx v20; // rbx', 'rtx v28; // rax', 'rtx v21; // rbx', 'rtx v18; // rbx', 'rtx v22; // rbx']
['rtx v56; // rbx', 'rtx v36; // rax', 'rtx v36; // rcx', 'rtx v35; // rbx', 'rtx v6; // rbx', 'rtx v32; // rbx', 'rtx v36; // rax', 'rtx v96; // rbx', 'rtx v30; // rbx', 'rtx v32; // rbx', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v37; // rbx']
['v13 = gen_rtx_fmt_ee( AND, ( machine_mode)v5, v10, v12);', 'v26 = gen_rtx_fmt_ee( MINUS, ( machine_mode)v10, v12, v27);']
['v21 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), rtx, v14);', 'v27 = gen_rtx_fmt_s( SYMBOL_REF, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), low);']
['v8 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v7);']
['v8 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v7);']
['*( ( _BYTE *)giv + 100) |= 4u;']
['return ix86_GOT_alias_set_set;']
['if ( ix86_GOT_alias_set_set == -1 )']
['if ( ix86_GOT_alias_set_set == -1 )']
['set_mem_align( memory_rtx, v11);']
['v20 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['v19 = gen_jump( v18);']
['v12 = gen_rtx_fmt_i0( REG, ( machine_mode)v5, v14);', 'v13 = gen_rtx_fmt_ee( AND, ( machine_mode)v5, v10, v12);']
['v21 = gen_rtx_fmt_ee( PLUS, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), rtx, v14);']
['if ( ( sch_istable[v6] & 4) == 0 )']
['v5 = 2 * ( ( sch_istable[v6] & 4) == 0) + 8;']
['if ( ( sch_istable[v14] & 4) != 0 || ( sch_istable[v14] & 0x100) != 0 && v5 == 16 )', 'if ( ( sch_istable[v14] & 4) != 0 || ( sch_istable[v14] & 0x100) != 0 && v5 == 16 )']
['if ( ( sch_istable[v14] & 4) != 0 || ( sch_istable[v14] & 0x100) != 0 && v5 == 16 )', 'if ( ( sch_istable[v14] & 4) != 0 || ( sch_istable[v14] & 0x100) != 0 && v5 == 16 )']
['v15 = hex_value[v14];']
['if ( ( sch_istable[( unsigned __int8)v32] & 4) == 0 )', 'if ( ( sch_istable[( unsigned __int8)v32] & 4) == 0 )', 'if ( ( sch_istable[( unsigned __int8)v32] & 4) == 0 )']
['while ( ( sch_istable[( unsigned __int8)v10] & 4) != 0 );']
['if ( ( sch_istable[v6] & 4) == 0 )', 'if ( ( sch_istable[v10] & 4) == 0 )']
['v18 = ( char *)&off_6B55F1;']
['v38 = ( tree)&unk_60D418;', 'v38 = ( tree)&unk_60D428;', 'v24[1] = ( char *)&unk_6D4017;', 'v18 = ( char *)&off_63B9CA;', 'v18 = ( char *)&off_6B55F1;']
['v10 = ( tree_node *)*( &global_trees + 11);', 'v14 = ( tree_node *)*( &global_trees + 16);', 'v14 = ( tree_node *)*( &global_trees + 17);', 'v8 = ( tree_node *)*( &global_trees + 1);']
['rtx in_reg; // rax']
['rtx rtwint; // rax']
['v10 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), 2);', 'v20 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);']
['bitmap_copy( v12->global_live_at_start, target->global_live_at_start);']
['*( _OWORD *)&reload_inherited[32] = 0LL;']
['*( _OWORD *)&reload_inherited[160] = 0LL;']
['*( _OWORD *)result->bits = 0LL;', '*( _OWORD *)retstr->r = 0LL;']
['insns = get_insns( );']
['if ( in )']
['rtwint = 0LL;', 'rtwint = v10;', 'rtwint = v10;', 'rtwint = v10;', 'rtwint = v13;']
['rtwint = 0LL;', 'rtwint = v10;', 'rtwint = v10;', 'rtwint = v10;', 'rtwint = v13;']
['v8.rtwint = ( __int64)v6[1].fld[0];']
['if ( ( unsigned __int16)( *( _DWORD *)dst - 65) >= 2u )']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['list_head = mem_loc_descriptor( rtx, ( machine_mode)BYTE2( v18));']
['rtx v10; // r14', 'rtx v13; // r14', 'rtx v15; // r14', 'rtx v16; // r15', 'rtx v16; // r12', 'rtx v15; // r14']
['rtx v25; // rax']
['rtx v26; // rax', 'rtx v26; // rax', 'rtx v26; // rax']
['rtx v32; // rax', 'rtx v32; // rax']
['rtx v12; // rax', 'rtx v22; // rax', 'rtx v46; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v41; // rax', 'rtx v42; // rdx', 'rtx v46; // rax', 'rtx v12; // rax', 'rtx v32; // rax', 'rtx v47; // rax', 'rtx v22; // rax', 'rtx v4; // rax', 'rtx v22; // rax', 'rtx v40; // rax', 'rtx v44; // rax', 'rtx v82; // rax', 'rtx v12; // rax', 'rtx v49; // rax', 'rtx v32; // rax', 'rtx v41; // rax', 'rtx v45; // rax', 'rtx v40; // rax', 'rtx v42; // rdx', 'rtx v52; // rax', 'rtx v44; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v40; // rax', 'rtx v22; // rax', 'rtx v40; // rax', 'rtx v44; // rax', 'rtx v40; // rax', 'rtx v44; // rax', 'rtx v48; // rax', 'rtx v49; // rax', 'rtx v40; // rax']
['rtx v43; // rcx']
['*( _OWORD *)&loc->offset = 0LL;']
['v15 = *( tree_node **)&f[2 * v6 + 2];']
['values = *( tree_node **)&f[2 * v7 + 2];']
['v15 = *( tree_node **)&f[2 * v6 + 2];']
['v15 = *( tree_node **)&f[2 * v6 + 2];']
['LODWORD( indirect) = file_table_0.table;']
['if ( !LODWORD( file_table_0.table)']
['|| strcmp( file_name, *( const char **)( cfa_temp.offset + 8LL * LODWORD( file_table_0.table))) )']
['LODWORD( file_table_0.table) = v3;']
['LODWORD( file_table_0.table) = v3;']
['fwrite( *( ( const void **)&ptr + ( __int16)v5), 7uLL, 1uLL, file);']
['rtx v65; // rax', 'rtx v65; // rax']
['rtx v17; // rax', 'rtx v7; // rax', 'rtx v17; // rax', 'rtx v7; // rax', 'rtx v27; // rax', 'rtx v47; // rax', 'rtx v70; // rax', 'rtx v57; // rax', 'rtx v17; // rax', 'rtx v27; // rax', 'rtx v70; // rax', 'rtx v78; // rax', 'rtx v27; // rax', 'rtx v74; // rax', 'rtx v75; // rax', 'rtx v27; // rax', 'rtx v17; // rax', 'rtx v27; // rax', 'rtx v70; // rax', 'rtx v77; // rcx', 'rtx v67; // rax', 'rtx v73; // rax']
['rtx v78; // rax']
['rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v9; // rbp', 'rtx v19; // rbp', 'rtx v7; // rbp']
['rtx v31; // rax', 'rtx v41; // rax', 'rtx v31; // rax', 'rtx v21; // rax', 'rtx v31; // rax', 'rtx v82; // rax', 'rtx v86; // rax', 'rtx v88; // rax', 'rtx v41; // rax', 'rtx v51; // rax', 'rtx v8; // rax', 'rtx v11; // rax', 'rtx v8; // rax', 'rtx v88; // rax', 'rtx v51; // rax', 'rtx v21; // rax', 'rtx v51; // rax', 'rtx v8; // rax', 'rtx v85; // rax']
['rtx v19; // rax', 'rtx v59; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v19; // rax', 'rtx v82; // rax', 'rtx v86; // rax', 'rtx v19; // rax', 'rtx v49; // rax', 'rtx v29; // rax', 'rtx v69; // rax', 'rtx v88; // rax', 'rtx v19; // rax', 'rtx v8; // rax', 'rtx v8; // rax', 'rtx v88; // rax', 'rtx v9; // rax', 'rtx v29; // rax', 'rtx v49; // rax', 'rtx v8; // rax', 'rtx v85; // rax']
['rtx v36; // rdi', 'rtx v20; // rdi', 'rtx v21; // rsi', 'rtx v41; // rdx', 'rtx v30; // rdi', 'rtx v54; // rdi', 'rtx v16; // rdi']
['rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx v10; // rax', 'rtx v17; // rcx', 'rtx v17; // rax', 'rtx v12; // rdx', 'rtx v10; // rax', 'rtx v10; // rbx', 'rtx v10; // rax', 'rtx v19; // rdx', 'rtx v106; // rbx']
['rtx *reg; // [rsp+8h] [rbp-60h]']
['v6 = expand_mult_add( b, reg, m, a, ( machine_mode)*( ( unsigned __int8 *)reg + 2), 1);', 'v6 = expand_mult_add( b, reg, m, a, ( machine_mode)*( ( unsigned __int8 *)reg + 2), 1);']
['v6 = expand_mult_add( b, reg, m, a, ( machine_mode)*( ( unsigned __int8 *)reg + 2), 1);', 'v6 = expand_mult_add( b, reg, m, a, ( machine_mode)*( ( unsigned __int8 *)reg + 2), 1);']
['v6 = expand_mult_add( b, reg, m, a, ( machine_mode)*( ( unsigned __int8 *)reg + 2), 1);', 'v6 = expand_mult_add( b, reg, m, a, ( machine_mode)*( ( unsigned __int8 *)reg + 2), 1);']
['rtx v10; // rax', 'rtx v12; // rdx', 'rtx v10; // rax', 'rtx v10; // rbx', 'rtx v10; // rax', 'rtx v19; // rdx']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v14; // rbx', 'rtx v12; // rbp', 'rtx v32; // rbx', 'rtx v18; // rbx', 'rtx v12; // rax', 'rtx v32; // rbx', 'rtx v19; // rbx', 'rtx v15; // rbx', 'rtx v22; // rbx', 'rtx v12; // rdx', 'rtx v10; // rbx']
['rtx result; // rax', 'rtx real_insn; // rax', 'rtx bit_field; // rax', 'rtx result; // rax', 'rtx fixed_bit_field; // rax', 'rtx base_value; // rax', 'rtx *single_use_1; // rax', 'rtx *single_use; // rax', 'rtx new_reg; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx mult_val; // rax', 'rtx add_val; // rcx', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx *single_use; // rax', 'rtx fixed_bit_field; // rax', 'rtx flags_user; // rax']
['rtx v22; // rbx']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rax']
['rtx v41; // r15', 'rtx v32; // r15', 'rtx v34; // r15', 'rtx v11; // r15']
['rtx last_insn; // rax', 'rtx last_insn; // rax']
['rtx v7; // rax', 'rtx v5; // rax', 'rtx v7; // rax', 'rtx v3; // rax', 'rtx v4; // rax', 'rtx v8; // rax', 'rtx v8; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v9; // rax', 'rtx v5; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v8; // rax']
['v20 = gen_rtx_REG( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), i);']
['rtx compound_operation; // rbx']
['rtx v27; // rbp', 'rtx v27; // rbp']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rax']
['rtx rtwint; // rax', 'rtx *rtwint; // rdi']
['rtx v26; // rax', 'rtx v46; // rax', 'rtx v56; // rbx', 'rtx v5; // rax', 'rtx v36; // rax', 'rtx v46; // rax', 'rtx v54; // rax', 'rtx v58; // rax', 'rtx v59; // rax', 'rtx v26; // rax', 'rtx v57; // rax', 'rtx v55; // rax', 'rtx v36; // rax', 'rtx v53; // rax', 'rtx v55; // rax', 'rtx v86; // rax', 'rtx v56; // rdx', 'rtx v66; // rax', 'rtx v52; // rax', 'rtx v55; // rax', 'rtx v51; // rax', 'rtx v51; // rax', 'rtx v55; // rax', 'rtx v5; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v55; // rax', 'rtx v26; // rax', 'rtx v51; // rax']
['rtx *v63; // rbp']
['rtx insn; // [rsp+18h] [rbp-40h]', 'rtx mult1a; // [rsp+8h] [rbp-70h]', 'rtx *rega; // [rsp+8h] [rbp-60h]']
['result = adjust_address_1( v3, ( machine_mode)*( ( unsigned __int8 *)ad + 2), 0LL, 0, 1);', 'result = adjust_address_1( v3, ( machine_mode)*( ( unsigned __int8 *)ad + 2), 0LL, 0, 1);']
['v27 = gen_rtx_fmt_s( SYMBOL_REF, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), low);']
['if ( ix86_hard_regno_mode_ok( v9, ( machine_mode)v11) )']
['v14 = gen_rtx_fmt_i0( REG, ( machine_mode)LOBYTE( decl->block.supercontext), reg_number);']
['v22 = ( ( unsigned int)( mode_class_0[v20] - 5) < 2) + 1;']
['rtx v12; // rax', 'rtx v12; // rsi', 'rtx v12; // rax', 'rtx v12; // rbp', 'rtx v12; // rax', 'rtx v12; // r15', 'rtx v12; // rdx']
['rtx v18; // rax', 'rtx v18; // rbx', 'rtx v18; // rcx', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v12; // rdx', 'rtx v19; // rdx', 'rtx v18; // rax']
['rtx v121; // rbp']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rax']
['rtx v29; // r12']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['result = adjust_address_1( v3, ( machine_mode)*( ( unsigned __int8 *)ad + 2), 0LL, 0, 1);', 'result = adjust_address_1( v3, ( machine_mode)*( ( unsigned __int8 *)ad + 2), 0LL, 0, 1);']
['result = adjust_address_1( v3, ( machine_mode)*( ( unsigned __int8 *)ad + 2), 0LL, 0, 1);', 'result = adjust_address_1( v3, ( machine_mode)*( ( unsigned __int8 *)ad + 2), 0LL, 0, 1);']
['if ( result == reg_equiv_memory_loc[regno] )']
['return copy_rtx( result);']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['v3 = ( tree_node *)ggc_alloc( v2);', 'v3 = ( tree_node *)ggc_alloc( v2);']
['v6 = transp_0[src->index];']
['tree v26; // r12']
['tree v23; // rax', 'tree v22; // rax', 'tree v23; // rax', 'tree v24; // rax', 'tree v25; // rax', 'tree v27; // rax', 'tree v8; // rax']
['v2 = ( tree_node *)ggc_alloc( v1);']
['rtx v5; // r14']
['rtx v7; // r14']
['rtx v8; // r15', 'rtx v8; // r15']
['v5 = gen_rtx_fmt_u00( LABEL_REF, VOIDmode, v4);']
['mark_jump_label( v5, rtx, 0);']
['*( _QWORD *)( *( _QWORD *)&rtx[2] + 32LL) = v5->fld[0].rtwint;']
['if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )']
['v4 = reg_note;', 'v4 = reg_note;']
['v4 = reg_note;', 'v4 = reg_note;']
['v5 = ( ( unsigned int)( mode_class_0[v4] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[v4] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[v4] - 5) < 2) + 1;']
['v10 = ( ( unsigned int)( mode_class_0[v9] - 5) < 2) + 1;']
['v22 = ( ( unsigned int)( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg_rtx)] - 5) < 2) + 1;']
['v18 = ( ( unsigned int)( mode_class_0[v15] - 5) < 2) + 1;']
['v13 = immed_double_const( cnst1, v12, ( machine_mode)v10);']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['v5 = ( ( unsigned int)( mode_class_0[v3] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[v3] - 5) < 2) + 1;', 'v4 = ( ( unsigned int)( mode_class_0[v3] - 5) < 2) + 1;']
['v6 = ( ( unsigned int)( mode_class_0[v5] - 5) < 2) + 1;']
['v13 = immed_double_const( cnst1, v12, ( machine_mode)v10);', 'v19 = force_const_mem( ( machine_mode)*( ( unsigned __int8 *)x + 2), *( rtx *)&x[1]);', 'v19 = force_const_mem( ( machine_mode)*( ( unsigned __int8 *)x + 2), *( rtx *)&x[1]);']
['v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);', 'v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['v8 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['rtx mem_set_list; // rbp']
['rtx v20; // r14']
['rtx mem_set_list; // rbp']
['rtx v32; // r12', 'rtx v33; // r13', 'rtx *v13; // r13', 'rtx v32; // r15', 'rtx *v32; // rsi', 'rtx *v92; // r14']
['rtx v13; // rbp', 'rtx v34; // rbp', 'rtx v31; // rbp', 'rtx v34; // rbp', 'rtx v37; // rbp', 'rtx v32; // rbp', 'rtx v63; // rbp', 'rtx v37; // rbp', 'rtx v23; // rbp', 'rtx v30; // rbp', 'rtx v13; // rbp', 'rtx v13; // rbp']
['rtx v3; // r14', 'rtx v34; // r14', 'rtx v15; // r14', 'rtx v5; // r14', 'rtx v15; // r14']
['rtx *v67; // rax']
['rtx v39; // r12']
['rtx v50; // rbx', 'rtx v20; // rbx', 'rtx v60; // rbx', 'rtx v40; // rax', 'rtx v80; // rbx', 'rtx v80; // rbx', 'rtx v30; // rbx', 'rtx v40; // rax', 'rtx v50; // rbx', 'rtx v10; // rbx', 'rtx v4; // rbx', 'rtx v45; // rbx', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax']
['rtx *single_use; // rax', 'rtx *single_use; // rax']
['mark_set_1( pbi, ( rtx_code)( unsigned __int16)v12, *( ( rtx *)v11 + 1), v7, insn, pbi->flags);']
['mark_set_1( pbi, ( rtx_code)( unsigned __int16)v8, v4->fld[0].rtx, v7, insn, pbi->flags);']
['v7 = ( ( unsigned int)( mode_class_0[v6] - 5) < 2) + 1;']
['rtx v16; // rbp']
['rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx *v67; // rax', 'rtx *v11; // rax', 'rtx *v17; // rcx', 'rtx v17; // rax', 'rtx *v11; // rax', 'rtx *v17; // rbx']
['rtx v51; // r12', 'rtx v25; // r12', 'rtx v22; // r12', 'rtx v25; // r12', 'rtx v29; // r12']
['rtx v20; // r14', 'rtx v42; // r14', 'rtx v22; // r12', 'rtx v22; // r15']
['rtx *v25; // rax', 'rtx v23; // rax', 'rtx *v22; // rax', 'rtx v23; // rax', 'rtx *v20; // rax', 'rtx *v23; // rdx', 'rtx *v21; // rax']
['rtx v30; // rbx']
['rtx v27; // [rsp+8h] [rbp-60h]', 'rtx v31; // [rsp+8h] [rbp-70h]']
['rtx v33; // [rsp+10h] [rbp-48h]']
['rtx v35; // [rsp+10h] [rbp-38h]']
['rtx *listp; // [rsp+28h] [rbp-50h]']
['listp = &pbi->mem_set_list;']
['v83 = insn;', 'val = insn;', 'v17 = insn;', 'v17 = insn;']
['v16 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v14] - 5) < 2) + 1;']
['v30 = nonzero_bits( *( rtx *)( v1->fld[0].rtwint + 8), ( machine_mode)v29);']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['if ( mode_class_0[BYTE2( v3)] == MODE_FLOAT']
['|| *( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)x->fld[0].rtwint >> 14) & 0x3FC)) == MODE_FLOAT )']
['if ( *( const mode_class *)( ( char *)mode_class_0 + v4) == MODE_FLOAT )']
['if ( *( const mode_class *)( ( char *)mode_class_0 + ( ( v14 >> 14) & 0x3FC)) == MODE_FLOAT']
['v9 = ( const char *)&off_63AA3B;']
['induction_1 *giv; // rcx', 'induction_1 *giv; // rcx', 'induction_1 *giv; // rcx', 'induction_1 *giv; // rcx']
['induction_1 *giv; // rcx', 'induction_1 *giv; // rcx', 'induction_1 *giv; // rcx', 'induction_1 *giv; // rcx']
['induction_1 *v24; // r14', 'induction_1 *v24; // r14']
['induction_1 *v24; // r14', 'induction_1 *v24; // r14']
['rtx mult_val; // rax']
['rtx v28; // rax', 'rtx v28; // rax', 'rtx v28; // rax']
['rtx add_val; // rcx']
['induction_1 *biv; // rbx', 'induction_1 *biv; // rbx', 'induction_1 *biv; // rax', 'induction_1 *biv; // rax']
['induction_1 *biv; // rbx', 'induction_1 *biv; // rbx', 'induction_1 *biv; // rax', 'induction_1 *biv; // rax']
['rtx *v32; // rsi']
['rtx v36; // rdi', 'rtx v30; // rdi']
['rtx v38; // rax', 'rtx v36; // rcx', 'rtx v28; // rcx', 'rtx v38; // rax', 'rtx v8; // rcx', 'rtx v18; // rcx', 'rtx v37; // rcx', 'rtx v38; // rax', 'rtx v35; // rcx']
['if ( ( sch_istable[v6] & 4) == 0 )']
['if ( ( sch_istable[*( unsigned __int8 *)v9] & 4) != 0 )']
['while ( ( sch_istable[( unsigned __int8)v10] & 4) != 0 );']
['rtx const_rtx; // rbp']
['v14 = eliminate_constant_term( v5, &arg1);']
['if ( ( unsigned __int16)( *( _DWORD *)dst - 65) >= 2u )']
['if ( *( _WORD *)recog_data_0.operand[0] == 67 )', 'if ( *( _WORD *)recog_data_0.operand[0] == 67 )']
['v8 = avoid_constant_pool_reference( rtx);']
['v13 = sge_plus_constant( v6, c);']
['v8 = avoid_constant_pool_reference( rtx);']
['v8 = avoid_constant_pool_reference( rtx);']
['high = ( unsigned __int8 *)p_int_cst;']
['v2.rtwint = ( __int64)reg_note->fld[0];']
['list_head[0] = mem_loc_descriptor( rtx->fld[0].rtx, ( machine_mode)BYTE2( v4));']
['rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax']
['rtx v51; // rbx', 'rtx v14; // rbx', 'rtx v21; // rbx', 'rtx v18; // rbx', 'rtx v19; // rbx', 'rtx v15; // rbx', 'rtx v61; // rbx', 'rtx v11; // rax', 'rtx v10; // rbx']
['rtx v106; // rbx']
['rtx data; // [rsp+10h] [rbp-48h] BYREF', 'rtx earliest; // [rsp+10h] [rbp-38h] BYREF']
['v26 = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target));']
['v26 = gen_reg_rtx( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)target));']
['v18 = force_const_mem( v15, v17);']
['if ( v5 && v19 )', 'if ( v6 == v2 )']
['emit_move_insn( v14, src);']
['arg1 = const_int_rtx[64];']
['v14 = eliminate_constant_term( v5, &arg1);']
['rtx *v21; // r14']
['rtx v27; // rbp', 'rtx v27; // rbp']
['rtx v41; // r15', 'rtx v42; // r14', 'rtx v22; // r15', 'rtx v32; // r15', 'rtx v12; // r15']
['v21 = v20->fld[0].rtx;']
['v21 = ( rtx)v21[1];']
['v18 = canon_rtx( rtx);', 'v18 = canon_rtx( rtx);']
['v15 = y->fld[0].rtx;']
['v6 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v7] - 5) < 2) + 1;']
['v2 = ( tree_node *)ggc_alloc( v1);']
['rtx v59; // r12', 'rtx v98; // r12', 'rtx v29; // r12', 'rtx v39; // r12']
['rtx v14; // rax', 'rtx v14; // rax', 'rtx v14; // rax']
['v9 = ( rtx)v5[1];']
['if ( *( _WORD *)v3 == 37 )', 'if ( *( _WORD *)v3 == 37 )']
['v9 = a->end;']
['*( _OWORD *)&b->pred = 0LL;', '*( _OWORD *)&b->pred = 0LL;']
['delete_insn( v4);']
['v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['v5 = v4;']
['end = v9;']
['while ( v3 != rtx );', 'while ( v3 != rtx );']
['v18 = v15->fld[0].rtx;', 'v8 = v7->fld[0].rtx;']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['error_with_decl( decl, &off_6E2FF0[4]);']
['if ( in_section_0 != in_bss )', 'if ( in_section_0 != in_text )']
['in_section_0 = in_bss;', 'in_section_0 = in_text;']
['v8 = operand_sub*(short *)0xforce( x, i, mode);']
['operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;', 'operand = insn_data_0[insn_code].operand;']
['rtx v24; // rax', 'rtx v64; // rcx', 'rtx v28; // rcx', 'rtx v21; // rcx', 'rtx v24; // rax', 'rtx v24; // rax', 'rtx v27; // rcx', 'rtx v24; // rax', 'rtx v20; // rcx', 'rtx v22; // rcx', 'rtx v24; // rax', 'rtx v26; // rcx']
['rtx v30; // rdi', 'rtx v38; // rsi', 'rtx v60; // rsi']
['rtx v42; // rdx', 'rtx v32; // rax', 'rtx v32; // rbx', 'rtx v32; // rbx', 'rtx v32; // rax', 'rtx v42; // rdx', 'rtx v12; // rdx', 'rtx v34; // rdx']
['rtx *v59; // rbx']
['rtx v60; // rax']
['rtx v47; // [rsp+10h] [rbp-58h]', 'rtx v24; // [rsp+10h] [rbp-38h]', 'rtx v34; // [rsp+10h] [rbp-38h]', 'rtx v63; // [rsp+10h] [rbp-48h]', 'rtx v28; // [rsp+10h] [rbp-58h]', 'rtx v62; // [rsp+10h] [rbp-68h]']
['rtx *v48; // [rsp+28h] [rbp-40h]']
['rtx v19; // [rsp+0h] [rbp-38h] BYREF', 'rtx v68; // [rsp+40h] [rbp-38h] BYREF', 'rtx v19; // [rsp+0h] [rbp-38h] BYREF']
['v48 = pdest;', 'v48 = pdest;']
['v83 = insn;', 'val = insn;', 'v17 = insn;', 'v17 = insn;']
['tmps = v6;', 'insn = i;']
['tmps = v6;', 'to = v18;', 'rtx = v8;']
['rtx v9; // r13', 'rtx v8; // r13', 'rtx v8; // r13']
['rtx v9; // rbp']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v12; // rax']
['rtx regno_note; // rbp']
['rtx *v93; // rcx', 'rtx *v59; // rbx', 'rtx *v15; // rcx', 'rtx *v56; // rcx', 'rtx *v58; // rcx', 'rtx v35; // rcx']
['for ( i = ( __int64)v3[3]; i; i = *( _QWORD *)( i + 16) )']
['for ( i = ( __int64)v3[3]; i; i = *( _QWORD *)( i + 16) )']
['v6 = *( _DWORD *)v4;']
['v6 = *( _DWORD *)v4;']
['( machine_mode)( unsigned __int8)BYTE2( *v24),']
['( machine_mode)BYTE2( v3))]']
['*( _DWORD *)v7 = v8;', '*( _DWORD *)v7 = v9;']
['v6 = rtx;', 'v4 = rtx;']
['warning( ( &off_6C5140)[code - 1], v3);']
['if ( in_section_0 != in_named || strcmp( name, in_named_name) )']
['in_section_0 = v2;']
['return ++new_alias_set_last_alias_set;']
['*( ( _OWORD *)object_base + 1) = 0LL;']
['v14 = gen_rtx_fmt_ee( code, ( machine_mode)*( ( unsigned __int8 *)if_info->cond + 2), cmp_a, cmp_b);']
['v15 = gen_rtx_fmt_eee( IF_THEN_ELSE, ( machine_mode)*( ( unsigned __int8 *)x + 2), v14, vtrue, vfalse);']
['if ( !general_operand( cmp_a, ( machine_mode)*( ( unsigned __int8 *)cmp_a + 2))']
['|| !general_operand( cmp_b, ( machine_mode)*( ( unsigned __int8 *)cmp_b + 2)) )']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['v12 = gen_rtx_fmt_ee( v11, ( machine_mode)*( ( unsigned __int8 *)x + 2), cond->fld[0].rtx, *( rtx *)&cond[1]);']
['rtx reg_equal_equiv_note; // rax']
['rtx v23; // rax', 'rtx v23; // rax']
['rtx v25; // rax']
['rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax']
['rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v29; // rax']
['rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax']
['rtx v56; // rbx', 'rtx v58; // rbx', 'rtx *v27; // rbx', 'rtx v51; // rbx', 'rtx v50; // rbx', 'rtx v35; // rbx', 'rtx v6; // rbx', 'rtx v14; // rbx', 'rtx v23; // rbx', 'rtx v20; // rbx', 'rtx v21; // rbx', 'rtx v60; // rbx', 'rtx v32; // rbx', 'rtx v80; // rbx', 'rtx *v25; // rbx', 'rtx v65; // rbx', 'rtx v80; // rbx', 'rtx v96; // rbx', 'rtx v18; // rbx', 'rtx v30; // rbx', 'rtx v55; // rbx', 'rtx v32; // rbx', 'rtx v19; // rbx', 'rtx v15; // rbx', 'rtx *v59; // rbx', 'rtx v50; // rbx', 'rtx v61; // rbx', 'rtx i; // rbx', 'rtx i; // rbx', 'rtx *v19; // rbx', 'rtx v22; // rbx', 'rtx *v17; // rbx', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v10; // rbx', 'rtx i; // rbx', 'rtx v4; // rbx', 'rtx v45; // rbx', 'rtx v37; // rbx', 'rtx *v43; // rbx', 'rtx *v55; // rbx', 'rtx v74; // rbx', 'rtx v97; // rbx', 'rtx v106; // rbx']
['rtx v13; // rbp', 'rtx v34; // rbp', 'rtx v31; // rbp', 'rtx v34; // rbp', 'rtx v37; // rbp', 'rtx v32; // rbp', 'rtx v63; // rbp', 'rtx v37; // rbp', 'rtx v23; // rbp', 'rtx v30; // rbp', 'rtx v13; // rbp', 'rtx v13; // rbp']
['rtx v34; // rax']
['rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax']
['rtx i; // rbx', 'rtx i; // rbx', 'rtx i; // rbx']
['if ( ( _WORD)v7 == 61 && *( const mode_class *)( ( char *)mode_class_0 + ( ( v7 >> 14) & 0x3FC)) == MODE_INT )']
['if ( ( _WORD)v7 == 61 && *( const mode_class *)( ( char *)mode_class_0 + ( ( v7 >> 14) & 0x3FC)) == MODE_INT )']
['v17 = canonicalize_condition( jump, ( rtx)v5, reverse, earliest, v15);']
['if ( !v18 )']
['v13 = v12;', 'v13 = v12;', 'v14 = v13;', 'v19 = v17;', 'v19 = v12;', 'v20 = v18;', 'v20 = v18;', 'v12 = v11;', 'v12 = v8;']
['for ( ; v9 != end; v9 = v9[1].fld[0].rtx )', 'for ( ; v9 != end; v9 = v9[1].fld[0].rtx )', 'for ( ; v9 != end; v9 = v9[1].fld[0].rtx )']
['for ( ; v9 != end; v9 = v9[1].fld[0].rtx )', 'for ( ; v9 != end; v9 = v9[1].fld[0].rtx )', 'for ( ; v9 != end; v9 = v9[1].fld[0].rtx )']
['for ( ; v9 != end; v9 = v9[1].fld[0].rtx )', 'for ( ; v9 != end; v9 = v9[1].fld[0].rtx )', 'for ( ; v9 != end; v9 = v9[1].fld[0].rtx )']
['v5 = mode_class_0[v2];']
['if ( mode == VOIDmode || ( v4 & 0xFF0000) != 0 || ( mode_class_0[mode] | 2) == 3 )']
['rtx v48; // rbp', 'rtx v12; // rbp', 'rtx v52; // rbp', 'rtx v32; // rbp', 'rtx v44; // rbp', 'rtx v48; // rbp']
['rtx v46; // rax', 'rtx v42; // rdx', 'rtx v46; // rax', 'rtx v41; // rdx', 'rtx v56; // rdx', 'rtx v42; // rdx']
['rtx **v47; // rsi']
['rtx v20; // rax', 'rtx v60; // rax', 'rtx v5; // rax', 'rtx v54; // rax', 'rtx v58; // rax', 'rtx v30; // rax', 'rtx v59; // rax', 'rtx v50; // rbx', 'rtx v30; // rax', 'rtx v70; // rax', 'rtx v20; // rax', 'rtx v20; // rax', 'rtx v57; // rax', 'rtx v10; // rax', 'rtx v30; // rax', 'rtx v40; // rax', 'rtx v55; // rax', 'rtx v53; // rax', 'rtx v55; // rax', 'rtx v70; // rax', 'rtx v40; // rax', 'rtx v50; // rbx', 'rtx v52; // rax', 'rtx v55; // rax', 'rtx v20; // rax', 'rtx v51; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v70; // rax', 'rtx v40; // rax', 'rtx v51; // rax', 'rtx v55; // rax', 'rtx v5; // rax', 'rtx v40; // rax', 'rtx v55; // rax', 'rtx v30; // rax', 'rtx v40; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v51; // rax', 'rtx v40; // rax']
['rtx v12; // rax', 'rtx v22; // rax', 'rtx v60; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v62; // rcx', 'rtx v12; // rax', 'rtx v32; // rax', 'rtx v22; // rax', 'rtx v64; // rax', 'rtx v22; // rax', 'rtx v65; // rax', 'rtx v63; // rax', 'rtx v82; // rax', 'rtx v64; // rax', 'rtx v12; // rax', 'rtx v65; // rax', 'rtx v66; // rax', 'rtx v69; // rax', 'rtx v32; // rax', 'rtx v52; // rax', 'rtx v67; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v22; // rax']
['rtx v60; // rbp', 'rtx v34; // rbp', 'rtx v61; // rbp', 'rtx v34; // rbp', 'rtx v67; // rbp', 'rtx v63; // rbp', 'rtx v44; // rbp']
['rtx v60; // rax', 'rtx v38; // rax', 'rtx v28; // rax', 'rtx v18; // rax', 'rtx v28; // rax', 'rtx v58; // rax', 'rtx v64; // rax', 'rtx v28; // rax', 'rtx v38; // rax', 'rtx v65; // rax', 'rtx v63; // rax', 'rtx v78; // rax', 'rtx v64; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v65; // rax', 'rtx v66; // rax', 'rtx v69; // rax', 'rtx v88; // rax', 'rtx v8; // rax', 'rtx v18; // rax', 'rtx v8; // rax', 'rtx v88; // rax', 'rtx v67; // rax', 'rtx v18; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v48; // rax', 'rtx v8; // rax', 'rtx v38; // rax']
['rtx v7; // rax', 'rtx v7; // rax', 'rtx v31; // rax', 'rtx v41; // rax', 'rtx v70; // rax', 'rtx v31; // rax', 'rtx v70; // rax', 'rtx v21; // rax', 'rtx v31; // rax', 'rtx v78; // rax', 'rtx v74; // rax', 'rtx v75; // rax', 'rtx v41; // rax', 'rtx v51; // rax', 'rtx v11; // rax', 'rtx v70; // rax', 'rtx v51; // rax', 'rtx v73; // rax', 'rtx v21; // rax', 'rtx v51; // rax']
['rtx v20; // rax', 'rtx v60; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v70; // rax', 'rtx v20; // rax', 'rtx v20; // rax', 'rtx v10; // rax', 'rtx v30; // rax', 'rtx v40; // rax', 'rtx v80; // rbx', 'rtx v70; // rax', 'rtx v80; // rbx', 'rtx v82; // rax', 'rtx v86; // rax', 'rtx v88; // rax', 'rtx v40; // rax', 'rtx v20; // rax', 'rtx v8; // rax', 'rtx v8; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v70; // rax', 'rtx v88; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v30; // rax', 'rtx v40; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v8; // rax', 'rtx v85; // rax', 'rtx v40; // rax']
['v5 = mode_class_0[v2];', 'v3 = mode_class_0[v2];', 'v4 = mode_class_0[v3];', 'v7 = mode_class_0[v6];', 'v7 = mode_class_0[v2];', 'v9 = mode_class_0[v5];', 'v7 = mode_class_0[v6];', 'v3 = mode_class_0[v2];']
['v10 = mode_class_0[mode];']
['&& ( ~*( _QWORD *)( v6 + 8) & nonzero_bits( x->fld[0].rtx, ( machine_mode)v4)) == 0']
['v35 = nonzero_bits( ( rtx)rtwint, ( machine_mode)v4);']
['if ( mode_class_0[v2] == MODE_INT )']
['rtx cond_earliest; // rbx']
['mem_set_list = pbi->mem_set_list;']
['if ( mem_set_list )']
['while ( constructor_stack_0->implicit )', 'while ( constructor_stack_0->implicit )', 'while ( constructor_stack_0->implicit )']
['mem_set_list = pbi->mem_set_list;']
['if ( mem_set_list )']
['rtx last_value; // rax', 'rtx last_value; // rax']
['v5 = mode_class_0[v2];', 'v3 = mode_class_0[v2];', 'v10 = mode_class_0[mode];', 'v7 = mode_class_0[v2];', 'v3 = mode_class_0[v2];']
['v31 = mode_class_0[v8];', 'v9 = mode_class_0[v5];']
['last_value = get_last_value( x);']
['if ( last_value )', 'if ( last_value )']
['if ( *( _WORD *)last_value == 74 )']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ext_dependent),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ext_dependent),']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx));']
['v45 = last_value;']
['if ( push_operand( x, ( machine_mode)*( ( unsigned __int8 *)x + 2)) )']
['v13 = immed_double_const( cnst1, v12, ( machine_mode)v10);']
['v35 = nonzero_bits( ( rtx)rtwint, ( machine_mode)v4);']
['v30 = nonzero_bits( *( rtx *)( v1->fld[0].rtwint + 8), ( machine_mode)v29);']
['if ( *( _OWORD *)&alias == 0LL && !offset )', 'if ( *( _WORD *)op == 66 && !offsettable_memref_p( op) )', 'if ( *( _WORD *)op == 66 && !offsettable_memref_p( op) )']
['rtx v7; // r14']
['rtx *v11; // rax', 'rtx *v11; // rax']
['rtx *v11; // rax', 'rtx *v11; // rax']
['v5 = simplify_gen_binary( PLUS, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), rtx, offset);']
['if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)memref + 2), v5)']
['v6 = force_reg( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx), rtx);']
['v5 = simplify_gen_binary( PLUS, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v6, offset);']
['v8 = change_address_1( memref, VOIDmode, v5, 1);']
['v4 = ( tree_node *)ggc_alloc( 0x28uLL);']
['src = v12;', 'to = v18;', '*v14 = v19;', 'loc = v39;', 'loc = v39;']
['*( ( _OWORD *)v4 + 1) = 0LL;']
['v16 = v3;']
['v19 = v17;', '*v14 = v19;']
['*( _QWORD *)&v6[1] = v8;']
['return v7;']
['rtx v16; // [rsp+0h] [rbp-38h] BYREF', 'rtx v19; // [rsp+0h] [rbp-38h] BYREF', 'rtx v19; // [rsp+0h] [rbp-38h] BYREF']
['v20 = v19;', 'v28 = v63;', 'v28 = v63;', 'v28 = v63;', 'v28 = v63;', 'v20 = v18;', 'v20 = v18;', 'v10 = v33;']
['v19 = y;']
['if ( ( unsigned __int16)v6 == 75 && ( constant_term_loc = find_constant_term_loc( &v19)) != 0LL )']
['v19 = *constant_term_loc;']
['*v14 = v19;']
['return offsettable_address_p( 0, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)op), op->fld[0].rtx) != 0;']
['timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);']
['timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);']
['( machine_mode)*( unsigned __int8 *)( v9.rtwint + 2),']
['( machine_mode)BYTE2( v3));', '( machine_mode)BYTE2( v5));']
['( machine_mode)*( unsigned __int8 *)( v10.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v1.rtwint + 2),']
['( machine_mode)BYTE2( v16));']
['rtx v52; // rbp', 'rtx v51; // rbp']
['v35 = bmap[*( int *)( v34->data.l[v32->insn->fld[0].rtint] + 88)];']
['if ( !v5 )']
['v5 = uid_cuid_1;']
['v16 = *( ( _DWORD *)uid_cuid_0 + rtint);', 'v22 = *( ( _DWORD *)uid_cuid_0 + rtint);']
['v21.rtwint = ( __int64)v20->fld[0];', 'v19.rtwint = ( __int64)v18->fld[0];']
['v9 = ( rtx)v5[1];']
['if ( !v5 )']
['v5 = uid_cuid_1;']
['rtx v6; // rbx']
['v35 = bmap[*( int *)( v34->data.l[v32->insn->fld[0].rtint] + 88)];', 'v39 = bmap[*( int *)( v38->data.l[v36->insn->fld[0].rtint] + 88)];']
['if ( v36 )']
['v5 = uid_cuid_1;']
['v8 = *( ( _DWORD *)uid_cuid_0 + insn->fld[0].rtint);', 'v3 = *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint);']
['v19.rtwint = ( __int64)v18->fld[0];']
['recog_data_0.operand[0] = rtx;', 'recog_data_0.operand[1] = rtx;', 'recog_data_0.operand[1] = rtx;']
['recog_data_0.n_alternatives = 0;', 'v13 = sge_plus_constant( v6, c);']
['if ( mem_set_list )']
['v9 = ( rtx)v5[1];', 'v7 = ( rtx)v7[1];', 'v4 = ( rtx)v4[1];']
['if ( !v16 )']
['v5 = uid_cuid_1;']
['if ( reg_avail_info_0[x->fld[0].rtuint].last_bb != current_bb )']
['return reg_avail_info_0[x->fld[0].rtuint].last_set < *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint);', 'return reg_avail_info_0[x->fld[0].rtuint].last_set < *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint);']
['return reg_avail_info_0[x->fld[0].rtuint].last_set < *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint);', 'return reg_avail_info_0[x->fld[0].rtuint].last_set < *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint);']
['return reg_avail_info_0[x->fld[0].rtuint].first_set >= *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint);', 'return reg_avail_info_0[x->fld[0].rtuint].first_set >= *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint);']
['return reg_avail_info_0[x->fld[0].rtuint].first_set >= *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint);', 'return reg_avail_info_0[x->fld[0].rtuint].first_set >= *( ( _DWORD *)uid_cuid_1 + insn->fld[0].rtint);']
['v27 = mode_class_0[v26];']
['if ( v22 != mode_class_0[v23] )']
['*( _OWORD *)v85 = 0LL;', '*( _OWORD *)v78 = 0LL;', '*( _OWORD *)xi = 0LL;', '*( _OWORD *)v27 = 0LL;', '*( _OWORD *)v25 = 0LL;', '*( _OWORD *)v24 = 0LL;', '*( _OWORD *)v22 = 0LL;']
['*( _OWORD *)v85 = 0LL;', '*( _OWORD *)v78 = 0LL;', '*( _OWORD *)xi = 0LL;', '*( _OWORD *)v27 = 0LL;', '*( _OWORD *)v25 = 0LL;', '*( _OWORD *)v24 = 0LL;', '*( _OWORD *)v22 = 0LL;']
['lang_hooks_0.tree_inlining.add_pending_fn_decls( &va, v7);']
['v25 = ( tree_node *)*( &global_trees + 12);']
['v10 = ( tree_node *)*( &global_trees + 11);', 'v25 = ( tree_node *)*( &global_trees + 12);']
['v17 = rtvec_alloc( rtvec->num_elem);']
['v17 = rtvec_alloc( rtvec->num_elem);']
['in_section_0 = in_bss;', 'htab_delete( hash_table_0);']
['cfa_temp_0 = -1LL;']
['v29 = rtx_equal_p( *( rtx *)( v28 + 16), recog_data_0.operand[3]);', 'v44 = rtx_equal_p( *( rtx *)( v43 + 16), recog_data_0.operand[2]);', 'v13 = rtx_equal_p( *( rtx *)( v12 + 16), recog_data_0.operand[2]);']
['v19 = (  struct rtx_def *)v15[1];']
['in_section_0 = in_bss;']
['v9 = costs_0;']
['v6 = transp_0[src->index];']
['edge_list_0 = pre_edge_lcm( gcse_file, n_exprs, transp, comp, antloc, ae_kill, &pre_insert_map, &pre_delete_map);']
['edge_list_0 = pre_edge_lcm( gcse_file, n_exprs, transp, comp, antloc, ae_kill, &pre_insert_map, &pre_delete_map);']
['edge_list_0 = pre_edge_lcm( gcse_file, n_exprs, transp, comp, antloc, ae_kill, &pre_insert_map, &pre_delete_map);']
['if ( ( sch_istable[v36] & 4) != 0 )', 'if ( ( sch_istable[v2] & 4) != 0 )', 'if ( ( sch_istable[v10] & 4) == 0 )']
['v6 = transp_0[src->index];']
['free( reg_pref_0);']
['free( reg_pref_0);']
['free( reg_pref_0);']
['rtx v38; // rax', 'rtx v38; // rax', 'rtx v38; // rax']
['rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax']
['rtx v48; // rbp', 'rtx v31; // rbp', 'rtx v61; // rbp', 'rtx v44; // rbp', 'rtx v51; // rbp', 'rtx v48; // rbp']
['rtx v12; // rax', 'rtx v22; // rax', 'rtx v46; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v41; // rax', 'rtx v42; // rdx', 'rtx v46; // rax', 'rtx v12; // rax', 'rtx v32; // rax', 'rtx v47; // rax', 'rtx v22; // rax', 'rtx v4; // rax', 'rtx v22; // rax', 'rtx v40; // rax', 'rtx v44; // rax', 'rtx v82; // rax', 'rtx v12; // rax', 'rtx v49; // rax', 'rtx v32; // rax', 'rtx v41; // rax', 'rtx v45; // rax', 'rtx v40; // rax', 'rtx v42; // rdx', 'rtx v52; // rax', 'rtx v44; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v40; // rax', 'rtx v22; // rax', 'rtx v40; // rax', 'rtx v44; // rax', 'rtx v40; // rax', 'rtx v44; // rax', 'rtx v48; // rax', 'rtx v49; // rax', 'rtx v40; // rax']
['rtx v45; // rax']
['rtx v48; // rbp', 'rtx v48; // rbp']
['rtx v49; // rax', 'rtx v49; // rax']
['rtx v53; // rax']
['rtx v54; // rax']
['elements = lang_hooks_0.expand_constant( exp);']
['v6 = ( tree_node *)high[4];', 'v7 = ( tree_node *)high[4];']
['rtx v30; // rdi', 'rtx v38; // rsi', 'rtx v60; // rsi']
['rtx v31; // rax', 'rtx v31; // rax', 'rtx v31; // rax']
['rtx v36; // rdi', 'rtx v16; // rsi', 'rtx v38; // rsi']
['rtx v17; // rax', 'rtx v7; // rax', 'rtx v17; // rax', 'rtx v38; // rax', 'rtx v7; // rax', 'rtx v36; // rax', 'rtx v31; // rax', 'rtx v30; // rax', 'rtx v32; // rax', 'rtx v3; // rax', 'rtx v27; // rax', 'rtx v34; // rax', 'rtx v47; // rax', 'rtx v30; // rax', 'rtx v31; // rax', 'rtx v38; // rax', 'rtx v57; // rax', 'rtx v17; // rax', 'rtx v27; // rax', 'rtx v30; // rax', 'rtx v36; // rax', 'rtx v31; // rax', 'rtx v37; // rcx', 'rtx v27; // rax', 'rtx v35; // rax', 'rtx v27; // rax', 'rtx v32; // rax', 'rtx v33; // rax', 'rtx v17; // rax', 'rtx v27; // rax', 'rtx v67; // rax', 'rtx v37; // rbx', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v38; // rax']
['rtx v38; // rax', 'rtx v19; // rax', 'rtx v36; // rax', 'rtx v31; // rax', 'rtx v30; // rax', 'rtx v59; // rax', 'rtx v29; // rax', 'rtx v32; // rax', 'rtx v3; // rax', 'rtx v34; // rax', 'rtx v30; // rax', 'rtx v29; // rax', 'rtx v29; // rax', 'rtx v31; // rax', 'rtx v38; // rax', 'rtx v19; // rax', 'rtx v30; // rax', 'rtx v36; // rax', 'rtx v31; // rax', 'rtx v19; // rax', 'rtx v49; // rax', 'rtx v29; // rax', 'rtx v69; // rax', 'rtx v35; // rax', 'rtx v32; // rax', 'rtx v33; // rax', 'rtx v19; // rax', 'rtx v9; // rax', 'rtx v29; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v49; // rax', 'rtx v30; // rax', 'rtx v38; // rax']
['rtx ops[16]; // [rsp+100h] [rbp-1A8h] BYREF']
['v2 = ( __int64)flags_user[2];']
['if ( !LODWORD( file_table_0.table)']
['fprintf( asm_out_file, &off_607A24[1], ( unsigned int)insn_counter);']
['v12 = sch_istable[( unsigned __int8)v7];']
['if ( ( sch_istable[*( ( unsigned __int8 *)v2 + 2)] & 4) == 0 )']
['rtint = this_insn_1[2].fld[0].rtint;']
['if ( insn_data_0[rtint].n_operands >= 2 )']
['fprintf( asm_out_file, &off_607A24[1], ( unsigned int)insn_counter);', 'fprintf( outfile, off_607A24, *( unsigned int *)( v14.rtwint + 8));']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['v6 = lang_hooks_0.expand_constant( exp);']
['if ( in_section_0 != in_text )']
['fprintf( asm_out_file, ( const char *)&off_6E2E28 + 4, "\\t.zero\\t", ( unsigned int)size);']
['if ( in_section_0 != in_text )']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['rtl = gen_rtx_MEM( ( machine_mode)v7, v8);']
['if ( in_section_0 != in_data )']
['if ( in_section_0 != in_bss )', 'if ( in_section_0 != in_text )']
['in_section_0 = in_bss;', 'in_section_0 = in_text;']
['if ( in_section_0 != in_bss )', 'if ( in_section_0 != in_text )']
['if ( in_section_0 != in_data )']
['in_section_0 = in_data;']
['if ( in_section_0 != in_bss )', 'if ( in_section_0 != in_text )']
['in_section_0 = in_bss;', 'in_section_0 = in_text;']
['v12 = negate_rtx( ( machine_mode)BYTE2( v5), *( rtx *)&value[1]);']
['*( _OWORD *)&emit->x_first_insn = 0LL;']
['v6 = ( tree_node *)high[4];', 'v7 = ( tree_node *)high[4];']
['if ( in_section_0 != in_text )']
['fprintf( asm_out_file, ( const char *)&off_6E2E28 + 4, "\\t.zero\\t", ( unsigned int)size);']
['if ( in_section_0 != in_text )']
['fprintf( asm_out_file, ( const char *)&off_6E2E28 + 4, "\\t.zero\\t", ( unsigned int)size);']
['if ( in_section_0 != in_text )']
['fprintf( asm_out_file, ( const char *)&off_6E2E28 + 4, "\\t.zero\\t", ( unsigned int)size);']
['if ( in_section_0 != in_text )']
['fprintf( asm_out_file, ( const char *)&off_6E2E28 + 4, "\\t.zero\\t", ( unsigned int)size);']
['sprintf( v16, &off_607A24[1], v7);']
['sprintf( v7, "*.%s%u", ( const char *)&off_629E39, current_funcdef_number);']
['sprintf( v27, off_6C5406, v37);']
['sprintf( v16, &off_607A24[1], v7);']
['sprintf( v27, off_6C5406, v37);']
['v11 = ( tree_node *)v10;']
['v7 = *( _OWORD *)&buffer->state.diagnostic_count[4];']
['v3 = *( _OWORD *)&buffer->state.prefix;']
['v4 = *( _OWORD *)&buffer->state.indent_skip;']
['v5 = *( _OWORD *)&buffer->state.cursor;']
['v6 = *( _OWORD *)buffer->state.diagnostic_count;']
['*( _OWORD *)&buffer->state.cursor = v5;']
['diagnostic_buffer->state.format_args = ( va_list_0 *)va;']
['*( _OWORD *)&buffer->state.diagnostic_count[4] = v7;']
['*( _OWORD *)buffer->state.diagnostic_count = v6;']
['if ( apply_args_size_size < 0 )', 'if ( !size_int_type_wide_size_htab )']
['if ( apply_args_size_size < 0 )', 'if ( !size_int_type_wide_size_htab )']
['count_error_warning_message = 1;']
['if ( ( sch_istable[v18] & 0x88) == 0 )']
['while ( v4 == 46 || ( sch_istable[v4] & 0x204) != 0 );']
['if ( ( _DWORD)v4 != 46 && ( sch_istable[( unsigned __int8)v4] & 0x204) == 0 )']
['if ( ( sch_istable[( unsigned __int8)v11] & 0x400) != 0 )', 'if ( ( sch_istable[( unsigned __int8)v10] & 0xC00) == 0 )']
['if ( ( sch_istable[( unsigned __int8)v3] & 0x400) != 0 )']
['( va_list_0 *)va,']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['( va_list_0 *)va,']
['v2 = spelling_0;']
['if ( spelling_base < spelling_0 )', 'if ( spelling_base < spelling_0 )']
['v2 = spelling_0;']
['diagnostic_for_decl( decl, msgid, ( va_list_0 *)va, flag_pedantic_errors == 0);']
['( va_list_0 *)va,']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['if ( !peep2_insn_data_0[v5].insn )', 'if ( !peep2_insn_data_0[v5].insn )']
['reg_set_to_hard_reg_set( &v32, peep2_insn_data_0[v5].live_before);', 'reg_set_to_hard_reg_set( &v33, peep2_insn_data_0[v5].live_before);']
['if ( !peep2_insn_data_0[v5].insn )', 'if ( !peep2_insn_data_0[v5].insn )']
['reg_set_to_hard_reg_set( &v32, peep2_insn_data_0[v5].live_before);', 'reg_set_to_hard_reg_set( &v33, peep2_insn_data_0[v5].live_before);']
['v15 = peep2_find_free_register_search_ofs + i - 53;']
['if ( peep2_find_free_register_search_ofs + i <= 52 )']
['v15 = peep2_find_free_register_search_ofs + i;']
['peep2_find_free_register_search_ofs = 0;']
['v13 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v11 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v13 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v3 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v22 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v3 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v3 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v20 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v24 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v13 = immed_double_const( cnst1, v12, ( machine_mode)v10);']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['insn = peep2_insn_data_0[v1].insn;']
['if ( !peep2_insn_data_0[v3].insn )', 'if ( !peep2_insn_data_0[v3].insn )']
['v6 = ( ( unsigned int)( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg)] - 5) < 2) + 1;']
['if ( !peep2_insn_data_0[v3].insn )', 'if ( !peep2_insn_data_0[v3].insn )']
['recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;']
['result = gen_peephole2_1251( insn, recog_data_0.operand);']
['result = gen_peephole2_1246( insn, recog_data_0.operand);', 'result = gen_peephole2_1249( insn, recog_data_0.operand);', 'result = gen_peephole2_1252( insn, recog_data_0.operand);', 'result = gen_peephole2_1245( insn, recog_data_0.operand);', 'result = gen_peephole2_1248( insn, recog_data_0.operand);', 'result = gen_peephole2_1251( insn, recog_data_0.operand);', 'result = gen_peephole2_1208( insn, recog_data_0.operand);']
['result = gen_peephole2_1245( insn, recog_data_0.operand);']
['result = gen_peephole2_1246( insn, recog_data_0.operand);']
['result = gen_peephole2_1246( insn, recog_data_0.operand);', 'result = gen_peephole2_1249( insn, recog_data_0.operand);', 'result = gen_peephole2_1252( insn, recog_data_0.operand);', 'result = gen_peephole2_1245( insn, recog_data_0.operand);', 'result = gen_peephole2_1248( insn, recog_data_0.operand);', 'result = gen_peephole2_1251( insn, recog_data_0.operand);', 'result = gen_peephole2_1208( insn, recog_data_0.operand);']
['result = gen_peephole2_1246( insn, recog_data_0.operand);']
['result = gen_peephole2_1245( insn, recog_data_0.operand);']
['result = gen_peephole2_1246( insn, recog_data_0.operand);', 'result = gen_peephole2_1249( insn, recog_data_0.operand);', 'result = gen_peephole2_1252( insn, recog_data_0.operand);', 'result = gen_peephole2_1245( insn, recog_data_0.operand);', 'result = gen_peephole2_1248( insn, recog_data_0.operand);', 'result = gen_peephole2_1251( insn, recog_data_0.operand);', 'result = gen_peephole2_1208( insn, recog_data_0.operand);']
['result = gen_peephole2_1251( insn, recog_data_0.operand);']
['result = gen_peephole2_1252( insn, recog_data_0.operand);']
['recog_data_0.operand[0] = v6;', 'recog_data_0.operand[0] = v13;', 'recog_data_0.operand[0] = v33;']
['recog_data_0.operand[2] = ( rtx)v23;', 'recog_data_0.operand[2] = ( rtx)v23;', 'recog_data_0.operand[2] = ( rtx)v23;', 'recog_data_0.operand[2] = ( rtx)v23;', 'recog_data_0.operand[1] = ( rtx)v23;']
['if ( rtx_equal_p( v9, recog_data_0.operand[0]) )', 'if ( rtx_equal_p( v9, recog_data_0.operand[0]) )']
['recog_data_0.operand[1] = v22;', 'recog_data_0.operand[1] = v30;', 'recog_data_0.operand[1] = v33;', 'recog_data_0.operand[2] = v34;', 'recog_data_0.operand[1] = v22;', 'recog_data_0.operand[1] = v33;', 'recog_data_0.operand[1] = v22;', 'recog_data_0.operand[1] = v30;', 'recog_data_0.operand[1] = v30;', 'recog_data_0.operand[1] = v21;', 'recog_data_0.operand[1] = v21;', 'recog_data_0.operand[3] = v24;', 'recog_data_0.operand[1] = v4;', 'recog_data_0.operand[1] = v33;', 'recog_data_0.operand[1] = v13;', 'recog_data_0.operand[1] = v39;', 'recog_data_0.operand[2] = v24;', 'recog_data_0.operand[1] = v32;']
['v12->global_live_at_end = bitmap_initialize( ( bitmap)v15);']
['v12->global_live_at_end = bitmap_initialize( ( bitmap)v15);']
['v12->global_live_at_end = bitmap_initialize( ( bitmap)v15);']
['v12->global_live_at_end = bitmap_initialize( ( bitmap)v15);']
['v12->global_live_at_end = bitmap_initialize( ( bitmap)v15);']
['recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;']
['recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;']
['recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;']
['recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;']
['if ( !peep2_insn_data_0[v5].insn )', 'if ( !peep2_insn_data_0[v5].insn )', 'if ( !peep2_insn_data_0[v3].insn )', 'if ( !peep2_insn_data_0[v3].insn )']
['reg_set_to_hard_reg_set( &v32, peep2_insn_data_0[v5].live_before);', 'reg_set_to_hard_reg_set( &v33, peep2_insn_data_0[v5].live_before);']
['if ( !peep2_insn_data_0[v5].insn )', 'if ( !peep2_insn_data_0[v5].insn )', 'if ( !peep2_insn_data_0[v3].insn )', 'if ( !peep2_insn_data_0[v3].insn )']
['if ( !peep2_insn_data_0[v5].insn )', 'if ( !peep2_insn_data_0[v5].insn )', 'if ( !peep2_insn_data_0[v3].insn )', 'if ( !peep2_insn_data_0[v3].insn )']
['insn = peep2_insn_data_0[v1].insn;']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx),']
['if ( !peep2_insn_data_0[v5].insn )', 'if ( !peep2_insn_data_0[v5].insn )', 'if ( !peep2_insn_data_0[v3].insn )', 'if ( !peep2_insn_data_0[v3].insn )']
['rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp']
['rtx x; // [rsp+8h] [rbp-40h] BYREF', 'rtx arg1; // [rsp+0h] [rbp-38h] BYREF', 'rtx v21; // [rsp+8h] [rbp-40h] BYREF', 'rtx x; // [rsp+8h] [rbp-40h] BYREF']
['rtx p; // [rsp+18h] [rbp-30h] BYREF']
['p = x;']
['add_double( *( _QWORD *)&x[1], x[1].fld[0].rtwint, v3, v3 >> 63, ( unsigned __int64 *)&v21, &i1);']
['return immed_double_const( ( __int64)v21, i1, VOIDmode);']
['v18 = force_const_mem( v15, v17);']
['if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v18 + 2), v18->fld[0].rtx) )', 'if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v18 + 2), v18->fld[0].rtx) )', 'if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v18 + 2), v18->fld[0].rtx) )']
['if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v18 + 2), v18->fld[0].rtx) )', 'if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v18 + 2), v18->fld[0].rtx) )', 'if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v18 + 2), v18->fld[0].rtx) )']
['if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v18 + 2), v18->fld[0].rtx) )', 'if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v18 + 2), v18->fld[0].rtx) )', 'if ( !memory_address_p( ( machine_mode)*( ( unsigned __int8 *)v18 + 2), v18->fld[0].rtx) )']
['return v18;']
['v19 = *constant_term_loc;']
['v2 = constructor_stack_0;']
['v2 = constructor_stack_0;']
['if ( constructor_range_stack_0 )', 'if ( constructor_range_stack_0 )']
['v2 = spelling_0;']
['constructor_depth = ( unsigned __int64)( ( char *)spelling_0 - ( char *)spelling_base) >> 4;']
['rtwint = v10;', 'rtwint = v10;', 'rtwint = v10;']
['rtwint = v10;', 'rtwint = v10;', 'rtwint = v10;', 'v28 = v90 + 2;']
['spelling_0 = &spelling_base[constructor_depth];', 'spelling_0 = &spelling_base[constructor_depth];']
['constructor_range_stack_0 = v2->range_stack;']
['spelling_0 = &spelling_base[depth];']
['constructor_stack_0 = v2->next;']
['if ( constructor_stack_0 )']
['if ( *( const mode_class *)( ( char *)mode_class_0 + ( ( **( ( _DWORD **)aux + 6) >> 14) & 0x3FC)) == MODE_FLOAT']
['*( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)v15 >> 14) & 0x3FC)) == MODE_FLOAT) )']
['hitrate = 10000 - predictor_info_0[predictor].hitrate;']
['hitrate = predictor_info_0[predictor].hitrate;']
['*( _OWORD *)&b->local_set = 0LL;']
['*( _OWORD *)&b->global_live_at_start = 0LL;', '*( _OWORD *)&v10->next_same_hash = 0LL;']
['*( _OWORD *)&b->local_set = 0LL;']
['*( _OWORD *)&v16->next_same_value = 0LL;']
['*( _OWORD *)&v4->common.chain = 0LL;', '*( _OWORD *)&v10->next_same_hash = 0LL;']
['if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )']
['n_alternatives = recog_data_0.n_alternatives;']
['v17 = recog_data_0.constraints[v12];']
['v5 = ( reg_class *)( v4 + v3 + 9791416);']
['n_alternatives = recog_data_0.n_alternatives;']
['while ( v2 < recog_data_0.n_alternatives );']
['while ( v1 < recog_data_0.n_operands );', 'while ( v0 < recog_data_0.n_operands );', 'while ( v5 < recog_data_0.n_operands );']
['*( _OWORD *)v85 = 0LL;', '*( _OWORD *)v25 = 0LL;']
['sprintf( str, &off_607A24[1], *( _DWORD *)&x[1]);']
['v18 = ( char *)&off_63B9CA;', 'v18 = ( char *)&off_6B55F1;']
['*( ( _OWORD *)v4 + 1) = 0LL;']
['v18 = ( char *)&off_63B9CA;', 'v18 = ( char *)&off_6B55F1;']
['v18 = ( char *)&off_63B9CA;', 'v18 = ( char *)&off_6B55F1;']
['v8 = ( tree_node *)*( &global_trees + 5);']
['v18 = ( char *)&off_63B9CA;']
['v6 = ( &off_6C5190)[v3];']
['v6 = ( &off_6C5190)[v3];']
['v6 = ( &off_6C5190)[v3];']
['v6 = ( &off_6C5190)[v3];']
['v1 = off_63B09B;']
['fprintf( outfile, off_607A24, *( _DWORD *)&in_rtx[2]);', 'fprintf( outfile, off_607A24, *( _DWORD *)&in_rtx[3]);', 'fprintf( outfile, off_607A24, rtuint);']
['v8 = ( const char *)&unk_6C3BD6;']
['v18 = ( char *)&off_63B9CA;', 'v18 = ( char *)&off_6B55F1;']
['v18 = ( char *)&off_63B9CA;', 'v18 = ( char *)&off_6B55F1;']
['v18 = ( char *)&off_6B55F1;']
['put_condition_code( ( rtx_code)v13, v14, v15, v20, v5);']
['v24 = mode_class_0[v12];']
['v6 = ( const char *)&unk_6DF04A;', 'v7 = ( const char *)&unk_63A188;', 'v7 = ( const char *)&unk_63A188;']
['v6 = ( const char *)&unk_6DF04A;', 'v7 = ( const char *)&unk_63A188;', 'v7 = ( const char *)&unk_63A188;']
['if ( *( _OWORD *)&out.base != 0LL )']
['fprintf( file, off_63A1D6, scale);']
['fprintf( file, off_63A1DA, scale);']
['fprintf( file, off_63A0C3, ( unsigned int)( rtint - 29));']
['rtx v26; // rax', 'rtx v56; // rbx', 'rtx v26; // rbp', 'rtx v6; // rbx', 'rtx v23; // rbx', 'rtx v26; // rbp', 'rtx v20; // rbx', 'rtx v26; // rbp', 'rtx v26; // rax', 'rtx v21; // rbx', 'rtx v96; // rbx', 'rtx v22; // rbx', 'rtx v26; // rax', 'rtx v26; // rcx']
['rtx v43; // rcx']
['rtx *v25; // rax', 'rtx v45; // rax']
['rtx *tmps; // [rsp+20h] [rbp-50h]', 'rtx dst; // [rsp+30h] [rbp-40h]']
['v6 = first;']
['if ( v4 == rtx )', 'if ( v4 == rtx )']
['rtx = x[1].fld[0].rtx;']
['v35 = print_rtx_hi_name[v23];', 'rtl_op = first_rtl_op( ( tree_code)v2);', 'rtl_op = first_rtl_op( ( tree_code)v8);']
['x = rtx;']
['if ( ( v3 & 0xFF0000) == 0 && v4 && ( mode_class_0[v4] | 2) != 3 )']
['if ( ( v3 & 0xFF0000) == 0 && v4 && ( mode_class_0[v4] | 2) != 3 )']
['cfa_temp_0 = rtx->fld[0].rtuint;', 'cfa_temp_0 = rtx->fld[0].rtuint;']
['v6 = tmps;', 'v6 = rtx;']
['rtx i; // rbx', 'rtx i; // rbx', 'rtx i; // rbx']
['for ( i = safe_from_p_save_expr_list; i; i = i->common.chain )']
['for ( i = safe_from_p_save_expr_list; i; i = i->common.chain )']
['for ( i = safe_from_p_save_expr_list; i; i = i->common.chain )']
['v35 = print_rtx_hi_name[in_rtx->fld[0].rtuint];']
['rtx v49; // rax', 'rtx v49; // rax']
['fprintf( outfile, off_607A24, *( _DWORD *)&in_rtx[2]);']
['fprintf( outfile, off_607A24, *( _DWORD *)&in_rtx[3]);']
['v35 = print_rtx_hi_name[v23];']
['v35 = print_rtx_qi_name[v23];']
['v35 = print_rtx_hi_name[v23];']
['fprintf( outfile, off_63A0C3, ( unsigned int)( v23 - 29));']
['fprintf( outfile, off_607A24, rtuint);']
['fprintf( outfile, off_607A24, rtuint);']
['fprintf( outfile, off_607A24);']
['if ( ( sch_istable[*( unsigned __int8 *)v9] & 4) != 0 )']
['sprintf( v27, off_6C5406, v37);']
['sprintf( v14, off_6E3423, *( _DWORD *)&x[1]);']
['sprintf( v14, ( const char *)&off_6D3FF3, *( unsigned int *)( x->fld[0].rtwint + 8));']
['v2 = convert_to_mode( ( machine_mode)v4, size, 1);']
['v14 = gen_rtx_fmt_ee( MINUS, ( machine_mode)v10, v12, v13);']
['v14 = gen_rtx_fmt_ee( MINUS, ( machine_mode)v10, v12, v13);']
['v5 = force_reg( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v5);']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['v2 = constructor_stack_0;']
['if ( constructor_stack_0->replacement_value )', 'if ( constructor_stack_0->replacement_value )']
['v2 = constructor_stack_0;']
['if ( constructor_stack_0->replacement_value )', 'if ( constructor_stack_0->replacement_value )']
['while ( constructor_stack_0->implicit )', 'while ( constructor_stack_0->implicit )', 'while ( constructor_stack_0->implicit )']
['while ( constructor_stack_0->implicit )', 'while ( constructor_stack_0->implicit )', 'while ( constructor_stack_0->implicit )']
['if ( general_operand( v2, ( machine_mode)*( ( unsigned __int8 *)reaching_reg + 2)) )']
['v11 = force_reg( ( machine_mode)BYTE2( v6), op);']
['fatal_insn( "Attempt to delete prologue/epilogue insn:", insn, "flow.c", 1615, "propagate_one_insn");']
['rtx v8; // rax', 'rtx v8; // rax', 'rtx v8; // rax']
['rtx v11; // rax']
['rtx v12; // r15']
['rtx v24; // r15', 'rtx v10; // r15', 'rtx v18; // r15', 'rtx v34; // r15', 'rtx v12; // r15', 'rtx v13; // r15', 'rtx v16; // r15', 'rtx v11; // r15']
['rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax']
['rtx v16; // r12']
['v5 = gen_reg_rtx( ( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['v11 = protect_from_queue( x->fld[0].rtx, 0);']
['if ( v11 != x->fld[0].rtx )']
['v12 = v11;']
['v12 = v11;']
['rtx x; // [rsp+8h] [rbp-40h] BYREF', 'rtx x; // [rsp+8h] [rbp-40h] BYREF']
['rtx data; // [rsp+10h] [rbp-48h] BYREF']
['v62 = ( rtx)v34;', 'operand0 = ( rtx)v9;', 'v15 = ( rtx)y[1];']
['x = insns;']
['arg2[v9] = rtx;']
['for_each_rtx( &x, insns_for_mem_walk, data);']
['for_each_rtx( &x, insns_for_mem_walk, data);']
['rtx = v3;', 'rtx = v8;']
['x = rtx;']
['for ( i = ( __int64)v3[3]; i; i = *( _QWORD *)( i + 16) )']
['recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;']
['rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax']
['rtx v48; // r13', 'rtx v4; // r14', 'rtx v42; // r14', 'rtx v41; // r14', 'rtx v48; // r13']
['rtx v51; // r12', 'rtx v71; // r14', 'rtx v41; // r14', 'rtx v5; // r14']
['rtx v69; // rax']
['rtx v74; // rax']
['rtx v78; // rax']
['rtx v82; // rax']
['( machine_mode)( unsigned __int8)BYTE2( *v24),']
['( machine_mode)BYTE2( v16));']
['v29 = subreg_regno_offset( v23, ( machine_mode)BYTE2( v22), v24, ( machine_mode)BYTE2( v21));', 'v29 = subreg_regno_offset( v23, ( machine_mode)BYTE2( v22), v24, ( machine_mode)BYTE2( v21));']
['v29 = subreg_regno_offset( v23, ( machine_mode)BYTE2( v22), v24, ( machine_mode)BYTE2( v21));', 'v29 = subreg_regno_offset( v23, ( machine_mode)BYTE2( v22), v24, ( machine_mode)BYTE2( v21));']
['rtx v20; // r14', 'rtx v42; // r14']
['rtx v3; // rax']
['v24 = 0LL;', 'v12 = 0LL;']
['v24 = 0LL;', 'v12 = 0LL;', 'v15 = 0LL;', 'v40 = 0LL;', 'v16 = 0LL;']
['v6 = rtx;', 'v4 = rtx;']
['if ( !v20 )', 'if ( !v21 )']
['v6 = rtx;', 'v4 = rtx;']
['if ( *v25 != dest )', 'if ( v23 != loc )', 'if ( v6 == v2 )']
['v6 = rtx;', 'v4 = rtx;']
['rtint = v4[2].fld[0].rtint;']
['v3 = v4;', 'v3 = v4;', 'v3 = v4;', 'v3 = v4;']
['v3 = v4;', 'v3 = v4;', 'v3 = v4;', 'v3 = v4;']
['v2 = v5;', 'v2 = v5;']
['v2 = v5;', 'v2 = v5;']
['v5 = convert_modes( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), ptr_mode, size, 1);']
['v5 = copy_to_mode_reg( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), v5);']
['while ( constructor_stack_0->implicit )', 'while ( constructor_stack_0->implicit )', 'while ( constructor_stack_0->implicit )']
['v7->next = constructor_stack_0;']
['v2 = spelling_0;']
['constructor_depth = ( unsigned __int64)( ( char *)spelling_0 - ( char *)spelling_base) >> 4;']
['constructor_stack_0 = v7;']
['v7->range_stack = constructor_range_stack_0;']
['constructor_range_stack_0 = 0LL;']
['rtwint = v10;', 'rtwint = v10;', 'rtwint = v10;', '*operands = v14;', 'rtwint = v13;', 'stack_0 = v2;']
['v2 = spelling_0;']
['constructor_depth = ( unsigned __int64)( ( char *)spelling_0 - ( char *)spelling_base) >> 4;']
['rtwint = v10;', 'rtwint = v10;', 'rtwint = v10;', '*operands = v14;', 'rtwint = v13;', 'stack_0 = v2;']
['spelling_0 = &spelling_base[depth];']
['rtx v12; // rax', 'rtx v22; // rax', 'rtx v60; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v62; // rcx', 'rtx v12; // rax', 'rtx v32; // rax', 'rtx v22; // rax', 'rtx v64; // rax', 'rtx v22; // rax', 'rtx v65; // rax', 'rtx v63; // rax', 'rtx v82; // rax', 'rtx v64; // rax', 'rtx v12; // rax', 'rtx v65; // rax', 'rtx v66; // rax', 'rtx v69; // rax', 'rtx v32; // rax', 'rtx v52; // rax', 'rtx v67; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v22; // rax']
['*( _OWORD *)v4->bits = *( _OWORD *)first->bits;']
['*( _OWORD *)v4->bits = *( _OWORD *)first->bits;']
['*( _OWORD *)&emit->x_first_insn = 0LL;']
['rtx v5; // rax', 'rtx v5; // rax']
['*( _OWORD *)v4->bits = *( _OWORD *)first->bits;']
['*( _OWORD *)v4->bits = *( _OWORD *)first->bits;']
['*( _OWORD *)&emit->x_first_insn = 0LL;']
['v6 = rtx;', 'v4 = rtx;']
['v21 = last_insn;', 'v21 = last_insn;']
['*( _OWORD *)v4->bits = *( _OWORD *)first->bits;']
['*( _OWORD *)v4->bits = *( _OWORD *)first->bits;']
['*( _OWORD *)&emit->x_first_insn = 0LL;']
['*( _OWORD *)v4->bits = *( _OWORD *)first->bits;']
['*( _OWORD *)v4->bits = *( _OWORD *)first->bits;']
['*( _OWORD *)&e->flags = 0LL;']
['*( _OWORD *)&binding_level->this_block = 0LL;']
['*( _OWORD *)&v2->loads = 0LL;']
['*( _OWORD *)&v4->next = 0LL;', '*( _OWORD *)&v2->loads = 0LL;']
['v18 = ( char *)&off_63B9CA;', 'v18 = ( char *)&off_6B55F1;', 'v11 = ( rtx *)( fld->rtwint + 8);']
['v18 = ( char *)&off_63B9CA;', 'v18 = ( char *)&off_6B55F1;', 'v11 = ( rtx *)( fld->rtwint + 8);']
['v9 = ( const char *)&off_63AA3B;']
['v1 = off_63B09B;', 'v12 = off_6B2B5B;']
['v6 = ( const char *)&unk_6DF0F7;', 'v9 = ( const char *)&unk_63AA42;']
['if ( !operand->predicate( v8, ( machine_mode)*( ( unsigned __int8 *)v8 + 2))', 'make_new_qty( rtint, ( machine_mode)*( ( unsigned __int8 *)x + 2));']
['LODWORD( v5) = ( int)( ( double)( *( int *)( ( char *)&qty_0->size + v5)']
['* *( int *)( ( char *)&qty_0->freq + v5)']
['* floor_log2_wide( *( int *)( ( char *)&qty_0->n_refs + v5)))']
['/ ( double)( *( int *)( ( char *)&qty_0->death + v5) - *( int *)( ( char *)&qty_0->birth + v5))', '/ ( double)( *( int *)( ( char *)&qty_0->death + v5) - *( int *)( ( char *)&qty_0->birth + v5))']
['/ ( double)( *( int *)( ( char *)&qty_0->death + v5) - *( int *)( ( char *)&qty_0->birth + v5))', '/ ( double)( *( int *)( ( char *)&qty_0->death + v5) - *( int *)( ( char *)&qty_0->birth + v5))']
['- ( int)( ( double)( qty_0[v6].size * qty_0[v6].freq * floor_log2_wide( qty_0[v6].n_refs))', '- ( int)( ( double)( qty_0[v6].size * qty_0[v6].freq * floor_log2_wide( qty_0[v6].n_refs))', '- ( int)( ( double)( qty_0[v6].size * qty_0[v6].freq * floor_log2_wide( qty_0[v6].n_refs))']
['- ( int)( ( double)( qty_0[v6].size * qty_0[v6].freq * floor_log2_wide( qty_0[v6].n_refs))', '- ( int)( ( double)( qty_0[v6].size * qty_0[v6].freq * floor_log2_wide( qty_0[v6].n_refs))', '- ( int)( ( double)( qty_0[v6].size * qty_0[v6].freq * floor_log2_wide( qty_0[v6].n_refs))']
['- ( int)( ( double)( qty_0[v6].size * qty_0[v6].freq * floor_log2_wide( qty_0[v6].n_refs))', '- ( int)( ( double)( qty_0[v6].size * qty_0[v6].freq * floor_log2_wide( qty_0[v6].n_refs))', '- ( int)( ( double)( qty_0[v6].size * qty_0[v6].freq * floor_log2_wide( qty_0[v6].n_refs))']
['/ ( double)( qty_0[v6].death - qty_0[v6].birth)', '/ ( double)( qty_0[v6].death - qty_0[v6].birth)']
['/ ( double)( qty_0[v6].death - qty_0[v6].birth)', '/ ( double)( qty_0[v6].death - qty_0[v6].birth)']
['fprintf( file, off_63A1D6, scale);', 'fprintf( file, off_63A1DA, scale);']
['fprintf( file, off_63A1D6, scale);', 'fprintf( file, off_63A1DA, scale);']
['aka = ( tree_node *)prev_try->aka;']
['v15 = ( tree_node *)v13->aka;']
['if ( ( sch_istable[( unsigned __int8)ch_0] & 0xC00) == 0 )']
['while ( ( sch_istable[( unsigned __int8)v7] & 0xC00) == 0 )']
['if ( ( sch_istable[( unsigned __int8)v10] & 0xC00) == 0 )']
['while ( v12 != -1 && ( sch_istable[( unsigned __int8)v12] & 1) != 0 );']
['if ( in_section_0 != in_bss )', 'if ( in_section_0 != in_text )']
['in_section_0 = in_bss;', 'in_section_0 = in_text;']
['*( _OWORD *)d.r = *( _OWORD *)&exp->block.vars;']
['*( _OWORD *)d.r = *( _OWORD *)&exp->block.vars;']
['*( _OWORD *)retstr->r = 0LL;']
['ereal_from_int( retstr, low, high, ( machine_mode)v5);']
['ereal_from_uint( retstr, low, high, ( machine_mode)v5);']
['*( _OWORD *)v10.r = a7;']
['*( _OWORD *)a1 = *( _OWORD *)v8->r;']
['*( _OWORD *)d.r = *( _OWORD *)&exp->block.vars;']
['*( _OWORD *)( xi + 1) = 0LL;', '*( _OWORD *)( aux + 8) = 0LL;']
['constructor_range_stack_0 = v2->range_stack;', 'constructor_stack_0 = v2->next;', 'v7->range_stack = constructor_range_stack_0;']
['constructor_depth = ( unsigned __int64)( ( char *)spelling_0 - ( char *)spelling_base) >> 4;']
['v10 = ( tree_node *)*( &global_trees + 11);', 'arg0 = ( tree_node *)*( &global_trees + 15);', 'arg1 = ( tree_node *)*( &global_trees + 17);', 'imag = ( tree_node *)*( &global_trees + 11);']
['v10 = ( tree_node *)*( &global_trees + 11);', 'v14 = ( tree_node *)*( &global_trees + 17);']
['rtx i; // rbx', 'rtx i; // rbx', 'rtx i; // rbx']
['for ( i = bb->end; i && i != ( rtx)k->head[1]; i = ( rtx)v24[1] )']
['for ( i = bb->end; i && i != ( rtx)k->head[1]; i = ( rtx)v24[1] )']
['for ( i = bb->end; i && i != ( rtx)k->head[1]; i = ( rtx)v24[1] )']
['v21.rtwint = ( __int64)v20->fld[0];', 'v19.rtwint = ( __int64)v18->fld[0];']
['recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;']
['recog_data_0.operand[0] = ( rtx)v18;', 'recog_data_0.operand[0] = ( rtx)v18;']
['recog_data_0.operand[0] = ( rtx)v18;', 'recog_data_0.operand[0] = ( rtx)v18;']
['recog_data_0.operand[0] = v21;']
['recog_data_0.operand[0] = rtx;']
['recog_data_0.operand[1] = v8;']
['recog_data_0.operand[1] = v7;', 'recog_data_0.operand[1] = v7;', 'recog_data_0.operand[1] = v7;']
['recog_data_0.operand[0] = ( rtx)v13;']
['recog_data_0.operand[1] = ( rtx)v4;', 'recog_data_0.operand[1] = ( rtx)v4;', 'recog_data_0.operand[1] = ( rtx)v4;', 'recog_data_0.operand[1] = ( rtx)v4;', 'recog_data_0.operand[1] = ( rtx)v4;']
['recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;']
['|| ( recog_data_0.operand[0] = v9, !ix86_match_ccmode( insn, CCGCmode))', '|| ( recog_data_0.operand[0] = v9, !ix86_match_ccmode( insn, CCGCmode))', '|| ( recog_data_0.operand[0] = v9, !ix86_match_ccmode( insn, CCGCmode))']
['|| ( result = 213LL, recog_data_0.operand[2]->fld[0].rtint == 0x80000000) )']
['recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;']
['recog_data_0.operand[0] = ( rtx)v12;', 'recog_data_0.operand[0] = ( rtx)v12;']
['&& rtx_equal_p( *( rtx *)( v181 + 8), recog_data_0.operand[1])']
['&& rtx_equal_p( *( rtx *)( v181 + 16), recog_data_0.operand[2])']
['v15 = ix86_binary_operator_ok( MINUS, SImode, recog_data_0.operand);', 'v15 = ix86_binary_operator_ok( MINUS, SImode, recog_data_0.operand);', 'v15 = ix86_binary_operator_ok( MINUS, SImode, recog_data_0.operand);']
['recog_data_0.operand[0] = ( rtx)v12;', 'recog_data_0.operand[0] = ( rtx)v12;']
['&& rtx_equal_p( *( rtx *)( v14 + 8), recog_data_0.operand[1])', '&& rtx_equal_p( *( rtx *)( v14 + 8), recog_data_0.operand[1])']
['&& rtx_equal_p( *( rtx *)( v14 + 16), recog_data_0.operand[2])', '&& rtx_equal_p( *( rtx *)( v14 + 16), recog_data_0.operand[2])']
['v15 = ix86_binary_operator_ok( MINUS, SImode, recog_data_0.operand);', 'v15 = ix86_binary_operator_ok( MINUS, SImode, recog_data_0.operand);', 'v15 = ix86_binary_operator_ok( MINUS, SImode, recog_data_0.operand);']
['recog_data_0.operand[1] = v16;', 'recog_data_0.operand[1] = v16;']
['recog_data_0.operand[2] = v17;', 'recog_data_0.operand[2] = v17;', 'recog_data_0.operand[2] = v17;']
['recog_data_0.operand[0] = v185;']
['if ( *( _WORD *)recog_data_0.operand[1] != 66 )', 'if ( *( _WORD *)recog_data_0.operand[1] != 66 )', 'if ( *( _WORD *)recog_data_0.operand[1] != 66 )']
['v17 = recog_data_0.operand[1];', 'v17 = recog_data_0.operand[1];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v7 = recog_data_0.operand[2];', 'v18 = recog_data_0.operand[0];', 'v18 = recog_data_0.operand[0];']
['rtx v64; // rcx', 'rtx v40; // rax', 'rtx v20; // rcx', 'rtx v40; // rax', 'rtx v43; // rcx', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v45; // rcx']
['rtx v13; // rax', 'rtx v10; // rax', 'rtx v123; // rax', 'rtx v18; // rcx', 'rtx v20; // rcx', 'rtx v43; // rcx', 'rtx v17; // rcx', 'rtx v10; // rax', 'rtx v10; // rbx', 'rtx v10; // rax', 'rtx v13; // rax', 'rtx v106; // rbx']
['recog_data_0.operand[0] = v5;']
['recog_data_0.operand[1] = ( rtx)v38;', 'recog_data_0.operand[1] = ( rtx)v48;']
['v13 = rtx_equal_p( *( rtx *)( v12 + 16), recog_data_0.operand[2]);']
['recog_data_0.operand[1] = v19;', 'recog_data_0.operand[1] = v10;', 'recog_data_0.operand[1] = v19;', 'recog_data_0.operand[1] = v10;']
['recog_data_0.operand[2] = v11;']
['if ( ( *( _WORD *)recog_data_0.operand[1] != 66 || *( _WORD *)recog_data_0.operand[2] != 66)', 'if ( ( *( _WORD *)recog_data_0.operand[1] != 66 || *( _WORD *)recog_data_0.operand[2] != 66)']
['recog_data_0.operand[1] = v19;', 'recog_data_0.operand[1] = v16;', 'recog_data_0.operand[1] = v16;', 'recog_data_0.operand[1] = v19;']
['recog_data_0.operand[2] = v17;', 'recog_data_0.operand[2] = v17;', 'recog_data_0.operand[2] = v17;']
['recog_data_0.operand[1] = v21;', 'recog_data_0.operand[1] = v21;']
['recog_data_0.operand[2] = v100;', 'recog_data_0.operand[1] = v22;', 'recog_data_0.operand[2] = v27;', 'recog_data_0.operand[1] = v22;', 'recog_data_0.operand[2] = v92;', 'recog_data_0.operand[2] = v92;', 'recog_data_0.operand[1] = v22;', 'recog_data_0.operand[2] = v27;', 'recog_data_0.operand[0] = v20;', 'recog_data_0.operand[2] = v10;', 'recog_data_0.operand[2] = v52;', 'recog_data_0.operand[2] = v40;', 'recog_data_0.operand[2] = v24;']
['recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v8.rtx;', 'recog_data_0.operand[1] = v8.rtx;']
['recog_data_0.operand[2] = v98;']
['recog_data_0.operand[2] = v100;']
['if ( !rtx_equal_p( *( rtx *)( v34 + 8), recog_data_0.operand[1]) )', 'if ( rtx_equal_p( *( rtx *)( v91 + 8), recog_data_0.operand[1]) )', 'if ( rtx_equal_p( *( rtx *)( v12 + 8), recog_data_0.operand[1]) )']
['recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v8.rtx;', 'recog_data_0.operand[1] = v8.rtx;']
['recog_data_0.operand[2] = v11;']
['recog_data_0.operand[0] = v13;', 'recog_data_0.operand[0] = v12;', 'recog_data_0.operand[0] = v19;', 'recog_data_0.operand[0] = v12;', 'recog_data_0.operand[0] = v19;']
['if ( !rtx_equal_p( *( rtx *)( v34 + 8), recog_data_0.operand[1]) )', 'if ( rtx_equal_p( *( rtx *)( v12 + 8), recog_data_0.operand[1]) )']
['recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v8.rtx;', 'recog_data_0.operand[1] = v8.rtx;']
['recog_data_0.operand[2] = v100;', 'recog_data_0.operand[2] = v10;']
['recog_data_0.operand[2] = v100;', 'recog_data_0.operand[7] = v103;', 'recog_data_0.operand[8] = v109;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[2] = v17;', 'recog_data_0.operand[0] = v13;', 'recog_data_0.operand[2] = v17;', 'recog_data_0.operand[0] = v20;', 'recog_data_0.operand[2] = v17;', 'recog_data_0.operand[0] = v185;', 'recog_data_0.operand[0] = v12;', 'recog_data_0.operand[0] = v19;', 'recog_data_0.operand[0] = v12;', 'recog_data_0.operand[0] = v19;', 'recog_data_0.operand[2] = v10;', 'recog_data_0.operand[0] = v7;', 'recog_data_0.operand[0] = v7;', 'recog_data_0.operand[3] = v10;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v10;', 'recog_data_0.operand[1] = v10;', 'recog_data_0.operand[4] = v17;']
['if ( rtx_equal_p( *( rtx *)( v12 + 8), recog_data_0.operand[1]) )']
['recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v8.rtx;', 'recog_data_0.operand[1] = v8.rtx;']
['recog_data_0.operand[2] = v24;']
['recog_data_0.operand[0] = v21;', 'recog_data_0.operand[2] = v27;', 'recog_data_0.operand[2] = v27;', 'recog_data_0.operand[0] = v20;', 'recog_data_0.operand[0] = v7;', 'recog_data_0.operand[0] = v7;']
['if ( rtx_equal_p( *( rtx *)( v91 + 8), recog_data_0.operand[1]) )', 'if ( rtx_equal_p( *( rtx *)( v43 + 8), recog_data_0.operand[1]) )', 'if ( rtx_equal_p( *( rtx *)( v12 + 8), recog_data_0.operand[1]) )']
['recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v8.rtx;', 'recog_data_0.operand[1] = v8.rtx;', 'recog_data_0.operand[0] = v4.rtx;', 'recog_data_0.operand[0] = v4.rtx;', 'recog_data_0.operand[0] = v4.rtx;']
['recog_data_0.operand[3] = v10;']
['recog_data_0.operand[2] = v100;', 'recog_data_0.operand[0] = v21;', 'recog_data_0.operand[0] = v13;', 'recog_data_0.operand[0] = v20;', 'recog_data_0.operand[0] = v185;', 'recog_data_0.operand[0] = v12;', 'recog_data_0.operand[0] = v19;', 'recog_data_0.operand[0] = v12;', 'recog_data_0.operand[0] = v19;', 'recog_data_0.operand[2] = v10;', 'recog_data_0.operand[3] = v10;', 'recog_data_0.operand[4] = v11;', 'recog_data_0.operand[1] = v10;', 'recog_data_0.operand[2] = v11;', 'recog_data_0.operand[3] = v11;', 'recog_data_0.operand[1] = v10;']
['if ( rtx_equal_p( *( rtx *)( v91 + 8), recog_data_0.operand[1]) )', 'if ( rtx_equal_p( *( rtx *)( v12 + 8), recog_data_0.operand[1]) )']
['recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v12;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v19;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v16;', 'recog_data_0.operand[1] = v16;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v21;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v21;', 'recog_data_0.operand[4] = v11;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v4;', 'recog_data_0.operand[1] = v10;', 'recog_data_0.operand[2] = v11;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v13;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[3] = v11;', 'recog_data_0.operand[1] = v19;', 'recog_data_0.operand[1] = v51;', 'recog_data_0.operand[1] = v10;']
['if ( rtx_equal_p( *( rtx *)( v91 + 8), recog_data_0.operand[1]) )', 'if ( rtx_equal_p( *( rtx *)( v12 + 8), recog_data_0.operand[1]) )']
['recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[1] = v6.rtx;', 'recog_data_0.operand[1] = v8.rtx;', 'recog_data_0.operand[1] = v8.rtx;', 'recog_data_0.operand[0] = v4.rtx;', 'recog_data_0.operand[0] = v4.rtx;', 'recog_data_0.operand[0] = v4.rtx;']
['recog_data_0.operand[3] = v10;']
['recog_data_0.operand[0] = v13;']
['if ( !rtx_equal_p( *( rtx *)( v34 + 8), recog_data_0.operand[1]) )']
['recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v17;']
['if ( !rtx_equal_p( *( rtx *)( v34 + 8), recog_data_0.operand[1]) )', 'if ( rtx_equal_p( *( rtx *)( v12 + 8), recog_data_0.operand[1]) )']
['rtx v28; // [rsp+38h] [rbp-40h]', 'rtx v43; // [rsp+18h] [rbp-40h]']
['recog_data_0.operand[0] = rtx;']
['recog_data_0.operand[1] = v16;', 'recog_data_0.operand[1] = v16;']
['recog_data_0.operand[0] = rtx;']
['recog_data_0.operand[1] = v8;']
['recog_data_0.operand[1] = v8;']
['recog_data_0.operand[0] = rtx;']
['recog_data_0.operand[1] = v22;', 'recog_data_0.operand[1] = v22;', 'recog_data_0.operand[1] = v22;']
['v3 = *( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)x >> 14) & 0x3FC));', 'v12 = *( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)val >> 14) & 0x3FC));']
['recog_data_0.operand[1] = v12;']
['recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v12;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v19;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v16;', 'recog_data_0.operand[1] = v16;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v21;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v21;', 'recog_data_0.operand[4] = v11;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v17;', 'recog_data_0.operand[1] = v10;', 'recog_data_0.operand[2] = v11;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v13;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[3] = v11;', 'recog_data_0.operand[1] = v19;', 'recog_data_0.operand[1] = v51;', 'recog_data_0.operand[1] = v10;']
['frees = undobuf_0.frees;', 'frees = undobuf_0.frees;']
['if ( undobuf_0.frees )', 'if ( undobuf_0.frees )']
['undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;']
['undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;', 'undobuf_0.frees = undobuf_0.frees->next;']
['frees->next = undobuf_0.undos;', 'frees->next = undobuf_0.undos;']
['undobuf_0.undos = frees;', 'undobuf_0.undos = frees;']
['recog_data_0.operand[1] = v33;', 'recog_data_0.operand[1] = v33;', 'recog_data_0.operand[0] = v33;', 'recog_data_0.operand[1] = v33;']
['recog_data_0.n_alternatives = 1;']
['reg_avail_info_0 = 0LL;']
['if ( reg_pref_0 )', 'if ( reg_pref_0 )', 'if ( reg_pref_0 )']
['if ( reg_note && x )']
['regno_note = find_regno_note( this_insn_0, REG_INC, rtint);']
['v3 = reg_set_table[regno];']
['if ( recog_data_0.n_operands && recog_data_0.n_alternatives )', 'if ( recog_data_0.n_operands && recog_data_0.n_alternatives )', 'if ( recog_data_0.n_alternatives && recog_data_0.n_operands )', 'if ( recog_data_0.n_alternatives && recog_data_0.n_operands )']
['if ( recog_data_0.n_operands && recog_data_0.n_alternatives )', 'if ( recog_data_0.n_operands && recog_data_0.n_alternatives )', 'if ( recog_data_0.n_alternatives && recog_data_0.n_operands )', 'if ( recog_data_0.n_alternatives && recog_data_0.n_operands )']
['if ( ++v4 >= recog_data_0.n_operands )']
['v32 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v31] - 5) < 2) + 1;', 'v32 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v31] - 5) < 2) + 1;', 'v34 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v33] - 5) < 2) + 1;', 'v3 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v4] - 5) < 2) + 1;']
['reg_avail_info_0[regno].last_set = v3;']
['reg_avail_info_0 = 0LL;']
['v9 = costs_0;']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;']
['p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;']
['pointer = p_int_cst;']
['v3 = ( tree_node *)v2[1];', 'v4 = ( tree_node *)v2[1];', 'v4 = ( tree_node *)v2[1];']
['v20 = lang_hooks_0.expand_constant( exp);']
['rtx *v21; // r14', 'rtx *v13; // r13', 'rtx *v11; // rax', 'rtx *v11; // rax', 'rtx *v41; // r12', 'rtx v11; // r15']
['rtx *v11; // rax', 'rtx *v11; // rax']
['rtx *v20; // r8']
['rtx v20; // rdi', 'rtx *v24; // r14', 'rtx *v27; // rsi', 'rtx v54; // rdi', 'rtx *v23; // rdx', 'rtx *v12; // rdi', 'rtx *v43; // rdi']
['v8 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v9] - 5) < 2) + 1;']
['v19 = &reg_last_death[rtuint];']
['v19 = &reg_last_death[rtuint];']
['*( _QWORD *)&v6[1] = v8;']
['*( _QWORD *)&v6[1] = v8;']
['*( _QWORD *)&v6[1] = v8;']
['*( _QWORD *)&v6[1] = v8;']
['*( _QWORD *)&v6[1] = v8;']
['*( _QWORD *)&v6[1] = v8;']
['*( _QWORD *)&v6[1] = v8;']
['rtx v15; // rbx']
['rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax']
['rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax']
['rtx *v20; // r8']
['rtx v22; // r12', 'rtx v22; // r15']
['rtx *v27; // rsi']
['rtx *v41; // r12']
['rtx v54; // rax', 'rtx v64; // rcx', 'rtx v57; // rcx']
['rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax']
['rtx v106; // rbx']
['rtx v23; // rax', 'rtx v23; // rax']
['rtx v27; // rbp', 'rtx v26; // rbp', 'rtx v26; // rbp', 'rtx v26; // rbp', 'rtx v34; // rbp', 'rtx v34; // rbp', 'rtx v27; // rbp', 'rtx v23; // rbp', 'rtx v44; // rbp']
['rtx v33; // rax']
['rtx v34; // rax', 'rtx v35; // rbx', 'rtx v14; // rbx', 'rtx v34; // rbp', 'rtx v34; // rbp', 'rtx v32; // rbx', 'rtx v30; // rbx', 'rtx v32; // rbx', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v4; // rbx', 'rtx v37; // rbx', 'rtx v74; // rbx', 'rtx v34; // rdx']
['reg_set_0 **v4; // rcx', 'reg_set_0 **v4; // rcx']
['reg_set_0 **v4; // rcx', 'reg_set_0 **v4; // rcx']
['reg_set_table = ( reg_set_0 **)grealloc( ( char *)reg_set_table, 8 * ( regno + 100));']
['v4 = reg_set_table;']
['v4[regno] = ( reg_set_0 *)object_base;', 'v4[regno] = ( reg_set_0 *)object_base;']
['v4[regno] = ( reg_set_0 *)object_base;', 'v4[regno] = ( reg_set_0 *)object_base;']
['v21 = recog_data_0.operand[v6];']
['v76 = recog_data_0.operand[v75];']
['rtx last_value; // rax', 'rtx last_value; // rax']
['rtx v10; // r13', 'rtx v19; // r13', 'rtx v17; // r13', 'rtx v11; // r15']
['rtx *v15; // rcx']
['rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx *v19; // rbx', 'rtx *v13; // rbp']
['rtx *v20; // r8']
['rtx arg1; // [rsp+0h] [rbp-38h] BYREF']
['rtx v34; // [rsp+10h] [rbp-38h]', 'rtx v35; // [rsp+10h] [rbp-38h]']
['x = value;']
['v6 = ( ( unsigned int)( mode_class_0[v7] - 5) < 2) + 1;']
['v35 = reg;']
['last_value = get_last_value( rtx);']
['if ( last_value )', 'if ( last_value )']
['v45 = last_value;']
['v45 = last_value;']
['rtx v38; // rsi']
['rtx v58; // rbx', 'rtx v38; // rax', 'rtx v35; // rbx', 'rtx v38; // rax', 'rtx v32; // rbx', 'rtx v18; // rbx', 'rtx v30; // rbx', 'rtx v32; // rbx', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v37; // rbx', 'rtx v38; // rax']
['rtx v44; // rax', 'rtx v44; // rax', 'rtx v44; // rax', 'rtx v44; // rax']
['rtx v46; // rax', 'rtx v56; // rbx', 'rtx v46; // rax', 'rtx v6; // rbx', 'rtx v96; // rbx', 'rtx v4; // rbx', 'rtx v45; // rbx']
['rtx v48; // rax']
['rtx v51; // r12', 'rtx v41; // r15', 'rtx v11; // r15']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['rtx v55; // rax', 'rtx v55; // rax', 'rtx v55; // rax', 'rtx v55; // rax', 'rtx v55; // rax']
['*( _OWORD *)&e->flags = 0LL;']
['*( _OWORD *)&e->insns = 0LL;']
['*( _OWORD *)&e->src = 0LL;']
['*( _OWORD *)&e->pred_next = 0LL;']
['rtx *v27; // rbx', 'rtx *v22; // rax', 'rtx *v25; // rbx', 'rtx v22; // rbx']
['loc = ( rtx *)&x[1];']
['if ( v6 == v2 )']
['x = v18;']
['result = ( ( unsigned int)( mode_class_0[( unsigned __int8)v28] - 5) < 2) + 1;']
['result = ( ( unsigned int)( mode_class_0[v31] - 5) < 2) + 1;']
['rtx v14; // rbx', 'rtx *v19; // rbx', 'rtx *v17; // rbx']
['rtx *v20; // rax']
['loc = ( rtx *)&x[1];', 'v9 = ( rtx)v5[1];', 'v4 = ( rtx)v4[1];']
['if ( v23 != loc )']
['v5 = v4;']
['( machine_mode)( unsigned __int8)BYTE2( *rtwint),', '( machine_mode)( unsigned __int8)BYTE2( *rtwint),', '( machine_mode)( unsigned __int8)BYTE2( *rtwint),']
['( machine_mode)BYTE2( v16));']
['result = ( ( unsigned int)( mode_class_0[v31] - 5) < 2) + 1;']
['result = ( ( unsigned int)( mode_class_0[( unsigned __int8)v28] - 5) < 2) + 1;']
['v23 = ( rtx *)&rtx->fld[v19];']
['if ( v23 != loc )']
['fld = ( rtx *)v6[1].fld;']
['v24 = refers_to_regno_for_reload_p( v20, endregno, *v23, loc);']
['if ( reg_pref_0 )', 'if ( reg_pref_0 )', 'if ( reg_pref_0 )']
['return reg_pref_0[regno].altclass;']
['v11 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v10] - 5) < 2) + 1;']
['v18 = ( ( unsigned int)( mode_class_0[v17] - 5) < 2) + 1;']
['v5 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v10 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['v13 = ( ( unsigned int)( mode_class_0[v14] - 5) < 2) + 1;', 'v16 = ( ( unsigned int)( mode_class_0[v17] - 5) < 2) + 1;']
['v13 = immed_double_const( cnst1, v12, ( machine_mode)v10);']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['v36 = ( ( unsigned int)( mode_class_0[v37] - 5) < 2) + 1;']
['v13 = immed_double_const( cnst1, v12, ( machine_mode)v10);']
['( machine_mode)*( unsigned __int8 *)( v9.rtwint + 2),']
['( machine_mode)BYTE2( v3));', '( machine_mode)BYTE2( v5));']
['v16 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v14] - 5) < 2) + 1;', 'v11 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v10] - 5) < 2) + 1;']
['( machine_mode)*( unsigned __int8 *)( v5.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v10.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v1.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v25.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v25.rtwint + 2),']
['( machine_mode)BYTE2( v3));', '( machine_mode)BYTE2( v5));']
['v16 = ( ( unsigned int)( mode_class_0[v17] - 5) < 2) + 1;']
['if ( reg_pref_0 )', 'if ( reg_pref_0 )', 'if ( reg_pref_0 )']
['return reg_pref_0[regno].prefclass;']
['if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )', 'if ( reg_note )']
['v32 = *( _DWORD *)reg_note->fld[0].rtwint - 58;']
['v21 = ( ( unsigned int)( *( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)*v94 >> 14) & 0x3FC)) - 5) < 2)']
['stack_0 = v2;']
['v9 = costs_0;']
['reg_pref_0 = reg_pref_buffer;']
['fprintf( v1, "%s, ", reg_class_names_0[*( ( int *)v2 - 20)]);']
['fprintf( v1, "%s, ", reg_class_names_0[*( ( int *)v2 - 20)]);']
['fprintf( outf, off_607A24, ( unsigned int)v7);']
['v42 = insn_data_0[v20].genfun( v9, v21);']
['p_constraint = &insn_data_0[v26].operand[1].constraint;']
['if ( ( sch_istable[v36] & 4) != 0 )']
['if ( ( sch_istable[v36] & 4) != 0 )', 'if ( mode_class_0[v3] != MODE_INT )']
['if ( reg_class_subset_p( v2, qty_0[v3].min_class) )']
['if ( reg_class_subset_p( v2, qty_0[v3].min_class) )']
['fprintf( file, "; pref %s", dump_flow_info_reg_class_names[v10]);']
['v12 = dump_flow_info_reg_class_names[v10];']
['fprintf( file, "; pref %s, else %s", v12, dump_flow_info_reg_class_names[v11]);']
['free( reg_pref_0);']
['qty_0[v3].min_class = v2;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['args_size_0 = 0LL;']
['if ( mode_class_0[v4] != MODE_FLOAT']
['rtx v53; // rax']
['rtx v54; // rdi']
['rtx v12; // rax', 'rtx v22; // rax', 'rtx v60; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v62; // rcx', 'rtx v12; // rax', 'rtx v32; // rax', 'rtx v22; // rax', 'rtx v64; // rax', 'rtx v22; // rax', 'rtx v65; // rax', 'rtx v63; // rax', 'rtx v82; // rax', 'rtx v64; // rax', 'rtx v12; // rax', 'rtx v65; // rax', 'rtx v66; // rax', 'rtx v69; // rax', 'rtx v32; // rax', 'rtx v52; // rax', 'rtx v67; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v22; // rax']
['rtx v64; // rax', 'rtx v64; // rax']
['rtx v31; // rax', 'rtx v41; // rax', 'rtx v31; // rax', 'rtx v21; // rax', 'rtx v31; // rax', 'rtx v82; // rax', 'rtx v86; // rax', 'rtx v88; // rax', 'rtx v41; // rax', 'rtx v51; // rax', 'rtx v8; // rax', 'rtx v11; // rax', 'rtx v8; // rax', 'rtx v88; // rax', 'rtx v51; // rax', 'rtx v21; // rax', 'rtx v51; // rax', 'rtx v8; // rax', 'rtx v85; // rax']
['rtx real_insn; // rbx']
['rtx v24; // rax', 'rtx v54; // rax', 'rtx v34; // rax', 'rtx v64; // rax', 'rtx v24; // rax', 'rtx v24; // rax', 'rtx v4; // rax', 'rtx v44; // rax', 'rtx v82; // rax', 'rtx v86; // rax', 'rtx v64; // rax', 'rtx v14; // rax', 'rtx v74; // rax', 'rtx v88; // rax', 'rtx v24; // rax', 'rtx v8; // rax', 'rtx v14; // rax', 'rtx v44; // rax', 'rtx v8; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v88; // rax', 'rtx v44; // rax', 'rtx v14; // rax', 'rtx v44; // rax', 'rtx v24; // rax', 'rtx v8; // rax', 'rtx v85; // rax']
['rtx *v17; // rcx']
['rtx v12; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v12; // rax', 'rtx v32; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v82; // rax', 'rtx v12; // rax', 'rtx v32; // rax', 'rtx v52; // rax', 'rtx v9; // rax', 'rtx v93; // rax', 'rtx v22; // rax']
['v5 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;', 'v5 = ( ( unsigned int)( mode_class_0[mode] - 5) < 2) + 1;']
['rtx *v13; // r13']
['rtx *v92; // r14']
['rtx v64; // rax', 'rtx *v60; // rax', 'rtx *v67; // rax', 'rtx *v11; // rax', 'rtx v64; // rax', 'rtx v14; // rax', 'rtx v14; // rax', 'rtx *v11; // rax', 'rtx v14; // rax']
['rtx *v17; // rbx']
['rtx *loc; // [rsp+0h] [rbp-58h]']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;', 'v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);', 'v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['rtx v29; // r13', 'rtx v20; // r14', 'rtx v69; // r14', 'rtx v29; // r12']
['rtx v36; // rax', 'rtx v36; // rax']
['rtx v58; // rbx', 'rtx v48; // rbp', 'rtx v18; // rbx', 'rtx v4; // rbx', 'rtx v45; // rbx', 'rtx v48; // rax', 'rtx v48; // rbp']
['rtx i; // rbx', 'rtx i; // rbx', 'rtx i; // rbx']
['rtx *v25; // rax', 'rtx v85; // rax']
['rtx v27; // rbp', 'rtx v67; // rbp', 'rtx v37; // rbp', 'rtx v27; // rbp', 'rtx v37; // rbp', 'rtx v7; // rbp']
['rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v106; // rbx']
['rtx v13; // rax', 'rtx v31; // rax', 'rtx v36; // rcx', 'rtx v21; // rcx', 'rtx v31; // rax', 'rtx v31; // rax', 'rtx v18; // rcx', 'rtx v37; // rcx', 'rtx v33; // rax', 'rtx v43; // rcx', 'rtx v17; // rcx', 'rtx v13; // rax', 'rtx v35; // rcx']
['rtx *v37; // rbp']
['rtx v18; // rbx', 'rtx *v19; // rbx', 'rtx *v17; // rbx']
['rtx v34; // rbp', 'rtx v34; // rbp', 'rtx v32; // rbp']
['rtx v35; // rbx', 'rtx v23; // rbx', 'rtx v32; // rbx', 'rtx v30; // rbx', 'rtx v32; // rbx', 'rtx v19; // rbx', 'rtx v33; // rax', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v37; // rbx']
['rtx v34; // rax']
['v10 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v8] - 5) < 2) + 1;']
['fancy_abort( &off_6CC868[4], 8994, "reload_combine_note_use");']
['fancy_abort( &off_6CC868[4], 9015, "reload_combine_note_use");']
['v19 = ( ( unsigned int)( mode_class_0[v18] - 5) < 2) + 1;']
['v16 = *( rtx *)( v15 + 8);']
['*v14 = v19;']
['if ( !rtx_equal_p( dst, src) )']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['rtx v34; // r14', 'rtx v34; // r15']
['rtx v44; // rax', 'rtx v44; // rax', 'rtx v44; // rax', 'rtx v44; // rax']
['rtx v48; // rbp', 'rtx v45; // rbx', 'rtx v44; // rbp', 'rtx v48; // rbp']
['rtx result; // rax', 'rtx rtwint; // rax', 'rtx in_reg; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx *v57; // rbp', 'rtx *v37; // rbp']
['rtx v51; // r12', 'rtx *v5; // r12', 'rtx *v41; // r12']
['rtx *v57; // rbp', 'rtx *v54; // rbp', 'rtx *v13; // rbp', 'rtx *v54; // rbp', 'rtx *v63; // rbp']
['rtx v14; // rbx', 'rtx v80; // rbx', 'rtx v80; // rbx', 'rtx v4; // rbx', 'rtx v74; // rbx']
['rtx *v50; // rsi', 'rtx *v31; // rsi', 'rtx *v27; // rsi', 'rtx *v32; // rsi', 'rtx v69; // rsi']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v10; // rax', 'rtx v12; // rax', 'rtx v10; // rax', 'rtx v10; // rax']
['if ( recog_data_0.n_alternatives && recog_data_0.n_operands )', 'if ( recog_data_0.n_alternatives && recog_data_0.n_operands )']
['if ( recog_data_0.n_alternatives && recog_data_0.n_operands )', 'if ( recog_data_0.n_alternatives && recog_data_0.n_operands )']
['fatal_insn_not_found( insna, &off_6CC868[4], 8371, "reload_cse_simplify_operands");']
['v2 = 4LL * recog_data_0.n_alternatives;']
['n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;']
['if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )']
['v7 = recog_data_0.operand[v6];', 'v8 = recog_data_0.operand[v5];', 'v8 = recog_data_0.operand[v5];']
['mode = recog_data_0.operand_mode[v12];']
['n_operands = recog_data_0.n_operands;', 'n_operands = recog_data_0.n_operands;']
['if ( ++v4 >= recog_data_0.n_operands )']
['if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )']
['n_alternatives = recog_data_0.n_alternatives;']
['v16 = ( int *)( ( char *)equiv_regs - ( ( 4LL * recog_data_0.n_alternatives + 15) & 0xFFFFFFFFFFFFFFF0LL));']
['v17 = recog_data_0.constraints[v12];']
['mode = recog_data_0.operand_mode[v12];']
['( machine_mode)BYTE2( v7),']
['*( ( reg_class *)&regclass_map + v5->fld[0].rtuint),']
['v8 = ix86_memory_move_cost( ( machine_mode)BYTE2( v7), class2, 1);']
['v10 = cselib_lookup( v5, ( machine_mode)*( unsigned __int8 *)( set->fld[0].rtwint + 2), 0);']
['( machine_mode)BYTE2( v16),']
['*( ( reg_class *)&regclass_map + loc->fld[0].rtuint),']
['v12 = ( ( unsigned int)( mode_class_0[v7] - 5) < 2) + 1;']
['fancy_abort( &off_6CC868[4], 4527, "reload_reg_free_p");']
['fancy_abort( &off_6CC868[4], 4663, "reload_reg_reaches_end_p");']
['fancy_abort( &off_6CC868[4], 4739, "reloads_conflict");']
['*( _OWORD *)( ( char *)&replacements[0].where + 3 * v7) = *( _OWORD *)&v4->where;', '*( _OWORD *)( ( char *)&replacements[0].where + 3 * v7) = *( _OWORD *)&v4->where;']
['*( _OWORD *)( ( char *)&replacements[0].where + 3 * v7) = *( _OWORD *)&v4->where;', '*( _OWORD *)( ( char *)&replacements[0].where + 3 * v7) = *( _OWORD *)&v4->where;']
['*( _OWORD *)&e->flags = 0LL;']
['*( _OWORD *)&e->insns = 0LL;']
['*( _OWORD *)&e->src = 0LL;']
['*( _OWORD *)&e->pred_next = 0LL;']
['rtx v36; // rcx', 'rtx *v26; // rcx', 'rtx *v56; // rcx']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['low = p_int_cst->low;']
['v39 = loc;']
['if ( result == reg_equiv_memory_loc[regno] )']
['i->new_reg = replace_rtx( i->new_reg, same->dest_reg, same->new_reg);', 'i->new_reg = replace_rtx( i->new_reg, same->dest_reg, same->new_reg);', 'i->new_reg = replace_rtx( i->new_reg, same->dest_reg, same->new_reg);', 'i->new_reg = replace_rtx( i->new_reg, same->dest_reg, same->new_reg);']
['v8 = ( _DWORD *)( ( char *)&unk_9CF38C + 4 * v6 + 4 * v2);', 'v21 = ( rtx *)*( ( _QWORD *)v10 + 2);']
['v18 = ssa_rename_to_lookup( v16);']
['v6 = mode_class_0[mode];', 'v31 = mode_class_0[v8];', 'v6 = mode_class_0[mode];', 'v31 = mode_class_0[v10];', 'v35 = mode_class_0[v34];', 'v3 = mode_class_0[v2];', 'v32 = mode_class_0[v9];', 'v3 = mode_class_0[v2];']
['if ( use == sibcall_use_normal_0 )']
['else if ( use == sibcall_use_sibcall_0 )']
['if ( use != sibcall_use_tail_recursion_0 )']
['( machine_mode)i,', '( machine_mode)v12,', '( machine_mode)v9,', '( machine_mode)v16,', '( machine_mode)v14,']
['LOBYTE( v14) = canon_hash( x, ( machine_mode)BYTE2( v3));']
['v6 = operand_sub*(short *)0xforce( op0, 0, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v6 = operand_sub*(short *)0xforce( op0, 0, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v11 = operand_sub*(short *)0xforce( op0, i, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v11 = operand_sub*(short *)0xforce( op0, i, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v15 = operand_sub*(short *)0xforce( op0, j, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v15 = operand_sub*(short *)0xforce( op0, j, ( machine_mode)*( ( unsigned __int8 *)op0 + 2));', 'v6 = expand_mult_add( b, reg, m, a, ( machine_mode)*( ( unsigned __int8 *)reg + 2), 1);', 'v6 = expand_mult_add( b, reg, m, a, ( machine_mode)*( ( unsigned __int8 *)reg + 2), 1);']
['scan_rtx_address( insn, ( rtx *)( v14 + *( ( _QWORD *)v6 + v10)), a3, action, ( machine_mode)mode);']
['v38 = emit_store_flag( target, ( rtx_code)v14, v35, v37, ( machine_mode)v10, v52, 1);']
['rtx *fld; // r14', 'rtx *fld; // r13']
['rtx v9; // rax']
['rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax']
['v13 = loc;', 'v59 = loc;', 'v67 = loc;', 'v39 = loc;']
['v14 = eliminate_constant_term( v5, &arg1);']
['rtx = v3;', 'rtx = v8;']
['if ( v3 == head )', 'if ( v3 == head )']
['if ( v3 == head )', 'if ( v3 == head )']
['v20 = reg_equiv_mem[rtint];']
['if ( !v18 )', 'if ( !v20 )', 'if ( v10 )', 'if ( !v16 )']
['v20 = reg_equiv_mem[rtint];']
['if ( !v18 )', 'if ( !v20 )', 'if ( v10 )', 'if ( !v16 )']
['v17 = gen_rtx_MEM( ( machine_mode)*( ( unsigned __int8 *)v7 + 2), v16);']
['v17 = gen_rtx_MEM( ( machine_mode)*( ( unsigned __int8 *)v7 + 2), v16);']
['v19 = &reg_last_death[rtuint];']
['rtx v16; // rsi']
['v16 = reg_map[v15];']
['if ( !v16 || *( _WORD *)v16 != 63 )', 'if ( !v16 || *( _WORD *)v16 != 63 )']
['if ( !v16 || *( _WORD *)v16 != 63 )', 'if ( !v16 || *( _WORD *)v16 != 63 )']
['v7 = simplify_gen_subreg( ( machine_mode)BYTE2( v8), v16, ( machine_mode)BYTE2( v14), *( _DWORD *)&x[1]);', 'v7 = simplify_gen_subreg( ( machine_mode)BYTE2( v8), v16, ( machine_mode)BYTE2( v14), *( _DWORD *)&x[1]);', 'v7 = simplify_gen_subreg( ( machine_mode)BYTE2( v8), v16, ( machine_mode)BYTE2( v14), *( _DWORD *)&x[1]);']
['v7 = simplify_gen_subreg( ( machine_mode)BYTE2( v8), v16, ( machine_mode)BYTE2( v14), *( _DWORD *)&x[1]);', 'v7 = simplify_gen_subreg( ( machine_mode)BYTE2( v8), v16, ( machine_mode)BYTE2( v14), *( _DWORD *)&x[1]);', 'v7 = simplify_gen_subreg( ( machine_mode)BYTE2( v8), v16, ( machine_mode)BYTE2( v14), *( _DWORD *)&x[1]);']
['v7 = simplify_gen_subreg( ( machine_mode)BYTE2( v8), v16, ( machine_mode)BYTE2( v14), *( _DWORD *)&x[1]);', 'v7 = simplify_gen_subreg( ( machine_mode)BYTE2( v8), v16, ( machine_mode)BYTE2( v14), *( _DWORD *)&x[1]);', 'v7 = simplify_gen_subreg( ( machine_mode)BYTE2( v8), v16, ( machine_mode)BYTE2( v14), *( _DWORD *)&x[1]);']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),']
['if ( ( count_error_warning_message & 1) == 0 )']
['count_error_warning_message = 1;']
['v5 = *( _OWORD *)&diagnostic_buffer->state.prefix;']
['v6 = *( _OWORD *)&diagnostic_buffer->state.indent_skip;', 'v3 = *( _OWORD *)&diagnostic_buffer->state.indent_skip;']
['v7 = *( _OWORD *)&diagnostic_buffer->state.cursor;', 'v4 = *( _OWORD *)&diagnostic_buffer->state.cursor;']
['v8 = *( _OWORD *)diagnostic_buffer->state.diagnostic_count;', 'v5 = *( _OWORD *)diagnostic_buffer->state.diagnostic_count;']
['v17 = *( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4];']
['v7 = *( _OWORD *)&diagnostic_buffer->state.cursor;', '*( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4] = v9;', 'v4 = *( _OWORD *)&diagnostic_buffer->state.cursor;', '*( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4] = v17;']
['v7 = *( _OWORD *)&diagnostic_buffer->state.cursor;', '*( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4] = v9;', 'v4 = *( _OWORD *)&diagnostic_buffer->state.cursor;', '*( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4] = v17;']
['rtx last_insn; // rax', 'rtx last_insn; // rax']
['rtx in; // rdi']
['rtx v31; // rax', 'rtx v51; // rbx', 'rtx v35; // rbx', 'rtx v31; // rax', 'rtx v21; // rbx', 'rtx v31; // rbp', 'rtx v32; // rbx', 'rtx v31; // rax', 'rtx v30; // rbx', 'rtx v32; // rbx', 'rtx v61; // rbx', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v37; // rbx']
['last_insn = get_last_insn( );', 'last_insn = get_last_insn( );', 'last_insn = get_last_insn( );']
['if ( last_insn )', 'if ( last_insn )']
['end = 0LL;', 'v24 = 0LL;', 'v12 = 0LL;', 'v15 = 0LL;', 'v40 = 0LL;', 'v16 = 0LL;']
['v24 = 0LL;', 'v12 = 0LL;', 'v15 = 0LL;', 'v40 = 0LL;', 'v16 = 0LL;']
['if ( *( _WORD *)last_value == 74 )']
['if ( *( _WORD *)last_value == 74 )']
['rtx = last_insn[1].fld[0].rtx;']
['v21 = last_insn;', 'v21 = last_insn;']
['v21 = last_insn;', 'v21 = last_insn;']
['|| ( single_use_1 = loc, v27->fld[0].rtint != dest->fld[0].rtint) )', '|| ( single_use_1 = loc, v27->fld[0].rtint != dest->fld[0].rtint) )']
['while ( ( sch_istable[v7] & 4) != 0 );']
['sprintf( v16, &off_607A24[1], v7);']
['v7 = *( const char *const *)( ( char *)resolve_unique_section_prefixes[v4]']
['timevar_push( TV_REST_OF_COMPILATION_0);']
['timevar_push( TV_INTEGRATION_0);', 'timevar_push( TV_INTEGRATION_0);']
['timevar_pop( TV_INTEGRATION_0);', 'timevar_pop( TV_INTEGRATION_0);']
['timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);']
['timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);']
['timevar_push( TV_INTEGRATION_0);', 'timevar_push( TV_INTEGRATION_0);']
['timevar_pop( TV_INTEGRATION_0);', 'timevar_pop( TV_INTEGRATION_0);']
['timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);']
['timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);']
['timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);']
['timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);']
['timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);']
['timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);']
['timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);']
['timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);']
['timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);']
['timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);', 'timevar_pop( TV_JUMP_0);']
['timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);', 'timevar_push( TV_JUMP_0);']
['v14 = TV_SYMOUT_0;']
['timevar_push( TV_VARCONST_0);']
['timevar_push( TV_VARCONST_0);']
['timevar_push( TV_SYMOUT_0);']
['timevar_push( TV_SYMOUT_0);']
['timevar_push( TV_SYMOUT_0);']
['timevar_push( TV_SYMOUT_0);']
['*( _OWORD *)sequence_result = 0LL;']
['*( _OWORD *)&sequence_result[2] = 0LL;']
['rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax']
['rtx line_note; // rbp']
['rtx v10; // rax', 'rtx v10; // rax', 'rtx v10; // rax']
['v4 = head;', 'v4 = head;']
['if ( *( _WORD *)v4 == 37 && v4[2].fld[0].rtint > 0 )', 'if ( *( _WORD *)v4 == 37 && v4[2].fld[0].rtint > 0 )']
['if ( *( _WORD *)v4 == 37 && v4[2].fld[0].rtint > 0 )', 'if ( *( _WORD *)v4 == 37 && v4[2].fld[0].rtint > 0 )']
['v4 = ( rtx)v4[1];']
['if ( !v4 )']
['v24 = 0LL;', 'v40 = 0LL;']
['v4 = v5;']
['line_note = v4;', 'line_note = v4;']
['line_note = v4;', 'line_note = v4;']
['|| ( line_note = h_i_d[rtint].line_note) == 0LL']
['|| v4 && line_note[2].fld[0].rtint == v4[2].fld[0].rtint && line_note[2] == v4[2] )']
['|| v4 && line_note[2].fld[0].rtint == v4[2].fld[0].rtint && line_note[2] == v4[2] )']
['|| v4 && line_note[2].fld[0].rtint == v4[2].fld[0].rtint && line_note[2] == v4[2] )']
['( rtx_code)*( _WORD *)exp,']
['v9 = mode_class_0[v5];']
['rtx v3; // r14', 'rtx v3; // rax', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v43; // r8', 'rtx v47; // r9']
['rtx v64; // rcx', 'rtx v43; // rcx', 'rtx v45; // rcx']
['v3 = head;', 'v3 = head;', 'v3 = head;']
['if ( *( _WORD *)v3 == 37 )', 'if ( *( _WORD *)v3 == 37 )']
['v4 = v43;', 'v4 = v43;']
['v4 = v43;', 'v4 = v43;']
['v19 = (  struct rtx_def *)v15[1];']
['v16 = v3;']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['if ( v4 == rtx )', 'if ( v4 == rtx )']
['v6 = v5;', 'v6 = v5;', 'v3 = v4;', 'v3 = v4;', 'v3 = v4;', 'v3 = v4;', 'v5 = v4;', 'v6 = v5;', 'v6 = v5;']
['if ( *( _WORD *)v3 == 37 )', 'if ( *( _WORD *)v3 == 37 )']
['v6[1].fld[0].rtwint = ( __int64)v2;']
['if ( v4 )']
['*( _QWORD *)&v6[1] = v8;']
['if ( v4 == rtx )', 'if ( v4 == rtx )']
['v4 = rtx;']
['rtx v3; // r14', 'rtx v3; // rax', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v43; // r8', 'rtx v47; // r9']
['rtx v5; // r14', 'rtx v5; // r12']
['rtx v56; // rdx', 'rtx v64; // rdx']
['rtx v8; // rcx']
['v24 = 0LL;', 'v12 = 0LL;', 'v15 = 0LL;', 'v40 = 0LL;', 'v16 = 0LL;']
['v3 = head;', 'v4 = head;', 'v4 = head;', 'v3 = head;', 'v3 = head;']
['if ( *( _WORD *)v15 != 47 )']
['v6 = v5;', 'v6 = v5;', 'v6 = v5;', 'v6 = v5;']
['v6 = v5;', 'v6 = v5;', 'v6 = v5;', 'v6 = v5;']
['v7 = ( __int64)v6[1];']
['v6 = v5;', 'v6 = v5;', 'v4 = v5;', 'v8 = v9;', 'v2 = v5;', 'v6 = v5;', 'v6 = v5;', 'v2 = v5;']
['v6 = v5;', 'v6 = v5;', 'v4 = v5;', 'v8 = v9;', 'v2 = v5;', 'v6 = v5;', 'v6 = v5;', 'v2 = v5;']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['*( _QWORD *)( v8 + 24) = v6;']
['rtx v10; // r14', 'rtx v13; // r14', 'rtx v15; // r14', 'rtx v16; // r15', 'rtx v16; // r12', 'rtx v15; // r14']
['if ( mode_class_0[v16] != MODE_INT )', 'if ( mode_class_0[v16] != MODE_INT )', 'if ( mode_class_0[v2] == MODE_INT )']
['v18 = v15->fld[0].rtx;']
['if ( !v16 )']
['if ( k == v38[1].fld[0].rtx )']
['v11 = phi_alternative( *( rtx *)&rtx[2], bb->index);']
['v32 = mode_class_0[v9];']
['v5 = cselib_lookup( x, ( machine_mode)BYTE2( v4), 0);']
['v7 = cselib_lookup( y, ( machine_mode)BYTE2( v6), 0);']
['v6 = gen_lowpart_for_combine( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx), y);']
['v6 = gen_lowpart_for_combine( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)rtx), y);']
['if ( *( _OWORD *)&x == 0LL )']
['rtx real_insn; // rbx']
['real_insn = next_real_insn( rtx);']
['LODWORD( v8) = real_insn == next_real_insn( y->fld[0].rtx);']
['( machine_mode)*( unsigned __int8 *)( v10.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v1.rtwint + 2),']
['( machine_mode)BYTE2( v3));', '( machine_mode)BYTE2( v5));']
['*( _OWORD *)( object_base + 40) = 0LL;']
['*( _OWORD *)( object_base + 40) = 0LL;']
['*( _OWORD *)( object_base + 40) = 0LL;']
['*( _OWORD *)( object_base + 40) = 0LL;']
['*( _OWORD *)( object_base + 40) = 0LL;']
['*( _OWORD *)( object_base + 40) = 0LL;']
['*( _OWORD *)( object_base + 40) = 0LL;']
['*( _OWORD *)( object_base + 40) = 0LL;']
['v4[regno] = ( reg_set_0 *)object_base;', 'v4[regno] = ( reg_set_0 *)object_base;']
['rtx v51; // r12', 'rtx v32; // r12', 'rtx v6; // r12', 'rtx v25; // r12', 'rtx v8; // r12', 'rtx v15; // r12', 'rtx v22; // r12', 'rtx v62; // r12', 'rtx v47; // r12', 'rtx v59; // r12', 'rtx v98; // r12', 'rtx v25; // r12', 'rtx v29; // r12', 'rtx v40; // r12', 'rtx v15; // r12', 'rtx v16; // r12', 'rtx v5; // r12', 'rtx *v5; // r12', 'rtx v39; // r12', 'rtx v52; // r12']
['rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax']
['safe_from_p_save_expr_list = 0LL;']
['for ( i = safe_from_p_save_expr_list; i; i = i->common.chain )']
['p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;', 'p_int_cst = &exp->int_cst.int_cst;']
['low = ( tree)p_int_cst->low;']
['v18 = decl->decl.rtl;']
['if ( !biv )', 'if ( !v18 )', 'if ( !v20 )', 'if ( !v21 )', 'if ( !v4 )', 'if ( !v16 )', 'if ( !v5 )']
['if ( *( _WORD *)v8 == 63 )']
['rtx = v19->fld[0].rtx;', 'rtx = v15->fld[0].rtx;', 'rtx = v11->fld[0].rtx;']
['rtx = v19->fld[0].rtx;', 'rtx = v15->fld[0].rtx;', 'rtx = v11->fld[0].rtx;']
['if ( *( _WORD *)op == 61 )']
['in = in->fld[0].rtx;', 'in = in->fld[0].rtx;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;', 'v15 = single_set_2( ( rtx)v14, *( ( rtx *)v14 + 4));']
['v33 = ( ( unsigned int)( mode_class_0[BYTE2( v11)] - 5) < 2) + 1;']
['*( _OWORD *)classes = xmm*(short *)0x639810;', 'v15 = single_set_2( ( rtx)v14, *( ( rtx *)v14 + 4));']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax']
['rtx *fld; // rbp']
['rtx v10; // r13', 'rtx v15; // r12', 'rtx v15; // r14', 'rtx v19; // r13', 'rtx v15; // r12', 'rtx v17; // r13', 'rtx v15; // r14']
['rtx v12; // rax', 'rtx v15; // rax', 'rtx v17; // rax', 'rtx v26; // rax', 'rtx v17; // rax', 'rtx v46; // rax', 'rtx v15; // rax', 'rtx v13; // rax', 'rtx v19; // rax', 'rtx v36; // rax', 'rtx v15; // rax', 'rtx v18; // rax', 'rtx v46; // rax', 'rtx v12; // rax', 'rtx v26; // rax', 'rtx v17; // rax', 'rtx v19; // rax', 'rtx v10; // rax', 'rtx v36; // rax', 'rtx v86; // rax', 'rtx v12; // rax', 'rtx v19; // rax', 'rtx v15; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v15; // rax', 'rtx v14; // rax', 'rtx v66; // rax', 'rtx v17; // rax', 'rtx v19; // rax', 'rtx v11; // rax', 'rtx v14; // rax', 'rtx v18; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v13; // rax', 'rtx v18; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v26; // rax', 'rtx v14; // rax']
['fld = v19->fld;']
['x = rtx;', 'v6 = rtx;', 'v4 = rtx;']
['v5 = gen_reg_rtx( ( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['v5 = gen_reg_rtx( ( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['v10 = gen_lowpart( ( machine_mode)*( ( unsigned __int8 *)op + 2), v8);']
['v10 = gen_lowpart( ( machine_mode)*( ( unsigned __int8 *)op + 2), v8);']
['v10 = gen_lowpart( ( machine_mode)*( ( unsigned __int8 *)op + 2), v8);']
['if ( *( _WORD *)v15 == 75 )']
['rtuint = v16->fld[0].rtuint;']
['rtx v5; // rdx', 'rtx v5; // rdx']
['if ( *( _WORD *)head != 37 || ( v5 = head, head[2].fld[0].rtint <= 0) )']
['v5 = v4;']
['v4 = v5;']
['( save_level)( x_block_stack->next == 0LL),']
['rtx v63; // r15', 'rtx v16; // r15']
['rtx v69; // r14']
['rtx v13; // rbp', 'rtx v16; // rbp', 'rtx v60; // rbp', 'rtx v19; // rbp', 'rtx v12; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v19; // rbp', 'rtx v18; // rbp', 'rtx v30; // rbp', 'rtx v10; // rbx', 'rtx v13; // rbp', 'rtx v13; // rbp']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['rtx v13; // r14', 'rtx v15; // r12', 'rtx v13; // r15', 'rtx v15; // r12', 'rtx v16; // r12']
['rtx v14; // rax', 'rtx v14; // rax', 'rtx v14; // rax']
['rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax']
['rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax']
['rtx const_rtx; // rbp']
['rtx v51; // rbp']
['rtx *v67; // rax', 'rtx *v27; // rsi', 'rtx *v12; // rdi', 'rtx *v43; // rdi']
['rtx *v12; // rdi', 'rtx *v43; // rdi']
['rtx ops[16]; // [rsp+100h] [rbp-1A8h] BYREF']
['v5 = gen_reg_rtx( ( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['qty_0[v7].first_reg = v5;']
['if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )', 'if ( recog_data_0.n_operands > 0 )']
['v12 = recog_data_0.constraints[0] + 1;']
['if ( *recog_data_0.constraints[0] )', 'v12 = recog_data_0.constraints[0] + 1;', 'v1 = ( char *)recog_data_0.constraints[v0];']
['if ( ( *( _WORD *)recog_data_0.operand[1] != 66 || *( _WORD *)recog_data_0.operand[2] != 66)', 'if ( ( *( _WORD *)recog_data_0.operand[1] != 66 || *( _WORD *)recog_data_0.operand[2] != 66)']
['if ( ( *( _WORD *)recog_data_0.operand[1] != 66 || *( _WORD *)recog_data_0.operand[2] != 66)', 'if ( ( *( _WORD *)recog_data_0.operand[1] != 66 || *( _WORD *)recog_data_0.operand[2] != 66)']
['|| !_bittest( &v2, *( _DWORD *)recog_data_0.operand[v1] - 66) )']
['&& !reg_mentioned_p( recog_data_0.operand[1], recog_data_0.operand[0]) )', '&& !reg_mentioned_p( recog_data_0.operand[1], recog_data_0.operand[0]) )']
['scan_rtx_address( insn, fld, GENERAL_REGS, action, ( machine_mode)mode);']
['scan_rtx( insn, ( rtx *)v7->fld, a3, action, ( op_type)( 2 * ( type != OP_IN)), earlyclobber);']
['v15 = ( ( unsigned int)( mode_class_0[v13] - 5) < 2) + 1;', 'v15 = ( ( unsigned int)( mode_class_0[v13] - 5) < 2) + 1;']
['v21 = ( ( unsigned int)( *( const mode_class *)( ( char *)mode_class_0 + ( ( *( _DWORD *)*v94 >> 14) & 0x3FC)) - 5) < 2)']
['v14 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v13] - 5) < 2) + 1;', 'v14 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v13] - 5) < 2) + 1;']
['v25 = ( v14 - 1 < 0) ^ __OFADD__( -1, v14) | ( v14 == 1);', 'v25 = ( v14 - 1 < 0) ^ __OFADD__( -1, v14) | ( v14 == 1);']
['v25 = ( v14 - 1 < 0) ^ __OFADD__( -1, v14) | ( v14 == 1);', 'v25 = ( v14 - 1 < 0) ^ __OFADD__( -1, v14) | ( v14 == 1);']
['cselib_lookup( v15->fld[0].rtx, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), 1);']
['rtx v47; // r12']
['rtx pending_read_insns; // rbx']
['rtx *v59; // rbx', 'rtx *v19; // rbx']
['rtx v10; // rbx']
['rtx pending_write_insns; // rbx']
['rtx *v19; // rbx', 'rtx *v17; // rbx']
['rtx v13; // rbp', 'rtx v13; // rax', 'rtx v14; // rbx', 'rtx v23; // rbx', 'rtx v18; // rbx', 'rtx v19; // rbx', 'rtx v15; // rbx', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v10; // rbx', 'rtx v13; // rbp', 'rtx v13; // rax', 'rtx v13; // rbp']
['rtx i; // rbx', 'rtx i; // rbx', 'rtx i; // rbx']
['rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax']
['rtx v19; // rbx']
['deps_0 *v15; // rcx', 'deps_0 *v15; // rcx']
['deps_0 *v15; // rcx', 'deps_0 *v15; // rcx']
['v47 = deps;']
['mem_set_list = pbi->mem_set_list;']
['add_dependence_list( val, reg_last[v33].sets, ( reg_note)0);']
['add_dependence_list( val, reg_last[v33].sets, ( reg_note)0);']
['rtx v15; // rbx']
['rtx v41; // rdx']
['rtx v41; // r15', 'rtx v24; // r15', 'rtx v34; // r15']
['rtx v51; // r12', 'rtx v25; // r12', 'rtx v15; // r12', 'rtx v59; // r12', 'rtx v25; // r12', 'rtx v15; // r12', 'rtx v5; // r12', 'rtx v52; // r12']
['rtx *v56; // rcx']
['rtx v41; // r15', 'rtx v63; // r15', 'rtx v11; // r15']
['rtx v60; // rbp', 'rtx v12; // rbp', 'rtx v61; // rbp', 'rtx v67; // rbp', 'rtx v52; // rbp', 'rtx v32; // rbp', 'rtx v63; // rbp']
['rtx v64; // rcx']
['rtx v56; // rbx', 'rtx v6; // rbx', 'rtx v60; // rbx', 'rtx v65; // rbx', 'rtx v96; // rbx', 'rtx v66; // rax', 'rtx v61; // rbx']
['deps_0 *v15; // rcx', 'deps_0 *v15; // rcx']
['deps_0 *v15; // rcx', 'deps_0 *v15; // rcx']
['deps_0 *v15; // rcx', 'deps_0 *v15; // rcx']
['deps_0 *v15; // rcx', 'deps_0 *v15; // rcx']
['deps_0 *v47; // r13', 'deps_0 *v47; // r13']
['deps_0 *v47; // r13', 'deps_0 *v47; // r13']
['deps_0 *v15; // rcx', 'deps_0 *v15; // rcx']
['deps_0 *v15; // rcx', 'deps_0 *v15; // rcx']
['deps_0 *v15; // rcx', 'deps_0 *v15; // rcx', 'deps_0 *v47; // r13', 'deps_0 *v47; // r13']
['deps_0 *v15; // rcx', 'deps_0 *v15; // rcx', 'deps_0 *v47; // r13', 'deps_0 *v47; // r13']
['deps_0 *v15; // rcx', 'deps_0 *v15; // rcx', 'deps_0 *v47; // r13', 'deps_0 *v47; // r13']
['deps_0 *v15; // rcx', 'deps_0 *v15; // rcx', 'deps_0 *v47; // r13', 'deps_0 *v47; // r13']
['rtx psave; // [rsp+8h] [rbp-40h] BYREF']
['deps_0 *v23; // [rsp+30h] [rbp-68h]', 'deps_0 *v23; // [rsp+30h] [rbp-68h]']
['deps_0 *v23; // [rsp+30h] [rbp-68h]', 'deps_0 *v23; // [rsp+30h] [rbp-68h]']
['deps_0 deps; // [rsp+10h] [rbp-78h] BYREF']
['rtx earliest; // [rsp+10h] [rbp-38h] BYREF']
['if ( ( v6 & 0x4000) == 0 && ( unsigned int)debug_info_level_0 >= DINFO_LEVEL_NORMAL )']
['rtx v4; // rbx']
['v4 = rtx;']
['if ( active_insn_p( v4) && ( **( _DWORD **)&v4[2] & 0xFFFE) != 44 )', 'if ( active_insn_p( v4) && ( **( _DWORD **)&v4[2] & 0xFFFE) != 44 )']
['if ( active_insn_p( v4) && ( **( _DWORD **)&v4[2] & 0xFFFE) != 44 )', 'if ( active_insn_p( v4) && ( **( _DWORD **)&v4[2] & 0xFFFE) != 44 )']
['insn_scopes->data.l[v4->fld[0].rtint] = v3;']
['else if ( *( _WORD *)v4 == 37 )']
['rtint = v4[2].fld[0].rtint;']
['v3 = ( __int64)v4[2];']
['delete_insn( v4);']
['v9 = *( tree_node **)( low + 40);']
['v2 = ( tree_node *)*( &global_trees + 24);']
['if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['if ( constructor_range_stack_0 )', 'if ( constructor_range_stack_0 )']
['while ( constructor_stack_0->implicit )', 'while ( constructor_stack_0->implicit )', 'while ( constructor_stack_0->implicit )']
['memset( dc, 0, sizeof( diagnostic_context_0));']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['if ( constructor_range_stack_0 )', 'if ( constructor_range_stack_0 )']
['v7->range_stack = constructor_range_stack_0;']
['v7->next = constructor_stack_0;']
['if ( constructor_range_stack_0 )', 'if ( constructor_range_stack_0 )']
['constructor_range_stack_0 = 0LL;']
['constructor_range_stack_0 = 0LL;']
['if ( constructor_range_stack_0 )', 'if ( constructor_range_stack_0 )']
['v7->range_stack = constructor_range_stack_0;']
['v7->next = constructor_stack_0;']
['if ( constructor_range_stack_0 )', 'if ( constructor_range_stack_0 )']
['constructor_range_stack_0 = 0LL;']
['constructor_range_stack_0 = 0LL;']
['rtx *v11; // rax', 'rtx *v11; // rax']
['rtx *v11; // rax', 'rtx *v11; // rax']
['v4 = ( tree_node *)ggc_alloc( 0x28uLL);']
['src = v12;', 'to = v18;', '*v14 = v19;', 'loc = v39;', 'loc = v39;']
['*( ( _OWORD *)v4 + 1) = 0LL;']
['v11 = *( _WORD *)v9;', 'v11 = *( _DWORD *)dst;']
['v13 = v12;', 'v13 = v12;', 'v14 = v13;', 'v20 = v19;', 'v16 = v3;', 'v19 = v17;', 'v19 = v12;', '*v14 = v19;', 'v12 = v11;']
['v19 = v17;', '*v14 = v19;']
['rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx *v25; // rax', 'tree v15; // rax', 'rtx *v11; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'deps_0 *v15; // rcx', 'deps_0 *v15; // rcx', 'rtx *v15; // rcx', 'rtx *v11; // rax']
['rtx v15; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'rtx *v25; // rax', 'tree v15; // rax', 'rtx *v11; // rax', 'rtx v15; // rax', 'rtx v15; // rax', 'deps_0 *v15; // rcx', 'deps_0 *v15; // rcx', 'rtx *v15; // rcx', 'rtx *v11; // rax']
['v4 = ( tree_node *)ggc_alloc( 0x28uLL);']
['src = v12;', 'to = v18;', '*v14 = v19;', 'loc = v39;', 'loc = v39;']
['*( ( _OWORD *)v4 + 1) = 0LL;']
['v13 = v12;', 'v13 = v12;', 'v14 = v13;', 'v19 = v17;', 'v19 = v12;', 'v20 = v18;', 'v20 = v18;', 'v12 = v11;', 'v12 = v8;']
['*v14 = v19;']
['rtx *v52; // rax', 'tree v42; // rax', 'rtx *v22; // rax']
['rtx *v52; // rax', 'tree v42; // rax', 'rtx *v22; // rax']
['v10 = *( tree_node **)( v9 + 8);']
['if ( !lang_hooks_0.honor_readonly']
['v11 = ( tree_node *)*( &global_trees + 15);']
['v4 = ( tree_node *)ggc_alloc( 0x28uLL);']
['src = v12;', 'loc = v39;', 'loc = v39;']
['rtx *v11; // rax', 'rtx *v11; // rax']
['rtx *v11; // rax', 'rtx *v11; // rax']
['v4 = ( tree_node *)ggc_alloc( 0x28uLL);']
['src = v12;', 'to = v18;', '*v14 = v19;', 'loc = v39;', 'loc = v39;']
['*( ( _OWORD *)v4 + 1) = 0LL;']
['v11 = *( _WORD *)v9;', 'v11 = *( _DWORD *)dst;']
['v13 = v12;', 'v13 = v12;', 'v14 = v13;', 'v20 = v19;', 'v16 = v3;', 'v19 = v17;', 'v19 = v12;', '*v14 = v19;', 'v12 = v11;']
['v19 = v17;', '*v14 = v19;']
['rtx *v11; // rax', 'rtx *v11; // rax']
['rtx *v11; // rax', 'rtx *v11; // rax']
['v4 = ( tree_node *)ggc_alloc( 0x28uLL);']
['src = v12;', 'to = v18;', '*v14 = v19;', 'loc = v39;', 'loc = v39;']
['*( ( _OWORD *)v4 + 1) = 0LL;']
['v11 = *( _WORD *)v9;', 'v11 = *( _DWORD *)dst;']
['v13 = v12;', 'v13 = v12;', 'v14 = v13;', 'v20 = v19;', 'v16 = v3;', 'v19 = v17;', 'v19 = v12;', '*v14 = v19;', 'v12 = v11;']
['v19 = v17;', '*v14 = v19;']
['v5 = ( tree_node *)*( &global_trees + 17);']
['if ( *( ( _BYTE *)in + 2) && !ix86_hard_regno_mode_ok( v3, ( machine_mode)*( ( unsigned __int8 *)in + 2)) )']
['if ( !ix86_hard_regno_mode_ok( v3, ( machine_mode)*( ( unsigned __int8 *)out + 2)) )']
['reg_note = gen_rtx_fmt_ee( EXPR_LIST, ( machine_mode)kind, datum, insn[3].fld[0].rtx);']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['v15 = ( ( unsigned int)( mode_class_0[v13] - 5) < 2) + 1;', 'v14 = ( ( unsigned int)( mode_class_0[v11] - 5) < 2) + 1;', 'v18 = ( ( unsigned int)( mode_class_0[v15] - 5) < 2) + 1;', 'v19 = ( ( unsigned int)( mode_class_0[v17] - 5) < 2) + 1;', 'v18 = ( ( unsigned int)( mode_class_0[v16] - 5) < 2) + 1;', 'v12 = ( ( unsigned int)( mode_class_0[v13] - 5) < 2) + 1;', 'v12 = ( ( unsigned int)( mode_class_0[v11] - 5) < 2) + 1;', 'v19 = ( ( unsigned int)( mode_class_0[v18] - 5) < 2) + 1;', 'v18 = ( ( unsigned int)( mode_class_0[v17] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[v14] - 5) < 2) + 1;', 'v16 = ( ( unsigned int)( mode_class_0[v17] - 5) < 2) + 1;', 'v15 = ( ( unsigned int)( mode_class_0[v13] - 5) < 2) + 1;']
['rtx v14; // rax', 'rtx v14; // rax', 'rtx v14; // rax']
['v13 = sge_plus_constant( x->fld[0].rtx, c);']
['v13 = sge_plus_constant( v6, c);']
['v12 = v11;']
['v11 = ( tree_node *)i[13];']
['if ( ( tree_node *)*v11 == elements )', 'while ( *( _WORD *)v21 != 34 )', 'v10 = ( tree_node **)&v18[2 * v6];']
['v24 = ( _DWORD *)v22->fld[0].rtwint;']
['*( _OWORD *)&result->block.vars = *( _OWORD *)d.r;', '*( _OWORD *)&result->block.vars = *( _OWORD *)d.r;']
['*( _OWORD *)&result->block.vars = *( _OWORD *)d.r;', '*( _OWORD *)&result->block.vars = *( _OWORD *)d.r;']
['*( _QWORD *)( v6[1].fld[0].rtwint + 16) = v6;']
['v24 = ( _DWORD *)v22->fld[0].rtwint;']
['*( _OWORD *)&result->block.vars = *( _OWORD *)d.r;', '*( _OWORD *)&result->block.vars = *( _OWORD *)d.r;', '*( _OWORD *)&base[16 * v48] = *( _OWORD *)&base[v46];', '*( _OWORD *)&base[16 * v48] = *( _OWORD *)&base[v46];']
['*( _OWORD *)&result->block.vars = *( _OWORD *)d.r;', '*( _OWORD *)&result->block.vars = *( _OWORD *)d.r;', '*( _OWORD *)&base[16 * v48] = *( _OWORD *)&base[v46];', '*( _OWORD *)&base[16 * v48] = *( _OWORD *)&base[v46];']
['*( _OWORD *)&result->dir.ino = 0LL;', '*( _OWORD *)&rld[v2 / 0x68].in = 0LL;', '*( _QWORD *)( v6[1].fld[0].rtwint + 16) = v6;']
['v24 = ( _DWORD *)v22->fld[0].rtwint;']
['rtx v62; // rcx', 'rtx v6; // rbx', 'rtx v60; // rbx', 'rtx v32; // rbx', 'rtx v65; // rbx', 'rtx v32; // rbx', 'rtx v61; // rbx', 'rtx v22; // rbx']
['rtx v80; // [rsp+18h] [rbp-50h]', 'rtx v81; // [rsp+18h] [rbp-50h]']
['v6 = first;']
['if ( v8 )', 'if ( v4 )', 'if ( v8 )', 'if ( v34 )', 'if ( v8 )']
['rtx = v8;']
['v12 = v8;']
['v8 = ( tree_node *)*( &global_trees + 5);']
['v8 = ( tree_node *)*( &global_trees + 4);']
['v8 = ( tree_node *)*( &global_trees + 3);']
['v8 = ( tree_node *)*( &global_trees + 2);']
['v8 = ( tree_node *)*( &global_trees + 1);']
['if ( section_name == ( tree_node *)*( &global_trees + 10) )']
['if ( section_name == ( tree_node *)*( &global_trees + 9) )']
['if ( section_name == ( tree_node *)*( &global_trees + 8) )']
['if ( section_name == ( tree_node *)*( &global_trees + 7) )']
['if ( section_name == ( tree_node *)*( &global_trees + 6) )']
['p_int_cst = &low->int_cst.int_cst;']
['low = ( tree)p_int_cst->low;']
['p_int_cst = &low->int_cst.int_cst;']
['p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);']
['p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);', 'p_int_cst = ( tree_int_cst::$A887AD9C3C6C8CC7716950D571F57C9D *)( low + 32);']
['if ( section_name == ( tree_node *)*( &global_trees + 4) )', 'if ( section_name == ( tree_node *)*( &global_trees + 2) )']
['v15 = simplify_and_const_int( 0LL, ( machine_mode)BYTE2( v12), v5->fld[0].rtx, v10);']
['v16 = simplify_and_const_int( 0LL, ( machine_mode)*( ( unsigned __int8 *)v5 + 2), *( rtx *)&v5[1], v10);']
['rtx v59; // r12', 'rtx v98; // r12', 'rtx v29; // r12', 'rtx v39; // r12']
['rtx v13; // rax', 'rtx v13; // rax']
['rtx v15; // r12', 'rtx v15; // r12', 'rtx v16; // r12']
['rtx v17; // r13']
['rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx v4; // rbx']
['rtx v18; // r15', 'rtx v8; // r15', 'rtx v32; // r15', 'rtx v34; // r15', 'rtx v8; // r15']
['rtx v40; // r12']
['rtx compound_operation; // rbx']
['rtx v48; // r13', 'rtx v41; // r15', 'rtx v18; // r15', 'rtx v8; // r15', 'rtx v8; // r15', 'rtx v48; // r13']
['rtx v52; // rax']
['rtx v56; // rbx', 'rtx v58; // rbx', 'rtx v51; // rbx', 'rtx v50; // rbx', 'rtx v23; // rbx', 'rtx v53; // rax', 'rtx v55; // rbx', 'rtx v50; // rbx', 'rtx v3; // rbx', 'rtx v3; // rbx']
['rtx v24; // rax', 'rtx v24; // rax', 'rtx v24; // rax', 'rtx v24; // rax', 'rtx v24; // rax']
['rtx v25; // r12', 'rtx v25; // r12']
['rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax']
['rtx v48; // rbp', 'rtx v60; // rbp', 'rtx *v57; // rbp', 'rtx v30; // rbp', 'rtx *v54; // rbp', 'rtx *v8; // rbp', 'rtx *v43; // rbx', 'rtx v44; // rbp', 'rtx *v13; // rbp', 'rtx *v54; // rbp', 'rtx *v63; // rbp', 'rtx v48; // rbp', 'rtx *v37; // rbp']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['rtx v49; // rax', 'rtx v49; // rax']
['rtx v51; // rax', 'rtx v51; // rax', 'rtx v51; // rax']
['rtx v52; // rax']
['rtx *v54; // rbp', 'rtx *v54; // rbp', 'rtx *v63; // rbp']
['rtx v79; // [rsp+60h] [rbp-C8h] BYREF']
['rtx *v90; // [rsp+F0h] [rbp-38h]']
['v79 = op1;']
['v28 = &v79;']
['v28 = &v79;']
['v90 = v28;']
['v28 = v90 + 2;']
['v28 = &v79;']
['*( _OWORD *)&base[16 * v48] = *( _OWORD *)&base[v46];', '*( _OWORD *)&base[16 * v48] = *( _OWORD *)&base[v46];']
['rtx real_insn; // rax', 'rtx last_insn; // r14', 'rtx last_insn; // r15', 'rtx const_rtx; // rbp', 'rtx real_insn; // rbx']
['rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax']
['rtx v62; // rcx', 'rtx v64; // rcx', 'rtx v65; // rcx', 'rtx v21; // rcx', 'rtx *v60; // rax', 'rtx *v67; // rax', 'rtx *v51; // rax', 'rtx *v93; // rcx', 'rtx *v11; // rax', 'rtx *v17; // rcx', 'rtx *v26; // rcx', 'rtx v61; // rbx', 'rtx *v15; // rcx', 'rtx *v11; // rax', 'rtx *v21; // rax', 'rtx *v56; // rcx', 'rtx *v58; // rcx']
['rtx *v58; // rcx']
['result = simplify_binary_operation( ( rtx_code)v1, v2, v7, rtx);']
['v18 = gen_rtx_fmt_ee( ( rtx_code)v6, mode, v14, v17);']
['result = simplify_binary_operation( ( rtx_code)v1, v2, v7, rtx);']
['v17 = swap_condition( ( rtx_code)v47);']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),']
['( rtx_code)( unsigned __int16)*( _DWORD *)x,', '( rtx_code)( unsigned __int16)*( _DWORD *)x,']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['( rtx_code)( unsigned __int16)*( _DWORD *)x,', '( rtx_code)( unsigned __int16)*( _DWORD *)x,']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),']
['result = simplify_relational_operation( ( rtx_code)( unsigned __int16)*( _DWORD *)x, v5, x->fld[0].rtx, *( rtx *)&x[1]);']
['result = simplify_binary_operation( ( rtx_code)v1, v2, v7, rtx);']
['( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x),', '( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x),']
['rtx v37; // rbx', 'rtx v74; // rbx', 'rtx v97; // rbx']
['rtx v25; // rax']
['rtx v60; // rax', 'rtx v31; // rax', 'rtx v41; // rax', 'rtx v64; // rax', 'rtx v31; // rax', 'rtx v65; // rax', 'rtx v21; // rax', 'rtx v31; // rax', 'rtx v63; // rax', 'rtx v64; // rax', 'rtx v65; // rax', 'rtx v66; // rax', 'rtx v69; // rax', 'rtx v41; // rax', 'rtx v61; // rbx', 'rtx v51; // rax', 'rtx v11; // rax', 'rtx v51; // rax', 'rtx v67; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v21; // rax', 'rtx v51; // rax']
['rtx v7; // rax', 'rtx v7; // rax', 'rtx v31; // rax', 'rtx v41; // rax', 'rtx v70; // rax', 'rtx v31; // rax', 'rtx v70; // rax', 'rtx v21; // rax', 'rtx v31; // rax', 'rtx v78; // rax', 'rtx v74; // rax', 'rtx v75; // rax', 'rtx v41; // rax', 'rtx v51; // rax', 'rtx v11; // rax', 'rtx v70; // rax', 'rtx v51; // rax', 'rtx v73; // rax', 'rtx v21; // rax', 'rtx v51; // rax']
['return simplify_gen_subreg( mode, rtx, ( machine_mode)v4, 0);']
['v13 = simplify_gen_subreg( ( machine_mode)v11, v8, ( machine_mode)*( ( unsigned __int8 *)v8 + 2), 0);', 'v13 = simplify_gen_subreg( ( machine_mode)v11, v8, ( machine_mode)*( ( unsigned __int8 *)v8 + 2), 0);', 'result = simplify_gen_subreg( mode, rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v10);', 'result = simplify_gen_subreg( mode, rtx, ( machine_mode)*( ( unsigned __int8 *)rtx + 2), v10);']
['if ( v12 == v9 && v12 < v10 && mode_class_0[outermode] == MODE_INT )']
['if ( mode_class_0[outermode] == MODE_INT )']
['decode_rtx_const( ( machine_mode)*( ( unsigned __int8 *)x + 2), x->fld[0].rtx, &value);']
['decode_rtx_const( ( machine_mode)*( ( unsigned __int8 *)v1 + 2), *( rtx *)&v1[1], &v3);']
['v17 = mode_class_0[mode];', 'v17 = mode_class_0[mode];']
['v12 = mode_class_0[mode];', 'v17 = mode_class_0[mode];', 'v1 = mode_class_0[mode];', 'v13 = mode_class_0[mode];', 'v1 = mode_class_0[mode];', 'v10 = mode_class_0[mode];', 'v17 = mode_class_0[mode];', 'v18 = mode_class_0[mode];']
['v17 = simplify_relational_operation( ( rtx_code)*( _WORD *)v7, op0_mode, v7->fld[0].rtx, *( rtx *)&v7[1]);']
['rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax', 'rtx result; // rax']
['result = 0LL;']
['return gen_rtx_CONST_INT( ( machine_mode)c, v2);']
['return result;', 'return result;', 'return result;', 'return result;', 'return result;']
['if ( !size_int_type_wide_size_htab )']
['size_int_type_wide_size_htab = htab_create( 0x400uLL, size_htab_hash, size_htab_eq, 0LL);']
['ggc_add_deletable_htab( size_int_type_wide_size_htab, 0LL, 0LL);']
['size_int_type_wide_new_const = make_node( INTEGER_CST);']
['ggc_add_tree_root( &size_int_type_wide_new_const, 1);']
['v2 = size_int_type_wide_new_const;', 'v5 = size_int_type_wide_new_const;']
['*( _OWORD *)&size_int_type_wide_new_const->block.vars = number;', '*( _OWORD *)&size_int_type_wide_new_const->block.vars = number;']
['*( _OWORD *)&size_int_type_wide_new_const->block.vars = number;', '*( _OWORD *)&size_int_type_wide_new_const->block.vars = number;']
['v5 = size_int_type_wide_new_const;']
['*( ( _DWORD *)&size_int_type_wide_new_const->common + 4) = *( ( _DWORD *)&size_int_type_wide_new_const->common + 4) & 0xFFF3FFFF | ( ( v3 & 1) << 18) | ( ( v3 & 1) << 19);', '*( ( _DWORD *)&size_int_type_wide_new_const->common + 4) = *( ( _DWORD *)&size_int_type_wide_new_const->common + 4) & 0xFFF3FFFF | ( ( v3 & 1) << 18) | ( ( v3 & 1) << 19);']
['*( ( _DWORD *)&size_int_type_wide_new_const->common + 4) = *( ( _DWORD *)&size_int_type_wide_new_const->common + 4) & 0xFFF3FFFF | ( ( v3 & 1) << 18) | ( ( v3 & 1) << 19);', '*( ( _DWORD *)&size_int_type_wide_new_const->common + 4) = *( ( _DWORD *)&size_int_type_wide_new_const->common + 4) & 0xFFF3FFFF | ( ( v3 & 1) << 18) | ( ( v3 & 1) << 19);']
['slot = htab_find_slot( size_int_type_wide_size_htab, size_int_type_wide_new_const, INSERT);', 'slot = htab_find_slot( size_int_type_wide_size_htab, size_int_type_wide_new_const, INSERT);']
['v5 = ( tree_node *)*slot;']
['v2 = size_int_type_wide_new_const;', 'v5 = size_int_type_wide_new_const;']
['*slot = size_int_type_wide_new_const;']
['size_int_type_wide_new_const = make_node( INTEGER_CST);']
['if ( !cpp_trigraph_map[v3] )']
['if ( !cpp_trigraph_map[v3] )', 'cpp_trigraph_map[v3]);']
['v12 = sch_istable[( unsigned __int8)v7];']
['cpp_trigraph_map[v3]);']
['v3 = *( _OWORD *)&diagnostic_buffer->state.indent_skip;']
['v4 = *( _OWORD *)&diagnostic_buffer->state.cursor;']
['v5 = *( _OWORD *)diagnostic_buffer->state.diagnostic_count;']
['v13 = *( _OWORD *)&diagnostic_buffer->state.prefix;']
['v9 = *( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4];', 'v17 = *( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4];']
['diagnostic_buffer->state.format_args = ( va_list_0 *)va;']
['*( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4] = v9;', '*( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4] = v17;']
['*( _OWORD *)v4->state.diagnostic_count = v8;', '*( _OWORD *)v8->state.diagnostic_count = v16;']
['v11 = *( _WORD *)v9;']
['v16 = *( _OWORD *)( aux + 24);']
['v16 = *( _OWORD *)( aux + 24);']
['*( _OWORD *)&base[16 * v48] = *( _OWORD *)&base[v46];', '*( _OWORD *)&base[16 * v48] = *( _OWORD *)&base[v46];']
['*( _OWORD *)&base[16 * v48] = *( _OWORD *)&base[v46];', '*( _OWORD *)&base[16 * v48] = *( _OWORD *)&base[v46];']
['*( _QWORD *)&v6[1] = v8;', '*( _QWORD *)( v8 + 24) = v6;']
['*( _QWORD *)&v6[1] = v8;']
['*( _QWORD *)( v8 + 24) = v6;']
['v16 = *( _OWORD *)( aux + 24);', 'v22 = *( _WORD *)v21;']
['v22 = ( ( unsigned int)( mode_class_0[( unsigned __int8)BYTE2( *( _DWORD *)reg_rtx)] - 5) < 2) + 1;']
['*( _OWORD *)&result->head = 0LL;']
['rtx v60; // rax', 'rtx v31; // rax', 'rtx v41; // rax', 'rtx v64; // rax', 'rtx v31; // rax', 'rtx v65; // rax', 'rtx v21; // rax', 'rtx v31; // rax', 'rtx v63; // rax', 'rtx v64; // rax', 'rtx v65; // rax', 'rtx v66; // rax', 'rtx v69; // rax', 'rtx v41; // rax', 'rtx v61; // rbx', 'rtx v51; // rax', 'rtx v11; // rax', 'rtx v51; // rax', 'rtx v67; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v21; // rax', 'rtx v51; // rax']
['rtx v13; // rax', 'rtx v34; // rax', 'rtx v14; // rax', 'rtx v14; // rax', 'rtx v13; // rax', 'rtx v14; // rax']
['rtx v19; // rax', 'rtx v19; // rax', 'rtx v19; // rax', 'rtx v49; // rax', 'rtx v14; // rax', 'rtx v19; // rax', 'rtx v14; // rax', 'rtx v14; // rax', 'rtx v49; // rax']
['recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[0] = v4.rtx;', 'recog_data_0.operand[0] = v4.rtx;', 'recog_data_0.operand[0] = v4.rtx;']
['recog_data_0.operand[1] = ( rtx)v13;', 'recog_data_0.operand[1] = ( rtx)v13;', 'recog_data_0.operand[1] = ( rtx)v23;']
['return gen_split_1133( recog_data_0.operand);']
['recog_data_0.operand[1] = ( rtx)v38;', 'recog_data_0.operand[1] = ( rtx)v48;']
['return gen_split_1135( recog_data_0.operand);']
['recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[0] = v6.rtx;', 'recog_data_0.operand[0] = v4.rtx;', 'recog_data_0.operand[0] = v4.rtx;', 'recog_data_0.operand[0] = v4.rtx;']
['recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;']
['recog_data_0.operand[1] = ( rtx)v7;']
['return gen_split_881( recog_data_0.operand);', 'return gen_split_881( recog_data_0.operand);', 'return gen_split_881( recog_data_0.operand);']
['return gen_split_881( recog_data_0.operand);', 'return gen_split_881( recog_data_0.operand);', 'return gen_split_881( recog_data_0.operand);']
['return gen_split_881( recog_data_0.operand);', 'return gen_split_881( recog_data_0.operand);', 'return gen_split_881( recog_data_0.operand);']
['v10 = *( unsigned __int16 *)recog_data_0.operand[0];']
['rtuint = recog_data_0.operand[0]->fld[0].rtuint;']
['else if ( v10 != 61 || recog_data_0.operand[0]->fld[0].rtint > 3u )']
['&& !reg_overlap_mentioned_p( recog_data_0.operand[0], ( rtx)v6) )']
['return gen_split_882( recog_data_0.operand);']
['recog_data_0.operand[1] = ( rtx)v7;']
['v162 = true_regnum( recog_data_0.operand[0]);']
['if ( v162 == true_regnum( recog_data_0.operand[1]) )']
['return gen_split_883( recog_data_0.operand);']
['recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;']
['recog_data_0.operand[1] = ( rtx)v13;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[1] = ( rtx)v13;', 'recog_data_0.operand[1] = ( rtx)v19;', 'recog_data_0.operand[1] = ( rtx)v19;', 'recog_data_0.operand[1] = ( rtx)v19;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[1] = ( rtx)v12;', 'recog_data_0.operand[1] = ( rtx)v12;']
['return gen_split_879( recog_data_0.operand);']
['recog_data_0.operand[1] = ( rtx)v13;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[1] = ( rtx)v13;', 'recog_data_0.operand[1] = ( rtx)v19;', 'recog_data_0.operand[1] = ( rtx)v19;', 'recog_data_0.operand[1] = ( rtx)v19;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[1] = ( rtx)v12;', 'recog_data_0.operand[1] = ( rtx)v12;']
['return gen_split_885( recog_data_0.operand);']
['recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[0] = ( rtx)v4;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[0] = ( rtx)v4;', 'recog_data_0.operand[0] = ( rtx)v4;', 'recog_data_0.operand[0] = ( rtx)v4;', 'recog_data_0.operand[0] = ( rtx)v7;', 'recog_data_0.operand[0] = ( rtx)v7;', 'recog_data_0.operand[0] = ( rtx)v7;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;']
['recog_data_0.operand[1] = v8;', 'recog_data_0.operand[1] = v87;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[0] = v85;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[0] = v85;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v88;', 'recog_data_0.operand[1] = v15;']
['recog_data_0.operand[5] = v86;', 'recog_data_0.operand[2] = v83;', 'recog_data_0.operand[2] = v16;', 'recog_data_0.operand[2] = v84;', 'recog_data_0.operand[2] = v84;', 'recog_data_0.operand[2] = v83;', 'recog_data_0.operand[2] = v83;', 'recog_data_0.operand[2] = v83;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v16;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v16;', 'recog_data_0.operand[2] = v88;', 'recog_data_0.operand[2] = v8;', 'recog_data_0.operand[2] = v8;']
['recog_data_0.operand[3] = v89;', 'recog_data_0.operand[2] = v88;', 'recog_data_0.operand[1] = v88;']
['if ( rtx_equal_p( *( rtx *)( v91 + 8), recog_data_0.operand[1]) )', 'if ( rtx_equal_p( *( rtx *)( v43 + 8), recog_data_0.operand[1]) )', 'if ( rtx_equal_p( *( rtx *)( v12 + 8), recog_data_0.operand[1]) )']
['v44 = rtx_equal_p( *( rtx *)( v43 + 16), recog_data_0.operand[2]);', 'v13 = rtx_equal_p( *( rtx *)( v12 + 16), recog_data_0.operand[2]);']
['return gen_split_1003( recog_data_0.operand);']
['recog_data_0.operand[1] = v10;', 'recog_data_0.operand[1] = v10;']
['recog_data_0.operand[2] = v11;']
['recog_data_0.operand[3] = v54;', 'recog_data_0.operand[3] = v10;', 'recog_data_0.operand[3] = v24;', 'recog_data_0.operand[3] = v11;', 'recog_data_0.operand[3] = v15;']
['if ( rtx_equal_p( *( rtx *)( v12 + 8), recog_data_0.operand[1]) )']
['v13 = rtx_equal_p( *( rtx *)( v12 + 16), recog_data_0.operand[2]);']
['return gen_split_1005( recog_data_0.operand);']
['recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[0] = ( rtx)v4;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[1] = ( rtx)v6;', 'recog_data_0.operand[0] = ( rtx)v4;', 'recog_data_0.operand[0] = ( rtx)v4;', 'recog_data_0.operand[0] = ( rtx)v4;', 'recog_data_0.operand[0] = ( rtx)v7;', 'recog_data_0.operand[0] = ( rtx)v7;', 'recog_data_0.operand[0] = ( rtx)v7;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;']
['recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v15;', 'recog_data_0.operand[1] = v51;']
['recog_data_0.operand[2] = v65;', 'recog_data_0.operand[2] = v65;', 'recog_data_0.operand[2] = v65;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v6;', 'recog_data_0.operand[2] = v10;', 'recog_data_0.operand[2] = v40;']
['&& dead_or_set_p( insn, recog_data_0.operand[1])']
['&& !reg_mentioned_p( recog_data_0.operand[1], recog_data_0.operand[0]) )', '&& !reg_mentioned_p( recog_data_0.operand[1], recog_data_0.operand[0]) )']
['rtx v8; // rax', 'rtx v8; // rax', 'rtx v8; // rax']
['v5 = next_nonnote_insn( v2);']
['if ( v8 )', 'if ( v8 )', 'if ( v8 )']
['if ( *( _WORD *)v8 == 63 )', 'if ( *( _WORD *)v3 == 37 )', 'if ( *( _WORD *)v3 == 37 )']
['v9 = ( rtx)v5[1];', 'v7 = ( rtx)v7[1];', 'v4 = ( rtx)v4[1];']
['while ( *( _WORD *)in == 63 )', 'while ( *( _WORD *)v21 != 34 )']
['v6 = v5;', 'v6 = v5;', 'v6 = v5;', 'v6 = v5;']
['recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;', 'recog_data_0.insn = 0LL;']
['recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;']
['return gen_split_1179( recog_data_0.operand);']
['recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;', 'recog_data_0.operand[0] = ( rtx)v5;']
['return gen_split_1178( recog_data_0.operand);']
['v10 = ( tree_node *)high;']
['v22 = ( tree_node *)low;']
['rtx v5; // rdx', 'rtx v5; // rdx']
['rtx v6; // rax', 'rtx v6; // rax']
['v5 = *startp;']
['v6 = v5;', 'v6 = v5;', 'v6 = v5;', 'v6 = v5;']
['v6 = v5;', 'v6 = v5;', 'v6 = v5;', 'v6 = v5;']
['v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['if ( *( _WORD *)v6 == 37 && ( unsigned int)( v6[2].fld[0].rtint + 98) <= 5 )', 'if ( *( _WORD *)v6 == 37 && ( unsigned int)( v6[2].fld[0].rtint + 98) <= 5 )']
['if ( *( _WORD *)v6 == 37 && ( unsigned int)( v6[2].fld[0].rtint + 98) <= 5 )', 'if ( *( _WORD *)v6 == 37 && ( unsigned int)( v6[2].fld[0].rtint + 98) <= 5 )']
['if ( v6 == v2 )']
['v2 = v5;', 'v2 = v5;']
['v7 = ( __int64)v6[1];']
['*( _QWORD *)&v6[1] = v8;']
['v6[1].fld[0].rtwint = ( __int64)v2;']
['*( _QWORD *)( v8 + 24) = v6;']
['*( _QWORD *)( v6[1].fld[0].rtwint + 16) = v6;']
['rtx in; // rdi']
['rtx v35; // rbx', 'rtx v32; // rbx', 'rtx v30; // rbx', 'rtx v32; // rbx', 'rtx v19; // rbx', 'rtx v3; // rbx', 'rtx v3; // rbx', 'rtx v37; // rbx']
['rtx v20; // rax', 'rtx v60; // rax', 'rtx v5; // rax', 'rtx v54; // rax', 'rtx v58; // rax', 'rtx v30; // rax', 'rtx v59; // rax', 'rtx v50; // rbx', 'rtx v30; // rax', 'rtx v70; // rax', 'rtx v20; // rax', 'rtx v20; // rax', 'rtx v57; // rax', 'rtx v10; // rax', 'rtx v30; // rax', 'rtx v40; // rax', 'rtx v55; // rax', 'rtx v53; // rax', 'rtx v55; // rax', 'rtx v70; // rax', 'rtx v40; // rax', 'rtx v50; // rbx', 'rtx v52; // rax', 'rtx v55; // rax', 'rtx v20; // rax', 'rtx v51; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v70; // rax', 'rtx v40; // rax', 'rtx v51; // rax', 'rtx v55; // rax', 'rtx v5; // rax', 'rtx v40; // rax', 'rtx v55; // rax', 'rtx v30; // rax', 'rtx v40; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v51; // rax', 'rtx v40; // rax']
['rtx v51; // rbx']
['v17 = rtvec_alloc( rtvec->num_elem);']
['in_section_0 = in_text;']
['v2 = reg_avail_info_0;', 'v2 = reg_avail_info_0;']
['v4 = reg_note;', 'v4 = reg_note;', 'v3 = args_size_0;']
['insn = chain->insn;', 'insn = i->insn;']
['|| *( _WORD *)v12 != 135', '|| *( _WORD *)v27 != 61']
['if ( in )']
['for ( i = ( __int64)v3[3]; i; i = *( _QWORD *)( i + 16) )']
['v19 = insn_addresses_->data.i[v18->fld[0].rtint];']
['v5 = next_nonnote_insn( v2);']
['rtx v41; // rax', 'rtx v41; // rdx', 'rtx v21; // rcx', 'rtx v41; // rax', 'rtx v43; // rcx', 'rtx v45; // rcx']
['rtx v69; // rax']
['rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v19; // rbp', 'rtx v9; // rbp', 'rtx v19; // rbp', 'rtx v7; // rbp']
['rtx v82; // rax']
['rtx v23; // rbx', 'rtx v80; // rbx', 'rtx v80; // rbx', 'rtx v3; // rbx', 'rtx v3; // rbx']
['rtx reg_equal_equiv_note; // rax']
['rtx v58; // rbx', 'rtx v80; // rbx', 'rtx v80; // rbx', 'rtx v18; // rbx', 'rtx v88; // rax', 'rtx v88; // rax']
['rtx v31; // rax', 'rtx v41; // rax', 'rtx v31; // rax', 'rtx v21; // rax', 'rtx v31; // rax', 'rtx v41; // rax', 'rtx v51; // rax', 'rtx v11; // rax', 'rtx v51; // rax', 'rtx v9; // rax', 'rtx v93; // rax', 'rtx v21; // rax', 'rtx v51; // rax']
['rtx v7; // rax', 'rtx v5; // rax', 'rtx v7; // rax', 'rtx v3; // rax', 'rtx v4; // rax', 'rtx v8; // rax', 'rtx v8; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v9; // rax', 'rtx v5; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v8; // rax']
['v4 = ( tree_node *)ggc_alloc( 0x28uLL);']
['*( _OWORD *)&v4->common.chain = 0LL;']
['v4 = ( tree_node *)ggc_alloc( 0x28uLL);']
['*( _OWORD *)&v4->common.chain = 0LL;']
['v3 = mode_class_0[v2];', 'v3 = mode_class_0[v2];']
['*( _OWORD *)&e->flags = 0LL;']
['*( _OWORD *)&binding_level->this_block = 0LL;']
['*( _OWORD *)&v2->loads = 0LL;']
['*( _OWORD *)&v2->loads = 0LL;']
['v7->next = constructor_stack_0;']
['v7->range_stack = constructor_range_stack_0;']
['if ( spelling_base < spelling_0 )', 'if ( spelling_base < spelling_0 )']
['v7->next = constructor_stack_0;']
['constructor_stack_0 = v7;']
['constructor_stack_0 = v7;']
['constructor_range_stack_0 = 0LL;']
['args_size_0 = 0LL;']
['stack_0 = v2;']
['*( _OWORD *)v4->bits = *( _OWORD *)first->bits;']
['*( _OWORD *)v4->bits = *( _OWORD *)first->bits;']
['*( _OWORD *)&emit->x_first_insn = 0LL;']
['LODWORD( v2) = lang_hooks_0.staticp( arg);']
['set_diagnostic_context( &v3, msgid, ( va_list_0 *)va, input_filename, lineno, 1);']
['v11 = ( tree_node *)*( &global_trees + 15);']
['v12 = expand_expr( valist, 0LL, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), EXPAND_NORMAL);']
['tree v8; // rax']
['v8 = build( MODIFY_EXPR, type, valist, tree);']
['*( ( _BYTE *)&v8->block.common + 17) |= 1u;']
['expand_expr( v8, const_int_rtx[64], VOIDmode, EXPAND_NORMAL);']
['rtx v15; // r12', 'rtx v15; // r12']
['rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax']
['rtx v25; // rax']
['rtx v47; // rax']
['rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax', 'rtx v17; // rax']
['v9 = adjust_address_1( op, DImode, 0LL, 1, 1);']
['v9 = adjust_address_1( op, DImode, 0LL, 1, 1);']
['v19 = v17;']
['mode_alignment = get_mode_alignment( ( machine_mode)v4);']
['rtx v42; // rdx', 'rtx v41; // rdx', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v42; // rdx', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax', 'rtx v40; // rax']
['rtx i; // rbx', 'rtx i; // rbx', 'rtx i; // rbx']
['rtx i; // rbx', 'rtx i; // rbx', 'rtx i; // rbx']
['rtx v20; // rax', 'rtx v60; // rax', 'rtx v5; // rax', 'rtx v54; // rax', 'rtx v58; // rax', 'rtx v30; // rax', 'rtx v59; // rax', 'rtx v50; // rbx', 'rtx v30; // rax', 'rtx v70; // rax', 'rtx v20; // rax', 'rtx v20; // rax', 'rtx v57; // rax', 'rtx v10; // rax', 'rtx v30; // rax', 'rtx v40; // rax', 'rtx v55; // rax', 'rtx v53; // rax', 'rtx v55; // rax', 'rtx v70; // rax', 'rtx v40; // rax', 'rtx v50; // rbx', 'rtx v52; // rax', 'rtx v55; // rax', 'rtx v20; // rax', 'rtx v51; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v70; // rax', 'rtx v40; // rax', 'rtx v51; // rax', 'rtx v55; // rax', 'rtx v5; // rax', 'rtx v40; // rax', 'rtx v55; // rax', 'rtx v30; // rax', 'rtx v40; // rax', 'rtx v30; // rax', 'rtx v30; // rax', 'rtx v51; // rax', 'rtx v40; // rax']
['rtx v62; // r12']
['&& ( mode == BLKmode || direct_store[mode] || ( unsigned int)( mode_class_0[mode] - 5) <= 1)']
['v24 = convert_modes( mode, ( machine_mode)v26, v24, 1);']
['v13 = immed_double_const( cnst1, v12, ( machine_mode)v10);']
['v10 = gen_lowpart( ( machine_mode)*( ( unsigned __int8 *)op + 2), v8);']
['v26 = convert_to_mode( ( machine_mode)v19, value, 1);']
['v3 = ( tree_node *)v4;']
['if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['v6 = *( tree_node **)( v4.rtwint + 8);']
['v7 = ( tree_node *)high[4];']
['v7 = ( tree_node *)high[4];']
['v4 = *( tree_node **)( *high + 32LL);', 'v27 = *( tree_node **)( v23 + 104);']
['rtx fixed_bit_field; // rax', 'rtx fixed_bit_field; // rax']
['rtx v37; // [rsp+20h] [rbp-98h]', 'rtx v33; // [rsp+10h] [rbp-48h]']
['v14 = v13;', 'v34 = v33;', 'v34 = v33;', 'v12 = v11;', 'v33 = v10;']
['fixed_bit_field = gen_rtx_CONST_INT( VOIDmode, ( ( unsigned __int64)v10->fld[0].rtwint >> v19) & ~( -1LL << v27));']
['fixed_bit_field = extract_fixed_bit_field( *(short *)0xmode, v10, 0LL, v27, v19, 0LL, 1);']
['v30 = fixed_bit_field;']
['rtx = operand_sub*(short *)0xforce( rtx, v22, v20);']
['v13 = v12;', 'v13 = v12;']
['rtx v20; // rax', 'rtx v20; // rax', 'rtx v20; // rax', 'rtx v21; // rax', 'rtx v20; // rax', 'rtx v21; // rax']
['rtx v20; // rax', 'rtx v28; // rax', 'rtx v28; // rax', 'rtx v20; // rax', 'rtx v28; // rax', 'rtx v20; // rax', 'rtx v20; // rax']
['rtx v12; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v12; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v21; // rax', 'rtx v12; // rax', 'rtx v22; // rax', 'rtx v21; // rax']
['rtx v13; // rax', 'rtx v23; // rax', 'rtx v23; // rax', 'rtx v21; // rax', 'rtx v13; // rax', 'rtx v21; // rax']
['rtx v28; // rax', 'rtx v18; // rax', 'rtx v28; // rax', 'rtx v28; // rax', 'rtx v21; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v21; // rax']
['rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v23; // rax', 'rtx v22; // rax', 'rtx v23; // rax', 'rtx v123; // rax', 'rtx v22; // rax']
['rtx v27; // rbp', 'rtx v27; // rbp']
['rtx *v22; // rax']
['rtx v23; // rbp']
['v3 = ( tree_node *)v4;']
['v18 = ( tree_node *)high;', 'v10 = ( tree_node *)high;']
['if ( check_mode && !ix86_hard_regno_mode_ok( v5, ( machine_mode)( unsigned __int8)BYTE2( *rtwint)) )']
['( machine_mode)*( unsigned __int8 *)( v1.rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)x + 2));', '( machine_mode)*( ( unsigned __int8 *)x + 2));']
['v5 = ( ( unsigned int)( mode_class_0[xmode] - 5) < 2) + 1;']
['v6 = ( ( unsigned int)( mode_class_0[ymode] - 5) < 2) + 1;']
['rtx = gen_rtx_fmt_e( USE, ( machine_mode)BYTE2( v5), rtx);']
['( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v4),']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2));']
['( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v4),', '( machine_mode)BYTE2( v4),']
['( machine_mode)*( unsigned __int8 *)( v3->fld[0].rtwint + 2),']
['rtx *v21; // r14', 'rtx v25; // r12', 'rtx *v13; // r13', 'rtx *v24; // r14', 'rtx v22; // r12', 'rtx v25; // r12', 'rtx v29; // r12', 'rtx *v23; // rdx', 'rtx *v5; // r12', 'rtx *v41; // r12']
['rtx *v25; // rax']
['rtx v34; // rax']
['rtx v36; // rax', 'rtx v36; // rax']
['rtx *v24; // r14', 'rtx **v47; // rsi', 'rtx *v41; // r12']
['rtx v46; // rax', 'rtx v46; // rax', 'rtx v36; // rcx', 'rtx v43; // rcx', 'rtx v26; // rcx', 'rtx v45; // rcx']
['rtx *v93; // rcx', 'rtx *v59; // rbx', 'rtx *v15; // rcx', 'rtx *v56; // rcx', 'rtx *v58; // rcx', 'rtx *v55; // rbx']
['rtx *v52; // rax']
['rtx v57; // rcx']
['rtx *v15; // rcx']
['rtx *v52; // rax', 'rtx v42; // rdx', 'rtx v62; // rcx', 'rtx *v96; // rdx', 'rtx *v22; // rax', 'rtx *v60; // rax', 'rtx *v67; // rax', 'rtx v42; // rdx', 'rtx v12; // rdx', 'rtx *v23; // rdx', 'rtx *v12; // rdi', 'rtx v64; // rdx']
['rtx v62; // rcx', 'rtx v64; // rcx', 'rtx v65; // rcx', 'rtx v27; // rcx', 'rtx v37; // rcx', 'rtx v57; // rcx', 'rtx v17; // rcx', 'rtx v77; // rcx', 'rtx v67; // rax']
['rtx *v13; // rbp']
['rtx v15; // r12', 'rtx v15; // r12']
['rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax', 'rtx v22; // rax']
['rtx v23; // rax', 'rtx v23; // rax']
['rtx v37; // rbx']
['rtx v44; // rax', 'rtx v44; // rax', 'rtx v44; // rax', 'rtx v44; // rax']
['rtx *v50; // rsi']
['rtx *v60; // rax', 'rtx *v67; // rax', 'rtx *v51; // rax', 'rtx *v11; // rax', 'rtx *v11; // rax', 'rtx *v21; // rax']
['rtx v8; // rax', 'rtx v8; // rax', 'rtx v8; // rax']
['rtx v69; // rsi']
['rtx v10; // rax', 'rtx v18; // rcx', 'rtx v20; // rcx', 'rtx v17; // rcx', 'rtx v10; // rax', 'rtx v10; // rbx', 'rtx v10; // rax']
['&& ( v10 = gen_lowpart_common( ( machine_mode)v9, out)) != 0LL )']
['rtx = v10;']
['v9 = ( rtx)v5[1];']
['v20 = reg_equiv_mem[rtint];']
['v18 = recog_data_0.operand[0]->fld[0].rtx;', 'v18 = recog_data_0.operand[0]->fld[0].rtx;']
['if ( v4 == rtx )', 'if ( v4 == rtx )']
['rtx = v8;']
['v19 = v3;']
['v3 = group_leader( v3);', 'v3 = group_leader( v3);']
['if ( v6 == v2 )']
['if ( *( _WORD *)v32 == 75 )', 'if ( *( _WORD *)v15 == 75 )']
['v19 = (  struct rtx_def *)v15[1];']
['v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);', 'v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);']
['v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);', 'v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);']
['v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);', 'v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);']
['*( _OWORD *)classes = xmm*(short *)0x639810;', 'v14 = safe_hash( v5, ( machine_mode)v9);']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;', 'v15 = single_set_2( ( rtx)v14, *( ( rtx *)v14 + 4));']
['v13 = immed_double_const( cnst1, v12, ( machine_mode)v10);']
['v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);', 'v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['rtx v37; // rbx', 'rtx v74; // rbx', 'rtx v97; // rbx']
['rtx v10; // rbx']
['rtx regno_note; // rbp']
['rtx v40; // r12', 'rtx *v41; // r12']
['rtx *v43; // rbx']
['rtx v48; // rbp', 'rtx v45; // rbx', 'rtx v44; // rbp', 'rtx v48; // rbp']
['rtx v46; // rax', 'rtx v46; // rax']
['rtx v67; // rax']
['rtx v58; // rbx', 'rtx *v27; // rbx', 'rtx *v25; // rbx', 'rtx v78; // rax', 'rtx v18; // rbx', 'rtx *v59; // rbx', 'rtx *v19; // rbx', 'rtx *v17; // rbx', 'rtx *v58; // rcx', 'rtx *v8; // rbp', 'rtx *v43; // rbx', 'rtx *v55; // rbx', 'rtx v74; // rbx']
['*( _WORD *)pat = swap_condition( ( rtx_code)v2);']
['rtx v7; // rax', 'rtx v5; // rax', 'rtx v7; // rax', 'rtx v3; // rax', 'rtx v4; // rax', 'rtx v8; // rax', 'rtx v8; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v9; // rax', 'rtx v5; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v8; // rax']
['rtx v42; // r14']
['rtx v48; // rbp', 'rtx v48; // rbp']
['rtx *v54; // rbp', 'rtx *v54; // rbp']
['rtx v36; // rdi', 'rtx v16; // rdi']
['rtx v17; // rax', 'rtx v7; // rax', 'rtx v17; // rax', 'rtx v7; // rax', 'rtx v27; // rax', 'rtx v47; // rax', 'rtx v70; // rax', 'rtx v57; // rax', 'rtx v17; // rax', 'rtx v27; // rax', 'rtx v70; // rax', 'rtx v78; // rax', 'rtx v27; // rax', 'rtx v74; // rax', 'rtx v75; // rax', 'rtx v27; // rax', 'rtx v17; // rax', 'rtx v27; // rax', 'rtx v70; // rax', 'rtx v77; // rcx', 'rtx v67; // rax', 'rtx v73; // rax']
['rtx v78; // rax']
['rtx v8; // r12', 'rtx v98; // r12']
['rtx v24; // rax', 'rtx v54; // rax', 'rtx v34; // rax', 'rtx v64; // rax', 'rtx v24; // rax', 'rtx v24; // rax', 'rtx v4; // rax', 'rtx v44; // rax', 'rtx v64; // rax', 'rtx v14; // rax', 'rtx v74; // rax', 'rtx v24; // rax', 'rtx v14; // rax', 'rtx v44; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v4; // rax', 'rtx v9; // rax', 'rtx v93; // rax', 'rtx v44; // rax', 'rtx v14; // rax', 'rtx v44; // rax', 'rtx v24; // rax']
['rtx v8; // rax', 'rtx v8; // rax', 'rtx v8; // rax']
['delete_insn( v4);']
['v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v3 = v3[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;', 'v5 = v5[1].fld[0].rtx;']
['rtx = v8;']
['v1 = stack_0;']
['if ( &timevars[timevar] != stack_0->timevar )']
['stack_0 = stack_0->next;', 'stack_0 = stack_0->next;']
['stack_0 = stack_0->next;', 'stack_0 = stack_0->next;']
['v1 = stack_0;']
['if ( stack_0 )']
['v1 = stack_0;']
['if ( &timevars[timevar] != stack_0->timevar )']
['v1 = stack_0;']
['stack_0 = v2;']
['rtx v10; // r14', 'rtx v13; // r14', 'rtx v71; // r14', 'rtx v15; // r14', 'rtx v41; // r14', 'rtx v15; // r14', 'rtx v11; // r15']
['v11 = assign_stack_local_1( BLKmode, v9, 0, v10);']
['node->int_cst.int_cst.high = ( __int64)v11;']
['rtx = v11->fld[0].rtx;']
['v11 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v15 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v14 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v19 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));', 'v1 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32));']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),', '( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32),']
['*( _OWORD *)&result->common.chain = 0LL;']
['rtx base_value; // rax']
['v4 = find_base_term( v3);']
['|| ( v43 = *loc, v46 = to, ( ( *( _DWORD *)from ^ v8) & 0xFFFFFF) == 0)']
['if ( base_value )']
['if ( base_alias_check( addr, y, ( machine_mode)*( ( unsigned __int8 *)x + 2), v6) )']
['( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( x->fld[0].rtwint + 2),']
['( machine_mode)*( ( unsigned __int8 *)x + 2));', '( machine_mode)*( ( unsigned __int8 *)x + 2));']
['rtx *v13; // r13']
['rtx v16; // rbp']
['rtx *v31; // rsi', 'rtx *v58; // rcx', 'rtx *v32; // rsi', 'rtx *v37; // rbp']
['rtx v50; // rbx', 'rtx v60; // rbp', 'rtx v52; // rbp', 'rtx v50; // rbx', 'rtx v30; // rbp', 'rtx v51; // rbp']
['rtx v22; // r15', 'rtx v32; // r15', 'rtx v12; // r15', 'rtx v52; // r12']
['rtx *v13; // r13', 'rtx *v24; // r14', 'rtx *v59; // r15', 'rtx *v54; // rbp', 'rtx *v5; // r12', 'rtx *v54; // rbp']
['rtx v60; // rax']
['rtx v62; // rcx', 'rtx v64; // rcx', 'rtx v65; // rcx', 'rtx v63; // rax', 'rtx v43; // rcx']
['rtx v62; // rcx', 'rtx v22; // rcx', 'rtx v77; // rcx']
['rtx v34; // rbp', 'rtx v34; // rbp', 'rtx v7; // rbp', 'rtx v44; // rbp', 'rtx v74; // rbx']
['rtx v9; // rax']
['rtx v12; // rax', 'rtx v12; // rax', 'rtx v12; // rax']
['rtx v62; // [rsp+10h] [rbp-68h]']
['rtx v28; // [rsp+10h] [rbp-58h]']
['rtx x; // [rsp+8h] [rbp-40h] BYREF', 'rtx y; // [rsp+28h] [rbp-40h] BYREF', 'rtx x; // [rsp+8h] [rbp-40h] BYREF']
['v3 = reg_set_table[regno];']
['v8 = ( rtx)rtx[2];']
['if ( *( _WORD *)v19 != 47 )', 'if ( *( _WORD *)v19 != 47 )']
['v8 = single_set_2( rtx, *( rtx *)&rtx[2]);']
['if ( v19 )']
['v19.rtwint = ( __int64)v18->fld[0];']
['rtx v40; // r12']
['rtx v41; // rax', 'rtx v51; // rbx', 'rtx v41; // rdx', 'rtx v21; // rbx', 'rtx v41; // rax', 'rtx v61; // rbx', 'rtx v4; // rbx', 'rtx v45; // rbx']
['rtx v48; // r13', 'rtx v41; // r15', 'rtx v18; // r15', 'rtx v8; // r15', 'rtx v8; // r15', 'rtx v48; // r13']
['rtx v49; // rax', 'rtx v49; // rax']
['rtx *v50; // rsi', 'rtx *v31; // rsi']
['rtx reg_equal_equiv_note; // rax']
['rtx v63; // rax']
['rtx v58; // rbx', 'rtx v80; // rbx', 'rtx v80; // rbx', 'rtx v18; // rbx', 'rtx v88; // rax', 'rtx v88; // rax']
['rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax', 'rtx nonnote_insn; // rax']
['v27 = gen_reg_rtx( biv->mode);']
['rtx last_insn; // r14', 'rtx last_insn; // r15']
['( machine_mode)*( unsigned __int8 *)( v2.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v25.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v25.rtwint + 2),']
['( machine_mode)*( unsigned __int8 *)( v2.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v25.rtwint + 2),', '( machine_mode)*( unsigned __int8 *)( v25.rtwint + 2),']
['( machine_mode)v12,', '( machine_mode)v9,', '( machine_mode)v16,', '( machine_mode)v14,']
['( machine_mode)v12,', '( machine_mode)v9,', '( machine_mode)v16,', '( machine_mode)v14,']
['emit_cmp_and_jump_insns( v6, v6, EQ, 0LL, ( machine_mode)*( ( unsigned __int8 *)v6 + 2), 0, label);']
['v37 = convert_modes( ( machine_mode)v35, mode, x, unsignedp);']
['v26 = gen_rtx_fmt_ee( MINUS, ( machine_mode)v10, v12, v27);']
['v11 = gen_rtx_fmt_u00( LABEL_REF, ( machine_mode)( ( ( target_flags & 0x2000000 | 0x500000000uLL) - 1) >> 32), table_label);']
['v70 = gen_rtx_fmt_ee( PLUS, ( machine_mode)v67, v68, v69);']
['v13 = memory_address_noforce( ( machine_mode)( ( ( target_flags & 0x2000000) == 0 || ( _DWORD)flag_pic != 0) ^ 5), v12);']
['v14 = gen_reg_rtx( ( machine_mode)( ( ( target_flags & 0x2000000) == 0 || ( _DWORD)flag_pic != 0) ^ 5));']
['v15 = gen_rtx_MEM( ( machine_mode)( ( ( target_flags & 0x2000000) == 0 || ( _DWORD)flag_pic != 0) ^ 5), v13);']
['if ( *( _OWORD *)&args1 != 0LL )']
['elements = *( tree_node **)( v3 + 32);']
['rtx v12; // rax', 'rtx v15; // rax', 'rtx v17; // rax', 'rtx v26; // rax', 'rtx v17; // rax', 'rtx v46; // rax', 'rtx v15; // rax', 'rtx v13; // rax', 'rtx v19; // rax', 'rtx v36; // rax', 'rtx v15; // rax', 'rtx v18; // rax', 'rtx v46; // rax', 'rtx v12; // rax', 'rtx v26; // rax', 'rtx v17; // rax', 'rtx v19; // rax', 'rtx v10; // rax', 'rtx v36; // rax', 'rtx v86; // rax', 'rtx v12; // rax', 'rtx v19; // rax', 'rtx v15; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v15; // rax', 'rtx v14; // rax', 'rtx v66; // rax', 'rtx v17; // rax', 'rtx v19; // rax', 'rtx v11; // rax', 'rtx v14; // rax', 'rtx v18; // rax', 'rtx v10; // rax', 'rtx v10; // rax', 'rtx v13; // rax', 'rtx v18; // rax', 'rtx v6; // rax', 'rtx v6; // rax', 'rtx v26; // rax', 'rtx v14; // rax']
['rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax', 'rtx v18; // rax']
['rtx rtwint; // rax']
['rtx *fld; // rcx']
['rtx v56; // rbx', 'rtx v58; // rbx', 'rtx v51; // rbx', 'rtx v50; // rbx', 'rtx v32; // rbx', 'rtx v52; // rbp', 'rtx v55; // rbx', 'rtx v32; // rbx', 'rtx v50; // rbx', 'rtx v52; // rax', 'rtx v22; // rbx']
['rtx v17; // rax', 'rtx v7; // rax', 'rtx v17; // rax', 'rtx v7; // rax', 'rtx v27; // rax', 'rtx v47; // rax', 'rtx v57; // rax', 'rtx v17; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v27; // rax', 'rtx v17; // rax', 'rtx v27; // rax', 'rtx v67; // rax', 'rtx v9; // rax', 'rtx v93; // rax', 'rtx v97; // rbx']
['v4 = ( tree_node *)ggc_alloc( 0x28uLL);']
['*( _OWORD *)&v4->common.chain = 0LL;']
['if ( section_name == ( tree_node *)*( &global_trees + 5) )']
['if ( section_name == ( tree_node *)*( &global_trees + 4) )']
['if ( section_name == ( tree_node *)*( &global_trees + 3) )']
['if ( section_name == ( tree_node *)*( &global_trees + 2) )']
['if ( section_name == ( tree_node *)*( &global_trees + 1) )']
['v3 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v4] - 5) < 2) + 1;']
['rtx add_val; // rcx']
['frees = undobuf_0.frees;', 'frees = undobuf_0.frees;']
['if ( result )', 'if ( result )', 'if ( !result )', 'if ( result )', 'if ( same )']
['if ( *( _WORD *)end != 33 )']
['return gen_rtx_fmt_ee( EXPR_LIST, ( machine_mode)kind, val, next);']
['v11->mem = x;']
['v28 = gen_rtx_fmt_ee( SET, VOIDmode, *v27, nan);']
['v7 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v5] - 5) < 2) + 1;', 'v6 = ( ( unsigned int)( mode_class_0[( unsigned __int8)v7] - 5) < 2) + 1;']
['if ( initial != ( tree_node *)global_trees )', 'if ( initial != ( tree_node *)global_trees )']
['changes = ( change_t_0 *)xrealloc( changes, 32LL * v9);']
['rtx v41; // rax', 'rtx v41; // rax']
['rtx v42; // r14']
['rtx *fld; // r14', 'rtx *fld; // r13']
['rtx *v20; // r8', 'rtx v43; // r8', 'rtx v46; // r8']
['rtx *v27; // rbx', 'rtx *v17; // rbx', 'rtx *v43; // rbx']
['rtx v62; // [rsp+10h] [rbp-68h]']
['rtx v26; // [rsp+40h] [rbp-38h]']
['if ( mode && ( v2 & 0xFF0000) == 0 && ( mode_class_0[mode] | 2) != 3 )']
['if ( !memory_address_p( ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)ref), ref->fld[0].rtx) )']
['if ( in_section_0 != in_bss )', 'if ( in_section_0 != in_text )']
['in_section_0 = in_bss;', 'in_section_0 = in_text;']
['if ( in_section_0 != in_data )']
['if ( in_section_0 != in_bss )', 'if ( in_section_0 != in_text )']
['if ( in_section_0 != in_data )']
['in_section_0 = in_data;']
['v24 = *( _OWORD *)&args->gp_offset;']
['if ( memchr( &off_6E33E0, v19, 4uLL) )']
['while ( memchr( &off_6E33E0, v19, 4uLL) );']
['v17 = *( _OWORD *)&diagnostic_buffer->state.diagnostic_count[4];']
['v5 = *( _OWORD *)&diagnostic_buffer->state.prefix;']
['v3 = *( _OWORD *)&diagnostic_buffer->state.indent_skip;']
['v4 = *( _OWORD *)&diagnostic_buffer->state.cursor;']
['v5 = *( _OWORD *)diagnostic_buffer->state.diagnostic_count;']
['v5 = *( _OWORD *)&diagnostic_buffer->state.prefix;']
['diagnostic_buffer->state.format_args = ( va_list_0 *)va;']
['*( _OWORD *)v8->state.diagnostic_count = v16;']
['fatal_insn( "wrong insn in the fallthru edge", end, "cfgrtl.c", 1717, "verify_flow_info");']
['fatal_insn( "flow control insn inside a basic block", ( rtx)v42, "cfgrtl.c", 1829, "verify_flow_info");']
['fatal_insn( "flow control insn inside a basic block", ( rtx)v42, "cfgrtl.c", 1829, "verify_flow_info");']
['fatal_insn( "wrong insn in the fallthru edge", end, "cfgrtl.c", 1717, "verify_flow_info");']
['rtx v36; // rdi', 'rtx v20; // rdi', 'rtx in; // rdi', 'rtx v30; // rdi', 'rtx v54; // rdi', 'rtx v16; // rdi']
['rtx v20; // rdi', 'rtx v54; // rdi']
['rtx v36; // rdi', 'rtx v30; // rdi']
['rtx const_value; // rdx']
['rtx v47; // rax', 'rtx v27; // rcx', 'rtx v37; // rcx', 'rtx v57; // rcx', 'rtx v43; // rcx', 'rtx v17; // rcx', 'rtx v77; // rcx', 'rtx v45; // rcx']
['rtx v56; // rdx']
['rtx v57; // rcx']
['rtx v62; // rcx', 'rtx v64; // rcx', 'rtx v65; // rcx', 'rtx v28; // rcx', 'rtx v8; // rcx', 'rtx v18; // rcx']
['rtx v69; // r14', 'rtx v69; // rax', 'rtx v69; // rsi']
['sprintf( &v6[v7], " %-33s", &unk_6D3EF7);']
['v28 = statement_code_p( ( tree_code)v13);']
['if ( ( _DWORD)v13 == 2 || v28 || lang_hooks_0.tree_inlining.tree_chain_matters_p( ( tree_node *)*v9) )', 'if ( ( _DWORD)v13 == 2 || v28 || lang_hooks_0.tree_inlining.tree_chain_matters_p( ( tree_node *)*v9) )']
['if ( ( _DWORD)v13 == 2 || v28 || lang_hooks_0.tree_inlining.tree_chain_matters_p( ( tree_node *)*v9) )', 'if ( ( _DWORD)v13 == 2 || v28 || lang_hooks_0.tree_inlining.tree_chain_matters_p( ( tree_node *)*v9) )']
['if ( statement_code_p( ( tree_code)v13) && ( *( ( _BYTE *)*v9 + 19) & 4) == 0 )']
['rtl_op = first_rtl_op( ( tree_code)v27);', 'rtl_op = first_rtl_op( ( tree_code)v2);', 'rtl_op = first_rtl_op( ( tree_code)v8);']
['v28 = statement_code_p( ( tree_code)v13);']
['result = lang_hooks_0.tree_inlining.walk_subtrees( ( tree_node **)v9, &subtrees, v43, data, htab_);', 'result = lang_hooks_0.tree_inlining.walk_subtrees( ( tree_node **)v9, &subtrees, v43, data, htab_);']
['result = lang_hooks_0.tree_inlining.walk_subtrees( ( tree_node **)v9, &subtrees, v43, data, htab_);', 'result = lang_hooks_0.tree_inlining.walk_subtrees( ( tree_node **)v9, &subtrees, v43, data, htab_);']
['if ( !general_operand( x, ( machine_mode)( unsigned __int8)BYTE2( *( _DWORD *)x)) )']
['v6 = want_to_gcse_p_test_insn;']
['if ( !want_to_gcse_p_test_insn )']
['want_to_gcse_p_test_insn = make_insn_raw( v5);']
['want_to_gcse_p_test_insn[1] = 0LL;']
['ggc_add_rtx_root( &want_to_gcse_p_test_insn, 1);']
['v6 = want_to_gcse_p_test_insn;']
['v6 = want_to_gcse_p_test_insn;']
['*( _QWORD *)( *( _QWORD *)&want_to_gcse_p_test_insn[2] + 16LL) = x;']
['( va_list_0 *)va,']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['v2 = spelling_0;']
['if ( spelling_base < spelling_0 )', 'if ( spelling_base < spelling_0 )']
['v2 = spelling_0;']
['diagnostic_for_decl( decl, msgid, ( va_list_0 *)va, 1);']
['( va_list_0 *)va,']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&cfa.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;', '*( _OWORD *)&v11.reg = *( _OWORD *)&loc_p->reg;']
['v10 = gen_lowpart( ( machine_mode)*( ( unsigned __int8 *)op + 2), v8);']
['v11 = force_reg( ( machine_mode)BYTE2( v6), op);']
['if ( **( _WORD **)&this_insn_0[2] == 39 )']
['if ( multiple_sets( this_insn_0) )']
['v4 = **( int **)( *( _QWORD *)&this_insn_0[2] + 8LL);']
['v4 = **( int **)( *( _QWORD *)&this_insn_0[2] + 8LL);']
['v14 = ( ( unsigned int)( mode_class_0[v11] - 5) < 2) + 1;', 'v12 = ( ( unsigned int)( mode_class_0[v11] - 5) < 2) + 1;', 'v13 = ( ( unsigned int)( mode_class_0[v14] - 5) < 2) + 1;']
['v13 = immed_double_const( cnst1, v12, ( machine_mode)v10);']
['v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);', 'v5 = ( induction_1 *)gen_rtx_REG( *(short *)0xmode, 58);']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['rtx base_value; // rax']
['v4 = find_base_term( v3);']
['|| ( v15 = ( _QWORD)operand0 * *( _QWORD *)( v14 + 8), v15 > 0x1000)', '|| ( v43 = *loc, v46 = to, ( ( *( _DWORD *)from ^ v8) & 0xFFFFFF) == 0)']
['( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),', '( machine_mode)*( ( unsigned __int8 *)x + 2),']
['( machine_mode)*( ( unsigned __int8 *)mem + 2)) )']
['if ( ( ( _DWORD)v4 == 16 || ( _DWORD)v4 == 22 || ( mode_class_0[v4] | 4) == 5) && computed >= 33 )']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['*( _OWORD *)classes = xmm*(short *)0x639810;']
['if ( last_value )', 'if ( last_value )']
['sprintf( xstrerror_buf, aUndocumentedEr, ( unsigned int)errnum);']
['if ( ( _DWORD)v4 != 46 && ( sch_istable[( unsigned __int8)v4] & 0x204) == 0 )']
['timevar_push( TV_CPP_0);']
['v14 = swap_condition( ( rtx_code)v14);', 'v17 = swap_condition( ( rtx_code)v47);']
['timevar_pop( TV_CPP_0);']
